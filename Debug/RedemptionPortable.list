
RedemptionPortable.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000caa4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  0800cc38  0800cc38  0001cc38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d11c  0800d11c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800d11c  0800d11c  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d11c  0800d11c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d11c  0800d11c  0001d11c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d120  0800d120  0001d120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800d124  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  200001f0  0800d310  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  0800d310  00020450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015bfd  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d5b  00000000  00000000  00035e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d8  00000000  00000000  00038b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001380  00000000  00000000  0003a050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024a2c  00000000  00000000  0003b3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016f3a  00000000  00000000  0005fdfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df8c0  00000000  00000000  00076d36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001565f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ef8  00000000  00000000  00156648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cc1c 	.word	0x0800cc1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0800cc1c 	.word	0x0800cc1c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <BQ_Write>:
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af04      	add	r7, sp, #16
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	460a      	mov	r2, r1
 8000cfe:	71fb      	strb	r3, [r7, #7]
 8000d00:	4613      	mov	r3, r2
 8000d02:	71bb      	strb	r3, [r7, #6]
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	b29a      	uxth	r2, r3
 8000d08:	230a      	movs	r3, #10
 8000d0a:	9302      	str	r3, [sp, #8]
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	9301      	str	r3, [sp, #4]
 8000d10:	1dbb      	adds	r3, r7, #6
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	2301      	movs	r3, #1
 8000d16:	21d6      	movs	r1, #214	; 0xd6
 8000d18:	4806      	ldr	r0, [pc, #24]	; (8000d34 <BQ_Write+0x40>)
 8000d1a:	f003 ffa3 	bl	8004c64 <HAL_I2C_Mem_Write>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d002      	beq.n	8000d2a <BQ_Write+0x36>
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <BQ_Write+0x44>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	200002f4 	.word	0x200002f4
 8000d38:	2000042c 	.word	0x2000042c

08000d3c <BQ_Read>:
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b088      	sub	sp, #32
 8000d40:	af04      	add	r7, sp, #16
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	b29a      	uxth	r2, r3
 8000d4a:	230a      	movs	r3, #10
 8000d4c:	9302      	str	r3, [sp, #8]
 8000d4e:	2301      	movs	r3, #1
 8000d50:	9301      	str	r3, [sp, #4]
 8000d52:	f107 030f 	add.w	r3, r7, #15
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	2301      	movs	r3, #1
 8000d5a:	21d6      	movs	r1, #214	; 0xd6
 8000d5c:	4806      	ldr	r0, [pc, #24]	; (8000d78 <BQ_Read+0x3c>)
 8000d5e:	f004 f895 	bl	8004e8c <HAL_I2C_Mem_Read>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d002      	beq.n	8000d6e <BQ_Read+0x32>
 8000d68:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <BQ_Read+0x40>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	701a      	strb	r2, [r3, #0]
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]
 8000d70:	4618      	mov	r0, r3
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	200002f4 	.word	0x200002f4
 8000d7c:	2000042c 	.word	0x2000042c

08000d80 <BQ_Init>:
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	783b      	ldrb	r3, [r7, #0]
 8000d88:	f043 0307 	orr.w	r3, r3, #7
 8000d8c:	703b      	strb	r3, [r7, #0]
 8000d8e:	783b      	ldrb	r3, [r7, #0]
 8000d90:	220b      	movs	r2, #11
 8000d92:	f362 03c6 	bfi	r3, r2, #3, #4
 8000d96:	703b      	strb	r3, [r7, #0]
 8000d98:	783b      	ldrb	r3, [r7, #0]
 8000d9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d9e:	703b      	strb	r3, [r7, #0]
 8000da0:	787b      	ldrb	r3, [r7, #1]
 8000da2:	2203      	movs	r2, #3
 8000da4:	f362 0343 	bfi	r3, r2, #1, #3
 8000da8:	707b      	strb	r3, [r7, #1]
 8000daa:	787b      	ldrb	r3, [r7, #1]
 8000dac:	f043 0310 	orr.w	r3, r3, #16
 8000db0:	707b      	strb	r3, [r7, #1]
 8000db2:	787b      	ldrb	r3, [r7, #1]
 8000db4:	f36f 1345 	bfc	r3, #5, #1
 8000db8:	707b      	strb	r3, [r7, #1]
 8000dba:	787b      	ldrb	r3, [r7, #1]
 8000dbc:	f36f 1386 	bfc	r3, #6, #1
 8000dc0:	707b      	strb	r3, [r7, #1]
 8000dc2:	787b      	ldrb	r3, [r7, #1]
 8000dc4:	f36f 13c7 	bfc	r3, #7, #1
 8000dc8:	707b      	strb	r3, [r7, #1]
 8000dca:	78bb      	ldrb	r3, [r7, #2]
 8000dcc:	f36f 0300 	bfc	r3, #0, #1
 8000dd0:	70bb      	strb	r3, [r7, #2]
 8000dd2:	78bb      	ldrb	r3, [r7, #2]
 8000dd4:	f36f 0341 	bfc	r3, #1, #1
 8000dd8:	70bb      	strb	r3, [r7, #2]
 8000dda:	78bb      	ldrb	r3, [r7, #2]
 8000ddc:	222f      	movs	r2, #47	; 0x2f
 8000dde:	f362 0387 	bfi	r3, r2, #2, #6
 8000de2:	70bb      	strb	r3, [r7, #2]
 8000de4:	78fb      	ldrb	r3, [r7, #3]
 8000de6:	2203      	movs	r2, #3
 8000de8:	f362 0303 	bfi	r3, r2, #0, #4
 8000dec:	70fb      	strb	r3, [r7, #3]
 8000dee:	78fb      	ldrb	r3, [r7, #3]
 8000df0:	2201      	movs	r2, #1
 8000df2:	f362 1307 	bfi	r3, r2, #4, #4
 8000df6:	70fb      	strb	r3, [r7, #3]
 8000df8:	793b      	ldrb	r3, [r7, #4]
 8000dfa:	f36f 0300 	bfc	r3, #0, #1
 8000dfe:	713b      	strb	r3, [r7, #4]
 8000e00:	793b      	ldrb	r3, [r7, #4]
 8000e02:	f043 0302 	orr.w	r3, r3, #2
 8000e06:	713b      	strb	r3, [r7, #4]
 8000e08:	793b      	ldrb	r3, [r7, #4]
 8000e0a:	222c      	movs	r2, #44	; 0x2c
 8000e0c:	f362 0387 	bfi	r3, r2, #2, #6
 8000e10:	713b      	strb	r3, [r7, #4]
 8000e12:	797b      	ldrb	r3, [r7, #5]
 8000e14:	2201      	movs	r2, #1
 8000e16:	f362 0342 	bfi	r3, r2, #1, #2
 8000e1a:	717b      	strb	r3, [r7, #5]
 8000e1c:	797b      	ldrb	r3, [r7, #5]
 8000e1e:	f36f 03c3 	bfc	r3, #3, #1
 8000e22:	717b      	strb	r3, [r7, #5]
 8000e24:	797b      	ldrb	r3, [r7, #5]
 8000e26:	f36f 1305 	bfc	r3, #4, #2
 8000e2a:	717b      	strb	r3, [r7, #5]
 8000e2c:	797b      	ldrb	r3, [r7, #5]
 8000e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e32:	717b      	strb	r3, [r7, #5]
 8000e34:	79bb      	ldrb	r3, [r7, #6]
 8000e36:	f36f 0301 	bfc	r3, #0, #2
 8000e3a:	71bb      	strb	r3, [r7, #6]
 8000e3c:	79bb      	ldrb	r3, [r7, #6]
 8000e3e:	f36f 0383 	bfc	r3, #2, #2
 8000e42:	71bb      	strb	r3, [r7, #6]
 8000e44:	79bb      	ldrb	r3, [r7, #6]
 8000e46:	2209      	movs	r2, #9
 8000e48:	f362 1307 	bfi	r3, r2, #4, #4
 8000e4c:	71bb      	strb	r3, [r7, #6]
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	f043 0303 	orr.w	r3, r3, #3
 8000e54:	71fb      	strb	r3, [r7, #7]
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	f36f 1345 	bfc	r3, #5, #1
 8000e5c:	71fb      	strb	r3, [r7, #7]
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e64:	71fb      	strb	r3, [r7, #7]
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	f36f 13c7 	bfc	r3, #7, #1
 8000e6c:	71fb      	strb	r3, [r7, #7]
 8000e6e:	f000 f845 	bl	8000efc <BQ_IsPresent>
 8000e72:	4603      	mov	r3, r0
 8000e74:	f083 0301 	eor.w	r3, r3, #1
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <BQ_Init+0x102>
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e037      	b.n	8000ef2 <BQ_Init+0x172>
 8000e82:	463b      	mov	r3, r7
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	4619      	mov	r1, r3
 8000e88:	2000      	movs	r0, #0
 8000e8a:	f7ff ff33 	bl	8000cf4 <BQ_Write>
 8000e8e:	463b      	mov	r3, r7
 8000e90:	3301      	adds	r3, #1
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4619      	mov	r1, r3
 8000e96:	2001      	movs	r0, #1
 8000e98:	f7ff ff2c 	bl	8000cf4 <BQ_Write>
 8000e9c:	463b      	mov	r3, r7
 8000e9e:	3302      	adds	r3, #2
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	2002      	movs	r0, #2
 8000ea6:	f7ff ff25 	bl	8000cf4 <BQ_Write>
 8000eaa:	463b      	mov	r3, r7
 8000eac:	3303      	adds	r3, #3
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	2003      	movs	r0, #3
 8000eb4:	f7ff ff1e 	bl	8000cf4 <BQ_Write>
 8000eb8:	463b      	mov	r3, r7
 8000eba:	3304      	adds	r3, #4
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	2004      	movs	r0, #4
 8000ec2:	f7ff ff17 	bl	8000cf4 <BQ_Write>
 8000ec6:	463b      	mov	r3, r7
 8000ec8:	3305      	adds	r3, #5
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	2005      	movs	r0, #5
 8000ed0:	f7ff ff10 	bl	8000cf4 <BQ_Write>
 8000ed4:	463b      	mov	r3, r7
 8000ed6:	3306      	adds	r3, #6
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	4619      	mov	r1, r3
 8000edc:	2006      	movs	r0, #6
 8000ede:	f7ff ff09 	bl	8000cf4 <BQ_Write>
 8000ee2:	463b      	mov	r3, r7
 8000ee4:	3307      	adds	r3, #7
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	2007      	movs	r0, #7
 8000eec:	f7ff ff02 	bl	8000cf4 <BQ_Write>
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <BQ_IsPresent>:
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <BQ_IsPresent+0x44>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <BQ_IsPresent+0x12>
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	e013      	b.n	8000f36 <BQ_IsPresent+0x3a>
 8000f0e:	200a      	movs	r0, #10
 8000f10:	f7ff ff14 	bl	8000d3c <BQ_Read>
 8000f14:	4603      	mov	r3, r0
 8000f16:	71fb      	strb	r3, [r7, #7]
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	095b      	lsrs	r3, r3, #5
 8000f1c:	71fb      	strb	r3, [r7, #7]
 8000f1e:	200a      	movs	r0, #10
 8000f20:	f7ff ff0c 	bl	8000d3c <BQ_Read>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b06      	cmp	r3, #6
 8000f28:	d101      	bne.n	8000f2e <BQ_IsPresent+0x32>
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e003      	b.n	8000f36 <BQ_IsPresent+0x3a>
 8000f2e:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <BQ_IsPresent+0x44>)
 8000f30:	2202      	movs	r2, #2
 8000f32:	701a      	strb	r2, [r3, #0]
 8000f34:	2300      	movs	r3, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	2000042c 	.word	0x2000042c

08000f44 <PID_Init>:
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f54:	6879      	ldr	r1, [r7, #4]
 8000f56:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8000f74:	f7ff fdd0 	bl	8000b18 <__aeabi_dcmpgt>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d006      	beq.n	8000f8c <PID_Init+0x48>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8000f84:	6879      	ldr	r1, [r7, #4]
 8000f86:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8000f8a:	e011      	b.n	8000fb0 <PID_Init+0x6c>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8000f98:	f7ff fda0 	bl	8000adc <__aeabi_dcmplt>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d100      	bne.n	8000fa4 <PID_Init+0x60>
 8000fa2:	e005      	b.n	8000fb0 <PID_Init+0x6c>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <PID>:
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	; 0x28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6278      	str	r0, [r7, #36]	; 0x24
 8000fc0:	6239      	str	r1, [r7, #32]
 8000fc2:	61fa      	str	r2, [r7, #28]
 8000fc4:	61bb      	str	r3, [r7, #24]
 8000fc6:	ed87 0b04 	vstr	d0, [r7, #16]
 8000fca:	ed87 1b02 	vstr	d1, [r7, #8]
 8000fce:	ed87 2b00 	vstr	d2, [r7]
 8000fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd4:	69fa      	ldr	r2, [r7, #28]
 8000fd6:	645a      	str	r2, [r3, #68]	; 0x44
 8000fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fda:	6a3a      	ldr	r2, [r7, #32]
 8000fdc:	641a      	str	r2, [r3, #64]	; 0x40
 8000fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	649a      	str	r2, [r3, #72]	; 0x48
 8000fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	705a      	strb	r2, [r3, #1]
 8000fea:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8001040 <PID+0x88>
 8000fee:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8001048 <PID+0x90>
 8000ff2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000ff4:	f000 f934 	bl	8001260 <PID_SetOutputLimits>
 8000ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffa:	2264      	movs	r2, #100	; 0x64
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001002:	4619      	mov	r1, r3
 8001004:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001006:	f000 fa41 	bl	800148c <PID_SetControllerDirection>
 800100a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800100e:	4619      	mov	r1, r3
 8001010:	ed97 2b00 	vldr	d2, [r7]
 8001014:	ed97 1b02 	vldr	d1, [r7, #8]
 8001018:	ed97 0b04 	vldr	d0, [r7, #16]
 800101c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800101e:	f000 f98d 	bl	800133c <PID_SetTunings2>
 8001022:	f001 ffdd 	bl	8002fe0 <HAL_GetTick>
 8001026:	4602      	mov	r2, r0
 8001028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	1ad2      	subs	r2, r2, r3
 800102e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	bf00      	nop
 8001034:	3728      	adds	r7, #40	; 0x28
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	f3af 8000 	nop.w
 8001040:	00000000 	.word	0x00000000
 8001044:	406fe000 	.word	0x406fe000
	...

08001050 <PID_Compute>:
 8001050:	b5b0      	push	{r4, r5, r7, lr}
 8001052:	b08c      	sub	sp, #48	; 0x30
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	785b      	ldrb	r3, [r3, #1]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d101      	bne.n	8001064 <PID_Compute+0x14>
 8001060:	2300      	movs	r3, #0
 8001062:	e0db      	b.n	800121c <PID_Compute+0x1cc>
 8001064:	f001 ffbc 	bl	8002fe0 <HAL_GetTick>
 8001068:	6278      	str	r0, [r7, #36]	; 0x24
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	623b      	str	r3, [r7, #32]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	6a3a      	ldr	r2, [r7, #32]
 800107a:	429a      	cmp	r2, r3
 800107c:	f0c0 80cd 	bcc.w	800121a <PID_Compute+0x1ca>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001088:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001090:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001094:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001098:	f7ff f8f6 	bl	8000288 <__aeabi_dsub>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80010aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010ae:	f7ff f8eb 	bl	8000288 <__aeabi_dsub>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80010c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80010ca:	f7ff fa95 	bl	80005f8 <__aeabi_dmul>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	4620      	mov	r0, r4
 80010d4:	4629      	mov	r1, r5
 80010d6:	f7ff f8d9 	bl	800028c <__adddf3>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d114      	bne.n	8001116 <PID_Compute+0xc6>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80010f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010fc:	f7ff fa7c 	bl	80005f8 <__aeabi_dmul>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4620      	mov	r0, r4
 8001106:	4629      	mov	r1, r5
 8001108:	f7ff f8be 	bl	8000288 <__aeabi_dsub>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	6879      	ldr	r1, [r7, #4]
 8001112:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001122:	f7ff fcf9 	bl	8000b18 <__aeabi_dcmpgt>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d006      	beq.n	800113a <PID_Compute+0xea>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001138:	e010      	b.n	800115c <PID_Compute+0x10c>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001146:	f7ff fcc9 	bl	8000adc <__aeabi_dcmplt>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d005      	beq.n	800115c <PID_Compute+0x10c>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d00b      	beq.n	800117c <PID_Compute+0x12c>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800116a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800116e:	f7ff fa43 	bl	80005f8 <__aeabi_dmul>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800117a:	e005      	b.n	8001188 <PID_Compute+0x138>
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	f04f 0300 	mov.w	r3, #0
 8001184:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001194:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001198:	f7ff fa2e 	bl	80005f8 <__aeabi_dmul>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4620      	mov	r0, r4
 80011a2:	4629      	mov	r1, r5
 80011a4:	f7ff f870 	bl	8000288 <__aeabi_dsub>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80011b0:	f7ff f86c 	bl	800028c <__adddf3>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80011c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80011c6:	f7ff fca7 	bl	8000b18 <__aeabi_dcmpgt>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d005      	beq.n	80011dc <PID_Compute+0x18c>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80011d6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80011da:	e00e      	b.n	80011fa <PID_Compute+0x1aa>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80011e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80011e6:	f7ff fc79 	bl	8000adc <__aeabi_dcmplt>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d004      	beq.n	80011fa <PID_Compute+0x1aa>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80011f6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80011fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001202:	e9c1 2300 	strd	r2, r3, [r1]
 8001206:	6879      	ldr	r1, [r7, #4]
 8001208:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800120c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	2301      	movs	r3, #1
 8001218:	e000      	b.n	800121c <PID_Compute+0x1cc>
 800121a:	2300      	movs	r3, #0
 800121c:	4618      	mov	r0, r3
 800121e:	3730      	adds	r7, #48	; 0x30
 8001220:	46bd      	mov	sp, r7
 8001222:	bdb0      	pop	{r4, r5, r7, pc}

08001224 <PID_SetMode>:
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	70fb      	strb	r3, [r7, #3]
 8001230:	78fb      	ldrb	r3, [r7, #3]
 8001232:	2b01      	cmp	r3, #1
 8001234:	bf0c      	ite	eq
 8001236:	2301      	moveq	r3, #1
 8001238:	2300      	movne	r3, #0
 800123a:	b2db      	uxtb	r3, r3
 800123c:	73fb      	strb	r3, [r7, #15]
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d006      	beq.n	8001252 <PID_SetMode+0x2e>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	785b      	ldrb	r3, [r3, #1]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d102      	bne.n	8001252 <PID_SetMode+0x2e>
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff fe79 	bl	8000f44 <PID_Init>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	7bfa      	ldrb	r2, [r7, #15]
 8001256:	705a      	strb	r2, [r3, #1]
 8001258:	bf00      	nop
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <PID_SetOutputLimits>:
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6178      	str	r0, [r7, #20]
 8001268:	ed87 0b02 	vstr	d0, [r7, #8]
 800126c:	ed87 1b00 	vstr	d1, [r7]
 8001270:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001274:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001278:	f7ff fc44 	bl	8000b04 <__aeabi_dcmpge>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d158      	bne.n	8001334 <PID_SetOutputLimits+0xd4>
 8001282:	6979      	ldr	r1, [r7, #20]
 8001284:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001288:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 800128c:	6979      	ldr	r1, [r7, #20]
 800128e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001292:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	785b      	ldrb	r3, [r3, #1]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d04b      	beq.n	8001336 <PID_SetOutputLimits+0xd6>
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80012ac:	f7ff fc34 	bl	8000b18 <__aeabi_dcmpgt>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d007      	beq.n	80012c6 <PID_SetOutputLimits+0x66>
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80012c0:	e9c1 2300 	strd	r2, r3, [r1]
 80012c4:	e012      	b.n	80012ec <PID_SetOutputLimits+0x8c>
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80012d4:	f7ff fc02 	bl	8000adc <__aeabi_dcmplt>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d006      	beq.n	80012ec <PID_SetOutputLimits+0x8c>
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80012e8:	e9c1 2300 	strd	r2, r3, [r1]
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80012f8:	f7ff fc0e 	bl	8000b18 <__aeabi_dcmpgt>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d006      	beq.n	8001310 <PID_SetOutputLimits+0xb0>
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001308:	6979      	ldr	r1, [r7, #20]
 800130a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800130e:	e012      	b.n	8001336 <PID_SetOutputLimits+0xd6>
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800131c:	f7ff fbde 	bl	8000adc <__aeabi_dcmplt>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d007      	beq.n	8001336 <PID_SetOutputLimits+0xd6>
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800132c:	6979      	ldr	r1, [r7, #20]
 800132e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001332:	e000      	b.n	8001336 <PID_SetOutputLimits+0xd6>
 8001334:	bf00      	nop
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <PID_SetTunings2>:
 800133c:	b580      	push	{r7, lr}
 800133e:	b08a      	sub	sp, #40	; 0x28
 8001340:	af00      	add	r7, sp, #0
 8001342:	61f8      	str	r0, [r7, #28]
 8001344:	ed87 0b04 	vstr	d0, [r7, #16]
 8001348:	ed87 1b02 	vstr	d1, [r7, #8]
 800134c:	ed87 2b00 	vstr	d2, [r7]
 8001350:	460b      	mov	r3, r1
 8001352:	76fb      	strb	r3, [r7, #27]
 8001354:	f04f 0200 	mov.w	r2, #0
 8001358:	f04f 0300 	mov.w	r3, #0
 800135c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001360:	f7ff fbbc 	bl	8000adc <__aeabi_dcmplt>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	f040 8089 	bne.w	800147e <PID_SetTunings2+0x142>
 800136c:	f04f 0200 	mov.w	r2, #0
 8001370:	f04f 0300 	mov.w	r3, #0
 8001374:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001378:	f7ff fbb0 	bl	8000adc <__aeabi_dcmplt>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d17d      	bne.n	800147e <PID_SetTunings2+0x142>
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	f04f 0300 	mov.w	r3, #0
 800138a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800138e:	f7ff fba5 	bl	8000adc <__aeabi_dcmplt>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d172      	bne.n	800147e <PID_SetTunings2+0x142>
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	7efa      	ldrb	r2, [r7, #27]
 800139c:	709a      	strb	r2, [r3, #2]
 800139e:	7efb      	ldrb	r3, [r7, #27]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	bf0c      	ite	eq
 80013a4:	2301      	moveq	r3, #1
 80013a6:	2300      	movne	r3, #0
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	461a      	mov	r2, r3
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	701a      	strb	r2, [r3, #0]
 80013b0:	69f9      	ldr	r1, [r7, #28]
 80013b2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013b6:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80013ba:	69f9      	ldr	r1, [r7, #28]
 80013bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013c0:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80013c4:	69f9      	ldr	r1, [r7, #28]
 80013c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013ca:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff f896 	bl	8000504 <__aeabi_ui2d>
 80013d8:	f04f 0200 	mov.w	r2, #0
 80013dc:	4b2a      	ldr	r3, [pc, #168]	; (8001488 <PID_SetTunings2+0x14c>)
 80013de:	f7ff fa35 	bl	800084c <__aeabi_ddiv>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80013ea:	69f9      	ldr	r1, [r7, #28]
 80013ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013f0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 80013f4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013fc:	f7ff f8fc 	bl	80005f8 <__aeabi_dmul>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	69f9      	ldr	r1, [r7, #28]
 8001406:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 800140a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800140e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001412:	f7ff fa1b 	bl	800084c <__aeabi_ddiv>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	69f9      	ldr	r1, [r7, #28]
 800141c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	78db      	ldrb	r3, [r3, #3]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d12b      	bne.n	8001480 <PID_SetTunings2+0x144>
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800142e:	f04f 0000 	mov.w	r0, #0
 8001432:	f04f 0100 	mov.w	r1, #0
 8001436:	f7fe ff27 	bl	8000288 <__aeabi_dsub>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	69f9      	ldr	r1, [r7, #28]
 8001440:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800144a:	f04f 0000 	mov.w	r0, #0
 800144e:	f04f 0100 	mov.w	r1, #0
 8001452:	f7fe ff19 	bl	8000288 <__aeabi_dsub>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	69f9      	ldr	r1, [r7, #28]
 800145c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001466:	f04f 0000 	mov.w	r0, #0
 800146a:	f04f 0100 	mov.w	r1, #0
 800146e:	f7fe ff0b 	bl	8000288 <__aeabi_dsub>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	69f9      	ldr	r1, [r7, #28]
 8001478:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 800147c:	e000      	b.n	8001480 <PID_SetTunings2+0x144>
 800147e:	bf00      	nop
 8001480:	3728      	adds	r7, #40	; 0x28
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	408f4000 	.word	0x408f4000

0800148c <PID_SetControllerDirection>:
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	460b      	mov	r3, r1
 8001496:	70fb      	strb	r3, [r7, #3]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	785b      	ldrb	r3, [r3, #1]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d02e      	beq.n	80014fe <PID_SetControllerDirection+0x72>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	78db      	ldrb	r3, [r3, #3]
 80014a4:	78fa      	ldrb	r2, [r7, #3]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d029      	beq.n	80014fe <PID_SetControllerDirection+0x72>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80014b0:	f04f 0000 	mov.w	r0, #0
 80014b4:	f04f 0100 	mov.w	r1, #0
 80014b8:	f7fe fee6 	bl	8000288 <__aeabi_dsub>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	6879      	ldr	r1, [r7, #4]
 80014c2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80014cc:	f04f 0000 	mov.w	r0, #0
 80014d0:	f04f 0100 	mov.w	r1, #0
 80014d4:	f7fe fed8 	bl	8000288 <__aeabi_dsub>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80014e8:	f04f 0000 	mov.w	r0, #0
 80014ec:	f04f 0100 	mov.w	r1, #0
 80014f0:	f7fe feca 	bl	8000288 <__aeabi_dsub>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	78fa      	ldrb	r2, [r7, #3]
 8001502:	70da      	strb	r2, [r3, #3]
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <PID_SetSampleTime>:
 800150c:	b5b0      	push	{r4, r5, r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	dd2e      	ble.n	800157a <PID_SetSampleTime+0x6e>
 800151c:	6838      	ldr	r0, [r7, #0]
 800151e:	f7ff f801 	bl	8000524 <__aeabi_i2d>
 8001522:	4604      	mov	r4, r0
 8001524:	460d      	mov	r5, r1
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	4618      	mov	r0, r3
 800152c:	f7fe ffea 	bl	8000504 <__aeabi_ui2d>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4620      	mov	r0, r4
 8001536:	4629      	mov	r1, r5
 8001538:	f7ff f988 	bl	800084c <__aeabi_ddiv>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800154a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800154e:	f7ff f853 	bl	80005f8 <__aeabi_dmul>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	6879      	ldr	r1, [r7, #4]
 8001558:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001562:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001566:	f7ff f971 	bl	800084c <__aeabi_ddiv>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	bf00      	nop
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bdb0      	pop	{r4, r5, r7, pc}

08001582 <WakeUpFromSleepMode>:
#if (ENABLESLEEPMODE)
	void EnterSleepModeWakeOnInturrupt() {
		HAL_SuspendTick();
		HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
	}
	void WakeUpFromSleepMode(){
 8001582:	b580      	push	{r7, lr}
 8001584:	af00      	add	r7, sp, #0
		HAL_ResumeTick();
 8001586:	f001 fd5b 	bl	8003040 <HAL_ResumeTick>
	}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <HAL_GPIO_EXTI_Callback>:



/*		INURRUPT CODE		*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BQ_INT_Pin) // BQ INT pin wake up
 800159a:	88fb      	ldrh	r3, [r7, #6]
 800159c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015a0:	d104      	bne.n	80015ac <HAL_GPIO_EXTI_Callback+0x1c>
	{
		WakeUpFromSleepMode();
 80015a2:	f7ff ffee 	bl	8001582 <WakeUpFromSleepMode>
		BQ_FLAG = true;
 80015a6:	4b4c      	ldr	r3, [pc, #304]	; (80016d8 <HAL_GPIO_EXTI_Callback+0x148>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == MAX_ALRT_Pin)
 80015ac:	88fb      	ldrh	r3, [r7, #6]
 80015ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015b2:	d104      	bne.n	80015be <HAL_GPIO_EXTI_Callback+0x2e>
	{
		WakeUpFromSleepMode();
 80015b4:	f7ff ffe5 	bl	8001582 <WakeUpFromSleepMode>
		MAX_FLAG = true;
 80015b8:	4b48      	ldr	r3, [pc, #288]	; (80016dc <HAL_GPIO_EXTI_Callback+0x14c>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	701a      	strb	r2, [r3, #0]

	}
	if(GPIO_Pin == Power_Button_Pin)
 80015be:	88fb      	ldrh	r3, [r7, #6]
 80015c0:	2b80      	cmp	r3, #128	; 0x80
 80015c2:	f040 8084 	bne.w	80016ce <HAL_GPIO_EXTI_Callback+0x13e>
	{
		if(HAL_GPIO_ReadPin(Power_Button_GPIO_Port, Power_Button_Pin) == GPIO_PIN_RESET
 80015c6:	2180      	movs	r1, #128	; 0x80
 80015c8:	4845      	ldr	r0, [pc, #276]	; (80016e0 <HAL_GPIO_EXTI_Callback+0x150>)
 80015ca:	f003 fa73 	bl	8004ab4 <HAL_GPIO_ReadPin>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d110      	bne.n	80015f6 <HAL_GPIO_EXTI_Callback+0x66>
				&& PowerButtonDebounced && !IsPressPeriodStart)
 80015d4:	4b43      	ldr	r3, [pc, #268]	; (80016e4 <HAL_GPIO_EXTI_Callback+0x154>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d00c      	beq.n	80015f6 <HAL_GPIO_EXTI_Callback+0x66>
 80015dc:	4b42      	ldr	r3, [pc, #264]	; (80016e8 <HAL_GPIO_EXTI_Callback+0x158>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	f083 0301 	eor.w	r3, r3, #1
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d005      	beq.n	80015f6 <HAL_GPIO_EXTI_Callback+0x66>
		{
			HAL_TIM_Base_Start_IT(&htim15);	//Start Debounce
 80015ea:	4840      	ldr	r0, [pc, #256]	; (80016ec <HAL_GPIO_EXTI_Callback+0x15c>)
 80015ec:	f005 fa6c 	bl	8006ac8 <HAL_TIM_Base_Start_IT>
			PowerButtonDebounced = false;
 80015f0:	4b3c      	ldr	r3, [pc, #240]	; (80016e4 <HAL_GPIO_EXTI_Callback+0x154>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(Power_Button_GPIO_Port, Power_Button_Pin) == GPIO_PIN_SET &&
 80015f6:	2180      	movs	r1, #128	; 0x80
 80015f8:	4839      	ldr	r0, [pc, #228]	; (80016e0 <HAL_GPIO_EXTI_Callback+0x150>)
 80015fa:	f003 fa5b 	bl	8004ab4 <HAL_GPIO_ReadPin>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b01      	cmp	r3, #1
 8001602:	d130      	bne.n	8001666 <HAL_GPIO_EXTI_Callback+0xd6>
 8001604:	4b37      	ldr	r3, [pc, #220]	; (80016e4 <HAL_GPIO_EXTI_Callback+0x154>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d02c      	beq.n	8001666 <HAL_GPIO_EXTI_Callback+0xd6>
				PowerButtonDebounced && IsPressPeriodStart && PowerButtonShortPress &&
 800160c:	4b36      	ldr	r3, [pc, #216]	; (80016e8 <HAL_GPIO_EXTI_Callback+0x158>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d028      	beq.n	8001666 <HAL_GPIO_EXTI_Callback+0xd6>
 8001614:	4b36      	ldr	r3, [pc, #216]	; (80016f0 <HAL_GPIO_EXTI_Callback+0x160>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d024      	beq.n	8001666 <HAL_GPIO_EXTI_Callback+0xd6>
 800161c:	4b35      	ldr	r3, [pc, #212]	; (80016f4 <HAL_GPIO_EXTI_Callback+0x164>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d020      	beq.n	8001666 <HAL_GPIO_EXTI_Callback+0xd6>
				PowerButtonLongPress && !SystemPowerState)
 8001624:	4b34      	ldr	r3, [pc, #208]	; (80016f8 <HAL_GPIO_EXTI_Callback+0x168>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	f083 0301 	eor.w	r3, r3, #1
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d019      	beq.n	8001666 <HAL_GPIO_EXTI_Callback+0xd6>
		{
			//All conditions met turn ON system and clear for next button
			HAL_TIM_Base_Stop_IT(&htim15);
 8001632:	482e      	ldr	r0, [pc, #184]	; (80016ec <HAL_GPIO_EXTI_Callback+0x15c>)
 8001634:	f005 fa9c 	bl	8006b70 <HAL_TIM_Base_Stop_IT>
			__HAL_TIM_SET_AUTORELOAD(&htim15, BUTTON_DEBOUNCE_MS);	//Reset power button debounce period
 8001638:	4b2c      	ldr	r3, [pc, #176]	; (80016ec <HAL_GPIO_EXTI_Callback+0x15c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2264      	movs	r2, #100	; 0x64
 800163e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001640:	4b2a      	ldr	r3, [pc, #168]	; (80016ec <HAL_GPIO_EXTI_Callback+0x15c>)
 8001642:	2264      	movs	r2, #100	; 0x64
 8001644:	60da      	str	r2, [r3, #12]
			SystemPowerState = true;
 8001646:	4b2c      	ldr	r3, [pc, #176]	; (80016f8 <HAL_GPIO_EXTI_Callback+0x168>)
 8001648:	2201      	movs	r2, #1
 800164a:	701a      	strb	r2, [r3, #0]
			PowerButtonDebounced = true;
 800164c:	4b25      	ldr	r3, [pc, #148]	; (80016e4 <HAL_GPIO_EXTI_Callback+0x154>)
 800164e:	2201      	movs	r2, #1
 8001650:	701a      	strb	r2, [r3, #0]
			IsPressPeriodStart = false;
 8001652:	4b25      	ldr	r3, [pc, #148]	; (80016e8 <HAL_GPIO_EXTI_Callback+0x158>)
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]
			PowerButtonShortPress = false;
 8001658:	4b25      	ldr	r3, [pc, #148]	; (80016f0 <HAL_GPIO_EXTI_Callback+0x160>)
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
			PowerButtonLongPress = false;
 800165e:	4b25      	ldr	r3, [pc, #148]	; (80016f4 <HAL_GPIO_EXTI_Callback+0x164>)
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
		}


	}

}
 8001664:	e033      	b.n	80016ce <HAL_GPIO_EXTI_Callback+0x13e>
		else if(HAL_GPIO_ReadPin(Power_Button_GPIO_Port, Power_Button_Pin) == GPIO_PIN_SET &&
 8001666:	2180      	movs	r1, #128	; 0x80
 8001668:	481d      	ldr	r0, [pc, #116]	; (80016e0 <HAL_GPIO_EXTI_Callback+0x150>)
 800166a:	f003 fa23 	bl	8004ab4 <HAL_GPIO_ReadPin>
 800166e:	4603      	mov	r3, r0
 8001670:	2b01      	cmp	r3, #1
 8001672:	d12c      	bne.n	80016ce <HAL_GPIO_EXTI_Callback+0x13e>
 8001674:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <HAL_GPIO_EXTI_Callback+0x154>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d028      	beq.n	80016ce <HAL_GPIO_EXTI_Callback+0x13e>
				PowerButtonDebounced && IsPressPeriodStart && PowerButtonShortPress &&
 800167c:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <HAL_GPIO_EXTI_Callback+0x158>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d024      	beq.n	80016ce <HAL_GPIO_EXTI_Callback+0x13e>
 8001684:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <HAL_GPIO_EXTI_Callback+0x160>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d020      	beq.n	80016ce <HAL_GPIO_EXTI_Callback+0x13e>
 800168c:	4b19      	ldr	r3, [pc, #100]	; (80016f4 <HAL_GPIO_EXTI_Callback+0x164>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d01c      	beq.n	80016ce <HAL_GPIO_EXTI_Callback+0x13e>
				PowerButtonLongPress && SystemPowerState)
 8001694:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <HAL_GPIO_EXTI_Callback+0x168>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d018      	beq.n	80016ce <HAL_GPIO_EXTI_Callback+0x13e>
			HAL_TIM_Base_Stop_IT(&htim15);
 800169c:	4813      	ldr	r0, [pc, #76]	; (80016ec <HAL_GPIO_EXTI_Callback+0x15c>)
 800169e:	f005 fa67 	bl	8006b70 <HAL_TIM_Base_Stop_IT>
			__HAL_TIM_SET_AUTORELOAD(&htim15, BUTTON_DEBOUNCE_MS);	//Reset power button debounce period
 80016a2:	4b12      	ldr	r3, [pc, #72]	; (80016ec <HAL_GPIO_EXTI_Callback+0x15c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2264      	movs	r2, #100	; 0x64
 80016a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <HAL_GPIO_EXTI_Callback+0x15c>)
 80016ac:	2264      	movs	r2, #100	; 0x64
 80016ae:	60da      	str	r2, [r3, #12]
			SystemPowerState = false;
 80016b0:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <HAL_GPIO_EXTI_Callback+0x168>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	701a      	strb	r2, [r3, #0]
			PowerButtonDebounced = true;
 80016b6:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <HAL_GPIO_EXTI_Callback+0x154>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	701a      	strb	r2, [r3, #0]
			IsPressPeriodStart = false;
 80016bc:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <HAL_GPIO_EXTI_Callback+0x158>)
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
			PowerButtonShortPress = false;
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <HAL_GPIO_EXTI_Callback+0x160>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
			PowerButtonLongPress = false;
 80016c8:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <HAL_GPIO_EXTI_Callback+0x164>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	2000042d 	.word	0x2000042d
 80016dc:	2000042e 	.word	0x2000042e
 80016e0:	48000800 	.word	0x48000800
 80016e4:	20000008 	.word	0x20000008
 80016e8:	2000042f 	.word	0x2000042f
 80016ec:	200003e0 	.word	0x200003e0
 80016f0:	20000430 	.word	0x20000430
 80016f4:	20000431 	.word	0x20000431
 80016f8:	20000433 	.word	0x20000433

080016fc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
	if(HAL_GPIO_ReadPin(Power_Button_GPIO_Port, Power_Button_Pin) == GPIO_PIN_RESET && !PowerButtonDebounced){
 8001704:	2180      	movs	r1, #128	; 0x80
 8001706:	4864      	ldr	r0, [pc, #400]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001708:	f003 f9d4 	bl	8004ab4 <HAL_GPIO_ReadPin>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d10c      	bne.n	800172c <HAL_TIM_PeriodElapsedCallback+0x30>
 8001712:	4b62      	ldr	r3, [pc, #392]	; (800189c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	f083 0301 	eor.w	r3, r3, #1
 800171a:	b2db      	uxtb	r3, r3
 800171c:	2b00      	cmp	r3, #0
 800171e:	d005      	beq.n	800172c <HAL_TIM_PeriodElapsedCallback+0x30>
		HAL_TIM_Base_Stop_IT(&htim15);
 8001720:	485f      	ldr	r0, [pc, #380]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001722:	f005 fa25 	bl	8006b70 <HAL_TIM_Base_Stop_IT>
		PowerButtonDebounced = true;
 8001726:	4b5d      	ldr	r3, [pc, #372]	; (800189c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001728:	2201      	movs	r2, #1
 800172a:	701a      	strb	r2, [r3, #0]

	}
	if(HAL_GPIO_ReadPin(Power_Button_GPIO_Port, Power_Button_Pin) == GPIO_PIN_RESET && !IsPressPeriodStart){
 800172c:	2180      	movs	r1, #128	; 0x80
 800172e:	485a      	ldr	r0, [pc, #360]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001730:	f003 f9c0 	bl	8004ab4 <HAL_GPIO_ReadPin>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d119      	bne.n	800176e <HAL_TIM_PeriodElapsedCallback+0x72>
 800173a:	4b5a      	ldr	r3, [pc, #360]	; (80018a4 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	f083 0301 	eor.w	r3, r3, #1
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b00      	cmp	r3, #0
 8001746:	d012      	beq.n	800176e <HAL_TIM_PeriodElapsedCallback+0x72>

		__HAL_TIM_SET_AUTORELOAD(&htim15, BUTTON_SHORTPRESS_PERIOD);
 8001748:	4b55      	ldr	r3, [pc, #340]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001750:	62da      	str	r2, [r3, #44]	; 0x2c
 8001752:	4b53      	ldr	r3, [pc, #332]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001754:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001758:	60da      	str	r2, [r3, #12]
		HAL_TIM_Base_Start_IT(&htim15);
 800175a:	4851      	ldr	r0, [pc, #324]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800175c:	f005 f9b4 	bl	8006ac8 <HAL_TIM_Base_Start_IT>
		IsPressPeriodStart = true;
 8001760:	4b50      	ldr	r3, [pc, #320]	; (80018a4 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001762:	2201      	movs	r2, #1
 8001764:	701a      	strb	r2, [r3, #0]
		PowerButtonShortPress = false;
 8001766:	4b50      	ldr	r3, [pc, #320]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
 800176c:	e06b      	b.n	8001846 <HAL_TIM_PeriodElapsedCallback+0x14a>
	}
	else if(HAL_GPIO_ReadPin(Power_Button_GPIO_Port, Power_Button_Pin) == GPIO_PIN_RESET && !PowerButtonShortPress){
 800176e:	2180      	movs	r1, #128	; 0x80
 8001770:	4849      	ldr	r0, [pc, #292]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001772:	f003 f99f 	bl	8004ab4 <HAL_GPIO_ReadPin>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d11c      	bne.n	80017b6 <HAL_TIM_PeriodElapsedCallback+0xba>
 800177c:	4b4a      	ldr	r3, [pc, #296]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	f083 0301 	eor.w	r3, r3, #1
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d015      	beq.n	80017b6 <HAL_TIM_PeriodElapsedCallback+0xba>
		HAL_TIM_Base_Stop_IT(&htim15);
 800178a:	4845      	ldr	r0, [pc, #276]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800178c:	f005 f9f0 	bl	8006b70 <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_SET_AUTORELOAD(&htim15, BUTTON_LONGPRESS_PERIOD);
 8001790:	4b43      	ldr	r3, [pc, #268]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001798:	62da      	str	r2, [r3, #44]	; 0x2c
 800179a:	4b41      	ldr	r3, [pc, #260]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800179c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017a0:	60da      	str	r2, [r3, #12]
		HAL_TIM_Base_Start_IT(&htim15);
 80017a2:	483f      	ldr	r0, [pc, #252]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80017a4:	f005 f990 	bl	8006ac8 <HAL_TIM_Base_Start_IT>
		PowerButtonShortPress = true;
 80017a8:	4b3f      	ldr	r3, [pc, #252]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	701a      	strb	r2, [r3, #0]
		PowerButtonLongPress = false;
 80017ae:	4b3f      	ldr	r3, [pc, #252]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	701a      	strb	r2, [r3, #0]
 80017b4:	e047      	b.n	8001846 <HAL_TIM_PeriodElapsedCallback+0x14a>
	}
	else if(HAL_GPIO_ReadPin(Power_Button_GPIO_Port, Power_Button_Pin) == GPIO_PIN_RESET && !PowerButtonLongPress){
 80017b6:	2180      	movs	r1, #128	; 0x80
 80017b8:	4837      	ldr	r0, [pc, #220]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80017ba:	f003 f97b 	bl	8004ab4 <HAL_GPIO_ReadPin>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d11c      	bne.n	80017fe <HAL_TIM_PeriodElapsedCallback+0x102>
 80017c4:	4b39      	ldr	r3, [pc, #228]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	f083 0301 	eor.w	r3, r3, #1
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d015      	beq.n	80017fe <HAL_TIM_PeriodElapsedCallback+0x102>
		HAL_TIM_Base_Stop_IT(&htim15);
 80017d2:	4833      	ldr	r0, [pc, #204]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80017d4:	f005 f9cc 	bl	8006b70 <HAL_TIM_Base_Stop_IT>
		PowerButtonLongPress = true;
 80017d8:	4b34      	ldr	r3, [pc, #208]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80017da:	2201      	movs	r2, #1
 80017dc:	701a      	strb	r2, [r3, #0]
		PowerButtonUnintentionalPress = false;
 80017de:	4b34      	ldr	r3, [pc, #208]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_AUTORELOAD(&htim15, BUTTON_UNINTENTIONAL_PERIOD);
 80017e4:	4b2e      	ldr	r3, [pc, #184]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80017ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80017ee:	4b2c      	ldr	r3, [pc, #176]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80017f0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80017f4:	60da      	str	r2, [r3, #12]
		HAL_TIM_Base_Start_IT(&htim15);
 80017f6:	482a      	ldr	r0, [pc, #168]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80017f8:	f005 f966 	bl	8006ac8 <HAL_TIM_Base_Start_IT>
 80017fc:	e023      	b.n	8001846 <HAL_TIM_PeriodElapsedCallback+0x14a>
	}
	else if(HAL_GPIO_ReadPin(Power_Button_GPIO_Port, Power_Button_Pin) == GPIO_PIN_RESET && !PowerButtonUnintentionalPress)
 80017fe:	2180      	movs	r1, #128	; 0x80
 8001800:	4825      	ldr	r0, [pc, #148]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001802:	f003 f957 	bl	8004ab4 <HAL_GPIO_ReadPin>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d11c      	bne.n	8001846 <HAL_TIM_PeriodElapsedCallback+0x14a>
 800180c:	4b28      	ldr	r3, [pc, #160]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	f083 0301 	eor.w	r3, r3, #1
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d015      	beq.n	8001846 <HAL_TIM_PeriodElapsedCallback+0x14a>
	{
		//unintentional button press so clear everything for next press
		HAL_TIM_Base_Stop_IT(&htim15);
 800181a:	4821      	ldr	r0, [pc, #132]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800181c:	f005 f9a8 	bl	8006b70 <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_SET_AUTORELOAD(&htim15, BUTTON_DEBOUNCE_MS);	//Reset power button debounce period
 8001820:	4b1f      	ldr	r3, [pc, #124]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2264      	movs	r2, #100	; 0x64
 8001826:	62da      	str	r2, [r3, #44]	; 0x2c
 8001828:	4b1d      	ldr	r3, [pc, #116]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800182a:	2264      	movs	r2, #100	; 0x64
 800182c:	60da      	str	r2, [r3, #12]
		PowerButtonDebounced = true;
 800182e:	4b1b      	ldr	r3, [pc, #108]	; (800189c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001830:	2201      	movs	r2, #1
 8001832:	701a      	strb	r2, [r3, #0]
		IsPressPeriodStart = false;
 8001834:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]
		PowerButtonShortPress = false;
 800183a:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800183c:	2200      	movs	r2, #0
 800183e:	701a      	strb	r2, [r3, #0]
		PowerButtonLongPress = false;
 8001840:	4b1a      	ldr	r3, [pc, #104]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001842:	2200      	movs	r2, #0
 8001844:	701a      	strb	r2, [r3, #0]
	}

	if(HAL_GPIO_ReadPin(Power_Button_GPIO_Port, Power_Button_Pin) == GPIO_PIN_SET && IsPressPeriodStart)
 8001846:	2180      	movs	r1, #128	; 0x80
 8001848:	4813      	ldr	r0, [pc, #76]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800184a:	f003 f933 	bl	8004ab4 <HAL_GPIO_ReadPin>
 800184e:	4603      	mov	r3, r0
 8001850:	2b01      	cmp	r3, #1
 8001852:	d11c      	bne.n	800188e <HAL_TIM_PeriodElapsedCallback+0x192>
 8001854:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d018      	beq.n	800188e <HAL_TIM_PeriodElapsedCallback+0x192>
	{
		//Cancelled press so clear everything for next press
		HAL_TIM_Base_Stop_IT(&htim15);
 800185c:	4810      	ldr	r0, [pc, #64]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800185e:	f005 f987 	bl	8006b70 <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_SET_AUTORELOAD(&htim15, BUTTON_DEBOUNCE_MS);	//Reset power button debounce period
 8001862:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2264      	movs	r2, #100	; 0x64
 8001868:	62da      	str	r2, [r3, #44]	; 0x2c
 800186a:	4b0d      	ldr	r3, [pc, #52]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800186c:	2264      	movs	r2, #100	; 0x64
 800186e:	60da      	str	r2, [r3, #12]
		PowerButtonDebounced = true;
 8001870:	4b0a      	ldr	r3, [pc, #40]	; (800189c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001872:	2201      	movs	r2, #1
 8001874:	701a      	strb	r2, [r3, #0]
		IsPressPeriodStart = false;
 8001876:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
		PowerButtonShortPress = false;
 800187c:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
		PowerButtonLongPress = false;
 8001882:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
		PowerButtonUnintentionalPress = false;
 8001888:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800188a:	2200      	movs	r2, #0
 800188c:	701a      	strb	r2, [r3, #0]
	}




}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	48000800 	.word	0x48000800
 800189c:	20000008 	.word	0x20000008
 80018a0:	200003e0 	.word	0x200003e0
 80018a4:	2000042f 	.word	0x2000042f
 80018a8:	20000430 	.word	0x20000430
 80018ac:	20000431 	.word	0x20000431
 80018b0:	20000432 	.word	0x20000432

080018b4 <MAX17048_Init>:
#if (USINGMAX17048)

uint8_t CurrentBatteryPercentage;

	bool MAX17048_Init()
	{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
		bool ok = true;
 80018ba:	2301      	movs	r3, #1
 80018bc:	71fb      	strb	r3, [r7, #7]
		if (ok) ok = max17048_is_present(&hi2c1);
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d004      	beq.n	80018ce <MAX17048_Init+0x1a>
 80018c4:	4825      	ldr	r0, [pc, #148]	; (800195c <MAX17048_Init+0xa8>)
 80018c6:	f000 ff44 	bl	8002752 <max17048_is_present>
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
		if (ok) ok = max17048_set_undervolted_voltage(&hi2c1, Battery_UnderVoltage);
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d006      	beq.n	80018e2 <MAX17048_Init+0x2e>
 80018d4:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 80018d8:	4820      	ldr	r0, [pc, #128]	; (800195c <MAX17048_Init+0xa8>)
 80018da:	f000 ff9f 	bl	800281c <max17048_set_undervolted_voltage>
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]
		if (ok) ok = max17048_set_overvolted_voltage(&hi2c1, Battery_OverVoltage);
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d006      	beq.n	80018f6 <MAX17048_Init+0x42>
 80018e8:	f241 0168 	movw	r1, #4200	; 0x1068
 80018ec:	481b      	ldr	r0, [pc, #108]	; (800195c <MAX17048_Init+0xa8>)
 80018ee:	f000 ffb5 	bl	800285c <max17048_set_overvolted_voltage>
 80018f2:	4603      	mov	r3, r0
 80018f4:	71fb      	strb	r3, [r7, #7]
		if (ok) ok = max17048_set_reset_voltage(&hi2c1, Battery_ResetVoltage);
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d006      	beq.n	800190a <MAX17048_Init+0x56>
 80018fc:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8001900:	4816      	ldr	r0, [pc, #88]	; (800195c <MAX17048_Init+0xa8>)
 8001902:	f000 ffc7 	bl	8002894 <max17048_set_reset_voltage>
 8001906:	4603      	mov	r3, r0
 8001908:	71fb      	strb	r3, [r7, #7]
		if (ok) ok = max17048_set_bat_low_soc(&hi2c1, Battery_LowSOCAlert);
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d005      	beq.n	800191c <MAX17048_Init+0x68>
 8001910:	211e      	movs	r1, #30
 8001912:	4812      	ldr	r0, [pc, #72]	; (800195c <MAX17048_Init+0xa8>)
 8001914:	f000 ff5d 	bl	80027d2 <max17048_set_bat_low_soc>
 8001918:	4603      	mov	r3, r0
 800191a:	71fb      	strb	r3, [r7, #7]
		if (ok) ok = max17048_set_voltage_reset_alert(&hi2c1, false);
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d005      	beq.n	800192e <MAX17048_Init+0x7a>
 8001922:	2100      	movs	r1, #0
 8001924:	480d      	ldr	r0, [pc, #52]	; (800195c <MAX17048_Init+0xa8>)
 8001926:	f000 ffee 	bl	8002906 <max17048_set_voltage_reset_alert>
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
		if (ok) ok = max17048_set_soc_change_alert(&hi2c1, false);
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d005      	beq.n	8001940 <MAX17048_Init+0x8c>
 8001934:	2100      	movs	r1, #0
 8001936:	4809      	ldr	r0, [pc, #36]	; (800195c <MAX17048_Init+0xa8>)
 8001938:	f000 ffce 	bl	80028d8 <max17048_set_soc_change_alert>
 800193c:	4603      	mov	r3, r0
 800193e:	71fb      	strb	r3, [r7, #7]
		if (ok) ok = max17048_clear_alerts(&hi2c1);
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d004      	beq.n	8001950 <MAX17048_Init+0x9c>
 8001946:	4805      	ldr	r0, [pc, #20]	; (800195c <MAX17048_Init+0xa8>)
 8001948:	f000 fff5 	bl	8002936 <max17048_clear_alerts>
 800194c:	4603      	mov	r3, r0
 800194e:	71fb      	strb	r3, [r7, #7]
		return ok;
 8001950:	79fb      	ldrb	r3, [r7, #7]
	}
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200002f4 	.word	0x200002f4

08001960 <Remap>:
#endif

static int Remap (float value, float from1, float to1, float from2, float to2) {
 8001960:	b480      	push	{r7}
 8001962:	b087      	sub	sp, #28
 8001964:	af00      	add	r7, sp, #0
 8001966:	ed87 0a05 	vstr	s0, [r7, #20]
 800196a:	edc7 0a04 	vstr	s1, [r7, #16]
 800196e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001972:	edc7 1a02 	vstr	s3, [r7, #8]
 8001976:	ed87 2a01 	vstr	s4, [r7, #4]
	return ((value - from1) / (to1 - from1) * (to2 - from2)) + from2;
 800197a:	ed97 7a05 	vldr	s14, [r7, #20]
 800197e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001982:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001986:	ed97 7a03 	vldr	s14, [r7, #12]
 800198a:	edd7 7a04 	vldr	s15, [r7, #16]
 800198e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001996:	edd7 6a01 	vldr	s13, [r7, #4]
 800199a:	edd7 7a02 	vldr	s15, [r7, #8]
 800199e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80019a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80019aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019b2:	ee17 3a90 	vmov	r3, s15
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	371c      	adds	r7, #28
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
	...

080019c4 <Set_RGB>:

void Set_RGB(uint8_t Red,uint8_t Green,uint8_t Blue) {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	71fb      	strb	r3, [r7, #7]
 80019ce:	460b      	mov	r3, r1
 80019d0:	71bb      	strb	r3, [r7, #6]
 80019d2:	4613      	mov	r3, r2
 80019d4:	717b      	strb	r3, [r7, #5]
	//invert 0-100 -> 100-0 in case LED is common Anode and grounded to STM's GPIO's
	Red = Remap(Red, 0, 100, 100, 0);
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	ee07 3a90 	vmov	s15, r3
 80019dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019e0:	ed9f 2a21 	vldr	s4, [pc, #132]	; 8001a68 <Set_RGB+0xa4>
 80019e4:	eddf 1a21 	vldr	s3, [pc, #132]	; 8001a6c <Set_RGB+0xa8>
 80019e8:	ed9f 1a20 	vldr	s2, [pc, #128]	; 8001a6c <Set_RGB+0xa8>
 80019ec:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8001a68 <Set_RGB+0xa4>
 80019f0:	eeb0 0a67 	vmov.f32	s0, s15
 80019f4:	f7ff ffb4 	bl	8001960 <Remap>
 80019f8:	4603      	mov	r3, r0
 80019fa:	71fb      	strb	r3, [r7, #7]
	Green = Remap(Green, 0, 100, 100, 0);
 80019fc:	79bb      	ldrb	r3, [r7, #6]
 80019fe:	ee07 3a90 	vmov	s15, r3
 8001a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a06:	ed9f 2a18 	vldr	s4, [pc, #96]	; 8001a68 <Set_RGB+0xa4>
 8001a0a:	eddf 1a18 	vldr	s3, [pc, #96]	; 8001a6c <Set_RGB+0xa8>
 8001a0e:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8001a6c <Set_RGB+0xa8>
 8001a12:	eddf 0a15 	vldr	s1, [pc, #84]	; 8001a68 <Set_RGB+0xa4>
 8001a16:	eeb0 0a67 	vmov.f32	s0, s15
 8001a1a:	f7ff ffa1 	bl	8001960 <Remap>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	71bb      	strb	r3, [r7, #6]
	Blue = Remap(Blue, 0, 100, 100, 0);
 8001a22:	797b      	ldrb	r3, [r7, #5]
 8001a24:	ee07 3a90 	vmov	s15, r3
 8001a28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a2c:	ed9f 2a0e 	vldr	s4, [pc, #56]	; 8001a68 <Set_RGB+0xa4>
 8001a30:	eddf 1a0e 	vldr	s3, [pc, #56]	; 8001a6c <Set_RGB+0xa8>
 8001a34:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 8001a6c <Set_RGB+0xa8>
 8001a38:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8001a68 <Set_RGB+0xa4>
 8001a3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a40:	f7ff ff8e 	bl	8001960 <Remap>
 8001a44:	4603      	mov	r3, r0
 8001a46:	717b      	strb	r3, [r7, #5]
	TIM2->CCR1 = Red;
 8001a48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	6353      	str	r3, [r2, #52]	; 0x34
	TIM2->CCR2 = Green;
 8001a50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a54:	79bb      	ldrb	r3, [r7, #6]
 8001a56:	6393      	str	r3, [r2, #56]	; 0x38
	TIM2->CCR3 = Blue;
 8001a58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a5c:	797b      	ldrb	r3, [r7, #5]
 8001a5e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	00000000 	.word	0x00000000
 8001a6c:	42c80000 	.word	0x42c80000

08001a70 <GetADCValue>:


float GetADCValue(float numberOfSamples)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	ed87 0a01 	vstr	s0, [r7, #4]
	float averageRaw = 0;
 8001a7a:	f04f 0300 	mov.w	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]
	float i = 0;
 8001a80:	f04f 0300 	mov.w	r3, #0
 8001a84:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < numberOfSamples; ++i)
 8001a86:	f04f 0300 	mov.w	r3, #0
 8001a8a:	60bb      	str	r3, [r7, #8]
 8001a8c:	e01e      	b.n	8001acc <GetADCValue+0x5c>
	{
		HAL_ADC_Start(&hadc1);
 8001a8e:	481a      	ldr	r0, [pc, #104]	; (8001af8 <GetADCValue+0x88>)
 8001a90:	f001 fe44 	bl	800371c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 10);
 8001a94:	210a      	movs	r1, #10
 8001a96:	4818      	ldr	r0, [pc, #96]	; (8001af8 <GetADCValue+0x88>)
 8001a98:	f001 fed6 	bl	8003848 <HAL_ADC_PollForConversion>
		averageRaw += HAL_ADC_GetValue(&hadc1);
 8001a9c:	4816      	ldr	r0, [pc, #88]	; (8001af8 <GetADCValue+0x88>)
 8001a9e:	f001 ff62 	bl	8003966 <HAL_ADC_GetValue>
 8001aa2:	ee07 0a90 	vmov	s15, r0
 8001aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aaa:	ed97 7a03 	vldr	s14, [r7, #12]
 8001aae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ab2:	edc7 7a03 	vstr	s15, [r7, #12]
		HAL_ADC_Stop(&hadc1);
 8001ab6:	4810      	ldr	r0, [pc, #64]	; (8001af8 <GetADCValue+0x88>)
 8001ab8:	f001 fe93 	bl	80037e2 <HAL_ADC_Stop>
	for (i = 0; i < numberOfSamples; ++i)
 8001abc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ac0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ac4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ac8:	edc7 7a02 	vstr	s15, [r7, #8]
 8001acc:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ad0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ad4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001adc:	d4d7      	bmi.n	8001a8e <GetADCValue+0x1e>
	}

	return (averageRaw/numberOfSamples);
 8001ade:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ae2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ae6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001aea:	eef0 7a66 	vmov.f32	s15, s13

}
 8001aee:	eeb0 0a67 	vmov.f32	s0, s15
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20000290 	.word	0x20000290
 8001afc:	00000000 	.word	0x00000000

08001b00 <readThermistor>:
const double BETA               = 3974.0;
const double ROOM_TEMP          = 298.15;   // room temperature in Kelvin
const double RESISTOR_ROOM_TEMP = 10000.0;

double readThermistor()
{
 8001b00:	b5b0      	push	{r4, r5, r7, lr}
 8001b02:	b088      	sub	sp, #32
 8001b04:	af00      	add	r7, sp, #0

 double rThermistor = 0;            // Holds thermistor resistance value
 8001b06:	f04f 0200 	mov.w	r2, #0
 8001b0a:	f04f 0300 	mov.w	r3, #0
 8001b0e:	e9c7 2306 	strd	r2, r3, [r7, #24]
 double tKelvin     = 0;            // Holds calculated temperature
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 double tCelsius    = 0;            // Hold temperature in celsius
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	e9c7 2302 	strd	r2, r3, [r7, #8]
 double adcAverage  = 0;            // Holds the average voltage measurement
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	f04f 0300 	mov.w	r3, #0
 8001b32:	e9c7 2300 	strd	r2, r3, [r7]

 adcAverage = GetADCValue(100);
 8001b36:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8001c58 <readThermistor+0x158>
 8001b3a:	f7ff ff99 	bl	8001a70 <GetADCValue>
 8001b3e:	ee10 3a10 	vmov	r3, s0
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7fe fd00 	bl	8000548 <__aeabi_f2d>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	e9c7 2300 	strd	r2, r3, [r7]

 rThermistor = BALANCE_RESISTOR * ( (MAX_ADC / adcAverage) - 1);
 8001b50:	a135      	add	r1, pc, #212	; (adr r1, 8001c28 <readThermistor+0x128>)
 8001b52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b5a:	f7fe fe77 	bl	800084c <__aeabi_ddiv>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4610      	mov	r0, r2
 8001b64:	4619      	mov	r1, r3
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	4b3c      	ldr	r3, [pc, #240]	; (8001c5c <readThermistor+0x15c>)
 8001b6c:	f7fe fb8c 	bl	8000288 <__aeabi_dsub>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4610      	mov	r0, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	a32d      	add	r3, pc, #180	; (adr r3, 8001c30 <readThermistor+0x130>)
 8001b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7e:	f7fe fd3b 	bl	80005f8 <__aeabi_dmul>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	e9c7 2306 	strd	r2, r3, [r7, #24]

 tKelvin = (BETA * ROOM_TEMP) /
 8001b8a:	a12b      	add	r1, pc, #172	; (adr r1, 8001c38 <readThermistor+0x138>)
 8001b8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b90:	a32b      	add	r3, pc, #172	; (adr r3, 8001c40 <readThermistor+0x140>)
 8001b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b96:	f7fe fd2f 	bl	80005f8 <__aeabi_dmul>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	4614      	mov	r4, r2
 8001ba0:	461d      	mov	r5, r3
           (BETA + (ROOM_TEMP * log(rThermistor / RESISTOR_ROOM_TEMP)));
 8001ba2:	a329      	add	r3, pc, #164	; (adr r3, 8001c48 <readThermistor+0x148>)
 8001ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bac:	f7fe fe4e 	bl	800084c <__aeabi_ddiv>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	ec43 2b17 	vmov	d7, r2, r3
 8001bb8:	eeb0 0a47 	vmov.f32	s0, s14
 8001bbc:	eef0 0a67 	vmov.f32	s1, s15
 8001bc0:	f00a fe32 	bl	800c828 <log>
 8001bc4:	ec51 0b10 	vmov	r0, r1, d0
 8001bc8:	a31d      	add	r3, pc, #116	; (adr r3, 8001c40 <readThermistor+0x140>)
 8001bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bce:	f7fe fd13 	bl	80005f8 <__aeabi_dmul>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4610      	mov	r0, r2
 8001bd8:	4619      	mov	r1, r3
 8001bda:	a317      	add	r3, pc, #92	; (adr r3, 8001c38 <readThermistor+0x138>)
 8001bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be0:	f7fe fb54 	bl	800028c <__adddf3>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 tKelvin = (BETA * ROOM_TEMP) /
 8001be8:	4620      	mov	r0, r4
 8001bea:	4629      	mov	r1, r5
 8001bec:	f7fe fe2e 	bl	800084c <__aeabi_ddiv>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	e9c7 2304 	strd	r2, r3, [r7, #16]

 tCelsius = tKelvin - 273.15;  // convert kelvin to celsius
 8001bf8:	a315      	add	r3, pc, #84	; (adr r3, 8001c50 <readThermistor+0x150>)
 8001bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c02:	f7fe fb41 	bl	8000288 <__aeabi_dsub>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	e9c7 2302 	strd	r2, r3, [r7, #8]

 return tCelsius;    // Return the temperature in Celsius
 8001c0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c12:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c16:	eeb0 0a47 	vmov.f32	s0, s14
 8001c1a:	eef0 0a67 	vmov.f32	s1, s15
 8001c1e:	3720      	adds	r7, #32
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bdb0      	pop	{r4, r5, r7, pc}
 8001c24:	f3af 8000 	nop.w
 8001c28:	00000000 	.word	0x00000000
 8001c2c:	40affe00 	.word	0x40affe00
 8001c30:	00000000 	.word	0x00000000
 8001c34:	40c2f700 	.word	0x40c2f700
 8001c38:	00000000 	.word	0x00000000
 8001c3c:	40af0c00 	.word	0x40af0c00
 8001c40:	66666666 	.word	0x66666666
 8001c44:	4072a266 	.word	0x4072a266
 8001c48:	00000000 	.word	0x00000000
 8001c4c:	40c38800 	.word	0x40c38800
 8001c50:	66666666 	.word	0x66666666
 8001c54:	40711266 	.word	0x40711266
 8001c58:	42c80000 	.word	0x42c80000
 8001c5c:	3ff00000 	.word	0x3ff00000

08001c60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c60:	b590      	push	{r4, r7, lr}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c66:	f001 f952 	bl	8002f0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c6a:	f000 f9c3 	bl	8001ff4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c6e:	f000 fc31 	bl	80024d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001c72:	f000 fa69 	bl	8002148 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001c76:	f000 fb4f 	bl	8002318 <MX_TIM2_Init>
  MX_TIM15_Init();
 8001c7a:	f000 fbd9 	bl	8002430 <MX_TIM15_Init>
  MX_ADC1_Init();
 8001c7e:	f000 f9ff 	bl	8002080 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001c82:	f000 fa9f 	bl	80021c4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
#endif


  __HAL_TIM_SET_AUTORELOAD(&htim15, BUTTON_DEBOUNCE_MS);	//Set power button debounce period
 8001c86:	4bc4      	ldr	r3, [pc, #784]	; (8001f98 <main+0x338>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2264      	movs	r2, #100	; 0x64
 8001c8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c8e:	4bc2      	ldr	r3, [pc, #776]	; (8001f98 <main+0x338>)
 8001c90:	2264      	movs	r2, #100	; 0x64
 8001c92:	60da      	str	r2, [r3, #12]

  PID(&Fan_PID, &MeasuredTemperature, &PIDOut, &Temperautre_SetPoint, 2, 5, 1, _PID_P_ON_E, _PID_CD_DIRECT);
 8001c94:	2300      	movs	r3, #0
 8001c96:	9301      	str	r3, [sp, #4]
 8001c98:	2301      	movs	r3, #1
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	ed9f 2bb4 	vldr	d2, [pc, #720]	; 8001f70 <main+0x310>
 8001ca0:	ed9f 1bb5 	vldr	d1, [pc, #724]	; 8001f78 <main+0x318>
 8001ca4:	ed9f 0bb6 	vldr	d0, [pc, #728]	; 8001f80 <main+0x320>
 8001ca8:	4bbc      	ldr	r3, [pc, #752]	; (8001f9c <main+0x33c>)
 8001caa:	4abd      	ldr	r2, [pc, #756]	; (8001fa0 <main+0x340>)
 8001cac:	49bd      	ldr	r1, [pc, #756]	; (8001fa4 <main+0x344>)
 8001cae:	48be      	ldr	r0, [pc, #760]	; (8001fa8 <main+0x348>)
 8001cb0:	f7ff f982 	bl	8000fb8 <PID>
  PID_SetMode(&Fan_PID, _PID_MODE_AUTOMATIC);
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	48bc      	ldr	r0, [pc, #752]	; (8001fa8 <main+0x348>)
 8001cb8:	f7ff fab4 	bl	8001224 <PID_SetMode>
  PID_SetSampleTime(&Fan_PID, 500);
 8001cbc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001cc0:	48b9      	ldr	r0, [pc, #740]	; (8001fa8 <main+0x348>)
 8001cc2:	f7ff fc23 	bl	800150c <PID_SetSampleTime>
  PID_SetOutputLimits(&Fan_PID, 40, 100);
 8001cc6:	ed9f 1bb0 	vldr	d1, [pc, #704]	; 8001f88 <main+0x328>
 8001cca:	ed9f 0bb1 	vldr	d0, [pc, #708]	; 8001f90 <main+0x330>
 8001cce:	48b6      	ldr	r0, [pc, #728]	; (8001fa8 <main+0x348>)
 8001cd0:	f7ff fac6 	bl	8001260 <PID_SetOutputLimits>

  HAL_Delay(70);	// For stability
 8001cd4:	2046      	movs	r0, #70	; 0x46
 8001cd6:	f001 f98f 	bl	8002ff8 <HAL_Delay>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);	//Calibrate ADC for better temperature reading
 8001cda:	217f      	movs	r1, #127	; 0x7f
 8001cdc:	48b3      	ldr	r0, [pc, #716]	; (8001fac <main+0x34c>)
 8001cde:	f002 fbfd 	bl	80044dc <HAL_ADCEx_Calibration_Start>

#if (USINGMAX17048)
  MAX17048_Init();
 8001ce2:	f7ff fde7 	bl	80018b4 <MAX17048_Init>
#endif

  if(!BQ_Init())
 8001ce6:	f7ff f84b 	bl	8000d80 <BQ_Init>
 8001cea:	4603      	mov	r3, r0
 8001cec:	f083 0301 	eor.w	r3, r3, #1
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d01c      	beq.n	8001d30 <main+0xd0>
  {
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	48ad      	ldr	r0, [pc, #692]	; (8001fb0 <main+0x350>)
 8001cfa:	f004 ffc9 	bl	8006c90 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001cfe:	2104      	movs	r1, #4
 8001d00:	48ab      	ldr	r0, [pc, #684]	; (8001fb0 <main+0x350>)
 8001d02:	f004 ffc5 	bl	8006c90 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001d06:	2108      	movs	r1, #8
 8001d08:	48a9      	ldr	r0, [pc, #676]	; (8001fb0 <main+0x350>)
 8001d0a:	f004 ffc1 	bl	8006c90 <HAL_TIM_PWM_Start>

	  while(1)		//if BQ not present, then warn using that it's not finding it by flashing red
	  {
		  Set_RGB(100, 0, 0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2100      	movs	r1, #0
 8001d12:	2064      	movs	r0, #100	; 0x64
 8001d14:	f7ff fe56 	bl	80019c4 <Set_RGB>
		  HAL_Delay(250);
 8001d18:	20fa      	movs	r0, #250	; 0xfa
 8001d1a:	f001 f96d 	bl	8002ff8 <HAL_Delay>
		  Set_RGB(0, 0, 0);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2100      	movs	r1, #0
 8001d22:	2000      	movs	r0, #0
 8001d24:	f7ff fe4e 	bl	80019c4 <Set_RGB>
		  HAL_Delay(250);
 8001d28:	20fa      	movs	r0, #250	; 0xfa
 8001d2a:	f001 f965 	bl	8002ff8 <HAL_Delay>
		  Set_RGB(100, 0, 0);
 8001d2e:	e7ee      	b.n	8001d0e <main+0xae>
	  }

  }

  HAL_Delay(70);	// For stability
 8001d30:	2046      	movs	r0, #70	; 0x46
 8001d32:	f001 f961 	bl	8002ff8 <HAL_Delay>

  max17048_get_soc(&hi2c1, &CurrentBatteryPercentage);	//Get current Battery Percentage
 8001d36:	499f      	ldr	r1, [pc, #636]	; (8001fb4 <main+0x354>)
 8001d38:	489f      	ldr	r0, [pc, #636]	; (8001fb8 <main+0x358>)
 8001d3a:	f000 fd2b 	bl	8002794 <max17048_get_soc>
  Set_RGB( 100, 100, 100 );
 8001d3e:	2264      	movs	r2, #100	; 0x64
 8001d40:	2164      	movs	r1, #100	; 0x64
 8001d42:	2064      	movs	r0, #100	; 0x64
 8001d44:	f7ff fe3e 	bl	80019c4 <Set_RGB>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(BQ_FLAG)
 8001d48:	4b9c      	ldr	r3, [pc, #624]	; (8001fbc <main+0x35c>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d002      	beq.n	8001d56 <main+0xf6>
	  {
		  BQ_FLAG = false;	//clear flag
 8001d50:	4b9a      	ldr	r3, [pc, #616]	; (8001fbc <main+0x35c>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]
		   * something with the BQ INT
		   */
	  }

#if (USINGMAX17048)
	  if(MAX_FLAG)
 8001d56:	4b9a      	ldr	r3, [pc, #616]	; (8001fc0 <main+0x360>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d002      	beq.n	8001d64 <main+0x104>
	  {
		  MAX_FLAG = false;	//clear flag
 8001d5e:	4b98      	ldr	r3, [pc, #608]	; (8001fc0 <main+0x360>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
	  }

#endif

	  if(SystemPowerState)
 8001d64:	4b97      	ldr	r3, [pc, #604]	; (8001fc4 <main+0x364>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f000 80a1 	beq.w	8001eb0 <main+0x250>
	  {
		  /*
		   * While system is running,the code below will always run
		   */

		  if(!InitialSystemBoot)	//Start a boot sequence once
 8001d6e:	4b96      	ldr	r3, [pc, #600]	; (8001fc8 <main+0x368>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	f083 0301 	eor.w	r3, r3, #1
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d02f      	beq.n	8001ddc <main+0x17c>
		  {
			  InitialSystemBoot = true;	//Do it once
 8001d7c:	4b92      	ldr	r3, [pc, #584]	; (8001fc8 <main+0x368>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	701a      	strb	r2, [r3, #0]
			  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);	//R
 8001d82:	2100      	movs	r1, #0
 8001d84:	488a      	ldr	r0, [pc, #552]	; (8001fb0 <main+0x350>)
 8001d86:	f004 ff83 	bl	8006c90 <HAL_TIM_PWM_Start>
			  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);	//G
 8001d8a:	2104      	movs	r1, #4
 8001d8c:	4888      	ldr	r0, [pc, #544]	; (8001fb0 <main+0x350>)
 8001d8e:	f004 ff7f 	bl	8006c90 <HAL_TIM_PWM_Start>
			  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);	//B
 8001d92:	2108      	movs	r1, #8
 8001d94:	4886      	ldr	r0, [pc, #536]	; (8001fb0 <main+0x350>)
 8001d96:	f004 ff7b 	bl	8006c90 <HAL_TIM_PWM_Start>
			  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);	//Fan PWM
 8001d9a:	210c      	movs	r1, #12
 8001d9c:	488b      	ldr	r0, [pc, #556]	; (8001fcc <main+0x36c>)
 8001d9e:	f004 ff77 	bl	8006c90 <HAL_TIM_PWM_Start>
			  Set_RGB( 100, 0, 0 );
 8001da2:	2200      	movs	r2, #0
 8001da4:	2100      	movs	r1, #0
 8001da6:	2064      	movs	r0, #100	; 0x64
 8001da8:	f7ff fe0c 	bl	80019c4 <Set_RGB>
			  HAL_Delay(100);
 8001dac:	2064      	movs	r0, #100	; 0x64
 8001dae:	f001 f923 	bl	8002ff8 <HAL_Delay>
			  Set_RGB(0, 100, 0);
 8001db2:	2200      	movs	r2, #0
 8001db4:	2164      	movs	r1, #100	; 0x64
 8001db6:	2000      	movs	r0, #0
 8001db8:	f7ff fe04 	bl	80019c4 <Set_RGB>
			  HAL_Delay(100);
 8001dbc:	2064      	movs	r0, #100	; 0x64
 8001dbe:	f001 f91b 	bl	8002ff8 <HAL_Delay>
			  Set_RGB(0, 0, 100);
 8001dc2:	2264      	movs	r2, #100	; 0x64
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f7ff fdfc 	bl	80019c4 <Set_RGB>
			  HAL_Delay(200);
 8001dcc:	20c8      	movs	r0, #200	; 0xc8
 8001dce:	f001 f913 	bl	8002ff8 <HAL_Delay>
			  HAL_GPIO_WritePin(En_Regulators_GPIO_Port, En_Regulators_Pin, GPIO_PIN_SET);	//Turn on Regulators
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	2140      	movs	r1, #64	; 0x40
 8001dd6:	487e      	ldr	r0, [pc, #504]	; (8001fd0 <main+0x370>)
 8001dd8:	f002 fe84 	bl	8004ae4 <HAL_GPIO_WritePin>
		  }


		  if(IsSystemCharging)
 8001ddc:	4b7d      	ldr	r3, [pc, #500]	; (8001fd4 <main+0x374>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d021      	beq.n	8001e28 <main+0x1c8>
		  {
			  max17048_get_soc(&hi2c1, &CurrentBatteryPercentage);	//Get current Battery Percentage
 8001de4:	4973      	ldr	r1, [pc, #460]	; (8001fb4 <main+0x354>)
 8001de6:	4874      	ldr	r0, [pc, #464]	; (8001fb8 <main+0x358>)
 8001de8:	f000 fcd4 	bl	8002794 <max17048_get_soc>
			  if(CurrentBatteryPercentage < 75)
 8001dec:	4b71      	ldr	r3, [pc, #452]	; (8001fb4 <main+0x354>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b4a      	cmp	r3, #74	; 0x4a
 8001df2:	d805      	bhi.n	8001e00 <main+0x1a0>
			  {
				  Set_RGB(100, 64, 0);
 8001df4:	2200      	movs	r2, #0
 8001df6:	2140      	movs	r1, #64	; 0x40
 8001df8:	2064      	movs	r0, #100	; 0x64
 8001dfa:	f7ff fde3 	bl	80019c4 <Set_RGB>
 8001dfe:	e040      	b.n	8001e82 <main+0x222>
			  }
			  else if(CurrentBatteryPercentage >= 75 && CurrentBatteryPercentage < 90)
 8001e00:	4b6c      	ldr	r3, [pc, #432]	; (8001fb4 <main+0x354>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b4a      	cmp	r3, #74	; 0x4a
 8001e06:	d909      	bls.n	8001e1c <main+0x1bc>
 8001e08:	4b6a      	ldr	r3, [pc, #424]	; (8001fb4 <main+0x354>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b59      	cmp	r3, #89	; 0x59
 8001e0e:	d805      	bhi.n	8001e1c <main+0x1bc>
			  {
				  Set_RGB(0, 100, 0);
 8001e10:	2200      	movs	r2, #0
 8001e12:	2164      	movs	r1, #100	; 0x64
 8001e14:	2000      	movs	r0, #0
 8001e16:	f7ff fdd5 	bl	80019c4 <Set_RGB>
 8001e1a:	e032      	b.n	8001e82 <main+0x222>
			  }else
			  {
				  Set_RGB(0, 0, 100);
 8001e1c:	2264      	movs	r2, #100	; 0x64
 8001e1e:	2100      	movs	r1, #0
 8001e20:	2000      	movs	r0, #0
 8001e22:	f7ff fdcf 	bl	80019c4 <Set_RGB>
 8001e26:	e02c      	b.n	8001e82 <main+0x222>
			  }
		  }
		  else
		  {
			  Set_RGB(Remap(CurrentBatteryPercentage, 0, 100, 100, 0), 0, Remap(CurrentBatteryPercentage, 0, 100, 40, 100));
 8001e28:	4b62      	ldr	r3, [pc, #392]	; (8001fb4 <main+0x354>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	ee07 3a90 	vmov	s15, r3
 8001e30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e34:	ed9f 2a68 	vldr	s4, [pc, #416]	; 8001fd8 <main+0x378>
 8001e38:	eddf 1a68 	vldr	s3, [pc, #416]	; 8001fdc <main+0x37c>
 8001e3c:	ed9f 1a67 	vldr	s2, [pc, #412]	; 8001fdc <main+0x37c>
 8001e40:	eddf 0a65 	vldr	s1, [pc, #404]	; 8001fd8 <main+0x378>
 8001e44:	eeb0 0a67 	vmov.f32	s0, s15
 8001e48:	f7ff fd8a 	bl	8001960 <Remap>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	b2dc      	uxtb	r4, r3
 8001e50:	4b58      	ldr	r3, [pc, #352]	; (8001fb4 <main+0x354>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	ee07 3a90 	vmov	s15, r3
 8001e58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e5c:	ed9f 2a5f 	vldr	s4, [pc, #380]	; 8001fdc <main+0x37c>
 8001e60:	eddf 1a5f 	vldr	s3, [pc, #380]	; 8001fe0 <main+0x380>
 8001e64:	ed9f 1a5d 	vldr	s2, [pc, #372]	; 8001fdc <main+0x37c>
 8001e68:	eddf 0a5b 	vldr	s1, [pc, #364]	; 8001fd8 <main+0x378>
 8001e6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e70:	f7ff fd76 	bl	8001960 <Remap>
 8001e74:	4603      	mov	r3, r0
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	461a      	mov	r2, r3
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	f7ff fda1 	bl	80019c4 <Set_RGB>
		  }

		  //Get Temperautre
		  MeasuredTemperature = readThermistor();
 8001e82:	f7ff fe3d 	bl	8001b00 <readThermistor>
 8001e86:	eeb0 7a40 	vmov.f32	s14, s0
 8001e8a:	eef0 7a60 	vmov.f32	s15, s1
 8001e8e:	4b45      	ldr	r3, [pc, #276]	; (8001fa4 <main+0x344>)
 8001e90:	ed83 7b00 	vstr	d7, [r3]
		  /* Run PID controller with the new measured temperature */
		  PID_Compute(&Fan_PID);
 8001e94:	4844      	ldr	r0, [pc, #272]	; (8001fa8 <main+0x348>)
 8001e96:	f7ff f8db 	bl	8001050 <PID_Compute>
		  /* Set New Duty cycle output*/
		  TIM1->CCR4 =PIDOut;
 8001e9a:	4b41      	ldr	r3, [pc, #260]	; (8001fa0 <main+0x340>)
 8001e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea0:	4c50      	ldr	r4, [pc, #320]	; (8001fe4 <main+0x384>)
 8001ea2:	4610      	mov	r0, r2
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	f7fe fe7f 	bl	8000ba8 <__aeabi_d2uiz>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	6423      	str	r3, [r4, #64]	; 0x40
 8001eae:	e74b      	b.n	8001d48 <main+0xe8>



	  }else if(!SystemPowerState)
 8001eb0:	4b44      	ldr	r3, [pc, #272]	; (8001fc4 <main+0x364>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	f083 0301 	eor.w	r3, r3, #1
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f43f af44 	beq.w	8001d48 <main+0xe8>
	  {
			/*
			* While system is Down,the code below will always run
			*/

			if(InitialSystemBoot)	//Start shutdown sequence
 8001ec0:	4b41      	ldr	r3, [pc, #260]	; (8001fc8 <main+0x368>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d030      	beq.n	8001f2a <main+0x2ca>
			{
				InitialSystemBoot = false;
 8001ec8:	4b3f      	ldr	r3, [pc, #252]	; (8001fc8 <main+0x368>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	701a      	strb	r2, [r3, #0]
				Set_RGB( 0, 100, 0 );
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2164      	movs	r1, #100	; 0x64
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f7ff fd76 	bl	80019c4 <Set_RGB>
				HAL_Delay(200);
 8001ed8:	20c8      	movs	r0, #200	; 0xc8
 8001eda:	f001 f88d 	bl	8002ff8 <HAL_Delay>
				Set_RGB(0, 0, 100);
 8001ede:	2264      	movs	r2, #100	; 0x64
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	f7ff fd6e 	bl	80019c4 <Set_RGB>
				HAL_Delay(200);
 8001ee8:	20c8      	movs	r0, #200	; 0xc8
 8001eea:	f001 f885 	bl	8002ff8 <HAL_Delay>
				Set_RGB( 0, 100, 0 );
 8001eee:	2200      	movs	r2, #0
 8001ef0:	2164      	movs	r1, #100	; 0x64
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	f7ff fd66 	bl	80019c4 <Set_RGB>
				HAL_Delay(200);
 8001ef8:	20c8      	movs	r0, #200	; 0xc8
 8001efa:	f001 f87d 	bl	8002ff8 <HAL_Delay>
				Set_RGB(0, 0, 100);
 8001efe:	2264      	movs	r2, #100	; 0x64
 8001f00:	2100      	movs	r1, #0
 8001f02:	2000      	movs	r0, #0
 8001f04:	f7ff fd5e 	bl	80019c4 <Set_RGB>
				HAL_Delay(200);
 8001f08:	20c8      	movs	r0, #200	; 0xc8
 8001f0a:	f001 f875 	bl	8002ff8 <HAL_Delay>
				Set_RGB(0, 0, 0);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2100      	movs	r1, #0
 8001f12:	2000      	movs	r0, #0
 8001f14:	f7ff fd56 	bl	80019c4 <Set_RGB>
				HAL_GPIO_WritePin(En_Regulators_GPIO_Port, En_Regulators_Pin, GPIO_PIN_RESET);	//Turn off Regulators
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2140      	movs	r1, #64	; 0x40
 8001f1c:	482c      	ldr	r0, [pc, #176]	; (8001fd0 <main+0x370>)
 8001f1e:	f002 fde1 	bl	8004ae4 <HAL_GPIO_WritePin>
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);	//Fan PWM
 8001f22:	210c      	movs	r1, #12
 8001f24:	4829      	ldr	r0, [pc, #164]	; (8001fcc <main+0x36c>)
 8001f26:	f004 ff91 	bl	8006e4c <HAL_TIM_PWM_Stop>
			}

			if(IsSystemCharging)
 8001f2a:	4b2a      	ldr	r3, [pc, #168]	; (8001fd4 <main+0x374>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f43f af0a 	beq.w	8001d48 <main+0xe8>
			{
				max17048_get_soc(&hi2c1, &CurrentBatteryPercentage);	//Get current Battery Percentage
 8001f34:	491f      	ldr	r1, [pc, #124]	; (8001fb4 <main+0x354>)
 8001f36:	4820      	ldr	r0, [pc, #128]	; (8001fb8 <main+0x358>)
 8001f38:	f000 fc2c 	bl	8002794 <max17048_get_soc>
				if(CurrentBatteryPercentage < 75)
 8001f3c:	4b1d      	ldr	r3, [pc, #116]	; (8001fb4 <main+0x354>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b4a      	cmp	r3, #74	; 0x4a
 8001f42:	d805      	bhi.n	8001f50 <main+0x2f0>
				{
					Set_RGB(100, 64, 0);
 8001f44:	2200      	movs	r2, #0
 8001f46:	2140      	movs	r1, #64	; 0x40
 8001f48:	2064      	movs	r0, #100	; 0x64
 8001f4a:	f7ff fd3b 	bl	80019c4 <Set_RGB>
 8001f4e:	e6fb      	b.n	8001d48 <main+0xe8>
				}
				else if(CurrentBatteryPercentage >= 75 && CurrentBatteryPercentage < 90)
 8001f50:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <main+0x354>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b4a      	cmp	r3, #74	; 0x4a
 8001f56:	d947      	bls.n	8001fe8 <main+0x388>
 8001f58:	4b16      	ldr	r3, [pc, #88]	; (8001fb4 <main+0x354>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b59      	cmp	r3, #89	; 0x59
 8001f5e:	d843      	bhi.n	8001fe8 <main+0x388>
				{
					Set_RGB(0, 100, 0);
 8001f60:	2200      	movs	r2, #0
 8001f62:	2164      	movs	r1, #100	; 0x64
 8001f64:	2000      	movs	r0, #0
 8001f66:	f7ff fd2d 	bl	80019c4 <Set_RGB>
 8001f6a:	e042      	b.n	8001ff2 <main+0x392>
 8001f6c:	f3af 8000 	nop.w
 8001f70:	00000000 	.word	0x00000000
 8001f74:	3ff00000 	.word	0x3ff00000
 8001f78:	00000000 	.word	0x00000000
 8001f7c:	40140000 	.word	0x40140000
 8001f80:	00000000 	.word	0x00000000
 8001f84:	40000000 	.word	0x40000000
 8001f88:	00000000 	.word	0x00000000
 8001f8c:	40590000 	.word	0x40590000
 8001f90:	00000000 	.word	0x00000000
 8001f94:	40440000 	.word	0x40440000
 8001f98:	200003e0 	.word	0x200003e0
 8001f9c:	20000000 	.word	0x20000000
 8001fa0:	20000218 	.word	0x20000218
 8001fa4:	20000210 	.word	0x20000210
 8001fa8:	20000220 	.word	0x20000220
 8001fac:	20000290 	.word	0x20000290
 8001fb0:	20000394 	.word	0x20000394
 8001fb4:	20000436 	.word	0x20000436
 8001fb8:	200002f4 	.word	0x200002f4
 8001fbc:	2000042d 	.word	0x2000042d
 8001fc0:	2000042e 	.word	0x2000042e
 8001fc4:	20000433 	.word	0x20000433
 8001fc8:	20000434 	.word	0x20000434
 8001fcc:	20000348 	.word	0x20000348
 8001fd0:	48000800 	.word	0x48000800
 8001fd4:	20000435 	.word	0x20000435
 8001fd8:	00000000 	.word	0x00000000
 8001fdc:	42c80000 	.word	0x42c80000
 8001fe0:	42200000 	.word	0x42200000
 8001fe4:	40012c00 	.word	0x40012c00
				}else
				{
					Set_RGB(0, 0, 100);
 8001fe8:	2264      	movs	r2, #100	; 0x64
 8001fea:	2100      	movs	r1, #0
 8001fec:	2000      	movs	r0, #0
 8001fee:	f7ff fce9 	bl	80019c4 <Set_RGB>
	  if(BQ_FLAG)
 8001ff2:	e6a9      	b.n	8001d48 <main+0xe8>

08001ff4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b096      	sub	sp, #88	; 0x58
 8001ff8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ffa:	f107 0314 	add.w	r3, r7, #20
 8001ffe:	2244      	movs	r2, #68	; 0x44
 8002000:	2100      	movs	r1, #0
 8002002:	4618      	mov	r0, r3
 8002004:	f005 ff98 	bl	8007f38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002008:	463b      	mov	r3, r7
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	605a      	str	r2, [r3, #4]
 8002010:	609a      	str	r2, [r3, #8]
 8002012:	60da      	str	r2, [r3, #12]
 8002014:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002016:	f44f 7000 	mov.w	r0, #512	; 0x200
 800201a:	f003 fb9d 	bl	8005758 <HAL_PWREx_ControlVoltageScaling>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002024:	f000 fad2 	bl	80025cc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002028:	2310      	movs	r3, #16
 800202a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800202c:	2301      	movs	r3, #1
 800202e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002030:	2300      	movs	r3, #0
 8002032:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002034:	2360      	movs	r3, #96	; 0x60
 8002036:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002038:	2300      	movs	r3, #0
 800203a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800203c:	f107 0314 	add.w	r3, r7, #20
 8002040:	4618      	mov	r0, r3
 8002042:	f003 fbdf 	bl	8005804 <HAL_RCC_OscConfig>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800204c:	f000 fabe 	bl	80025cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002050:	230f      	movs	r3, #15
 8002052:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002054:	2300      	movs	r3, #0
 8002056:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002058:	2300      	movs	r3, #0
 800205a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800205c:	2300      	movs	r3, #0
 800205e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002060:	2300      	movs	r3, #0
 8002062:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002064:	463b      	mov	r3, r7
 8002066:	2100      	movs	r1, #0
 8002068:	4618      	mov	r0, r3
 800206a:	f003 ffdf 	bl	800602c <HAL_RCC_ClockConfig>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002074:	f000 faaa 	bl	80025cc <Error_Handler>
  }
}
 8002078:	bf00      	nop
 800207a:	3758      	adds	r7, #88	; 0x58
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002086:	463b      	mov	r3, r7
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	611a      	str	r2, [r3, #16]
 8002094:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002096:	4b29      	ldr	r3, [pc, #164]	; (800213c <MX_ADC1_Init+0xbc>)
 8002098:	4a29      	ldr	r2, [pc, #164]	; (8002140 <MX_ADC1_Init+0xc0>)
 800209a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800209c:	4b27      	ldr	r3, [pc, #156]	; (800213c <MX_ADC1_Init+0xbc>)
 800209e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80020a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80020a4:	4b25      	ldr	r3, [pc, #148]	; (800213c <MX_ADC1_Init+0xbc>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020aa:	4b24      	ldr	r3, [pc, #144]	; (800213c <MX_ADC1_Init+0xbc>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80020b0:	4b22      	ldr	r3, [pc, #136]	; (800213c <MX_ADC1_Init+0xbc>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020b6:	4b21      	ldr	r3, [pc, #132]	; (800213c <MX_ADC1_Init+0xbc>)
 80020b8:	2204      	movs	r2, #4
 80020ba:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80020bc:	4b1f      	ldr	r3, [pc, #124]	; (800213c <MX_ADC1_Init+0xbc>)
 80020be:	2200      	movs	r2, #0
 80020c0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80020c2:	4b1e      	ldr	r3, [pc, #120]	; (800213c <MX_ADC1_Init+0xbc>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80020c8:	4b1c      	ldr	r3, [pc, #112]	; (800213c <MX_ADC1_Init+0xbc>)
 80020ca:	2201      	movs	r2, #1
 80020cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80020ce:	4b1b      	ldr	r3, [pc, #108]	; (800213c <MX_ADC1_Init+0xbc>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020d6:	4b19      	ldr	r3, [pc, #100]	; (800213c <MX_ADC1_Init+0xbc>)
 80020d8:	2200      	movs	r2, #0
 80020da:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80020dc:	4b17      	ldr	r3, [pc, #92]	; (800213c <MX_ADC1_Init+0xbc>)
 80020de:	2200      	movs	r2, #0
 80020e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80020e2:	4b16      	ldr	r3, [pc, #88]	; (800213c <MX_ADC1_Init+0xbc>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80020ea:	4b14      	ldr	r3, [pc, #80]	; (800213c <MX_ADC1_Init+0xbc>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80020f0:	4b12      	ldr	r3, [pc, #72]	; (800213c <MX_ADC1_Init+0xbc>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020f8:	4810      	ldr	r0, [pc, #64]	; (800213c <MX_ADC1_Init+0xbc>)
 80020fa:	f001 f9c7 	bl	800348c <HAL_ADC_Init>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8002104:	f000 fa62 	bl	80025cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002108:	4b0e      	ldr	r3, [pc, #56]	; (8002144 <MX_ADC1_Init+0xc4>)
 800210a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800210c:	2306      	movs	r3, #6
 800210e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8002110:	2306      	movs	r3, #6
 8002112:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002114:	237f      	movs	r3, #127	; 0x7f
 8002116:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002118:	2304      	movs	r3, #4
 800211a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002120:	463b      	mov	r3, r7
 8002122:	4619      	mov	r1, r3
 8002124:	4805      	ldr	r0, [pc, #20]	; (800213c <MX_ADC1_Init+0xbc>)
 8002126:	f001 fc2b 	bl	8003980 <HAL_ADC_ConfigChannel>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8002130:	f000 fa4c 	bl	80025cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002134:	bf00      	nop
 8002136:	3718      	adds	r7, #24
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	20000290 	.word	0x20000290
 8002140:	50040000 	.word	0x50040000
 8002144:	25b00200 	.word	0x25b00200

08002148 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800214c:	4b1b      	ldr	r3, [pc, #108]	; (80021bc <MX_I2C1_Init+0x74>)
 800214e:	4a1c      	ldr	r2, [pc, #112]	; (80021c0 <MX_I2C1_Init+0x78>)
 8002150:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000004;
 8002152:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <MX_I2C1_Init+0x74>)
 8002154:	2204      	movs	r2, #4
 8002156:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002158:	4b18      	ldr	r3, [pc, #96]	; (80021bc <MX_I2C1_Init+0x74>)
 800215a:	2200      	movs	r2, #0
 800215c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800215e:	4b17      	ldr	r3, [pc, #92]	; (80021bc <MX_I2C1_Init+0x74>)
 8002160:	2201      	movs	r2, #1
 8002162:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002164:	4b15      	ldr	r3, [pc, #84]	; (80021bc <MX_I2C1_Init+0x74>)
 8002166:	2200      	movs	r2, #0
 8002168:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800216a:	4b14      	ldr	r3, [pc, #80]	; (80021bc <MX_I2C1_Init+0x74>)
 800216c:	2200      	movs	r2, #0
 800216e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002170:	4b12      	ldr	r3, [pc, #72]	; (80021bc <MX_I2C1_Init+0x74>)
 8002172:	2200      	movs	r2, #0
 8002174:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002176:	4b11      	ldr	r3, [pc, #68]	; (80021bc <MX_I2C1_Init+0x74>)
 8002178:	2200      	movs	r2, #0
 800217a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800217c:	4b0f      	ldr	r3, [pc, #60]	; (80021bc <MX_I2C1_Init+0x74>)
 800217e:	2200      	movs	r2, #0
 8002180:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002182:	480e      	ldr	r0, [pc, #56]	; (80021bc <MX_I2C1_Init+0x74>)
 8002184:	f002 fcde 	bl	8004b44 <HAL_I2C_Init>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800218e:	f000 fa1d 	bl	80025cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002192:	2100      	movs	r1, #0
 8002194:	4809      	ldr	r0, [pc, #36]	; (80021bc <MX_I2C1_Init+0x74>)
 8002196:	f003 fa39 	bl	800560c <HAL_I2CEx_ConfigAnalogFilter>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80021a0:	f000 fa14 	bl	80025cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80021a4:	2100      	movs	r1, #0
 80021a6:	4805      	ldr	r0, [pc, #20]	; (80021bc <MX_I2C1_Init+0x74>)
 80021a8:	f003 fa7b 	bl	80056a2 <HAL_I2CEx_ConfigDigitalFilter>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80021b2:	f000 fa0b 	bl	80025cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	200002f4 	.word	0x200002f4
 80021c0:	40005400 	.word	0x40005400

080021c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b09a      	sub	sp, #104	; 0x68
 80021c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80021ce:	2200      	movs	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	605a      	str	r2, [r3, #4]
 80021d4:	609a      	str	r2, [r3, #8]
 80021d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	60da      	str	r2, [r3, #12]
 80021f2:	611a      	str	r2, [r3, #16]
 80021f4:	615a      	str	r2, [r3, #20]
 80021f6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021f8:	1d3b      	adds	r3, r7, #4
 80021fa:	222c      	movs	r2, #44	; 0x2c
 80021fc:	2100      	movs	r1, #0
 80021fe:	4618      	mov	r0, r3
 8002200:	f005 fe9a 	bl	8007f38 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002204:	4b42      	ldr	r3, [pc, #264]	; (8002310 <MX_TIM1_Init+0x14c>)
 8002206:	4a43      	ldr	r2, [pc, #268]	; (8002314 <MX_TIM1_Init+0x150>)
 8002208:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 800220a:	4b41      	ldr	r3, [pc, #260]	; (8002310 <MX_TIM1_Init+0x14c>)
 800220c:	2203      	movs	r2, #3
 800220e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002210:	4b3f      	ldr	r3, [pc, #252]	; (8002310 <MX_TIM1_Init+0x14c>)
 8002212:	2200      	movs	r2, #0
 8002214:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8002216:	4b3e      	ldr	r3, [pc, #248]	; (8002310 <MX_TIM1_Init+0x14c>)
 8002218:	2264      	movs	r2, #100	; 0x64
 800221a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800221c:	4b3c      	ldr	r3, [pc, #240]	; (8002310 <MX_TIM1_Init+0x14c>)
 800221e:	2200      	movs	r2, #0
 8002220:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002222:	4b3b      	ldr	r3, [pc, #236]	; (8002310 <MX_TIM1_Init+0x14c>)
 8002224:	2200      	movs	r2, #0
 8002226:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002228:	4b39      	ldr	r3, [pc, #228]	; (8002310 <MX_TIM1_Init+0x14c>)
 800222a:	2200      	movs	r2, #0
 800222c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800222e:	4838      	ldr	r0, [pc, #224]	; (8002310 <MX_TIM1_Init+0x14c>)
 8002230:	f004 fbf2 	bl	8006a18 <HAL_TIM_Base_Init>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800223a:	f000 f9c7 	bl	80025cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800223e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002242:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002244:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002248:	4619      	mov	r1, r3
 800224a:	4831      	ldr	r0, [pc, #196]	; (8002310 <MX_TIM1_Init+0x14c>)
 800224c:	f005 f8ba 	bl	80073c4 <HAL_TIM_ConfigClockSource>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002256:	f000 f9b9 	bl	80025cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800225a:	482d      	ldr	r0, [pc, #180]	; (8002310 <MX_TIM1_Init+0x14c>)
 800225c:	f004 fcb7 	bl	8006bce <HAL_TIM_PWM_Init>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002266:	f000 f9b1 	bl	80025cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800226a:	2300      	movs	r3, #0
 800226c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800226e:	2300      	movs	r3, #0
 8002270:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002272:	2300      	movs	r3, #0
 8002274:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002276:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800227a:	4619      	mov	r1, r3
 800227c:	4824      	ldr	r0, [pc, #144]	; (8002310 <MX_TIM1_Init+0x14c>)
 800227e:	f005 fd35 	bl	8007cec <HAL_TIMEx_MasterConfigSynchronization>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8002288:	f000 f9a0 	bl	80025cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800228c:	2360      	movs	r3, #96	; 0x60
 800228e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002290:	2300      	movs	r3, #0
 8002292:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002294:	2300      	movs	r3, #0
 8002296:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002298:	2300      	movs	r3, #0
 800229a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800229c:	2300      	movs	r3, #0
 800229e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022a0:	2300      	movs	r3, #0
 80022a2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80022a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022a8:	220c      	movs	r2, #12
 80022aa:	4619      	mov	r1, r3
 80022ac:	4818      	ldr	r0, [pc, #96]	; (8002310 <MX_TIM1_Init+0x14c>)
 80022ae:	f004 ff75 	bl	800719c <HAL_TIM_PWM_ConfigChannel>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80022b8:	f000 f988 	bl	80025cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80022bc:	2300      	movs	r3, #0
 80022be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022c0:	2300      	movs	r3, #0
 80022c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022c4:	2300      	movs	r3, #0
 80022c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80022d6:	2300      	movs	r3, #0
 80022d8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80022da:	2300      	movs	r3, #0
 80022dc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80022de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022e2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022e8:	2300      	movs	r3, #0
 80022ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80022ec:	1d3b      	adds	r3, r7, #4
 80022ee:	4619      	mov	r1, r3
 80022f0:	4807      	ldr	r0, [pc, #28]	; (8002310 <MX_TIM1_Init+0x14c>)
 80022f2:	f005 fd61 	bl	8007db8 <HAL_TIMEx_ConfigBreakDeadTime>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 80022fc:	f000 f966 	bl	80025cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002300:	4803      	ldr	r0, [pc, #12]	; (8002310 <MX_TIM1_Init+0x14c>)
 8002302:	f000 fc61 	bl	8002bc8 <HAL_TIM_MspPostInit>

}
 8002306:	bf00      	nop
 8002308:	3768      	adds	r7, #104	; 0x68
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20000348 	.word	0x20000348
 8002314:	40012c00 	.word	0x40012c00

08002318 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08e      	sub	sp, #56	; 0x38
 800231c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800231e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	605a      	str	r2, [r3, #4]
 8002328:	609a      	str	r2, [r3, #8]
 800232a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800232c:	f107 031c 	add.w	r3, r7, #28
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002338:	463b      	mov	r3, r7
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	609a      	str	r2, [r3, #8]
 8002342:	60da      	str	r2, [r3, #12]
 8002344:	611a      	str	r2, [r3, #16]
 8002346:	615a      	str	r2, [r3, #20]
 8002348:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800234a:	4b38      	ldr	r3, [pc, #224]	; (800242c <MX_TIM2_Init+0x114>)
 800234c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002350:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4-1;
 8002352:	4b36      	ldr	r3, [pc, #216]	; (800242c <MX_TIM2_Init+0x114>)
 8002354:	2203      	movs	r2, #3
 8002356:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002358:	4b34      	ldr	r3, [pc, #208]	; (800242c <MX_TIM2_Init+0x114>)
 800235a:	2200      	movs	r2, #0
 800235c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800235e:	4b33      	ldr	r3, [pc, #204]	; (800242c <MX_TIM2_Init+0x114>)
 8002360:	2263      	movs	r2, #99	; 0x63
 8002362:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002364:	4b31      	ldr	r3, [pc, #196]	; (800242c <MX_TIM2_Init+0x114>)
 8002366:	2200      	movs	r2, #0
 8002368:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800236a:	4b30      	ldr	r3, [pc, #192]	; (800242c <MX_TIM2_Init+0x114>)
 800236c:	2200      	movs	r2, #0
 800236e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002370:	482e      	ldr	r0, [pc, #184]	; (800242c <MX_TIM2_Init+0x114>)
 8002372:	f004 fb51 	bl	8006a18 <HAL_TIM_Base_Init>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800237c:	f000 f926 	bl	80025cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002384:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002386:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800238a:	4619      	mov	r1, r3
 800238c:	4827      	ldr	r0, [pc, #156]	; (800242c <MX_TIM2_Init+0x114>)
 800238e:	f005 f819 	bl	80073c4 <HAL_TIM_ConfigClockSource>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002398:	f000 f918 	bl	80025cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800239c:	4823      	ldr	r0, [pc, #140]	; (800242c <MX_TIM2_Init+0x114>)
 800239e:	f004 fc16 	bl	8006bce <HAL_TIM_PWM_Init>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80023a8:	f000 f910 	bl	80025cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ac:	2300      	movs	r3, #0
 80023ae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023b0:	2300      	movs	r3, #0
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023b4:	f107 031c 	add.w	r3, r7, #28
 80023b8:	4619      	mov	r1, r3
 80023ba:	481c      	ldr	r0, [pc, #112]	; (800242c <MX_TIM2_Init+0x114>)
 80023bc:	f005 fc96 	bl	8007cec <HAL_TIMEx_MasterConfigSynchronization>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80023c6:	f000 f901 	bl	80025cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023ca:	2360      	movs	r3, #96	; 0x60
 80023cc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80023ce:	2300      	movs	r3, #0
 80023d0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023d2:	2300      	movs	r3, #0
 80023d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023d6:	2300      	movs	r3, #0
 80023d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023da:	463b      	mov	r3, r7
 80023dc:	2200      	movs	r2, #0
 80023de:	4619      	mov	r1, r3
 80023e0:	4812      	ldr	r0, [pc, #72]	; (800242c <MX_TIM2_Init+0x114>)
 80023e2:	f004 fedb 	bl	800719c <HAL_TIM_PWM_ConfigChannel>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80023ec:	f000 f8ee 	bl	80025cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023f0:	463b      	mov	r3, r7
 80023f2:	2204      	movs	r2, #4
 80023f4:	4619      	mov	r1, r3
 80023f6:	480d      	ldr	r0, [pc, #52]	; (800242c <MX_TIM2_Init+0x114>)
 80023f8:	f004 fed0 	bl	800719c <HAL_TIM_PWM_ConfigChannel>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8002402:	f000 f8e3 	bl	80025cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002406:	463b      	mov	r3, r7
 8002408:	2208      	movs	r2, #8
 800240a:	4619      	mov	r1, r3
 800240c:	4807      	ldr	r0, [pc, #28]	; (800242c <MX_TIM2_Init+0x114>)
 800240e:	f004 fec5 	bl	800719c <HAL_TIM_PWM_ConfigChannel>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8002418:	f000 f8d8 	bl	80025cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800241c:	4803      	ldr	r0, [pc, #12]	; (800242c <MX_TIM2_Init+0x114>)
 800241e:	f000 fbd3 	bl	8002bc8 <HAL_TIM_MspPostInit>

}
 8002422:	bf00      	nop
 8002424:	3738      	adds	r7, #56	; 0x38
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20000394 	.word	0x20000394

08002430 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b088      	sub	sp, #32
 8002434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002436:	f107 0310 	add.w	r3, r7, #16
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	605a      	str	r2, [r3, #4]
 8002440:	609a      	str	r2, [r3, #8]
 8002442:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002444:	1d3b      	adds	r3, r7, #4
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	605a      	str	r2, [r3, #4]
 800244c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800244e:	4b1f      	ldr	r3, [pc, #124]	; (80024cc <MX_TIM15_Init+0x9c>)
 8002450:	4a1f      	ldr	r2, [pc, #124]	; (80024d0 <MX_TIM15_Init+0xa0>)
 8002452:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 4000;
 8002454:	4b1d      	ldr	r3, [pc, #116]	; (80024cc <MX_TIM15_Init+0x9c>)
 8002456:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800245a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800245c:	4b1b      	ldr	r3, [pc, #108]	; (80024cc <MX_TIM15_Init+0x9c>)
 800245e:	2200      	movs	r2, #0
 8002460:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 50;
 8002462:	4b1a      	ldr	r3, [pc, #104]	; (80024cc <MX_TIM15_Init+0x9c>)
 8002464:	2232      	movs	r2, #50	; 0x32
 8002466:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002468:	4b18      	ldr	r3, [pc, #96]	; (80024cc <MX_TIM15_Init+0x9c>)
 800246a:	2200      	movs	r2, #0
 800246c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800246e:	4b17      	ldr	r3, [pc, #92]	; (80024cc <MX_TIM15_Init+0x9c>)
 8002470:	2200      	movs	r2, #0
 8002472:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002474:	4b15      	ldr	r3, [pc, #84]	; (80024cc <MX_TIM15_Init+0x9c>)
 8002476:	2200      	movs	r2, #0
 8002478:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800247a:	4814      	ldr	r0, [pc, #80]	; (80024cc <MX_TIM15_Init+0x9c>)
 800247c:	f004 facc 	bl	8006a18 <HAL_TIM_Base_Init>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8002486:	f000 f8a1 	bl	80025cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800248a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800248e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002490:	f107 0310 	add.w	r3, r7, #16
 8002494:	4619      	mov	r1, r3
 8002496:	480d      	ldr	r0, [pc, #52]	; (80024cc <MX_TIM15_Init+0x9c>)
 8002498:	f004 ff94 	bl	80073c4 <HAL_TIM_ConfigClockSource>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 80024a2:	f000 f893 	bl	80025cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024a6:	2300      	movs	r3, #0
 80024a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024aa:	2300      	movs	r3, #0
 80024ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80024ae:	1d3b      	adds	r3, r7, #4
 80024b0:	4619      	mov	r1, r3
 80024b2:	4806      	ldr	r0, [pc, #24]	; (80024cc <MX_TIM15_Init+0x9c>)
 80024b4:	f005 fc1a 	bl	8007cec <HAL_TIMEx_MasterConfigSynchronization>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 80024be:	f000 f885 	bl	80025cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80024c2:	bf00      	nop
 80024c4:	3720      	adds	r7, #32
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	200003e0 	.word	0x200003e0
 80024d0:	40014000 	.word	0x40014000

080024d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024da:	f107 030c 	add.w	r3, r7, #12
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	605a      	str	r2, [r3, #4]
 80024e4:	609a      	str	r2, [r3, #8]
 80024e6:	60da      	str	r2, [r3, #12]
 80024e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ea:	4b36      	ldr	r3, [pc, #216]	; (80025c4 <MX_GPIO_Init+0xf0>)
 80024ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ee:	4a35      	ldr	r2, [pc, #212]	; (80025c4 <MX_GPIO_Init+0xf0>)
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024f6:	4b33      	ldr	r3, [pc, #204]	; (80025c4 <MX_GPIO_Init+0xf0>)
 80024f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	60bb      	str	r3, [r7, #8]
 8002500:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002502:	4b30      	ldr	r3, [pc, #192]	; (80025c4 <MX_GPIO_Init+0xf0>)
 8002504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002506:	4a2f      	ldr	r2, [pc, #188]	; (80025c4 <MX_GPIO_Init+0xf0>)
 8002508:	f043 0304 	orr.w	r3, r3, #4
 800250c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800250e:	4b2d      	ldr	r3, [pc, #180]	; (80025c4 <MX_GPIO_Init+0xf0>)
 8002510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002512:	f003 0304 	and.w	r3, r3, #4
 8002516:	607b      	str	r3, [r7, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800251a:	4b2a      	ldr	r3, [pc, #168]	; (80025c4 <MX_GPIO_Init+0xf0>)
 800251c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800251e:	4a29      	ldr	r2, [pc, #164]	; (80025c4 <MX_GPIO_Init+0xf0>)
 8002520:	f043 0302 	orr.w	r3, r3, #2
 8002524:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002526:	4b27      	ldr	r3, [pc, #156]	; (80025c4 <MX_GPIO_Init+0xf0>)
 8002528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	603b      	str	r3, [r7, #0]
 8002530:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(En_Regulators_GPIO_Port, En_Regulators_Pin, GPIO_PIN_RESET);
 8002532:	2200      	movs	r2, #0
 8002534:	2140      	movs	r1, #64	; 0x40
 8002536:	4824      	ldr	r0, [pc, #144]	; (80025c8 <MX_GPIO_Init+0xf4>)
 8002538:	f002 fad4 	bl	8004ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : En_Regulators_Pin */
  GPIO_InitStruct.Pin = En_Regulators_Pin;
 800253c:	2340      	movs	r3, #64	; 0x40
 800253e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002540:	2301      	movs	r3, #1
 8002542:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002548:	2300      	movs	r3, #0
 800254a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(En_Regulators_GPIO_Port, &GPIO_InitStruct);
 800254c:	f107 030c 	add.w	r3, r7, #12
 8002550:	4619      	mov	r1, r3
 8002552:	481d      	ldr	r0, [pc, #116]	; (80025c8 <MX_GPIO_Init+0xf4>)
 8002554:	f002 f934 	bl	80047c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Power_Button_Pin */
  GPIO_InitStruct.Pin = Power_Button_Pin;
 8002558:	2380      	movs	r3, #128	; 0x80
 800255a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800255c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002560:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002562:	2301      	movs	r3, #1
 8002564:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Power_Button_GPIO_Port, &GPIO_InitStruct);
 8002566:	f107 030c 	add.w	r3, r7, #12
 800256a:	4619      	mov	r1, r3
 800256c:	4816      	ldr	r0, [pc, #88]	; (80025c8 <MX_GPIO_Init+0xf4>)
 800256e:	f002 f927 	bl	80047c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MAX_ALRT_Pin */
  GPIO_InitStruct.Pin = MAX_ALRT_Pin;
 8002572:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002576:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002578:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800257c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800257e:	2301      	movs	r3, #1
 8002580:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MAX_ALRT_GPIO_Port, &GPIO_InitStruct);
 8002582:	f107 030c 	add.w	r3, r7, #12
 8002586:	4619      	mov	r1, r3
 8002588:	480f      	ldr	r0, [pc, #60]	; (80025c8 <MX_GPIO_Init+0xf4>)
 800258a:	f002 f919 	bl	80047c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BQ_INT_Pin */
  GPIO_InitStruct.Pin = BQ_INT_Pin;
 800258e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002592:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002594:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002598:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800259a:	2301      	movs	r3, #1
 800259c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BQ_INT_GPIO_Port, &GPIO_InitStruct);
 800259e:	f107 030c 	add.w	r3, r7, #12
 80025a2:	4619      	mov	r1, r3
 80025a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025a8:	f002 f90a 	bl	80047c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80025ac:	2200      	movs	r2, #0
 80025ae:	2100      	movs	r1, #0
 80025b0:	2017      	movs	r0, #23
 80025b2:	f002 f8ce 	bl	8004752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80025b6:	2017      	movs	r0, #23
 80025b8:	f002 f8e7 	bl	800478a <HAL_NVIC_EnableIRQ>

}
 80025bc:	bf00      	nop
 80025be:	3720      	adds	r7, #32
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40021000 	.word	0x40021000
 80025c8:	48000800 	.word	0x48000800

080025cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025d0:	b672      	cpsid	i
}
 80025d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025d4:	e7fe      	b.n	80025d4 <Error_Handler+0x8>

080025d6 <i2c_master_read_u16>:
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b088      	sub	sp, #32
 80025da:	af04      	add	r7, sp, #16
 80025dc:	60f8      	str	r0, [r7, #12]
 80025de:	607b      	str	r3, [r7, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	72fb      	strb	r3, [r7, #11]
 80025e4:	4613      	mov	r3, r2
 80025e6:	72bb      	strb	r3, [r7, #10]
 80025e8:	7afb      	ldrb	r3, [r7, #11]
 80025ea:	b299      	uxth	r1, r3
 80025ec:	7abb      	ldrb	r3, [r7, #10]
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	230a      	movs	r3, #10
 80025f2:	9302      	str	r3, [sp, #8]
 80025f4:	2302      	movs	r3, #2
 80025f6:	9301      	str	r3, [sp, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	2302      	movs	r3, #2
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f002 fc44 	bl	8004e8c <HAL_I2C_Mem_Read>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <i2c_master_read_u16+0x38>
 800260a:	2300      	movs	r3, #0
 800260c:	e000      	b.n	8002610 <i2c_master_read_u16+0x3a>
 800260e:	2301      	movs	r3, #1
 8002610:	4618      	mov	r0, r3
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <i2c_master_write_u16>:
 8002618:	b580      	push	{r7, lr}
 800261a:	b088      	sub	sp, #32
 800261c:	af04      	add	r7, sp, #16
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	607b      	str	r3, [r7, #4]
 8002622:	460b      	mov	r3, r1
 8002624:	72fb      	strb	r3, [r7, #11]
 8002626:	4613      	mov	r3, r2
 8002628:	72bb      	strb	r3, [r7, #10]
 800262a:	7afb      	ldrb	r3, [r7, #11]
 800262c:	b299      	uxth	r1, r3
 800262e:	7abb      	ldrb	r3, [r7, #10]
 8002630:	b29a      	uxth	r2, r3
 8002632:	230a      	movs	r3, #10
 8002634:	9302      	str	r3, [sp, #8]
 8002636:	2302      	movs	r3, #2
 8002638:	9301      	str	r3, [sp, #4]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	2302      	movs	r3, #2
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f002 fb0f 	bl	8004c64 <HAL_I2C_Mem_Write>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <i2c_master_write_u16+0x38>
 800264c:	2300      	movs	r3, #0
 800264e:	e000      	b.n	8002652 <i2c_master_write_u16+0x3a>
 8002650:	2301      	movs	r3, #1
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <read_reg>:
 800265a:	b580      	push	{r7, lr}
 800265c:	b084      	sub	sp, #16
 800265e:	af00      	add	r7, sp, #0
 8002660:	60f8      	str	r0, [r7, #12]
 8002662:	460b      	mov	r3, r1
 8002664:	607a      	str	r2, [r7, #4]
 8002666:	72fb      	strb	r3, [r7, #11]
 8002668:	7afa      	ldrb	r2, [r7, #11]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2136      	movs	r1, #54	; 0x36
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f7ff ffb1 	bl	80025d6 <i2c_master_read_u16>
 8002674:	4603      	mov	r3, r0
 8002676:	f083 0301 	eor.w	r3, r3, #1
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <read_reg+0x2a>
 8002680:	2300      	movs	r3, #0
 8002682:	e00e      	b.n	80026a2 <read_reg+0x48>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	021b      	lsls	r3, r3, #8
 800268a:	b21a      	sxth	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	0a1b      	lsrs	r3, r3, #8
 8002692:	b29b      	uxth	r3, r3
 8002694:	b21b      	sxth	r3, r3
 8002696:	4313      	orrs	r3, r2
 8002698:	b21b      	sxth	r3, r3
 800269a:	b29a      	uxth	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	801a      	strh	r2, [r3, #0]
 80026a0:	2301      	movs	r3, #1
 80026a2:	4618      	mov	r0, r3
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <write_reg>:
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b082      	sub	sp, #8
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
 80026b2:	460b      	mov	r3, r1
 80026b4:	70fb      	strb	r3, [r7, #3]
 80026b6:	4613      	mov	r3, r2
 80026b8:	803b      	strh	r3, [r7, #0]
 80026ba:	883b      	ldrh	r3, [r7, #0]
 80026bc:	021b      	lsls	r3, r3, #8
 80026be:	b21a      	sxth	r2, r3
 80026c0:	883b      	ldrh	r3, [r7, #0]
 80026c2:	0a1b      	lsrs	r3, r3, #8
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	b21b      	sxth	r3, r3
 80026c8:	4313      	orrs	r3, r2
 80026ca:	b21b      	sxth	r3, r3
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	78fa      	ldrb	r2, [r7, #3]
 80026d0:	2136      	movs	r1, #54	; 0x36
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7ff ffa0 	bl	8002618 <i2c_master_write_u16>
 80026d8:	4603      	mov	r3, r0
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <modify_reg>:
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b086      	sub	sp, #24
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	60f8      	str	r0, [r7, #12]
 80026ea:	4608      	mov	r0, r1
 80026ec:	4611      	mov	r1, r2
 80026ee:	461a      	mov	r2, r3
 80026f0:	4603      	mov	r3, r0
 80026f2:	72fb      	strb	r3, [r7, #11]
 80026f4:	460b      	mov	r3, r1
 80026f6:	813b      	strh	r3, [r7, #8]
 80026f8:	4613      	mov	r3, r2
 80026fa:	80fb      	strh	r3, [r7, #6]
 80026fc:	f107 0216 	add.w	r2, r7, #22
 8002700:	7afb      	ldrb	r3, [r7, #11]
 8002702:	4619      	mov	r1, r3
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f7ff ffa8 	bl	800265a <read_reg>
 800270a:	4603      	mov	r3, r0
 800270c:	f083 0301 	eor.w	r3, r3, #1
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <modify_reg+0x38>
 8002716:	2300      	movs	r3, #0
 8002718:	e017      	b.n	800274a <modify_reg+0x68>
 800271a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800271e:	43db      	mvns	r3, r3
 8002720:	b21a      	sxth	r2, r3
 8002722:	8afb      	ldrh	r3, [r7, #22]
 8002724:	b21b      	sxth	r3, r3
 8002726:	4013      	ands	r3, r2
 8002728:	b21a      	sxth	r2, r3
 800272a:	8939      	ldrh	r1, [r7, #8]
 800272c:	88fb      	ldrh	r3, [r7, #6]
 800272e:	400b      	ands	r3, r1
 8002730:	b29b      	uxth	r3, r3
 8002732:	b21b      	sxth	r3, r3
 8002734:	4313      	orrs	r3, r2
 8002736:	b21b      	sxth	r3, r3
 8002738:	b29b      	uxth	r3, r3
 800273a:	82fb      	strh	r3, [r7, #22]
 800273c:	8afa      	ldrh	r2, [r7, #22]
 800273e:	7afb      	ldrb	r3, [r7, #11]
 8002740:	4619      	mov	r1, r3
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f7ff ffb1 	bl	80026aa <write_reg>
 8002748:	4603      	mov	r3, r0
 800274a:	4618      	mov	r0, r3
 800274c:	3718      	adds	r7, #24
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <max17048_is_present>:
 8002752:	b580      	push	{r7, lr}
 8002754:	b084      	sub	sp, #16
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
 800275a:	f107 030e 	add.w	r3, r7, #14
 800275e:	461a      	mov	r2, r3
 8002760:	2108      	movs	r1, #8
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff ff79 	bl	800265a <read_reg>
 8002768:	4603      	mov	r3, r0
 800276a:	f083 0301 	eor.w	r3, r3, #1
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <max17048_is_present+0x26>
 8002774:	2300      	movs	r3, #0
 8002776:	e009      	b.n	800278c <max17048_is_present+0x3a>
 8002778:	89fb      	ldrh	r3, [r7, #14]
 800277a:	461a      	mov	r2, r3
 800277c:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8002780:	4013      	ands	r3, r2
 8002782:	2b10      	cmp	r3, #16
 8002784:	bf0c      	ite	eq
 8002786:	2301      	moveq	r3, #1
 8002788:	2300      	movne	r3, #0
 800278a:	b2db      	uxtb	r3, r3
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <max17048_get_soc>:
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
 800279e:	f107 030e 	add.w	r3, r7, #14
 80027a2:	461a      	mov	r2, r3
 80027a4:	2104      	movs	r1, #4
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7ff ff57 	bl	800265a <read_reg>
 80027ac:	4603      	mov	r3, r0
 80027ae:	f083 0301 	eor.w	r3, r3, #1
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <max17048_get_soc+0x28>
 80027b8:	2300      	movs	r3, #0
 80027ba:	e006      	b.n	80027ca <max17048_get_soc+0x36>
 80027bc:	89fb      	ldrh	r3, [r7, #14]
 80027be:	0a1b      	lsrs	r3, r3, #8
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	701a      	strb	r2, [r3, #0]
 80027c8:	2301      	movs	r3, #1
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <max17048_set_bat_low_soc>:
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b084      	sub	sp, #16
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
 80027da:	460b      	mov	r3, r1
 80027dc:	70fb      	strb	r3, [r7, #3]
 80027de:	78fb      	ldrb	r3, [r7, #3]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d002      	beq.n	80027ea <max17048_set_bat_low_soc+0x18>
 80027e4:	78fb      	ldrb	r3, [r7, #3]
 80027e6:	2b20      	cmp	r3, #32
 80027e8:	d901      	bls.n	80027ee <max17048_set_bat_low_soc+0x1c>
 80027ea:	2300      	movs	r3, #0
 80027ec:	e011      	b.n	8002812 <max17048_set_bat_low_soc+0x40>
 80027ee:	78fb      	ldrb	r3, [r7, #3]
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	f003 031f 	and.w	r3, r3, #31
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	f1c3 0320 	rsb	r3, r3, #32
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	f003 031f 	and.w	r3, r3, #31
 8002802:	81fb      	strh	r3, [r7, #14]
 8002804:	89fa      	ldrh	r2, [r7, #14]
 8002806:	231f      	movs	r3, #31
 8002808:	210c      	movs	r1, #12
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7ff ff69 	bl	80026e2 <modify_reg>
 8002810:	4603      	mov	r3, r0
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
	...

0800281c <max17048_set_undervolted_voltage>:
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	807b      	strh	r3, [r7, #2]
 8002828:	887b      	ldrh	r3, [r7, #2]
 800282a:	4a0b      	ldr	r2, [pc, #44]	; (8002858 <max17048_set_undervolted_voltage+0x3c>)
 800282c:	fba2 2303 	umull	r2, r3, r2, r3
 8002830:	091b      	lsrs	r3, r3, #4
 8002832:	b29b      	uxth	r3, r3
 8002834:	021b      	lsls	r3, r3, #8
 8002836:	b29b      	uxth	r3, r3
 8002838:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800283c:	81fb      	strh	r3, [r7, #14]
 800283e:	89fa      	ldrh	r2, [r7, #14]
 8002840:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8002844:	2114      	movs	r1, #20
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7ff ff4b 	bl	80026e2 <modify_reg>
 800284c:	4603      	mov	r3, r0
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	cccccccd 	.word	0xcccccccd

0800285c <max17048_set_overvolted_voltage>:
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	460b      	mov	r3, r1
 8002866:	807b      	strh	r3, [r7, #2]
 8002868:	887b      	ldrh	r3, [r7, #2]
 800286a:	4a09      	ldr	r2, [pc, #36]	; (8002890 <max17048_set_overvolted_voltage+0x34>)
 800286c:	fba2 2303 	umull	r2, r3, r2, r3
 8002870:	091b      	lsrs	r3, r3, #4
 8002872:	b29b      	uxth	r3, r3
 8002874:	b2db      	uxtb	r3, r3
 8002876:	81fb      	strh	r3, [r7, #14]
 8002878:	89fa      	ldrh	r2, [r7, #14]
 800287a:	23ff      	movs	r3, #255	; 0xff
 800287c:	2114      	movs	r1, #20
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7ff ff2f 	bl	80026e2 <modify_reg>
 8002884:	4603      	mov	r3, r0
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	cccccccd 	.word	0xcccccccd

08002894 <max17048_set_reset_voltage>:
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	460b      	mov	r3, r1
 800289e:	807b      	strh	r3, [r7, #2]
 80028a0:	887b      	ldrh	r3, [r7, #2]
 80028a2:	4a0c      	ldr	r2, [pc, #48]	; (80028d4 <max17048_set_reset_voltage+0x40>)
 80028a4:	fba2 2303 	umull	r2, r3, r2, r3
 80028a8:	095b      	lsrs	r3, r3, #5
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	025b      	lsls	r3, r3, #9
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80028b4:	f023 0301 	bic.w	r3, r3, #1
 80028b8:	81fb      	strh	r3, [r7, #14]
 80028ba:	89fa      	ldrh	r2, [r7, #14]
 80028bc:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 80028c0:	2118      	movs	r1, #24
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7ff ff0d 	bl	80026e2 <modify_reg>
 80028c8:	4603      	mov	r3, r0
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	cccccccd 	.word	0xcccccccd

080028d8 <max17048_set_soc_change_alert>:
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	70fb      	strb	r3, [r7, #3]
 80028e4:	78fb      	ldrb	r3, [r7, #3]
 80028e6:	019b      	lsls	r3, r3, #6
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ee:	81fb      	strh	r3, [r7, #14]
 80028f0:	89fa      	ldrh	r2, [r7, #14]
 80028f2:	2340      	movs	r3, #64	; 0x40
 80028f4:	210c      	movs	r1, #12
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7ff fef3 	bl	80026e2 <modify_reg>
 80028fc:	4603      	mov	r3, r0
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <max17048_set_voltage_reset_alert>:
 8002906:	b580      	push	{r7, lr}
 8002908:	b084      	sub	sp, #16
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
 800290e:	460b      	mov	r3, r1
 8002910:	70fb      	strb	r3, [r7, #3]
 8002912:	78fb      	ldrb	r3, [r7, #3]
 8002914:	039b      	lsls	r3, r3, #14
 8002916:	b29b      	uxth	r3, r3
 8002918:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800291c:	81fb      	strh	r3, [r7, #14]
 800291e:	89fa      	ldrh	r2, [r7, #14]
 8002920:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002924:	211a      	movs	r1, #26
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7ff fedb 	bl	80026e2 <modify_reg>
 800292c:	4603      	mov	r3, r0
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <max17048_clear_alerts>:
 8002936:	b580      	push	{r7, lr}
 8002938:	b084      	sub	sp, #16
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
 800293e:	2301      	movs	r3, #1
 8002940:	73fb      	strb	r3, [r7, #15]
 8002942:	7bfb      	ldrb	r3, [r7, #15]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d008      	beq.n	800295a <max17048_clear_alerts+0x24>
 8002948:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 800294c:	2200      	movs	r2, #0
 800294e:	211a      	movs	r1, #26
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7ff fec6 	bl	80026e2 <modify_reg>
 8002956:	4603      	mov	r3, r0
 8002958:	73fb      	strb	r3, [r7, #15]
 800295a:	7bfb      	ldrb	r3, [r7, #15]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d007      	beq.n	8002970 <max17048_clear_alerts+0x3a>
 8002960:	2320      	movs	r3, #32
 8002962:	2200      	movs	r2, #0
 8002964:	210c      	movs	r1, #12
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7ff febb 	bl	80026e2 <modify_reg>
 800296c:	4603      	mov	r3, r0
 800296e:	73fb      	strb	r3, [r7, #15]
 8002970:	7bfb      	ldrb	r3, [r7, #15]
 8002972:	4618      	mov	r0, r3
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <HAL_MspInit>:
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	4b0f      	ldr	r3, [pc, #60]	; (80029c0 <HAL_MspInit+0x44>)
 8002984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002986:	4a0e      	ldr	r2, [pc, #56]	; (80029c0 <HAL_MspInit+0x44>)
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	6613      	str	r3, [r2, #96]	; 0x60
 800298e:	4b0c      	ldr	r3, [pc, #48]	; (80029c0 <HAL_MspInit+0x44>)
 8002990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	607b      	str	r3, [r7, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4b09      	ldr	r3, [pc, #36]	; (80029c0 <HAL_MspInit+0x44>)
 800299c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800299e:	4a08      	ldr	r2, [pc, #32]	; (80029c0 <HAL_MspInit+0x44>)
 80029a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029a4:	6593      	str	r3, [r2, #88]	; 0x58
 80029a6:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <HAL_MspInit+0x44>)
 80029a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ae:	603b      	str	r3, [r7, #0]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	40021000 	.word	0x40021000

080029c4 <HAL_ADC_MspInit>:
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b0a0      	sub	sp, #128	; 0x80
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	605a      	str	r2, [r3, #4]
 80029d6:	609a      	str	r2, [r3, #8]
 80029d8:	60da      	str	r2, [r3, #12]
 80029da:	611a      	str	r2, [r3, #16]
 80029dc:	f107 0310 	add.w	r3, r7, #16
 80029e0:	225c      	movs	r2, #92	; 0x5c
 80029e2:	2100      	movs	r1, #0
 80029e4:	4618      	mov	r0, r3
 80029e6:	f005 faa7 	bl	8007f38 <memset>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a1e      	ldr	r2, [pc, #120]	; (8002a68 <HAL_ADC_MspInit+0xa4>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d134      	bne.n	8002a5e <HAL_ADC_MspInit+0x9a>
 80029f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029f8:	613b      	str	r3, [r7, #16]
 80029fa:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80029fe:	663b      	str	r3, [r7, #96]	; 0x60
 8002a00:	f107 0310 	add.w	r3, r7, #16
 8002a04:	4618      	mov	r0, r3
 8002a06:	f003 fcfd 	bl	8006404 <HAL_RCCEx_PeriphCLKConfig>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <HAL_ADC_MspInit+0x50>
 8002a10:	f7ff fddc 	bl	80025cc <Error_Handler>
 8002a14:	4b15      	ldr	r3, [pc, #84]	; (8002a6c <HAL_ADC_MspInit+0xa8>)
 8002a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a18:	4a14      	ldr	r2, [pc, #80]	; (8002a6c <HAL_ADC_MspInit+0xa8>)
 8002a1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a20:	4b12      	ldr	r3, [pc, #72]	; (8002a6c <HAL_ADC_MspInit+0xa8>)
 8002a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	4b0f      	ldr	r3, [pc, #60]	; (8002a6c <HAL_ADC_MspInit+0xa8>)
 8002a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a30:	4a0e      	ldr	r2, [pc, #56]	; (8002a6c <HAL_ADC_MspInit+0xa8>)
 8002a32:	f043 0301 	orr.w	r3, r3, #1
 8002a36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a38:	4b0c      	ldr	r3, [pc, #48]	; (8002a6c <HAL_ADC_MspInit+0xa8>)
 8002a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	2310      	movs	r3, #16
 8002a46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a48:	230b      	movs	r3, #11
 8002a4a:	673b      	str	r3, [r7, #112]	; 0x70
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	677b      	str	r3, [r7, #116]	; 0x74
 8002a50:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a54:	4619      	mov	r1, r3
 8002a56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a5a:	f001 feb1 	bl	80047c0 <HAL_GPIO_Init>
 8002a5e:	bf00      	nop
 8002a60:	3780      	adds	r7, #128	; 0x80
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	50040000 	.word	0x50040000
 8002a6c:	40021000 	.word	0x40021000

08002a70 <HAL_I2C_MspInit>:
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b0a0      	sub	sp, #128	; 0x80
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	605a      	str	r2, [r3, #4]
 8002a82:	609a      	str	r2, [r3, #8]
 8002a84:	60da      	str	r2, [r3, #12]
 8002a86:	611a      	str	r2, [r3, #16]
 8002a88:	f107 0310 	add.w	r3, r7, #16
 8002a8c:	225c      	movs	r2, #92	; 0x5c
 8002a8e:	2100      	movs	r1, #0
 8002a90:	4618      	mov	r0, r3
 8002a92:	f005 fa51 	bl	8007f38 <memset>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a1f      	ldr	r2, [pc, #124]	; (8002b18 <HAL_I2C_MspInit+0xa8>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d137      	bne.n	8002b10 <HAL_I2C_MspInit+0xa0>
 8002aa0:	2340      	movs	r3, #64	; 0x40
 8002aa2:	613b      	str	r3, [r7, #16]
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	643b      	str	r3, [r7, #64]	; 0x40
 8002aa8:	f107 0310 	add.w	r3, r7, #16
 8002aac:	4618      	mov	r0, r3
 8002aae:	f003 fca9 	bl	8006404 <HAL_RCCEx_PeriphCLKConfig>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <HAL_I2C_MspInit+0x4c>
 8002ab8:	f7ff fd88 	bl	80025cc <Error_Handler>
 8002abc:	4b17      	ldr	r3, [pc, #92]	; (8002b1c <HAL_I2C_MspInit+0xac>)
 8002abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac0:	4a16      	ldr	r2, [pc, #88]	; (8002b1c <HAL_I2C_MspInit+0xac>)
 8002ac2:	f043 0301 	orr.w	r3, r3, #1
 8002ac6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ac8:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <HAL_I2C_MspInit+0xac>)
 8002aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ad8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ada:	2312      	movs	r3, #18
 8002adc:	673b      	str	r3, [r7, #112]	; 0x70
 8002ade:	2300      	movs	r3, #0
 8002ae0:	677b      	str	r3, [r7, #116]	; 0x74
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ae6:	2304      	movs	r3, #4
 8002ae8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002aea:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002aee:	4619      	mov	r1, r3
 8002af0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002af4:	f001 fe64 	bl	80047c0 <HAL_GPIO_Init>
 8002af8:	4b08      	ldr	r3, [pc, #32]	; (8002b1c <HAL_I2C_MspInit+0xac>)
 8002afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afc:	4a07      	ldr	r2, [pc, #28]	; (8002b1c <HAL_I2C_MspInit+0xac>)
 8002afe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b02:	6593      	str	r3, [r2, #88]	; 0x58
 8002b04:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <HAL_I2C_MspInit+0xac>)
 8002b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b0c:	60bb      	str	r3, [r7, #8]
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	bf00      	nop
 8002b12:	3780      	adds	r7, #128	; 0x80
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40005400 	.word	0x40005400
 8002b1c:	40021000 	.word	0x40021000

08002b20 <HAL_TIM_Base_MspInit>:
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a23      	ldr	r2, [pc, #140]	; (8002bbc <HAL_TIM_Base_MspInit+0x9c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d114      	bne.n	8002b5c <HAL_TIM_Base_MspInit+0x3c>
 8002b32:	4b23      	ldr	r3, [pc, #140]	; (8002bc0 <HAL_TIM_Base_MspInit+0xa0>)
 8002b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b36:	4a22      	ldr	r2, [pc, #136]	; (8002bc0 <HAL_TIM_Base_MspInit+0xa0>)
 8002b38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b3c:	6613      	str	r3, [r2, #96]	; 0x60
 8002b3e:	4b20      	ldr	r3, [pc, #128]	; (8002bc0 <HAL_TIM_Base_MspInit+0xa0>)
 8002b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b46:	617b      	str	r3, [r7, #20]
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	2018      	movs	r0, #24
 8002b50:	f001 fdff 	bl	8004752 <HAL_NVIC_SetPriority>
 8002b54:	2018      	movs	r0, #24
 8002b56:	f001 fe18 	bl	800478a <HAL_NVIC_EnableIRQ>
 8002b5a:	e02a      	b.n	8002bb2 <HAL_TIM_Base_MspInit+0x92>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b64:	d10c      	bne.n	8002b80 <HAL_TIM_Base_MspInit+0x60>
 8002b66:	4b16      	ldr	r3, [pc, #88]	; (8002bc0 <HAL_TIM_Base_MspInit+0xa0>)
 8002b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6a:	4a15      	ldr	r2, [pc, #84]	; (8002bc0 <HAL_TIM_Base_MspInit+0xa0>)
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	6593      	str	r3, [r2, #88]	; 0x58
 8002b72:	4b13      	ldr	r3, [pc, #76]	; (8002bc0 <HAL_TIM_Base_MspInit+0xa0>)
 8002b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	613b      	str	r3, [r7, #16]
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	e018      	b.n	8002bb2 <HAL_TIM_Base_MspInit+0x92>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a0f      	ldr	r2, [pc, #60]	; (8002bc4 <HAL_TIM_Base_MspInit+0xa4>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d113      	bne.n	8002bb2 <HAL_TIM_Base_MspInit+0x92>
 8002b8a:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <HAL_TIM_Base_MspInit+0xa0>)
 8002b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b8e:	4a0c      	ldr	r2, [pc, #48]	; (8002bc0 <HAL_TIM_Base_MspInit+0xa0>)
 8002b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b94:	6613      	str	r3, [r2, #96]	; 0x60
 8002b96:	4b0a      	ldr	r3, [pc, #40]	; (8002bc0 <HAL_TIM_Base_MspInit+0xa0>)
 8002b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	2018      	movs	r0, #24
 8002ba8:	f001 fdd3 	bl	8004752 <HAL_NVIC_SetPriority>
 8002bac:	2018      	movs	r0, #24
 8002bae:	f001 fdec 	bl	800478a <HAL_NVIC_EnableIRQ>
 8002bb2:	bf00      	nop
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40012c00 	.word	0x40012c00
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	40014000 	.word	0x40014000

08002bc8 <HAL_TIM_MspPostInit>:
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08a      	sub	sp, #40	; 0x28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	f107 0314 	add.w	r3, r7, #20
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	611a      	str	r2, [r3, #16]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a23      	ldr	r2, [pc, #140]	; (8002c74 <HAL_TIM_MspPostInit+0xac>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d11e      	bne.n	8002c28 <HAL_TIM_MspPostInit+0x60>
 8002bea:	4b23      	ldr	r3, [pc, #140]	; (8002c78 <HAL_TIM_MspPostInit+0xb0>)
 8002bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bee:	4a22      	ldr	r2, [pc, #136]	; (8002c78 <HAL_TIM_MspPostInit+0xb0>)
 8002bf0:	f043 0301 	orr.w	r3, r3, #1
 8002bf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bf6:	4b20      	ldr	r3, [pc, #128]	; (8002c78 <HAL_TIM_MspPostInit+0xb0>)
 8002bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	613b      	str	r3, [r7, #16]
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	2302      	movs	r3, #2
 8002c0a:	61bb      	str	r3, [r7, #24]
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	61fb      	str	r3, [r7, #28]
 8002c10:	2300      	movs	r3, #0
 8002c12:	623b      	str	r3, [r7, #32]
 8002c14:	2301      	movs	r3, #1
 8002c16:	627b      	str	r3, [r7, #36]	; 0x24
 8002c18:	f107 0314 	add.w	r3, r7, #20
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c22:	f001 fdcd 	bl	80047c0 <HAL_GPIO_Init>
 8002c26:	e021      	b.n	8002c6c <HAL_TIM_MspPostInit+0xa4>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c30:	d11c      	bne.n	8002c6c <HAL_TIM_MspPostInit+0xa4>
 8002c32:	4b11      	ldr	r3, [pc, #68]	; (8002c78 <HAL_TIM_MspPostInit+0xb0>)
 8002c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c36:	4a10      	ldr	r2, [pc, #64]	; (8002c78 <HAL_TIM_MspPostInit+0xb0>)
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c3e:	4b0e      	ldr	r3, [pc, #56]	; (8002c78 <HAL_TIM_MspPostInit+0xb0>)
 8002c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2307      	movs	r3, #7
 8002c4c:	617b      	str	r3, [r7, #20]
 8002c4e:	2302      	movs	r3, #2
 8002c50:	61bb      	str	r3, [r7, #24]
 8002c52:	2300      	movs	r3, #0
 8002c54:	61fb      	str	r3, [r7, #28]
 8002c56:	2300      	movs	r3, #0
 8002c58:	623b      	str	r3, [r7, #32]
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c5e:	f107 0314 	add.w	r3, r7, #20
 8002c62:	4619      	mov	r1, r3
 8002c64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c68:	f001 fdaa 	bl	80047c0 <HAL_GPIO_Init>
 8002c6c:	bf00      	nop
 8002c6e:	3728      	adds	r7, #40	; 0x28
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	40012c00 	.word	0x40012c00
 8002c78:	40021000 	.word	0x40021000

08002c7c <NMI_Handler>:
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	e7fe      	b.n	8002c80 <NMI_Handler+0x4>

08002c82 <HardFault_Handler>:
 8002c82:	b480      	push	{r7}
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	e7fe      	b.n	8002c86 <HardFault_Handler+0x4>

08002c88 <MemManage_Handler>:
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	e7fe      	b.n	8002c8c <MemManage_Handler+0x4>

08002c8e <BusFault_Handler>:
 8002c8e:	b480      	push	{r7}
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	e7fe      	b.n	8002c92 <BusFault_Handler+0x4>

08002c94 <UsageFault_Handler>:
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	e7fe      	b.n	8002c98 <UsageFault_Handler+0x4>

08002c9a <SVC_Handler>:
 8002c9a:	b480      	push	{r7}
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	bf00      	nop
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <DebugMon_Handler>:
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	bf00      	nop
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <PendSV_Handler>:
 8002cb6:	b480      	push	{r7}
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	bf00      	nop
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <SysTick_Handler>:
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	f000 f976 	bl	8002fb8 <HAL_IncTick>
 8002ccc:	bf00      	nop
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <EXTI9_5_IRQHandler>:
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	2080      	movs	r0, #128	; 0x80
 8002cd6:	f001 ff1d 	bl	8004b14 <HAL_GPIO_EXTI_IRQHandler>
 8002cda:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002cde:	f001 ff19 	bl	8004b14 <HAL_GPIO_EXTI_IRQHandler>
 8002ce2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002ce6:	f001 ff15 	bl	8004b14 <HAL_GPIO_EXTI_IRQHandler>
 8002cea:	bf00      	nop
 8002cec:	bd80      	pop	{r7, pc}
	...

08002cf0 <TIM1_BRK_TIM15_IRQHandler>:
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	4803      	ldr	r0, [pc, #12]	; (8002d04 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8002cf6:	f004 f931 	bl	8006f5c <HAL_TIM_IRQHandler>
 8002cfa:	4803      	ldr	r0, [pc, #12]	; (8002d08 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8002cfc:	f004 f92e 	bl	8006f5c <HAL_TIM_IRQHandler>
 8002d00:	bf00      	nop
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	20000348 	.word	0x20000348
 8002d08:	200003e0 	.word	0x200003e0

08002d0c <_getpid>:
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	2301      	movs	r3, #1
 8002d12:	4618      	mov	r0, r3
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <_kill>:
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
 8002d26:	f005 f8dd 	bl	8007ee4 <__errno>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2216      	movs	r2, #22
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	f04f 33ff 	mov.w	r3, #4294967295
 8002d34:	4618      	mov	r0, r3
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <_exit>:
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	f04f 31ff 	mov.w	r1, #4294967295
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f7ff ffe7 	bl	8002d1c <_kill>
 8002d4e:	e7fe      	b.n	8002d4e <_exit+0x12>

08002d50 <_read>:
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	e00a      	b.n	8002d78 <_read+0x28>
 8002d62:	f3af 8000 	nop.w
 8002d66:	4601      	mov	r1, r0
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	1c5a      	adds	r2, r3, #1
 8002d6c:	60ba      	str	r2, [r7, #8]
 8002d6e:	b2ca      	uxtb	r2, r1
 8002d70:	701a      	strb	r2, [r3, #0]
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	3301      	adds	r3, #1
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	dbf0      	blt.n	8002d62 <_read+0x12>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4618      	mov	r0, r3
 8002d84:	3718      	adds	r7, #24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <_write>:
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b086      	sub	sp, #24
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	60f8      	str	r0, [r7, #12]
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	607a      	str	r2, [r7, #4]
 8002d96:	2300      	movs	r3, #0
 8002d98:	617b      	str	r3, [r7, #20]
 8002d9a:	e009      	b.n	8002db0 <_write+0x26>
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	1c5a      	adds	r2, r3, #1
 8002da0:	60ba      	str	r2, [r7, #8]
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f3af 8000 	nop.w
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	3301      	adds	r3, #1
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	dbf1      	blt.n	8002d9c <_write+0x12>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3718      	adds	r7, #24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <_close>:
 8002dc2:	b480      	push	{r7}
 8002dc4:	b083      	sub	sp, #12
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	f04f 33ff 	mov.w	r3, #4294967295
 8002dce:	4618      	mov	r0, r3
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <_fstat>:
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
 8002de2:	6039      	str	r1, [r7, #0]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dea:	605a      	str	r2, [r3, #4]
 8002dec:	2300      	movs	r3, #0
 8002dee:	4618      	mov	r0, r3
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <_isatty>:
 8002dfa:	b480      	push	{r7}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
 8002e02:	2301      	movs	r3, #1
 8002e04:	4618      	mov	r0, r3
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <_lseek>:
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3714      	adds	r7, #20
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
	...

08002e2c <_sbrk>:
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	4a14      	ldr	r2, [pc, #80]	; (8002e88 <_sbrk+0x5c>)
 8002e36:	4b15      	ldr	r3, [pc, #84]	; (8002e8c <_sbrk+0x60>)
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	4b13      	ldr	r3, [pc, #76]	; (8002e90 <_sbrk+0x64>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d102      	bne.n	8002e4e <_sbrk+0x22>
 8002e48:	4b11      	ldr	r3, [pc, #68]	; (8002e90 <_sbrk+0x64>)
 8002e4a:	4a12      	ldr	r2, [pc, #72]	; (8002e94 <_sbrk+0x68>)
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	4b10      	ldr	r3, [pc, #64]	; (8002e90 <_sbrk+0x64>)
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4413      	add	r3, r2
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d207      	bcs.n	8002e6c <_sbrk+0x40>
 8002e5c:	f005 f842 	bl	8007ee4 <__errno>
 8002e60:	4603      	mov	r3, r0
 8002e62:	220c      	movs	r2, #12
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	f04f 33ff 	mov.w	r3, #4294967295
 8002e6a:	e009      	b.n	8002e80 <_sbrk+0x54>
 8002e6c:	4b08      	ldr	r3, [pc, #32]	; (8002e90 <_sbrk+0x64>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	4b07      	ldr	r3, [pc, #28]	; (8002e90 <_sbrk+0x64>)
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4413      	add	r3, r2
 8002e7a:	4a05      	ldr	r2, [pc, #20]	; (8002e90 <_sbrk+0x64>)
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	4618      	mov	r0, r3
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	20010000 	.word	0x20010000
 8002e8c:	00000400 	.word	0x00000400
 8002e90:	20000438 	.word	0x20000438
 8002e94:	20000450 	.word	0x20000450

08002e98 <SystemInit>:
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <SystemInit+0x20>)
 8002e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea2:	4a05      	ldr	r2, [pc, #20]	; (8002eb8 <SystemInit+0x20>)
 8002ea4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ea8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002eac:	bf00      	nop
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	e000ed00 	.word	0xe000ed00

08002ebc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002ebc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ef4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ec0:	f7ff ffea 	bl	8002e98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ec4:	480c      	ldr	r0, [pc, #48]	; (8002ef8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ec6:	490d      	ldr	r1, [pc, #52]	; (8002efc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ec8:	4a0d      	ldr	r2, [pc, #52]	; (8002f00 <LoopForever+0xe>)
  movs r3, #0
 8002eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ecc:	e002      	b.n	8002ed4 <LoopCopyDataInit>

08002ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ed2:	3304      	adds	r3, #4

08002ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ed8:	d3f9      	bcc.n	8002ece <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eda:	4a0a      	ldr	r2, [pc, #40]	; (8002f04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002edc:	4c0a      	ldr	r4, [pc, #40]	; (8002f08 <LoopForever+0x16>)
  movs r3, #0
 8002ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ee0:	e001      	b.n	8002ee6 <LoopFillZerobss>

08002ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ee4:	3204      	adds	r2, #4

08002ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ee8:	d3fb      	bcc.n	8002ee2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002eea:	f005 f801 	bl	8007ef0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002eee:	f7fe feb7 	bl	8001c60 <main>

08002ef2 <LoopForever>:

LoopForever:
    b LoopForever
 8002ef2:	e7fe      	b.n	8002ef2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002ef4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002efc:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002f00:	0800d124 	.word	0x0800d124
  ldr r2, =_sbss
 8002f04:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002f08:	20000450 	.word	0x20000450

08002f0c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f0c:	e7fe      	b.n	8002f0c <ADC1_IRQHandler>

08002f0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f14:	2300      	movs	r3, #0
 8002f16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f18:	2003      	movs	r0, #3
 8002f1a:	f001 fc0f 	bl	800473c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f1e:	200f      	movs	r0, #15
 8002f20:	f000 f80e 	bl	8002f40 <HAL_InitTick>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d002      	beq.n	8002f30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	71fb      	strb	r3, [r7, #7]
 8002f2e:	e001      	b.n	8002f34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f30:	f7ff fd24 	bl	800297c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f34:	79fb      	ldrb	r3, [r7, #7]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002f4c:	4b17      	ldr	r3, [pc, #92]	; (8002fac <HAL_InitTick+0x6c>)
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d023      	beq.n	8002f9c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002f54:	4b16      	ldr	r3, [pc, #88]	; (8002fb0 <HAL_InitTick+0x70>)
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	4b14      	ldr	r3, [pc, #80]	; (8002fac <HAL_InitTick+0x6c>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f62:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f001 fc1b 	bl	80047a6 <HAL_SYSTICK_Config>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10f      	bne.n	8002f96 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b0f      	cmp	r3, #15
 8002f7a:	d809      	bhi.n	8002f90 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	f04f 30ff 	mov.w	r0, #4294967295
 8002f84:	f001 fbe5 	bl	8004752 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f88:	4a0a      	ldr	r2, [pc, #40]	; (8002fb4 <HAL_InitTick+0x74>)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	e007      	b.n	8002fa0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	73fb      	strb	r3, [r7, #15]
 8002f94:	e004      	b.n	8002fa0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	73fb      	strb	r3, [r7, #15]
 8002f9a:	e001      	b.n	8002fa0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	20000014 	.word	0x20000014
 8002fb0:	2000000c 	.word	0x2000000c
 8002fb4:	20000010 	.word	0x20000010

08002fb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fbc:	4b06      	ldr	r3, [pc, #24]	; (8002fd8 <HAL_IncTick+0x20>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4b06      	ldr	r3, [pc, #24]	; (8002fdc <HAL_IncTick+0x24>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	4a04      	ldr	r2, [pc, #16]	; (8002fdc <HAL_IncTick+0x24>)
 8002fca:	6013      	str	r3, [r2, #0]
}
 8002fcc:	bf00      	nop
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	20000014 	.word	0x20000014
 8002fdc:	2000043c 	.word	0x2000043c

08002fe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fe4:	4b03      	ldr	r3, [pc, #12]	; (8002ff4 <HAL_GetTick+0x14>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	2000043c 	.word	0x2000043c

08002ff8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003000:	f7ff ffee 	bl	8002fe0 <HAL_GetTick>
 8003004:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003010:	d005      	beq.n	800301e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003012:	4b0a      	ldr	r3, [pc, #40]	; (800303c <HAL_Delay+0x44>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	461a      	mov	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4413      	add	r3, r2
 800301c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800301e:	bf00      	nop
 8003020:	f7ff ffde 	bl	8002fe0 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	429a      	cmp	r2, r3
 800302e:	d8f7      	bhi.n	8003020 <HAL_Delay+0x28>
  {
  }
}
 8003030:	bf00      	nop
 8003032:	bf00      	nop
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	20000014 	.word	0x20000014

08003040 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8003044:	4b05      	ldr	r3, [pc, #20]	; (800305c <HAL_ResumeTick+0x1c>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a04      	ldr	r2, [pc, #16]	; (800305c <HAL_ResumeTick+0x1c>)
 800304a:	f043 0302 	orr.w	r3, r3, #2
 800304e:	6013      	str	r3, [r2, #0]
}
 8003050:	bf00      	nop
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	e000e010 	.word	0xe000e010

08003060 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	431a      	orrs	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	609a      	str	r2, [r3, #8]
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
 800308e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	609a      	str	r2, [r3, #8]
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80030bc:	4618      	mov	r0, r3
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b087      	sub	sp, #28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
 80030d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	3360      	adds	r3, #96	; 0x60
 80030da:	461a      	mov	r2, r3
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4413      	add	r3, r2
 80030e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	4b08      	ldr	r3, [pc, #32]	; (800310c <LL_ADC_SetOffset+0x44>)
 80030ea:	4013      	ands	r3, r2
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	4313      	orrs	r3, r2
 80030f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003100:	bf00      	nop
 8003102:	371c      	adds	r7, #28
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	03fff000 	.word	0x03fff000

08003110 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	3360      	adds	r3, #96	; 0x60
 800311e:	461a      	mov	r2, r3
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003130:	4618      	mov	r0, r3
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800313c:	b480      	push	{r7}
 800313e:	b087      	sub	sp, #28
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	3360      	adds	r3, #96	; 0x60
 800314c:	461a      	mov	r2, r3
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	431a      	orrs	r2, r3
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003166:	bf00      	nop
 8003168:	371c      	adds	r7, #28
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003186:	2301      	movs	r3, #1
 8003188:	e000      	b.n	800318c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003198:	b480      	push	{r7}
 800319a:	b087      	sub	sp, #28
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	3330      	adds	r3, #48	; 0x30
 80031a8:	461a      	mov	r2, r3
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	0a1b      	lsrs	r3, r3, #8
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	f003 030c 	and.w	r3, r3, #12
 80031b4:	4413      	add	r3, r2
 80031b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	f003 031f 	and.w	r3, r3, #31
 80031c2:	211f      	movs	r1, #31
 80031c4:	fa01 f303 	lsl.w	r3, r1, r3
 80031c8:	43db      	mvns	r3, r3
 80031ca:	401a      	ands	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	0e9b      	lsrs	r3, r3, #26
 80031d0:	f003 011f 	and.w	r1, r3, #31
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	f003 031f 	and.w	r3, r3, #31
 80031da:	fa01 f303 	lsl.w	r3, r1, r3
 80031de:	431a      	orrs	r2, r3
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80031e4:	bf00      	nop
 80031e6:	371c      	adds	r7, #28
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b087      	sub	sp, #28
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	3314      	adds	r3, #20
 8003200:	461a      	mov	r2, r3
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	0e5b      	lsrs	r3, r3, #25
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	4413      	add	r3, r2
 800320e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	0d1b      	lsrs	r3, r3, #20
 8003218:	f003 031f 	and.w	r3, r3, #31
 800321c:	2107      	movs	r1, #7
 800321e:	fa01 f303 	lsl.w	r3, r1, r3
 8003222:	43db      	mvns	r3, r3
 8003224:	401a      	ands	r2, r3
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	0d1b      	lsrs	r3, r3, #20
 800322a:	f003 031f 	and.w	r3, r3, #31
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	fa01 f303 	lsl.w	r3, r1, r3
 8003234:	431a      	orrs	r2, r3
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800323a:	bf00      	nop
 800323c:	371c      	adds	r7, #28
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
	...

08003248 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003260:	43db      	mvns	r3, r3
 8003262:	401a      	ands	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f003 0318 	and.w	r3, r3, #24
 800326a:	4908      	ldr	r1, [pc, #32]	; (800328c <LL_ADC_SetChannelSingleDiff+0x44>)
 800326c:	40d9      	lsrs	r1, r3
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	400b      	ands	r3, r1
 8003272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003276:	431a      	orrs	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800327e:	bf00      	nop
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	0007ffff 	.word	0x0007ffff

08003290 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80032a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6093      	str	r3, [r2, #8]
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032c8:	d101      	bne.n	80032ce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80032ca:	2301      	movs	r3, #1
 80032cc:	e000      	b.n	80032d0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80032ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80032f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003314:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003318:	d101      	bne.n	800331e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800333c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003340:	f043 0201 	orr.w	r2, r3, #1
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003364:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003368:	f043 0202 	orr.w	r2, r3, #2
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b01      	cmp	r3, #1
 800338e:	d101      	bne.n	8003394 <LL_ADC_IsEnabled+0x18>
 8003390:	2301      	movs	r3, #1
 8003392:	e000      	b.n	8003396 <LL_ADC_IsEnabled+0x1a>
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d101      	bne.n	80033ba <LL_ADC_IsDisableOngoing+0x18>
 80033b6:	2301      	movs	r3, #1
 80033b8:	e000      	b.n	80033bc <LL_ADC_IsDisableOngoing+0x1a>
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80033d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033dc:	f043 0204 	orr.w	r2, r3, #4
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003400:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003404:	f043 0210 	orr.w	r2, r3, #16
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	2b04      	cmp	r3, #4
 800342a:	d101      	bne.n	8003430 <LL_ADC_REG_IsConversionOngoing+0x18>
 800342c:	2301      	movs	r3, #1
 800342e:	e000      	b.n	8003432 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800343e:	b480      	push	{r7}
 8003440:	b083      	sub	sp, #12
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800344e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003452:	f043 0220 	orr.w	r2, r3, #32
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800345a:	bf00      	nop
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	2b08      	cmp	r3, #8
 8003478:	d101      	bne.n	800347e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800347a:	2301      	movs	r3, #1
 800347c:	e000      	b.n	8003480 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b088      	sub	sp, #32
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003494:	2300      	movs	r3, #0
 8003496:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003498:	2300      	movs	r3, #0
 800349a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e12c      	b.n	8003700 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d109      	bne.n	80034c8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7ff fa85 	bl	80029c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff fef1 	bl	80032b4 <LL_ADC_IsDeepPowerDownEnabled>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d004      	beq.n	80034e2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff fed7 	bl	8003290 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7ff ff0c 	bl	8003304 <LL_ADC_IsInternalRegulatorEnabled>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d115      	bne.n	800351e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff fef0 	bl	80032dc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034fc:	4b82      	ldr	r3, [pc, #520]	; (8003708 <HAL_ADC_Init+0x27c>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	099b      	lsrs	r3, r3, #6
 8003502:	4a82      	ldr	r2, [pc, #520]	; (800370c <HAL_ADC_Init+0x280>)
 8003504:	fba2 2303 	umull	r2, r3, r2, r3
 8003508:	099b      	lsrs	r3, r3, #6
 800350a:	3301      	adds	r3, #1
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003510:	e002      	b.n	8003518 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	3b01      	subs	r3, #1
 8003516:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f9      	bne.n	8003512 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff feee 	bl	8003304 <LL_ADC_IsInternalRegulatorEnabled>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10d      	bne.n	800354a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003532:	f043 0210 	orr.w	r2, r3, #16
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353e:	f043 0201 	orr.w	r2, r3, #1
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f7ff ff62 	bl	8003418 <LL_ADC_REG_IsConversionOngoing>
 8003554:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355a:	f003 0310 	and.w	r3, r3, #16
 800355e:	2b00      	cmp	r3, #0
 8003560:	f040 80c5 	bne.w	80036ee <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	2b00      	cmp	r3, #0
 8003568:	f040 80c1 	bne.w	80036ee <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003570:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003574:	f043 0202 	orr.w	r2, r3, #2
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff fefb 	bl	800337c <LL_ADC_IsEnabled>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10b      	bne.n	80035a4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800358c:	4860      	ldr	r0, [pc, #384]	; (8003710 <HAL_ADC_Init+0x284>)
 800358e:	f7ff fef5 	bl	800337c <LL_ADC_IsEnabled>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d105      	bne.n	80035a4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	4619      	mov	r1, r3
 800359e:	485d      	ldr	r0, [pc, #372]	; (8003714 <HAL_ADC_Init+0x288>)
 80035a0:	f7ff fd5e 	bl	8003060 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	7e5b      	ldrb	r3, [r3, #25]
 80035a8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80035ae:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80035b4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80035ba:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035c2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80035c4:	4313      	orrs	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d106      	bne.n	80035e0 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	3b01      	subs	r3, #1
 80035d8:	045b      	lsls	r3, r3, #17
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	4313      	orrs	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d009      	beq.n	80035fc <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ec:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68da      	ldr	r2, [r3, #12]
 8003602:	4b45      	ldr	r3, [pc, #276]	; (8003718 <HAL_ADC_Init+0x28c>)
 8003604:	4013      	ands	r3, r2
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	6812      	ldr	r2, [r2, #0]
 800360a:	69b9      	ldr	r1, [r7, #24]
 800360c:	430b      	orrs	r3, r1
 800360e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff feff 	bl	8003418 <LL_ADC_REG_IsConversionOngoing>
 800361a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4618      	mov	r0, r3
 8003622:	f7ff ff20 	bl	8003466 <LL_ADC_INJ_IsConversionOngoing>
 8003626:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d13d      	bne.n	80036aa <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d13a      	bne.n	80036aa <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003638:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003640:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003642:	4313      	orrs	r3, r2
 8003644:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003650:	f023 0302 	bic.w	r3, r3, #2
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	6812      	ldr	r2, [r2, #0]
 8003658:	69b9      	ldr	r1, [r7, #24]
 800365a:	430b      	orrs	r3, r1
 800365c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003664:	2b01      	cmp	r3, #1
 8003666:	d118      	bne.n	800369a <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003672:	f023 0304 	bic.w	r3, r3, #4
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800367e:	4311      	orrs	r1, r2
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003684:	4311      	orrs	r1, r2
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800368a:	430a      	orrs	r2, r1
 800368c:	431a      	orrs	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f042 0201 	orr.w	r2, r2, #1
 8003696:	611a      	str	r2, [r3, #16]
 8003698:	e007      	b.n	80036aa <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	691a      	ldr	r2, [r3, #16]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0201 	bic.w	r2, r2, #1
 80036a8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d10c      	bne.n	80036cc <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b8:	f023 010f 	bic.w	r1, r3, #15
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	1e5a      	subs	r2, r3, #1
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	631a      	str	r2, [r3, #48]	; 0x30
 80036ca:	e007      	b.n	80036dc <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 020f 	bic.w	r2, r2, #15
 80036da:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e0:	f023 0303 	bic.w	r3, r3, #3
 80036e4:	f043 0201 	orr.w	r2, r3, #1
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	655a      	str	r2, [r3, #84]	; 0x54
 80036ec:	e007      	b.n	80036fe <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f2:	f043 0210 	orr.w	r2, r3, #16
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80036fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8003700:	4618      	mov	r0, r3
 8003702:	3720      	adds	r7, #32
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	2000000c 	.word	0x2000000c
 800370c:	053e2d63 	.word	0x053e2d63
 8003710:	50040000 	.word	0x50040000
 8003714:	50040300 	.word	0x50040300
 8003718:	fff0c007 	.word	0xfff0c007

0800371c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f7ff fe75 	bl	8003418 <LL_ADC_REG_IsConversionOngoing>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d14f      	bne.n	80037d4 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800373a:	2b01      	cmp	r3, #1
 800373c:	d101      	bne.n	8003742 <HAL_ADC_Start+0x26>
 800373e:	2302      	movs	r3, #2
 8003740:	e04b      	b.n	80037da <HAL_ADC_Start+0xbe>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 fdb4 	bl	80042b8 <ADC_Enable>
 8003750:	4603      	mov	r3, r0
 8003752:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003754:	7bfb      	ldrb	r3, [r7, #15]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d137      	bne.n	80037ca <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003762:	f023 0301 	bic.w	r3, r3, #1
 8003766:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003772:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800377a:	d106      	bne.n	800378a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003780:	f023 0206 	bic.w	r2, r3, #6
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	659a      	str	r2, [r3, #88]	; 0x58
 8003788:	e002      	b.n	8003790 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	221c      	movs	r2, #28
 8003796:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d007      	beq.n	80037be <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80037b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7ff fe00 	bl	80033c8 <LL_ADC_REG_StartConversion>
 80037c8:	e006      	b.n	80037d8 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80037d2:	e001      	b.n	80037d8 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80037d4:	2302      	movs	r3, #2
 80037d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b084      	sub	sp, #16
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <HAL_ADC_Stop+0x16>
 80037f4:	2302      	movs	r3, #2
 80037f6:	e023      	b.n	8003840 <HAL_ADC_Stop+0x5e>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003800:	2103      	movs	r1, #3
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 fc9c 	bl	8004140 <ADC_ConversionStop>
 8003808:	4603      	mov	r3, r0
 800380a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800380c:	7bfb      	ldrb	r3, [r7, #15]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d111      	bne.n	8003836 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 fdd6 	bl	80043c4 <ADC_Disable>
 8003818:	4603      	mov	r3, r0
 800381a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800381c:	7bfb      	ldrb	r3, [r7, #15]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d109      	bne.n	8003836 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003826:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800382a:	f023 0301 	bic.w	r3, r3, #1
 800382e:	f043 0201 	orr.w	r2, r3, #1
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800383e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	2b08      	cmp	r3, #8
 8003858:	d102      	bne.n	8003860 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800385a:	2308      	movs	r3, #8
 800385c:	617b      	str	r3, [r7, #20]
 800385e:	e010      	b.n	8003882 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b00      	cmp	r3, #0
 800386c:	d007      	beq.n	800387e <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003872:	f043 0220 	orr.w	r2, r3, #32
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e06f      	b.n	800395e <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800387e:	2304      	movs	r3, #4
 8003880:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003882:	f7ff fbad 	bl	8002fe0 <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003888:	e021      	b.n	80038ce <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003890:	d01d      	beq.n	80038ce <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003892:	f7ff fba5 	bl	8002fe0 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d302      	bcc.n	80038a8 <HAL_ADC_PollForConversion+0x60>
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d112      	bne.n	80038ce <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	4013      	ands	r3, r2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10b      	bne.n	80038ce <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ba:	f043 0204 	orr.w	r2, r3, #4
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e047      	b.n	800395e <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	4013      	ands	r3, r2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0d6      	beq.n	800388a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff fc40 	bl	8003172 <LL_ADC_REG_IsTriggerSourceSWStart>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d01c      	beq.n	8003932 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	7e5b      	ldrb	r3, [r3, #25]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d118      	bne.n	8003932 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b08      	cmp	r3, #8
 800390c:	d111      	bne.n	8003932 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003912:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d105      	bne.n	8003932 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392a:	f043 0201 	orr.w	r2, r3, #1
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	2b08      	cmp	r3, #8
 800393e:	d104      	bne.n	800394a <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2208      	movs	r2, #8
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	e008      	b.n	800395c <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d103      	bne.n	800395c <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	220c      	movs	r2, #12
 800395a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3718      	adds	r7, #24
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003974:	4618      	mov	r0, r3
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b0b6      	sub	sp, #216	; 0xd8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800398a:	2300      	movs	r3, #0
 800398c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003990:	2300      	movs	r3, #0
 8003992:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800399a:	2b01      	cmp	r3, #1
 800399c:	d101      	bne.n	80039a2 <HAL_ADC_ConfigChannel+0x22>
 800399e:	2302      	movs	r3, #2
 80039a0:	e3b9      	b.n	8004116 <HAL_ADC_ConfigChannel+0x796>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7ff fd32 	bl	8003418 <LL_ADC_REG_IsConversionOngoing>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f040 839e 	bne.w	80040f8 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	2b05      	cmp	r3, #5
 80039c2:	d824      	bhi.n	8003a0e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	3b02      	subs	r3, #2
 80039ca:	2b03      	cmp	r3, #3
 80039cc:	d81b      	bhi.n	8003a06 <HAL_ADC_ConfigChannel+0x86>
 80039ce:	a201      	add	r2, pc, #4	; (adr r2, 80039d4 <HAL_ADC_ConfigChannel+0x54>)
 80039d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d4:	080039e5 	.word	0x080039e5
 80039d8:	080039ed 	.word	0x080039ed
 80039dc:	080039f5 	.word	0x080039f5
 80039e0:	080039fd 	.word	0x080039fd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	220c      	movs	r2, #12
 80039e8:	605a      	str	r2, [r3, #4]
          break;
 80039ea:	e011      	b.n	8003a10 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	2212      	movs	r2, #18
 80039f0:	605a      	str	r2, [r3, #4]
          break;
 80039f2:	e00d      	b.n	8003a10 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	2218      	movs	r2, #24
 80039f8:	605a      	str	r2, [r3, #4]
          break;
 80039fa:	e009      	b.n	8003a10 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a02:	605a      	str	r2, [r3, #4]
          break;
 8003a04:	e004      	b.n	8003a10 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	2206      	movs	r2, #6
 8003a0a:	605a      	str	r2, [r3, #4]
          break;
 8003a0c:	e000      	b.n	8003a10 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003a0e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6818      	ldr	r0, [r3, #0]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	6859      	ldr	r1, [r3, #4]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	f7ff fbbb 	bl	8003198 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff fcf6 	bl	8003418 <LL_ADC_REG_IsConversionOngoing>
 8003a2c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7ff fd16 	bl	8003466 <LL_ADC_INJ_IsConversionOngoing>
 8003a3a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a3e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f040 81a6 	bne.w	8003d94 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f040 81a1 	bne.w	8003d94 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6818      	ldr	r0, [r3, #0]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	6819      	ldr	r1, [r3, #0]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	f7ff fbc6 	bl	80031f0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	695a      	ldr	r2, [r3, #20]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	08db      	lsrs	r3, r3, #3
 8003a70:	f003 0303 	and.w	r3, r3, #3
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	d00a      	beq.n	8003a9c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6818      	ldr	r0, [r3, #0]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	6919      	ldr	r1, [r3, #16]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a96:	f7ff fb17 	bl	80030c8 <LL_ADC_SetOffset>
 8003a9a:	e17b      	b.n	8003d94 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7ff fb34 	bl	8003110 <LL_ADC_GetOffsetChannel>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10a      	bne.n	8003ac8 <HAL_ADC_ConfigChannel+0x148>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7ff fb29 	bl	8003110 <LL_ADC_GetOffsetChannel>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	0e9b      	lsrs	r3, r3, #26
 8003ac2:	f003 021f 	and.w	r2, r3, #31
 8003ac6:	e01e      	b.n	8003b06 <HAL_ADC_ConfigChannel+0x186>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2100      	movs	r1, #0
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7ff fb1e 	bl	8003110 <LL_ADC_GetOffsetChannel>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ada:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003ade:	fa93 f3a3 	rbit	r3, r3
 8003ae2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ae6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003aea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003aee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003af6:	2320      	movs	r3, #32
 8003af8:	e004      	b.n	8003b04 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003afa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003afe:	fab3 f383 	clz	r3, r3
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d105      	bne.n	8003b1e <HAL_ADC_ConfigChannel+0x19e>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	0e9b      	lsrs	r3, r3, #26
 8003b18:	f003 031f 	and.w	r3, r3, #31
 8003b1c:	e018      	b.n	8003b50 <HAL_ADC_ConfigChannel+0x1d0>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b26:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003b2a:	fa93 f3a3 	rbit	r3, r3
 8003b2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003b32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003b3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003b42:	2320      	movs	r3, #32
 8003b44:	e004      	b.n	8003b50 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003b46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003b4a:	fab3 f383 	clz	r3, r3
 8003b4e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d106      	bne.n	8003b62 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7ff faed 	bl	800313c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2101      	movs	r1, #1
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7ff fad1 	bl	8003110 <LL_ADC_GetOffsetChannel>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10a      	bne.n	8003b8e <HAL_ADC_ConfigChannel+0x20e>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2101      	movs	r1, #1
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7ff fac6 	bl	8003110 <LL_ADC_GetOffsetChannel>
 8003b84:	4603      	mov	r3, r0
 8003b86:	0e9b      	lsrs	r3, r3, #26
 8003b88:	f003 021f 	and.w	r2, r3, #31
 8003b8c:	e01e      	b.n	8003bcc <HAL_ADC_ConfigChannel+0x24c>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2101      	movs	r1, #1
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7ff fabb 	bl	8003110 <LL_ADC_GetOffsetChannel>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003ba4:	fa93 f3a3 	rbit	r3, r3
 8003ba8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003bac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003bb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003bb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d101      	bne.n	8003bc0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003bbc:	2320      	movs	r3, #32
 8003bbe:	e004      	b.n	8003bca <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003bc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003bc4:	fab3 f383 	clz	r3, r3
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d105      	bne.n	8003be4 <HAL_ADC_ConfigChannel+0x264>
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	0e9b      	lsrs	r3, r3, #26
 8003bde:	f003 031f 	and.w	r3, r3, #31
 8003be2:	e018      	b.n	8003c16 <HAL_ADC_ConfigChannel+0x296>
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bf0:	fa93 f3a3 	rbit	r3, r3
 8003bf4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003bf8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003bfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003c00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d101      	bne.n	8003c0c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003c08:	2320      	movs	r3, #32
 8003c0a:	e004      	b.n	8003c16 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003c0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c10:	fab3 f383 	clz	r3, r3
 8003c14:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d106      	bne.n	8003c28 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	2101      	movs	r1, #1
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7ff fa8a 	bl	800313c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2102      	movs	r1, #2
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7ff fa6e 	bl	8003110 <LL_ADC_GetOffsetChannel>
 8003c34:	4603      	mov	r3, r0
 8003c36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10a      	bne.n	8003c54 <HAL_ADC_ConfigChannel+0x2d4>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2102      	movs	r1, #2
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff fa63 	bl	8003110 <LL_ADC_GetOffsetChannel>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	0e9b      	lsrs	r3, r3, #26
 8003c4e:	f003 021f 	and.w	r2, r3, #31
 8003c52:	e01e      	b.n	8003c92 <HAL_ADC_ConfigChannel+0x312>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2102      	movs	r1, #2
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7ff fa58 	bl	8003110 <LL_ADC_GetOffsetChannel>
 8003c60:	4603      	mov	r3, r0
 8003c62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c6a:	fa93 f3a3 	rbit	r3, r3
 8003c6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003c72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003c7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003c82:	2320      	movs	r3, #32
 8003c84:	e004      	b.n	8003c90 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003c86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003c8a:	fab3 f383 	clz	r3, r3
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d105      	bne.n	8003caa <HAL_ADC_ConfigChannel+0x32a>
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	0e9b      	lsrs	r3, r3, #26
 8003ca4:	f003 031f 	and.w	r3, r3, #31
 8003ca8:	e016      	b.n	8003cd8 <HAL_ADC_ConfigChannel+0x358>
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003cb6:	fa93 f3a3 	rbit	r3, r3
 8003cba:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003cbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003cbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003cc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003cca:	2320      	movs	r3, #32
 8003ccc:	e004      	b.n	8003cd8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003cce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cd2:	fab3 f383 	clz	r3, r3
 8003cd6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d106      	bne.n	8003cea <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	2102      	movs	r1, #2
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff fa29 	bl	800313c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2103      	movs	r1, #3
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff fa0d 	bl	8003110 <LL_ADC_GetOffsetChannel>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10a      	bne.n	8003d16 <HAL_ADC_ConfigChannel+0x396>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2103      	movs	r1, #3
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7ff fa02 	bl	8003110 <LL_ADC_GetOffsetChannel>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	0e9b      	lsrs	r3, r3, #26
 8003d10:	f003 021f 	and.w	r2, r3, #31
 8003d14:	e017      	b.n	8003d46 <HAL_ADC_ConfigChannel+0x3c6>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2103      	movs	r1, #3
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7ff f9f7 	bl	8003110 <LL_ADC_GetOffsetChannel>
 8003d22:	4603      	mov	r3, r0
 8003d24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d28:	fa93 f3a3 	rbit	r3, r3
 8003d2c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003d2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d30:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003d32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003d38:	2320      	movs	r3, #32
 8003d3a:	e003      	b.n	8003d44 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003d3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d3e:	fab3 f383 	clz	r3, r3
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d105      	bne.n	8003d5e <HAL_ADC_ConfigChannel+0x3de>
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	0e9b      	lsrs	r3, r3, #26
 8003d58:	f003 031f 	and.w	r3, r3, #31
 8003d5c:	e011      	b.n	8003d82 <HAL_ADC_ConfigChannel+0x402>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d66:	fa93 f3a3 	rbit	r3, r3
 8003d6a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003d6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d6e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003d70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003d76:	2320      	movs	r3, #32
 8003d78:	e003      	b.n	8003d82 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d7c:	fab3 f383 	clz	r3, r3
 8003d80:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d106      	bne.n	8003d94 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	2103      	movs	r1, #3
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff f9d4 	bl	800313c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7ff faef 	bl	800337c <LL_ADC_IsEnabled>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f040 813f 	bne.w	8004024 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6818      	ldr	r0, [r3, #0]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	6819      	ldr	r1, [r3, #0]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	461a      	mov	r2, r3
 8003db4:	f7ff fa48 	bl	8003248 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	4a8e      	ldr	r2, [pc, #568]	; (8003ff8 <HAL_ADC_ConfigChannel+0x678>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	f040 8130 	bne.w	8004024 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10b      	bne.n	8003dec <HAL_ADC_ConfigChannel+0x46c>
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	0e9b      	lsrs	r3, r3, #26
 8003dda:	3301      	adds	r3, #1
 8003ddc:	f003 031f 	and.w	r3, r3, #31
 8003de0:	2b09      	cmp	r3, #9
 8003de2:	bf94      	ite	ls
 8003de4:	2301      	movls	r3, #1
 8003de6:	2300      	movhi	r3, #0
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	e019      	b.n	8003e20 <HAL_ADC_ConfigChannel+0x4a0>
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003df4:	fa93 f3a3 	rbit	r3, r3
 8003df8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003dfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003dfc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003dfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003e04:	2320      	movs	r3, #32
 8003e06:	e003      	b.n	8003e10 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003e08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e0a:	fab3 f383 	clz	r3, r3
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	3301      	adds	r3, #1
 8003e12:	f003 031f 	and.w	r3, r3, #31
 8003e16:	2b09      	cmp	r3, #9
 8003e18:	bf94      	ite	ls
 8003e1a:	2301      	movls	r3, #1
 8003e1c:	2300      	movhi	r3, #0
 8003e1e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d079      	beq.n	8003f18 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d107      	bne.n	8003e40 <HAL_ADC_ConfigChannel+0x4c0>
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	0e9b      	lsrs	r3, r3, #26
 8003e36:	3301      	adds	r3, #1
 8003e38:	069b      	lsls	r3, r3, #26
 8003e3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e3e:	e015      	b.n	8003e6c <HAL_ADC_ConfigChannel+0x4ec>
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e48:	fa93 f3a3 	rbit	r3, r3
 8003e4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e50:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003e52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003e58:	2320      	movs	r3, #32
 8003e5a:	e003      	b.n	8003e64 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003e5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e5e:	fab3 f383 	clz	r3, r3
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	3301      	adds	r3, #1
 8003e66:	069b      	lsls	r3, r3, #26
 8003e68:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d109      	bne.n	8003e8c <HAL_ADC_ConfigChannel+0x50c>
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	0e9b      	lsrs	r3, r3, #26
 8003e7e:	3301      	adds	r3, #1
 8003e80:	f003 031f 	and.w	r3, r3, #31
 8003e84:	2101      	movs	r1, #1
 8003e86:	fa01 f303 	lsl.w	r3, r1, r3
 8003e8a:	e017      	b.n	8003ebc <HAL_ADC_ConfigChannel+0x53c>
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e94:	fa93 f3a3 	rbit	r3, r3
 8003e98:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003e9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e9c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003e9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d101      	bne.n	8003ea8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003ea4:	2320      	movs	r3, #32
 8003ea6:	e003      	b.n	8003eb0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003ea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eaa:	fab3 f383 	clz	r3, r3
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	f003 031f 	and.w	r3, r3, #31
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ebc:	ea42 0103 	orr.w	r1, r2, r3
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10a      	bne.n	8003ee2 <HAL_ADC_ConfigChannel+0x562>
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	0e9b      	lsrs	r3, r3, #26
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	f003 021f 	and.w	r2, r3, #31
 8003ed8:	4613      	mov	r3, r2
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	4413      	add	r3, r2
 8003ede:	051b      	lsls	r3, r3, #20
 8003ee0:	e018      	b.n	8003f14 <HAL_ADC_ConfigChannel+0x594>
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eea:	fa93 f3a3 	rbit	r3, r3
 8003eee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003efa:	2320      	movs	r3, #32
 8003efc:	e003      	b.n	8003f06 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f00:	fab3 f383 	clz	r3, r3
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	3301      	adds	r3, #1
 8003f08:	f003 021f 	and.w	r2, r3, #31
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	4413      	add	r3, r2
 8003f12:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f14:	430b      	orrs	r3, r1
 8003f16:	e080      	b.n	800401a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d107      	bne.n	8003f34 <HAL_ADC_ConfigChannel+0x5b4>
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	0e9b      	lsrs	r3, r3, #26
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	069b      	lsls	r3, r3, #26
 8003f2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f32:	e015      	b.n	8003f60 <HAL_ADC_ConfigChannel+0x5e0>
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3c:	fa93 f3a3 	rbit	r3, r3
 8003f40:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f44:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d101      	bne.n	8003f50 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003f4c:	2320      	movs	r3, #32
 8003f4e:	e003      	b.n	8003f58 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f52:	fab3 f383 	clz	r3, r3
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	3301      	adds	r3, #1
 8003f5a:	069b      	lsls	r3, r3, #26
 8003f5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d109      	bne.n	8003f80 <HAL_ADC_ConfigChannel+0x600>
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	0e9b      	lsrs	r3, r3, #26
 8003f72:	3301      	adds	r3, #1
 8003f74:	f003 031f 	and.w	r3, r3, #31
 8003f78:	2101      	movs	r1, #1
 8003f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f7e:	e017      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x630>
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	fa93 f3a3 	rbit	r3, r3
 8003f8c:	61fb      	str	r3, [r7, #28]
  return result;
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003f98:	2320      	movs	r3, #32
 8003f9a:	e003      	b.n	8003fa4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9e:	fab3 f383 	clz	r3, r3
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	f003 031f 	and.w	r3, r3, #31
 8003faa:	2101      	movs	r1, #1
 8003fac:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb0:	ea42 0103 	orr.w	r1, r2, r3
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10d      	bne.n	8003fdc <HAL_ADC_ConfigChannel+0x65c>
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	0e9b      	lsrs	r3, r3, #26
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	f003 021f 	and.w	r2, r3, #31
 8003fcc:	4613      	mov	r3, r2
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	4413      	add	r3, r2
 8003fd2:	3b1e      	subs	r3, #30
 8003fd4:	051b      	lsls	r3, r3, #20
 8003fd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003fda:	e01d      	b.n	8004018 <HAL_ADC_ConfigChannel+0x698>
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	fa93 f3a3 	rbit	r3, r3
 8003fe8:	613b      	str	r3, [r7, #16]
  return result;
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d103      	bne.n	8003ffc <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003ff4:	2320      	movs	r3, #32
 8003ff6:	e005      	b.n	8004004 <HAL_ADC_ConfigChannel+0x684>
 8003ff8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	fab3 f383 	clz	r3, r3
 8004002:	b2db      	uxtb	r3, r3
 8004004:	3301      	adds	r3, #1
 8004006:	f003 021f 	and.w	r2, r3, #31
 800400a:	4613      	mov	r3, r2
 800400c:	005b      	lsls	r3, r3, #1
 800400e:	4413      	add	r3, r2
 8004010:	3b1e      	subs	r3, #30
 8004012:	051b      	lsls	r3, r3, #20
 8004014:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004018:	430b      	orrs	r3, r1
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	6892      	ldr	r2, [r2, #8]
 800401e:	4619      	mov	r1, r3
 8004020:	f7ff f8e6 	bl	80031f0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	4b3d      	ldr	r3, [pc, #244]	; (8004120 <HAL_ADC_ConfigChannel+0x7a0>)
 800402a:	4013      	ands	r3, r2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d06c      	beq.n	800410a <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004030:	483c      	ldr	r0, [pc, #240]	; (8004124 <HAL_ADC_ConfigChannel+0x7a4>)
 8004032:	f7ff f83b 	bl	80030ac <LL_ADC_GetCommonPathInternalCh>
 8004036:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a3a      	ldr	r2, [pc, #232]	; (8004128 <HAL_ADC_ConfigChannel+0x7a8>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d127      	bne.n	8004094 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004044:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004048:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d121      	bne.n	8004094 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a35      	ldr	r2, [pc, #212]	; (800412c <HAL_ADC_ConfigChannel+0x7ac>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d157      	bne.n	800410a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800405a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800405e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004062:	4619      	mov	r1, r3
 8004064:	482f      	ldr	r0, [pc, #188]	; (8004124 <HAL_ADC_ConfigChannel+0x7a4>)
 8004066:	f7ff f80e 	bl	8003086 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800406a:	4b31      	ldr	r3, [pc, #196]	; (8004130 <HAL_ADC_ConfigChannel+0x7b0>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	099b      	lsrs	r3, r3, #6
 8004070:	4a30      	ldr	r2, [pc, #192]	; (8004134 <HAL_ADC_ConfigChannel+0x7b4>)
 8004072:	fba2 2303 	umull	r2, r3, r2, r3
 8004076:	099b      	lsrs	r3, r3, #6
 8004078:	1c5a      	adds	r2, r3, #1
 800407a:	4613      	mov	r3, r2
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	4413      	add	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004084:	e002      	b.n	800408c <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	3b01      	subs	r3, #1
 800408a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1f9      	bne.n	8004086 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004092:	e03a      	b.n	800410a <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a27      	ldr	r2, [pc, #156]	; (8004138 <HAL_ADC_ConfigChannel+0x7b8>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d113      	bne.n	80040c6 <HAL_ADC_ConfigChannel+0x746>
 800409e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10d      	bne.n	80040c6 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a1f      	ldr	r2, [pc, #124]	; (800412c <HAL_ADC_ConfigChannel+0x7ac>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d12a      	bne.n	800410a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80040b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040bc:	4619      	mov	r1, r3
 80040be:	4819      	ldr	r0, [pc, #100]	; (8004124 <HAL_ADC_ConfigChannel+0x7a4>)
 80040c0:	f7fe ffe1 	bl	8003086 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80040c4:	e021      	b.n	800410a <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a1c      	ldr	r2, [pc, #112]	; (800413c <HAL_ADC_ConfigChannel+0x7bc>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d11c      	bne.n	800410a <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80040d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d116      	bne.n	800410a <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a12      	ldr	r2, [pc, #72]	; (800412c <HAL_ADC_ConfigChannel+0x7ac>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d111      	bne.n	800410a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80040e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80040ee:	4619      	mov	r1, r3
 80040f0:	480c      	ldr	r0, [pc, #48]	; (8004124 <HAL_ADC_ConfigChannel+0x7a4>)
 80040f2:	f7fe ffc8 	bl	8003086 <LL_ADC_SetCommonPathInternalCh>
 80040f6:	e008      	b.n	800410a <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fc:	f043 0220 	orr.w	r2, r3, #32
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004112:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004116:	4618      	mov	r0, r3
 8004118:	37d8      	adds	r7, #216	; 0xd8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	80080000 	.word	0x80080000
 8004124:	50040300 	.word	0x50040300
 8004128:	c7520000 	.word	0xc7520000
 800412c:	50040000 	.word	0x50040000
 8004130:	2000000c 	.word	0x2000000c
 8004134:	053e2d63 	.word	0x053e2d63
 8004138:	cb840000 	.word	0xcb840000
 800413c:	80000001 	.word	0x80000001

08004140 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b088      	sub	sp, #32
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800414a:	2300      	movs	r3, #0
 800414c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff f95e 	bl	8003418 <LL_ADC_REG_IsConversionOngoing>
 800415c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4618      	mov	r0, r3
 8004164:	f7ff f97f 	bl	8003466 <LL_ADC_INJ_IsConversionOngoing>
 8004168:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d103      	bne.n	8004178 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 8098 	beq.w	80042a8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d02a      	beq.n	80041dc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	7e5b      	ldrb	r3, [r3, #25]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d126      	bne.n	80041dc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	7e1b      	ldrb	r3, [r3, #24]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d122      	bne.n	80041dc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004196:	2301      	movs	r3, #1
 8004198:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800419a:	e014      	b.n	80041c6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	4a45      	ldr	r2, [pc, #276]	; (80042b4 <ADC_ConversionStop+0x174>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d90d      	bls.n	80041c0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a8:	f043 0210 	orr.w	r2, r3, #16
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b4:	f043 0201 	orr.w	r2, r3, #1
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e074      	b.n	80042aa <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	3301      	adds	r3, #1
 80041c4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d0:	2b40      	cmp	r3, #64	; 0x40
 80041d2:	d1e3      	bne.n	800419c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2240      	movs	r2, #64	; 0x40
 80041da:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d014      	beq.n	800420c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7ff f916 	bl	8003418 <LL_ADC_REG_IsConversionOngoing>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00c      	beq.n	800420c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff f8d3 	bl	80033a2 <LL_ADC_IsDisableOngoing>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d104      	bne.n	800420c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4618      	mov	r0, r3
 8004208:	f7ff f8f2 	bl	80033f0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d014      	beq.n	800423c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4618      	mov	r0, r3
 8004218:	f7ff f925 	bl	8003466 <LL_ADC_INJ_IsConversionOngoing>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00c      	beq.n	800423c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4618      	mov	r0, r3
 8004228:	f7ff f8bb 	bl	80033a2 <LL_ADC_IsDisableOngoing>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d104      	bne.n	800423c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4618      	mov	r0, r3
 8004238:	f7ff f901 	bl	800343e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	2b02      	cmp	r3, #2
 8004240:	d005      	beq.n	800424e <ADC_ConversionStop+0x10e>
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	2b03      	cmp	r3, #3
 8004246:	d105      	bne.n	8004254 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004248:	230c      	movs	r3, #12
 800424a:	617b      	str	r3, [r7, #20]
        break;
 800424c:	e005      	b.n	800425a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800424e:	2308      	movs	r3, #8
 8004250:	617b      	str	r3, [r7, #20]
        break;
 8004252:	e002      	b.n	800425a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004254:	2304      	movs	r3, #4
 8004256:	617b      	str	r3, [r7, #20]
        break;
 8004258:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800425a:	f7fe fec1 	bl	8002fe0 <HAL_GetTick>
 800425e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004260:	e01b      	b.n	800429a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004262:	f7fe febd 	bl	8002fe0 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b05      	cmp	r3, #5
 800426e:	d914      	bls.n	800429a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689a      	ldr	r2, [r3, #8]
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	4013      	ands	r3, r2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00d      	beq.n	800429a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004282:	f043 0210 	orr.w	r2, r3, #16
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428e:	f043 0201 	orr.w	r2, r3, #1
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e007      	b.n	80042aa <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	4013      	ands	r3, r2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1dc      	bne.n	8004262 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3720      	adds	r7, #32
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	a33fffff 	.word	0xa33fffff

080042b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80042c0:	2300      	movs	r3, #0
 80042c2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7ff f857 	bl	800337c <LL_ADC_IsEnabled>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d169      	bne.n	80043a8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689a      	ldr	r2, [r3, #8]
 80042da:	4b36      	ldr	r3, [pc, #216]	; (80043b4 <ADC_Enable+0xfc>)
 80042dc:	4013      	ands	r3, r2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00d      	beq.n	80042fe <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e6:	f043 0210 	orr.w	r2, r3, #16
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f2:	f043 0201 	orr.w	r2, r3, #1
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e055      	b.n	80043aa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff f812 	bl	800332c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004308:	482b      	ldr	r0, [pc, #172]	; (80043b8 <ADC_Enable+0x100>)
 800430a:	f7fe fecf 	bl	80030ac <LL_ADC_GetCommonPathInternalCh>
 800430e:	4603      	mov	r3, r0
 8004310:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d013      	beq.n	8004340 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004318:	4b28      	ldr	r3, [pc, #160]	; (80043bc <ADC_Enable+0x104>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	099b      	lsrs	r3, r3, #6
 800431e:	4a28      	ldr	r2, [pc, #160]	; (80043c0 <ADC_Enable+0x108>)
 8004320:	fba2 2303 	umull	r2, r3, r2, r3
 8004324:	099b      	lsrs	r3, r3, #6
 8004326:	1c5a      	adds	r2, r3, #1
 8004328:	4613      	mov	r3, r2
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	4413      	add	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004332:	e002      	b.n	800433a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	3b01      	subs	r3, #1
 8004338:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1f9      	bne.n	8004334 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004340:	f7fe fe4e 	bl	8002fe0 <HAL_GetTick>
 8004344:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004346:	e028      	b.n	800439a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4618      	mov	r0, r3
 800434e:	f7ff f815 	bl	800337c <LL_ADC_IsEnabled>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d104      	bne.n	8004362 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4618      	mov	r0, r3
 800435e:	f7fe ffe5 	bl	800332c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004362:	f7fe fe3d 	bl	8002fe0 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d914      	bls.n	800439a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b01      	cmp	r3, #1
 800437c:	d00d      	beq.n	800439a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004382:	f043 0210 	orr.w	r2, r3, #16
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438e:	f043 0201 	orr.w	r2, r3, #1
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e007      	b.n	80043aa <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d1cf      	bne.n	8004348 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	8000003f 	.word	0x8000003f
 80043b8:	50040300 	.word	0x50040300
 80043bc:	2000000c 	.word	0x2000000c
 80043c0:	053e2d63 	.word	0x053e2d63

080043c4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7fe ffe6 	bl	80033a2 <LL_ADC_IsDisableOngoing>
 80043d6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4618      	mov	r0, r3
 80043de:	f7fe ffcd 	bl	800337c <LL_ADC_IsEnabled>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d047      	beq.n	8004478 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d144      	bne.n	8004478 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f003 030d 	and.w	r3, r3, #13
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d10c      	bne.n	8004416 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4618      	mov	r0, r3
 8004402:	f7fe ffa7 	bl	8003354 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2203      	movs	r2, #3
 800440c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800440e:	f7fe fde7 	bl	8002fe0 <HAL_GetTick>
 8004412:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004414:	e029      	b.n	800446a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441a:	f043 0210 	orr.w	r2, r3, #16
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004426:	f043 0201 	orr.w	r2, r3, #1
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e023      	b.n	800447a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004432:	f7fe fdd5 	bl	8002fe0 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d914      	bls.n	800446a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00d      	beq.n	800446a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004452:	f043 0210 	orr.w	r2, r3, #16
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800445e:	f043 0201 	orr.w	r2, r3, #1
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e007      	b.n	800447a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1dc      	bne.n	8004432 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <LL_ADC_StartCalibration>:
{
 8004482:	b480      	push	{r7}
 8004484:	b083      	sub	sp, #12
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
 800448a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004494:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800449e:	4313      	orrs	r3, r2
 80044a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	609a      	str	r2, [r3, #8]
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <LL_ADC_IsCalibrationOnGoing>:
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044c8:	d101      	bne.n	80044ce <LL_ADC_IsCalibrationOnGoing+0x1a>
 80044ca:	2301      	movs	r3, #1
 80044cc:	e000      	b.n	80044d0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80044e6:	2300      	movs	r3, #0
 80044e8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d101      	bne.n	80044f8 <HAL_ADCEx_Calibration_Start+0x1c>
 80044f4:	2302      	movs	r3, #2
 80044f6:	e04d      	b.n	8004594 <HAL_ADCEx_Calibration_Start+0xb8>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f7ff ff5f 	bl	80043c4 <ADC_Disable>
 8004506:	4603      	mov	r3, r0
 8004508:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800450a:	7bfb      	ldrb	r3, [r7, #15]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d136      	bne.n	800457e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004514:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004518:	f023 0302 	bic.w	r3, r3, #2
 800451c:	f043 0202 	orr.w	r2, r3, #2
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6839      	ldr	r1, [r7, #0]
 800452a:	4618      	mov	r0, r3
 800452c:	f7ff ffa9 	bl	8004482 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004530:	e014      	b.n	800455c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	3301      	adds	r3, #1
 8004536:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800453e:	d30d      	bcc.n	800455c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004544:	f023 0312 	bic.w	r3, r3, #18
 8004548:	f043 0210 	orr.w	r2, r3, #16
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e01b      	b.n	8004594 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4618      	mov	r0, r3
 8004562:	f7ff ffa7 	bl	80044b4 <LL_ADC_IsCalibrationOnGoing>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1e2      	bne.n	8004532 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004570:	f023 0303 	bic.w	r3, r3, #3
 8004574:	f043 0201 	orr.w	r2, r3, #1
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	655a      	str	r2, [r3, #84]	; 0x54
 800457c:	e005      	b.n	800458a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004582:	f043 0210 	orr.w	r2, r3, #16
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004592:	7bfb      	ldrb	r3, [r7, #15]
}
 8004594:	4618      	mov	r0, r3
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f003 0307 	and.w	r3, r3, #7
 80045aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045ac:	4b0c      	ldr	r3, [pc, #48]	; (80045e0 <__NVIC_SetPriorityGrouping+0x44>)
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045b8:	4013      	ands	r3, r2
 80045ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045ce:	4a04      	ldr	r2, [pc, #16]	; (80045e0 <__NVIC_SetPriorityGrouping+0x44>)
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	60d3      	str	r3, [r2, #12]
}
 80045d4:	bf00      	nop
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	e000ed00 	.word	0xe000ed00

080045e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045e8:	4b04      	ldr	r3, [pc, #16]	; (80045fc <__NVIC_GetPriorityGrouping+0x18>)
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	0a1b      	lsrs	r3, r3, #8
 80045ee:	f003 0307 	and.w	r3, r3, #7
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	e000ed00 	.word	0xe000ed00

08004600 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	4603      	mov	r3, r0
 8004608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800460a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800460e:	2b00      	cmp	r3, #0
 8004610:	db0b      	blt.n	800462a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004612:	79fb      	ldrb	r3, [r7, #7]
 8004614:	f003 021f 	and.w	r2, r3, #31
 8004618:	4907      	ldr	r1, [pc, #28]	; (8004638 <__NVIC_EnableIRQ+0x38>)
 800461a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800461e:	095b      	lsrs	r3, r3, #5
 8004620:	2001      	movs	r0, #1
 8004622:	fa00 f202 	lsl.w	r2, r0, r2
 8004626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800462a:	bf00      	nop
 800462c:	370c      	adds	r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	e000e100 	.word	0xe000e100

0800463c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	4603      	mov	r3, r0
 8004644:	6039      	str	r1, [r7, #0]
 8004646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800464c:	2b00      	cmp	r3, #0
 800464e:	db0a      	blt.n	8004666 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	b2da      	uxtb	r2, r3
 8004654:	490c      	ldr	r1, [pc, #48]	; (8004688 <__NVIC_SetPriority+0x4c>)
 8004656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800465a:	0112      	lsls	r2, r2, #4
 800465c:	b2d2      	uxtb	r2, r2
 800465e:	440b      	add	r3, r1
 8004660:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004664:	e00a      	b.n	800467c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	b2da      	uxtb	r2, r3
 800466a:	4908      	ldr	r1, [pc, #32]	; (800468c <__NVIC_SetPriority+0x50>)
 800466c:	79fb      	ldrb	r3, [r7, #7]
 800466e:	f003 030f 	and.w	r3, r3, #15
 8004672:	3b04      	subs	r3, #4
 8004674:	0112      	lsls	r2, r2, #4
 8004676:	b2d2      	uxtb	r2, r2
 8004678:	440b      	add	r3, r1
 800467a:	761a      	strb	r2, [r3, #24]
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr
 8004688:	e000e100 	.word	0xe000e100
 800468c:	e000ed00 	.word	0xe000ed00

08004690 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004690:	b480      	push	{r7}
 8004692:	b089      	sub	sp, #36	; 0x24
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f003 0307 	and.w	r3, r3, #7
 80046a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	f1c3 0307 	rsb	r3, r3, #7
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	bf28      	it	cs
 80046ae:	2304      	movcs	r3, #4
 80046b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	3304      	adds	r3, #4
 80046b6:	2b06      	cmp	r3, #6
 80046b8:	d902      	bls.n	80046c0 <NVIC_EncodePriority+0x30>
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	3b03      	subs	r3, #3
 80046be:	e000      	b.n	80046c2 <NVIC_EncodePriority+0x32>
 80046c0:	2300      	movs	r3, #0
 80046c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046c4:	f04f 32ff 	mov.w	r2, #4294967295
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	fa02 f303 	lsl.w	r3, r2, r3
 80046ce:	43da      	mvns	r2, r3
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	401a      	ands	r2, r3
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046d8:	f04f 31ff 	mov.w	r1, #4294967295
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	fa01 f303 	lsl.w	r3, r1, r3
 80046e2:	43d9      	mvns	r1, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046e8:	4313      	orrs	r3, r2
         );
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3724      	adds	r7, #36	; 0x24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
	...

080046f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	3b01      	subs	r3, #1
 8004704:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004708:	d301      	bcc.n	800470e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800470a:	2301      	movs	r3, #1
 800470c:	e00f      	b.n	800472e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800470e:	4a0a      	ldr	r2, [pc, #40]	; (8004738 <SysTick_Config+0x40>)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3b01      	subs	r3, #1
 8004714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004716:	210f      	movs	r1, #15
 8004718:	f04f 30ff 	mov.w	r0, #4294967295
 800471c:	f7ff ff8e 	bl	800463c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004720:	4b05      	ldr	r3, [pc, #20]	; (8004738 <SysTick_Config+0x40>)
 8004722:	2200      	movs	r2, #0
 8004724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004726:	4b04      	ldr	r3, [pc, #16]	; (8004738 <SysTick_Config+0x40>)
 8004728:	2207      	movs	r2, #7
 800472a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	e000e010 	.word	0xe000e010

0800473c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f7ff ff29 	bl	800459c <__NVIC_SetPriorityGrouping>
}
 800474a:	bf00      	nop
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b086      	sub	sp, #24
 8004756:	af00      	add	r7, sp, #0
 8004758:	4603      	mov	r3, r0
 800475a:	60b9      	str	r1, [r7, #8]
 800475c:	607a      	str	r2, [r7, #4]
 800475e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004760:	2300      	movs	r3, #0
 8004762:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004764:	f7ff ff3e 	bl	80045e4 <__NVIC_GetPriorityGrouping>
 8004768:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	68b9      	ldr	r1, [r7, #8]
 800476e:	6978      	ldr	r0, [r7, #20]
 8004770:	f7ff ff8e 	bl	8004690 <NVIC_EncodePriority>
 8004774:	4602      	mov	r2, r0
 8004776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800477a:	4611      	mov	r1, r2
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff ff5d 	bl	800463c <__NVIC_SetPriority>
}
 8004782:	bf00      	nop
 8004784:	3718      	adds	r7, #24
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b082      	sub	sp, #8
 800478e:	af00      	add	r7, sp, #0
 8004790:	4603      	mov	r3, r0
 8004792:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004798:	4618      	mov	r0, r3
 800479a:	f7ff ff31 	bl	8004600 <__NVIC_EnableIRQ>
}
 800479e:	bf00      	nop
 80047a0:	3708      	adds	r7, #8
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b082      	sub	sp, #8
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7ff ffa2 	bl	80046f8 <SysTick_Config>
 80047b4:	4603      	mov	r3, r0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
	...

080047c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b087      	sub	sp, #28
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80047ca:	2300      	movs	r3, #0
 80047cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047ce:	e154      	b.n	8004a7a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	2101      	movs	r1, #1
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	fa01 f303 	lsl.w	r3, r1, r3
 80047dc:	4013      	ands	r3, r2
 80047de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 8146 	beq.w	8004a74 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f003 0303 	and.w	r3, r3, #3
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d005      	beq.n	8004800 <HAL_GPIO_Init+0x40>
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f003 0303 	and.w	r3, r3, #3
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d130      	bne.n	8004862 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	2203      	movs	r2, #3
 800480c:	fa02 f303 	lsl.w	r3, r2, r3
 8004810:	43db      	mvns	r3, r3
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	4013      	ands	r3, r2
 8004816:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	68da      	ldr	r2, [r3, #12]
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	4313      	orrs	r3, r2
 8004828:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004836:	2201      	movs	r2, #1
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	fa02 f303 	lsl.w	r3, r2, r3
 800483e:	43db      	mvns	r3, r3
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	4013      	ands	r3, r2
 8004844:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	091b      	lsrs	r3, r3, #4
 800484c:	f003 0201 	and.w	r2, r3, #1
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	fa02 f303 	lsl.w	r3, r2, r3
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	4313      	orrs	r3, r2
 800485a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f003 0303 	and.w	r3, r3, #3
 800486a:	2b03      	cmp	r3, #3
 800486c:	d017      	beq.n	800489e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	005b      	lsls	r3, r3, #1
 8004878:	2203      	movs	r2, #3
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	43db      	mvns	r3, r3
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	4013      	ands	r3, r2
 8004884:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	689a      	ldr	r2, [r3, #8]
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	fa02 f303 	lsl.w	r3, r2, r3
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	4313      	orrs	r3, r2
 8004896:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f003 0303 	and.w	r3, r3, #3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d123      	bne.n	80048f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	08da      	lsrs	r2, r3, #3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	3208      	adds	r2, #8
 80048b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f003 0307 	and.w	r3, r3, #7
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	220f      	movs	r2, #15
 80048c2:	fa02 f303 	lsl.w	r3, r2, r3
 80048c6:	43db      	mvns	r3, r3
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	4013      	ands	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	691a      	ldr	r2, [r3, #16]
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	fa02 f303 	lsl.w	r3, r2, r3
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	08da      	lsrs	r2, r3, #3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	3208      	adds	r2, #8
 80048ec:	6939      	ldr	r1, [r7, #16]
 80048ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	2203      	movs	r2, #3
 80048fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004902:	43db      	mvns	r3, r3
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	4013      	ands	r3, r2
 8004908:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f003 0203 	and.w	r2, r3, #3
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	fa02 f303 	lsl.w	r3, r2, r3
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	4313      	orrs	r3, r2
 800491e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 80a0 	beq.w	8004a74 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004934:	4b58      	ldr	r3, [pc, #352]	; (8004a98 <HAL_GPIO_Init+0x2d8>)
 8004936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004938:	4a57      	ldr	r2, [pc, #348]	; (8004a98 <HAL_GPIO_Init+0x2d8>)
 800493a:	f043 0301 	orr.w	r3, r3, #1
 800493e:	6613      	str	r3, [r2, #96]	; 0x60
 8004940:	4b55      	ldr	r3, [pc, #340]	; (8004a98 <HAL_GPIO_Init+0x2d8>)
 8004942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	60bb      	str	r3, [r7, #8]
 800494a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800494c:	4a53      	ldr	r2, [pc, #332]	; (8004a9c <HAL_GPIO_Init+0x2dc>)
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	089b      	lsrs	r3, r3, #2
 8004952:	3302      	adds	r3, #2
 8004954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004958:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f003 0303 	and.w	r3, r3, #3
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	220f      	movs	r2, #15
 8004964:	fa02 f303 	lsl.w	r3, r2, r3
 8004968:	43db      	mvns	r3, r3
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	4013      	ands	r3, r2
 800496e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004976:	d019      	beq.n	80049ac <HAL_GPIO_Init+0x1ec>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a49      	ldr	r2, [pc, #292]	; (8004aa0 <HAL_GPIO_Init+0x2e0>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d013      	beq.n	80049a8 <HAL_GPIO_Init+0x1e8>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a48      	ldr	r2, [pc, #288]	; (8004aa4 <HAL_GPIO_Init+0x2e4>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d00d      	beq.n	80049a4 <HAL_GPIO_Init+0x1e4>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a47      	ldr	r2, [pc, #284]	; (8004aa8 <HAL_GPIO_Init+0x2e8>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d007      	beq.n	80049a0 <HAL_GPIO_Init+0x1e0>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a46      	ldr	r2, [pc, #280]	; (8004aac <HAL_GPIO_Init+0x2ec>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d101      	bne.n	800499c <HAL_GPIO_Init+0x1dc>
 8004998:	2304      	movs	r3, #4
 800499a:	e008      	b.n	80049ae <HAL_GPIO_Init+0x1ee>
 800499c:	2307      	movs	r3, #7
 800499e:	e006      	b.n	80049ae <HAL_GPIO_Init+0x1ee>
 80049a0:	2303      	movs	r3, #3
 80049a2:	e004      	b.n	80049ae <HAL_GPIO_Init+0x1ee>
 80049a4:	2302      	movs	r3, #2
 80049a6:	e002      	b.n	80049ae <HAL_GPIO_Init+0x1ee>
 80049a8:	2301      	movs	r3, #1
 80049aa:	e000      	b.n	80049ae <HAL_GPIO_Init+0x1ee>
 80049ac:	2300      	movs	r3, #0
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	f002 0203 	and.w	r2, r2, #3
 80049b4:	0092      	lsls	r2, r2, #2
 80049b6:	4093      	lsls	r3, r2
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80049be:	4937      	ldr	r1, [pc, #220]	; (8004a9c <HAL_GPIO_Init+0x2dc>)
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	089b      	lsrs	r3, r3, #2
 80049c4:	3302      	adds	r3, #2
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049cc:	4b38      	ldr	r3, [pc, #224]	; (8004ab0 <HAL_GPIO_Init+0x2f0>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	43db      	mvns	r3, r3
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	4013      	ands	r3, r2
 80049da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d003      	beq.n	80049f0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80049f0:	4a2f      	ldr	r2, [pc, #188]	; (8004ab0 <HAL_GPIO_Init+0x2f0>)
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80049f6:	4b2e      	ldr	r3, [pc, #184]	; (8004ab0 <HAL_GPIO_Init+0x2f0>)
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	43db      	mvns	r3, r3
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	4013      	ands	r3, r2
 8004a04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a1a:	4a25      	ldr	r2, [pc, #148]	; (8004ab0 <HAL_GPIO_Init+0x2f0>)
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004a20:	4b23      	ldr	r3, [pc, #140]	; (8004ab0 <HAL_GPIO_Init+0x2f0>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	43db      	mvns	r3, r3
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a44:	4a1a      	ldr	r2, [pc, #104]	; (8004ab0 <HAL_GPIO_Init+0x2f0>)
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004a4a:	4b19      	ldr	r3, [pc, #100]	; (8004ab0 <HAL_GPIO_Init+0x2f0>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	43db      	mvns	r3, r3
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	4013      	ands	r3, r2
 8004a58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004a6e:	4a10      	ldr	r2, [pc, #64]	; (8004ab0 <HAL_GPIO_Init+0x2f0>)
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	3301      	adds	r3, #1
 8004a78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	fa22 f303 	lsr.w	r3, r2, r3
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f47f aea3 	bne.w	80047d0 <HAL_GPIO_Init+0x10>
  }
}
 8004a8a:	bf00      	nop
 8004a8c:	bf00      	nop
 8004a8e:	371c      	adds	r7, #28
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr
 8004a98:	40021000 	.word	0x40021000
 8004a9c:	40010000 	.word	0x40010000
 8004aa0:	48000400 	.word	0x48000400
 8004aa4:	48000800 	.word	0x48000800
 8004aa8:	48000c00 	.word	0x48000c00
 8004aac:	48001000 	.word	0x48001000
 8004ab0:	40010400 	.word	0x40010400

08004ab4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	460b      	mov	r3, r1
 8004abe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	691a      	ldr	r2, [r3, #16]
 8004ac4:	887b      	ldrh	r3, [r7, #2]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d002      	beq.n	8004ad2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004acc:	2301      	movs	r3, #1
 8004ace:	73fb      	strb	r3, [r7, #15]
 8004ad0:	e001      	b.n	8004ad6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	460b      	mov	r3, r1
 8004aee:	807b      	strh	r3, [r7, #2]
 8004af0:	4613      	mov	r3, r2
 8004af2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004af4:	787b      	ldrb	r3, [r7, #1]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004afa:	887a      	ldrh	r2, [r7, #2]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b00:	e002      	b.n	8004b08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b02:	887a      	ldrh	r2, [r7, #2]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004b1e:	4b08      	ldr	r3, [pc, #32]	; (8004b40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b20:	695a      	ldr	r2, [r3, #20]
 8004b22:	88fb      	ldrh	r3, [r7, #6]
 8004b24:	4013      	ands	r3, r2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d006      	beq.n	8004b38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b2a:	4a05      	ldr	r2, [pc, #20]	; (8004b40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b2c:	88fb      	ldrh	r3, [r7, #6]
 8004b2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b30:	88fb      	ldrh	r3, [r7, #6]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7fc fd2c 	bl	8001590 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b38:	bf00      	nop
 8004b3a:	3708      	adds	r7, #8
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	40010400 	.word	0x40010400

08004b44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e081      	b.n	8004c5a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d106      	bne.n	8004b70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7fd ff80 	bl	8002a70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2224      	movs	r2, #36	; 0x24
 8004b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 0201 	bic.w	r2, r2, #1
 8004b86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b94:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ba4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d107      	bne.n	8004bbe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	689a      	ldr	r2, [r3, #8]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bba:	609a      	str	r2, [r3, #8]
 8004bbc:	e006      	b.n	8004bcc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	689a      	ldr	r2, [r3, #8]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004bca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d104      	bne.n	8004bde <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bdc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	6812      	ldr	r2, [r2, #0]
 8004be8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004bec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bf0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68da      	ldr	r2, [r3, #12]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691a      	ldr	r2, [r3, #16]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	69d9      	ldr	r1, [r3, #28]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a1a      	ldr	r2, [r3, #32]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f042 0201 	orr.w	r2, r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2220      	movs	r2, #32
 8004c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
	...

08004c64 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b088      	sub	sp, #32
 8004c68:	af02      	add	r7, sp, #8
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	4608      	mov	r0, r1
 8004c6e:	4611      	mov	r1, r2
 8004c70:	461a      	mov	r2, r3
 8004c72:	4603      	mov	r3, r0
 8004c74:	817b      	strh	r3, [r7, #10]
 8004c76:	460b      	mov	r3, r1
 8004c78:	813b      	strh	r3, [r7, #8]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b20      	cmp	r3, #32
 8004c88:	f040 80f9 	bne.w	8004e7e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c8c:	6a3b      	ldr	r3, [r7, #32]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d002      	beq.n	8004c98 <HAL_I2C_Mem_Write+0x34>
 8004c92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d105      	bne.n	8004ca4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c9e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e0ed      	b.n	8004e80 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d101      	bne.n	8004cb2 <HAL_I2C_Mem_Write+0x4e>
 8004cae:	2302      	movs	r3, #2
 8004cb0:	e0e6      	b.n	8004e80 <HAL_I2C_Mem_Write+0x21c>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004cba:	f7fe f991 	bl	8002fe0 <HAL_GetTick>
 8004cbe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	9300      	str	r3, [sp, #0]
 8004cc4:	2319      	movs	r3, #25
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f000 fac3 	bl	8005258 <I2C_WaitOnFlagUntilTimeout>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d001      	beq.n	8004cdc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e0d1      	b.n	8004e80 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2221      	movs	r2, #33	; 0x21
 8004ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2240      	movs	r2, #64	; 0x40
 8004ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6a3a      	ldr	r2, [r7, #32]
 8004cf6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004cfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d04:	88f8      	ldrh	r0, [r7, #6]
 8004d06:	893a      	ldrh	r2, [r7, #8]
 8004d08:	8979      	ldrh	r1, [r7, #10]
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	9301      	str	r3, [sp, #4]
 8004d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	4603      	mov	r3, r0
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 f9d3 	bl	80050c0 <I2C_RequestMemoryWrite>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d005      	beq.n	8004d2c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e0a9      	b.n	8004e80 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	2bff      	cmp	r3, #255	; 0xff
 8004d34:	d90e      	bls.n	8004d54 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	22ff      	movs	r2, #255	; 0xff
 8004d3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	8979      	ldrh	r1, [r7, #10]
 8004d44:	2300      	movs	r3, #0
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f000 fc2b 	bl	80055a8 <I2C_TransferConfig>
 8004d52:	e00f      	b.n	8004d74 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d62:	b2da      	uxtb	r2, r3
 8004d64:	8979      	ldrh	r1, [r7, #10]
 8004d66:	2300      	movs	r3, #0
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f000 fc1a 	bl	80055a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f000 faad 	bl	80052d8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d001      	beq.n	8004d88 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e07b      	b.n	8004e80 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	781a      	ldrb	r2, [r3, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	1c5a      	adds	r2, r3, #1
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	3b01      	subs	r3, #1
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db0:	3b01      	subs	r3, #1
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d034      	beq.n	8004e2c <HAL_I2C_Mem_Write+0x1c8>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d130      	bne.n	8004e2c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	2180      	movs	r1, #128	; 0x80
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f000 fa3f 	bl	8005258 <I2C_WaitOnFlagUntilTimeout>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e04d      	b.n	8004e80 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	2bff      	cmp	r3, #255	; 0xff
 8004dec:	d90e      	bls.n	8004e0c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	22ff      	movs	r2, #255	; 0xff
 8004df2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df8:	b2da      	uxtb	r2, r3
 8004dfa:	8979      	ldrh	r1, [r7, #10]
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	9300      	str	r3, [sp, #0]
 8004e00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f000 fbcf 	bl	80055a8 <I2C_TransferConfig>
 8004e0a:	e00f      	b.n	8004e2c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1a:	b2da      	uxtb	r2, r3
 8004e1c:	8979      	ldrh	r1, [r7, #10]
 8004e1e:	2300      	movs	r3, #0
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f000 fbbe 	bl	80055a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d19e      	bne.n	8004d74 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f000 fa8c 	bl	8005358 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e01a      	b.n	8004e80 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6859      	ldr	r1, [r3, #4]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	4b0a      	ldr	r3, [pc, #40]	; (8004e88 <HAL_I2C_Mem_Write+0x224>)
 8004e5e:	400b      	ands	r3, r1
 8004e60:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2220      	movs	r2, #32
 8004e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	e000      	b.n	8004e80 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004e7e:	2302      	movs	r3, #2
  }
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3718      	adds	r7, #24
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	fe00e800 	.word	0xfe00e800

08004e8c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b088      	sub	sp, #32
 8004e90:	af02      	add	r7, sp, #8
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	4608      	mov	r0, r1
 8004e96:	4611      	mov	r1, r2
 8004e98:	461a      	mov	r2, r3
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	817b      	strh	r3, [r7, #10]
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	813b      	strh	r3, [r7, #8]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b20      	cmp	r3, #32
 8004eb0:	f040 80fd 	bne.w	80050ae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eb4:	6a3b      	ldr	r3, [r7, #32]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d002      	beq.n	8004ec0 <HAL_I2C_Mem_Read+0x34>
 8004eba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d105      	bne.n	8004ecc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ec6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e0f1      	b.n	80050b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d101      	bne.n	8004eda <HAL_I2C_Mem_Read+0x4e>
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	e0ea      	b.n	80050b0 <HAL_I2C_Mem_Read+0x224>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ee2:	f7fe f87d 	bl	8002fe0 <HAL_GetTick>
 8004ee6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	9300      	str	r3, [sp, #0]
 8004eec:	2319      	movs	r3, #25
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f000 f9af 	bl	8005258 <I2C_WaitOnFlagUntilTimeout>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e0d5      	b.n	80050b0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2222      	movs	r2, #34	; 0x22
 8004f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2240      	movs	r2, #64	; 0x40
 8004f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6a3a      	ldr	r2, [r7, #32]
 8004f1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004f24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f2c:	88f8      	ldrh	r0, [r7, #6]
 8004f2e:	893a      	ldrh	r2, [r7, #8]
 8004f30:	8979      	ldrh	r1, [r7, #10]
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	9301      	str	r3, [sp, #4]
 8004f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	f000 f913 	bl	8005168 <I2C_RequestMemoryRead>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d005      	beq.n	8004f54 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e0ad      	b.n	80050b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	2bff      	cmp	r3, #255	; 0xff
 8004f5c:	d90e      	bls.n	8004f7c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	22ff      	movs	r2, #255	; 0xff
 8004f62:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	8979      	ldrh	r1, [r7, #10]
 8004f6c:	4b52      	ldr	r3, [pc, #328]	; (80050b8 <HAL_I2C_Mem_Read+0x22c>)
 8004f6e:	9300      	str	r3, [sp, #0]
 8004f70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f000 fb17 	bl	80055a8 <I2C_TransferConfig>
 8004f7a:	e00f      	b.n	8004f9c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f8a:	b2da      	uxtb	r2, r3
 8004f8c:	8979      	ldrh	r1, [r7, #10]
 8004f8e:	4b4a      	ldr	r3, [pc, #296]	; (80050b8 <HAL_I2C_Mem_Read+0x22c>)
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f96:	68f8      	ldr	r0, [r7, #12]
 8004f98:	f000 fb06 	bl	80055a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	2104      	movs	r1, #4
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f000 f956 	bl	8005258 <I2C_WaitOnFlagUntilTimeout>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e07c      	b.n	80050b0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc0:	b2d2      	uxtb	r2, r2
 8004fc2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	1c5a      	adds	r2, r3, #1
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d034      	beq.n	800505c <HAL_I2C_Mem_Read+0x1d0>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d130      	bne.n	800505c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	9300      	str	r3, [sp, #0]
 8004ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005000:	2200      	movs	r2, #0
 8005002:	2180      	movs	r1, #128	; 0x80
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f000 f927 	bl	8005258 <I2C_WaitOnFlagUntilTimeout>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d001      	beq.n	8005014 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e04d      	b.n	80050b0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005018:	b29b      	uxth	r3, r3
 800501a:	2bff      	cmp	r3, #255	; 0xff
 800501c:	d90e      	bls.n	800503c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	22ff      	movs	r2, #255	; 0xff
 8005022:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005028:	b2da      	uxtb	r2, r3
 800502a:	8979      	ldrh	r1, [r7, #10]
 800502c:	2300      	movs	r3, #0
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f000 fab7 	bl	80055a8 <I2C_TransferConfig>
 800503a:	e00f      	b.n	800505c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005040:	b29a      	uxth	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800504a:	b2da      	uxtb	r2, r3
 800504c:	8979      	ldrh	r1, [r7, #10]
 800504e:	2300      	movs	r3, #0
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f000 faa6 	bl	80055a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005060:	b29b      	uxth	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d19a      	bne.n	8004f9c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f000 f974 	bl	8005358 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e01a      	b.n	80050b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2220      	movs	r2, #32
 8005080:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	6859      	ldr	r1, [r3, #4]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	4b0b      	ldr	r3, [pc, #44]	; (80050bc <HAL_I2C_Mem_Read+0x230>)
 800508e:	400b      	ands	r3, r1
 8005090:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2220      	movs	r2, #32
 8005096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80050aa:	2300      	movs	r3, #0
 80050ac:	e000      	b.n	80050b0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80050ae:	2302      	movs	r3, #2
  }
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3718      	adds	r7, #24
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	80002400 	.word	0x80002400
 80050bc:	fe00e800 	.word	0xfe00e800

080050c0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af02      	add	r7, sp, #8
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	4608      	mov	r0, r1
 80050ca:	4611      	mov	r1, r2
 80050cc:	461a      	mov	r2, r3
 80050ce:	4603      	mov	r3, r0
 80050d0:	817b      	strh	r3, [r7, #10]
 80050d2:	460b      	mov	r3, r1
 80050d4:	813b      	strh	r3, [r7, #8]
 80050d6:	4613      	mov	r3, r2
 80050d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80050da:	88fb      	ldrh	r3, [r7, #6]
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	8979      	ldrh	r1, [r7, #10]
 80050e0:	4b20      	ldr	r3, [pc, #128]	; (8005164 <I2C_RequestMemoryWrite+0xa4>)
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f000 fa5d 	bl	80055a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050ee:	69fa      	ldr	r2, [r7, #28]
 80050f0:	69b9      	ldr	r1, [r7, #24]
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f000 f8f0 	bl	80052d8 <I2C_WaitOnTXISFlagUntilTimeout>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e02c      	b.n	800515c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005102:	88fb      	ldrh	r3, [r7, #6]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d105      	bne.n	8005114 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005108:	893b      	ldrh	r3, [r7, #8]
 800510a:	b2da      	uxtb	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	629a      	str	r2, [r3, #40]	; 0x28
 8005112:	e015      	b.n	8005140 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005114:	893b      	ldrh	r3, [r7, #8]
 8005116:	0a1b      	lsrs	r3, r3, #8
 8005118:	b29b      	uxth	r3, r3
 800511a:	b2da      	uxtb	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005122:	69fa      	ldr	r2, [r7, #28]
 8005124:	69b9      	ldr	r1, [r7, #24]
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	f000 f8d6 	bl	80052d8 <I2C_WaitOnTXISFlagUntilTimeout>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d001      	beq.n	8005136 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e012      	b.n	800515c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005136:	893b      	ldrh	r3, [r7, #8]
 8005138:	b2da      	uxtb	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	9300      	str	r3, [sp, #0]
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	2200      	movs	r2, #0
 8005148:	2180      	movs	r1, #128	; 0x80
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f000 f884 	bl	8005258 <I2C_WaitOnFlagUntilTimeout>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d001      	beq.n	800515a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e000      	b.n	800515c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	80002000 	.word	0x80002000

08005168 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af02      	add	r7, sp, #8
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	4608      	mov	r0, r1
 8005172:	4611      	mov	r1, r2
 8005174:	461a      	mov	r2, r3
 8005176:	4603      	mov	r3, r0
 8005178:	817b      	strh	r3, [r7, #10]
 800517a:	460b      	mov	r3, r1
 800517c:	813b      	strh	r3, [r7, #8]
 800517e:	4613      	mov	r3, r2
 8005180:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005182:	88fb      	ldrh	r3, [r7, #6]
 8005184:	b2da      	uxtb	r2, r3
 8005186:	8979      	ldrh	r1, [r7, #10]
 8005188:	4b20      	ldr	r3, [pc, #128]	; (800520c <I2C_RequestMemoryRead+0xa4>)
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	2300      	movs	r3, #0
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f000 fa0a 	bl	80055a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005194:	69fa      	ldr	r2, [r7, #28]
 8005196:	69b9      	ldr	r1, [r7, #24]
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f000 f89d 	bl	80052d8 <I2C_WaitOnTXISFlagUntilTimeout>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d001      	beq.n	80051a8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e02c      	b.n	8005202 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051a8:	88fb      	ldrh	r3, [r7, #6]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d105      	bne.n	80051ba <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80051ae:	893b      	ldrh	r3, [r7, #8]
 80051b0:	b2da      	uxtb	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	629a      	str	r2, [r3, #40]	; 0x28
 80051b8:	e015      	b.n	80051e6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80051ba:	893b      	ldrh	r3, [r7, #8]
 80051bc:	0a1b      	lsrs	r3, r3, #8
 80051be:	b29b      	uxth	r3, r3
 80051c0:	b2da      	uxtb	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051c8:	69fa      	ldr	r2, [r7, #28]
 80051ca:	69b9      	ldr	r1, [r7, #24]
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f000 f883 	bl	80052d8 <I2C_WaitOnTXISFlagUntilTimeout>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d001      	beq.n	80051dc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e012      	b.n	8005202 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80051dc:	893b      	ldrh	r3, [r7, #8]
 80051de:	b2da      	uxtb	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	9300      	str	r3, [sp, #0]
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	2200      	movs	r2, #0
 80051ee:	2140      	movs	r1, #64	; 0x40
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f000 f831 	bl	8005258 <I2C_WaitOnFlagUntilTimeout>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d001      	beq.n	8005200 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e000      	b.n	8005202 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	80002000 	.word	0x80002000

08005210 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	2b02      	cmp	r3, #2
 8005224:	d103      	bne.n	800522e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2200      	movs	r2, #0
 800522c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	f003 0301 	and.w	r3, r3, #1
 8005238:	2b01      	cmp	r3, #1
 800523a:	d007      	beq.n	800524c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	699a      	ldr	r2, [r3, #24]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f042 0201 	orr.w	r2, r2, #1
 800524a:	619a      	str	r2, [r3, #24]
  }
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	603b      	str	r3, [r7, #0]
 8005264:	4613      	mov	r3, r2
 8005266:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005268:	e022      	b.n	80052b0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005270:	d01e      	beq.n	80052b0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005272:	f7fd feb5 	bl	8002fe0 <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	683a      	ldr	r2, [r7, #0]
 800527e:	429a      	cmp	r2, r3
 8005280:	d302      	bcc.n	8005288 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d113      	bne.n	80052b0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800528c:	f043 0220 	orr.w	r2, r3, #32
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2220      	movs	r2, #32
 8005298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e00f      	b.n	80052d0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	699a      	ldr	r2, [r3, #24]
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	4013      	ands	r3, r2
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	429a      	cmp	r2, r3
 80052be:	bf0c      	ite	eq
 80052c0:	2301      	moveq	r3, #1
 80052c2:	2300      	movne	r3, #0
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	461a      	mov	r2, r3
 80052c8:	79fb      	ldrb	r3, [r7, #7]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d0cd      	beq.n	800526a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80052e4:	e02c      	b.n	8005340 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	68b9      	ldr	r1, [r7, #8]
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f000 f870 	bl	80053d0 <I2C_IsErrorOccurred>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e02a      	b.n	8005350 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005300:	d01e      	beq.n	8005340 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005302:	f7fd fe6d 	bl	8002fe0 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	429a      	cmp	r2, r3
 8005310:	d302      	bcc.n	8005318 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d113      	bne.n	8005340 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800531c:	f043 0220 	orr.w	r2, r3, #32
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2220      	movs	r2, #32
 8005328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e007      	b.n	8005350 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	f003 0302 	and.w	r3, r3, #2
 800534a:	2b02      	cmp	r3, #2
 800534c:	d1cb      	bne.n	80052e6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3710      	adds	r7, #16
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005364:	e028      	b.n	80053b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	68b9      	ldr	r1, [r7, #8]
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f000 f830 	bl	80053d0 <I2C_IsErrorOccurred>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d001      	beq.n	800537a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e026      	b.n	80053c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800537a:	f7fd fe31 	bl	8002fe0 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	429a      	cmp	r2, r3
 8005388:	d302      	bcc.n	8005390 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d113      	bne.n	80053b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005394:	f043 0220 	orr.w	r2, r3, #32
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2220      	movs	r2, #32
 80053a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e007      	b.n	80053c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	f003 0320 	and.w	r3, r3, #32
 80053c2:	2b20      	cmp	r3, #32
 80053c4:	d1cf      	bne.n	8005366 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b08a      	sub	sp, #40	; 0x28
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053dc:	2300      	movs	r3, #0
 80053de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80053ea:	2300      	movs	r3, #0
 80053ec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	f003 0310 	and.w	r3, r3, #16
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d075      	beq.n	80054e8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2210      	movs	r2, #16
 8005402:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005404:	e056      	b.n	80054b4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540c:	d052      	beq.n	80054b4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800540e:	f7fd fde7 	bl	8002fe0 <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	429a      	cmp	r2, r3
 800541c:	d302      	bcc.n	8005424 <I2C_IsErrorOccurred+0x54>
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d147      	bne.n	80054b4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800542e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005436:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005442:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005446:	d12e      	bne.n	80054a6 <I2C_IsErrorOccurred+0xd6>
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800544e:	d02a      	beq.n	80054a6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005450:	7cfb      	ldrb	r3, [r7, #19]
 8005452:	2b20      	cmp	r3, #32
 8005454:	d027      	beq.n	80054a6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005464:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005466:	f7fd fdbb 	bl	8002fe0 <HAL_GetTick>
 800546a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800546c:	e01b      	b.n	80054a6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800546e:	f7fd fdb7 	bl	8002fe0 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	2b19      	cmp	r3, #25
 800547a:	d914      	bls.n	80054a6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005480:	f043 0220 	orr.w	r2, r3, #32
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2220      	movs	r2, #32
 800548c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	f003 0320 	and.w	r3, r3, #32
 80054b0:	2b20      	cmp	r3, #32
 80054b2:	d1dc      	bne.n	800546e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	f003 0320 	and.w	r3, r3, #32
 80054be:	2b20      	cmp	r3, #32
 80054c0:	d003      	beq.n	80054ca <I2C_IsErrorOccurred+0xfa>
 80054c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d09d      	beq.n	8005406 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80054ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d103      	bne.n	80054da <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2220      	movs	r2, #32
 80054d8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80054da:	6a3b      	ldr	r3, [r7, #32]
 80054dc:	f043 0304 	orr.w	r3, r3, #4
 80054e0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00b      	beq.n	8005512 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80054fa:	6a3b      	ldr	r3, [r7, #32]
 80054fc:	f043 0301 	orr.w	r3, r3, #1
 8005500:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f44f 7280 	mov.w	r2, #256	; 0x100
 800550a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00b      	beq.n	8005534 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800551c:	6a3b      	ldr	r3, [r7, #32]
 800551e:	f043 0308 	orr.w	r3, r3, #8
 8005522:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800552c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00b      	beq.n	8005556 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	f043 0302 	orr.w	r3, r3, #2
 8005544:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800554e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005556:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800555a:	2b00      	cmp	r3, #0
 800555c:	d01c      	beq.n	8005598 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f7ff fe56 	bl	8005210 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6859      	ldr	r1, [r3, #4]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	4b0d      	ldr	r3, [pc, #52]	; (80055a4 <I2C_IsErrorOccurred+0x1d4>)
 8005570:	400b      	ands	r3, r1
 8005572:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005578:	6a3b      	ldr	r3, [r7, #32]
 800557a:	431a      	orrs	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2220      	movs	r2, #32
 8005584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005598:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800559c:	4618      	mov	r0, r3
 800559e:	3728      	adds	r7, #40	; 0x28
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	fe00e800 	.word	0xfe00e800

080055a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b087      	sub	sp, #28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	607b      	str	r3, [r7, #4]
 80055b2:	460b      	mov	r3, r1
 80055b4:	817b      	strh	r3, [r7, #10]
 80055b6:	4613      	mov	r3, r2
 80055b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055ba:	897b      	ldrh	r3, [r7, #10]
 80055bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80055c0:	7a7b      	ldrb	r3, [r7, #9]
 80055c2:	041b      	lsls	r3, r3, #16
 80055c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055c8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055ce:	6a3b      	ldr	r3, [r7, #32]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055d6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	685a      	ldr	r2, [r3, #4]
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	0d5b      	lsrs	r3, r3, #21
 80055e2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80055e6:	4b08      	ldr	r3, [pc, #32]	; (8005608 <I2C_TransferConfig+0x60>)
 80055e8:	430b      	orrs	r3, r1
 80055ea:	43db      	mvns	r3, r3
 80055ec:	ea02 0103 	and.w	r1, r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80055fa:	bf00      	nop
 80055fc:	371c      	adds	r7, #28
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	03ff63ff 	.word	0x03ff63ff

0800560c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b20      	cmp	r3, #32
 8005620:	d138      	bne.n	8005694 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005628:	2b01      	cmp	r3, #1
 800562a:	d101      	bne.n	8005630 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800562c:	2302      	movs	r3, #2
 800562e:	e032      	b.n	8005696 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2224      	movs	r2, #36	; 0x24
 800563c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f022 0201 	bic.w	r2, r2, #1
 800564e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800565e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	6819      	ldr	r1, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	683a      	ldr	r2, [r7, #0]
 800566c:	430a      	orrs	r2, r1
 800566e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f042 0201 	orr.w	r2, r2, #1
 800567e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2220      	movs	r2, #32
 8005684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005690:	2300      	movs	r3, #0
 8005692:	e000      	b.n	8005696 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005694:	2302      	movs	r3, #2
  }
}
 8005696:	4618      	mov	r0, r3
 8005698:	370c      	adds	r7, #12
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b085      	sub	sp, #20
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b20      	cmp	r3, #32
 80056b6:	d139      	bne.n	800572c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d101      	bne.n	80056c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80056c2:	2302      	movs	r3, #2
 80056c4:	e033      	b.n	800572e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2224      	movs	r2, #36	; 0x24
 80056d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 0201 	bic.w	r2, r2, #1
 80056e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80056f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	021b      	lsls	r3, r3, #8
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f042 0201 	orr.w	r2, r2, #1
 8005716:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2220      	movs	r2, #32
 800571c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005728:	2300      	movs	r3, #0
 800572a:	e000      	b.n	800572e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800572c:	2302      	movs	r3, #2
  }
}
 800572e:	4618      	mov	r0, r3
 8005730:	3714      	adds	r7, #20
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
	...

0800573c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800573c:	b480      	push	{r7}
 800573e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005740:	4b04      	ldr	r3, [pc, #16]	; (8005754 <HAL_PWREx_GetVoltageRange+0x18>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005748:	4618      	mov	r0, r3
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	40007000 	.word	0x40007000

08005758 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005766:	d130      	bne.n	80057ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005768:	4b23      	ldr	r3, [pc, #140]	; (80057f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005774:	d038      	beq.n	80057e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005776:	4b20      	ldr	r3, [pc, #128]	; (80057f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800577e:	4a1e      	ldr	r2, [pc, #120]	; (80057f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005780:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005784:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005786:	4b1d      	ldr	r3, [pc, #116]	; (80057fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2232      	movs	r2, #50	; 0x32
 800578c:	fb02 f303 	mul.w	r3, r2, r3
 8005790:	4a1b      	ldr	r2, [pc, #108]	; (8005800 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005792:	fba2 2303 	umull	r2, r3, r2, r3
 8005796:	0c9b      	lsrs	r3, r3, #18
 8005798:	3301      	adds	r3, #1
 800579a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800579c:	e002      	b.n	80057a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	3b01      	subs	r3, #1
 80057a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057a4:	4b14      	ldr	r3, [pc, #80]	; (80057f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057b0:	d102      	bne.n	80057b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1f2      	bne.n	800579e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80057b8:	4b0f      	ldr	r3, [pc, #60]	; (80057f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057c4:	d110      	bne.n	80057e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e00f      	b.n	80057ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80057ca:	4b0b      	ldr	r3, [pc, #44]	; (80057f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80057d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057d6:	d007      	beq.n	80057e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80057d8:	4b07      	ldr	r3, [pc, #28]	; (80057f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80057e0:	4a05      	ldr	r2, [pc, #20]	; (80057f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	40007000 	.word	0x40007000
 80057fc:	2000000c 	.word	0x2000000c
 8005800:	431bde83 	.word	0x431bde83

08005804 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b088      	sub	sp, #32
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d102      	bne.n	8005818 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	f000 bc02 	b.w	800601c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005818:	4b96      	ldr	r3, [pc, #600]	; (8005a74 <HAL_RCC_OscConfig+0x270>)
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f003 030c 	and.w	r3, r3, #12
 8005820:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005822:	4b94      	ldr	r3, [pc, #592]	; (8005a74 <HAL_RCC_OscConfig+0x270>)
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	f003 0303 	and.w	r3, r3, #3
 800582a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0310 	and.w	r3, r3, #16
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 80e4 	beq.w	8005a02 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d007      	beq.n	8005850 <HAL_RCC_OscConfig+0x4c>
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	2b0c      	cmp	r3, #12
 8005844:	f040 808b 	bne.w	800595e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	2b01      	cmp	r3, #1
 800584c:	f040 8087 	bne.w	800595e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005850:	4b88      	ldr	r3, [pc, #544]	; (8005a74 <HAL_RCC_OscConfig+0x270>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b00      	cmp	r3, #0
 800585a:	d005      	beq.n	8005868 <HAL_RCC_OscConfig+0x64>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d101      	bne.n	8005868 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e3d9      	b.n	800601c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a1a      	ldr	r2, [r3, #32]
 800586c:	4b81      	ldr	r3, [pc, #516]	; (8005a74 <HAL_RCC_OscConfig+0x270>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0308 	and.w	r3, r3, #8
 8005874:	2b00      	cmp	r3, #0
 8005876:	d004      	beq.n	8005882 <HAL_RCC_OscConfig+0x7e>
 8005878:	4b7e      	ldr	r3, [pc, #504]	; (8005a74 <HAL_RCC_OscConfig+0x270>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005880:	e005      	b.n	800588e <HAL_RCC_OscConfig+0x8a>
 8005882:	4b7c      	ldr	r3, [pc, #496]	; (8005a74 <HAL_RCC_OscConfig+0x270>)
 8005884:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005888:	091b      	lsrs	r3, r3, #4
 800588a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800588e:	4293      	cmp	r3, r2
 8005890:	d223      	bcs.n	80058da <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	4618      	mov	r0, r3
 8005898:	f000 fd54 	bl	8006344 <RCC_SetFlashLatencyFromMSIRange>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e3ba      	b.n	800601c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80058a6:	4b73      	ldr	r3, [pc, #460]	; (8005a74 <HAL_RCC_OscConfig+0x270>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a72      	ldr	r2, [pc, #456]	; (8005a74 <HAL_RCC_OscConfig+0x270>)
 80058ac:	f043 0308 	orr.w	r3, r3, #8
 80058b0:	6013      	str	r3, [r2, #0]
 80058b2:	4b70      	ldr	r3, [pc, #448]	; (8005a74 <HAL_RCC_OscConfig+0x270>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	496d      	ldr	r1, [pc, #436]	; (8005a74 <HAL_RCC_OscConfig+0x270>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058c4:	4b6b      	ldr	r3, [pc, #428]	; (8005a74 <HAL_RCC_OscConfig+0x270>)
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	69db      	ldr	r3, [r3, #28]
 80058d0:	021b      	lsls	r3, r3, #8
 80058d2:	4968      	ldr	r1, [pc, #416]	; (8005a74 <HAL_RCC_OscConfig+0x270>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	604b      	str	r3, [r1, #4]
 80058d8:	e025      	b.n	8005926 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80058da:	4b66      	ldr	r3, [pc, #408]	; (8005a74 <HAL_RCC_OscConfig+0x270>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a65      	ldr	r2, [pc, #404]	; (8005a74 <HAL_RCC_OscConfig+0x270>)
 80058e0:	f043 0308 	orr.w	r3, r3, #8
 80058e4:	6013      	str	r3, [r2, #0]
 80058e6:	4b63      	ldr	r3, [pc, #396]	; (8005a74 <HAL_RCC_OscConfig+0x270>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	4960      	ldr	r1, [pc, #384]	; (8005a74 <HAL_RCC_OscConfig+0x270>)
 80058f4:	4313      	orrs	r3, r2
 80058f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058f8:	4b5e      	ldr	r3, [pc, #376]	; (8005a74 <HAL_RCC_OscConfig+0x270>)
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	69db      	ldr	r3, [r3, #28]
 8005904:	021b      	lsls	r3, r3, #8
 8005906:	495b      	ldr	r1, [pc, #364]	; (8005a74 <HAL_RCC_OscConfig+0x270>)
 8005908:	4313      	orrs	r3, r2
 800590a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d109      	bne.n	8005926 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	4618      	mov	r0, r3
 8005918:	f000 fd14 	bl	8006344 <RCC_SetFlashLatencyFromMSIRange>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e37a      	b.n	800601c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005926:	f000 fc81 	bl	800622c <HAL_RCC_GetSysClockFreq>
 800592a:	4602      	mov	r2, r0
 800592c:	4b51      	ldr	r3, [pc, #324]	; (8005a74 <HAL_RCC_OscConfig+0x270>)
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	091b      	lsrs	r3, r3, #4
 8005932:	f003 030f 	and.w	r3, r3, #15
 8005936:	4950      	ldr	r1, [pc, #320]	; (8005a78 <HAL_RCC_OscConfig+0x274>)
 8005938:	5ccb      	ldrb	r3, [r1, r3]
 800593a:	f003 031f 	and.w	r3, r3, #31
 800593e:	fa22 f303 	lsr.w	r3, r2, r3
 8005942:	4a4e      	ldr	r2, [pc, #312]	; (8005a7c <HAL_RCC_OscConfig+0x278>)
 8005944:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005946:	4b4e      	ldr	r3, [pc, #312]	; (8005a80 <HAL_RCC_OscConfig+0x27c>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4618      	mov	r0, r3
 800594c:	f7fd faf8 	bl	8002f40 <HAL_InitTick>
 8005950:	4603      	mov	r3, r0
 8005952:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005954:	7bfb      	ldrb	r3, [r7, #15]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d052      	beq.n	8005a00 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800595a:	7bfb      	ldrb	r3, [r7, #15]
 800595c:	e35e      	b.n	800601c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d032      	beq.n	80059cc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005966:	4b43      	ldr	r3, [pc, #268]	; (8005a74 <HAL_RCC_OscConfig+0x270>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a42      	ldr	r2, [pc, #264]	; (8005a74 <HAL_RCC_OscConfig+0x270>)
 800596c:	f043 0301 	orr.w	r3, r3, #1
 8005970:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005972:	f7fd fb35 	bl	8002fe0 <HAL_GetTick>
 8005976:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005978:	e008      	b.n	800598c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800597a:	f7fd fb31 	bl	8002fe0 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	2b02      	cmp	r3, #2
 8005986:	d901      	bls.n	800598c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e347      	b.n	800601c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800598c:	4b39      	ldr	r3, [pc, #228]	; (8005a74 <HAL_RCC_OscConfig+0x270>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0302 	and.w	r3, r3, #2
 8005994:	2b00      	cmp	r3, #0
 8005996:	d0f0      	beq.n	800597a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005998:	4b36      	ldr	r3, [pc, #216]	; (8005a74 <HAL_RCC_OscConfig+0x270>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a35      	ldr	r2, [pc, #212]	; (8005a74 <HAL_RCC_OscConfig+0x270>)
 800599e:	f043 0308 	orr.w	r3, r3, #8
 80059a2:	6013      	str	r3, [r2, #0]
 80059a4:	4b33      	ldr	r3, [pc, #204]	; (8005a74 <HAL_RCC_OscConfig+0x270>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	4930      	ldr	r1, [pc, #192]	; (8005a74 <HAL_RCC_OscConfig+0x270>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80059b6:	4b2f      	ldr	r3, [pc, #188]	; (8005a74 <HAL_RCC_OscConfig+0x270>)
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	021b      	lsls	r3, r3, #8
 80059c4:	492b      	ldr	r1, [pc, #172]	; (8005a74 <HAL_RCC_OscConfig+0x270>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	604b      	str	r3, [r1, #4]
 80059ca:	e01a      	b.n	8005a02 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80059cc:	4b29      	ldr	r3, [pc, #164]	; (8005a74 <HAL_RCC_OscConfig+0x270>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a28      	ldr	r2, [pc, #160]	; (8005a74 <HAL_RCC_OscConfig+0x270>)
 80059d2:	f023 0301 	bic.w	r3, r3, #1
 80059d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80059d8:	f7fd fb02 	bl	8002fe0 <HAL_GetTick>
 80059dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80059de:	e008      	b.n	80059f2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80059e0:	f7fd fafe 	bl	8002fe0 <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d901      	bls.n	80059f2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e314      	b.n	800601c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80059f2:	4b20      	ldr	r3, [pc, #128]	; (8005a74 <HAL_RCC_OscConfig+0x270>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1f0      	bne.n	80059e0 <HAL_RCC_OscConfig+0x1dc>
 80059fe:	e000      	b.n	8005a02 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005a00:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0301 	and.w	r3, r3, #1
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d073      	beq.n	8005af6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	2b08      	cmp	r3, #8
 8005a12:	d005      	beq.n	8005a20 <HAL_RCC_OscConfig+0x21c>
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	2b0c      	cmp	r3, #12
 8005a18:	d10e      	bne.n	8005a38 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	2b03      	cmp	r3, #3
 8005a1e:	d10b      	bne.n	8005a38 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a20:	4b14      	ldr	r3, [pc, #80]	; (8005a74 <HAL_RCC_OscConfig+0x270>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d063      	beq.n	8005af4 <HAL_RCC_OscConfig+0x2f0>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d15f      	bne.n	8005af4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e2f1      	b.n	800601c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a40:	d106      	bne.n	8005a50 <HAL_RCC_OscConfig+0x24c>
 8005a42:	4b0c      	ldr	r3, [pc, #48]	; (8005a74 <HAL_RCC_OscConfig+0x270>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a0b      	ldr	r2, [pc, #44]	; (8005a74 <HAL_RCC_OscConfig+0x270>)
 8005a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a4c:	6013      	str	r3, [r2, #0]
 8005a4e:	e025      	b.n	8005a9c <HAL_RCC_OscConfig+0x298>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a58:	d114      	bne.n	8005a84 <HAL_RCC_OscConfig+0x280>
 8005a5a:	4b06      	ldr	r3, [pc, #24]	; (8005a74 <HAL_RCC_OscConfig+0x270>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a05      	ldr	r2, [pc, #20]	; (8005a74 <HAL_RCC_OscConfig+0x270>)
 8005a60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a64:	6013      	str	r3, [r2, #0]
 8005a66:	4b03      	ldr	r3, [pc, #12]	; (8005a74 <HAL_RCC_OscConfig+0x270>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a02      	ldr	r2, [pc, #8]	; (8005a74 <HAL_RCC_OscConfig+0x270>)
 8005a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a70:	6013      	str	r3, [r2, #0]
 8005a72:	e013      	b.n	8005a9c <HAL_RCC_OscConfig+0x298>
 8005a74:	40021000 	.word	0x40021000
 8005a78:	0800cc38 	.word	0x0800cc38
 8005a7c:	2000000c 	.word	0x2000000c
 8005a80:	20000010 	.word	0x20000010
 8005a84:	4ba0      	ldr	r3, [pc, #640]	; (8005d08 <HAL_RCC_OscConfig+0x504>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a9f      	ldr	r2, [pc, #636]	; (8005d08 <HAL_RCC_OscConfig+0x504>)
 8005a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a8e:	6013      	str	r3, [r2, #0]
 8005a90:	4b9d      	ldr	r3, [pc, #628]	; (8005d08 <HAL_RCC_OscConfig+0x504>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a9c      	ldr	r2, [pc, #624]	; (8005d08 <HAL_RCC_OscConfig+0x504>)
 8005a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d013      	beq.n	8005acc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa4:	f7fd fa9c 	bl	8002fe0 <HAL_GetTick>
 8005aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005aaa:	e008      	b.n	8005abe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005aac:	f7fd fa98 	bl	8002fe0 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	2b64      	cmp	r3, #100	; 0x64
 8005ab8:	d901      	bls.n	8005abe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e2ae      	b.n	800601c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005abe:	4b92      	ldr	r3, [pc, #584]	; (8005d08 <HAL_RCC_OscConfig+0x504>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d0f0      	beq.n	8005aac <HAL_RCC_OscConfig+0x2a8>
 8005aca:	e014      	b.n	8005af6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005acc:	f7fd fa88 	bl	8002fe0 <HAL_GetTick>
 8005ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005ad2:	e008      	b.n	8005ae6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ad4:	f7fd fa84 	bl	8002fe0 <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	2b64      	cmp	r3, #100	; 0x64
 8005ae0:	d901      	bls.n	8005ae6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e29a      	b.n	800601c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005ae6:	4b88      	ldr	r3, [pc, #544]	; (8005d08 <HAL_RCC_OscConfig+0x504>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1f0      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x2d0>
 8005af2:	e000      	b.n	8005af6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0302 	and.w	r3, r3, #2
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d060      	beq.n	8005bc4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	2b04      	cmp	r3, #4
 8005b06:	d005      	beq.n	8005b14 <HAL_RCC_OscConfig+0x310>
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	2b0c      	cmp	r3, #12
 8005b0c:	d119      	bne.n	8005b42 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d116      	bne.n	8005b42 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b14:	4b7c      	ldr	r3, [pc, #496]	; (8005d08 <HAL_RCC_OscConfig+0x504>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d005      	beq.n	8005b2c <HAL_RCC_OscConfig+0x328>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d101      	bne.n	8005b2c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e277      	b.n	800601c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b2c:	4b76      	ldr	r3, [pc, #472]	; (8005d08 <HAL_RCC_OscConfig+0x504>)
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	061b      	lsls	r3, r3, #24
 8005b3a:	4973      	ldr	r1, [pc, #460]	; (8005d08 <HAL_RCC_OscConfig+0x504>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b40:	e040      	b.n	8005bc4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d023      	beq.n	8005b92 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b4a:	4b6f      	ldr	r3, [pc, #444]	; (8005d08 <HAL_RCC_OscConfig+0x504>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a6e      	ldr	r2, [pc, #440]	; (8005d08 <HAL_RCC_OscConfig+0x504>)
 8005b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b56:	f7fd fa43 	bl	8002fe0 <HAL_GetTick>
 8005b5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b5c:	e008      	b.n	8005b70 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b5e:	f7fd fa3f 	bl	8002fe0 <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d901      	bls.n	8005b70 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e255      	b.n	800601c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b70:	4b65      	ldr	r3, [pc, #404]	; (8005d08 <HAL_RCC_OscConfig+0x504>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d0f0      	beq.n	8005b5e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b7c:	4b62      	ldr	r3, [pc, #392]	; (8005d08 <HAL_RCC_OscConfig+0x504>)
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	061b      	lsls	r3, r3, #24
 8005b8a:	495f      	ldr	r1, [pc, #380]	; (8005d08 <HAL_RCC_OscConfig+0x504>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	604b      	str	r3, [r1, #4]
 8005b90:	e018      	b.n	8005bc4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b92:	4b5d      	ldr	r3, [pc, #372]	; (8005d08 <HAL_RCC_OscConfig+0x504>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a5c      	ldr	r2, [pc, #368]	; (8005d08 <HAL_RCC_OscConfig+0x504>)
 8005b98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b9e:	f7fd fa1f 	bl	8002fe0 <HAL_GetTick>
 8005ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ba4:	e008      	b.n	8005bb8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ba6:	f7fd fa1b 	bl	8002fe0 <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d901      	bls.n	8005bb8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e231      	b.n	800601c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005bb8:	4b53      	ldr	r3, [pc, #332]	; (8005d08 <HAL_RCC_OscConfig+0x504>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1f0      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0308 	and.w	r3, r3, #8
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d03c      	beq.n	8005c4a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d01c      	beq.n	8005c12 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bd8:	4b4b      	ldr	r3, [pc, #300]	; (8005d08 <HAL_RCC_OscConfig+0x504>)
 8005bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bde:	4a4a      	ldr	r2, [pc, #296]	; (8005d08 <HAL_RCC_OscConfig+0x504>)
 8005be0:	f043 0301 	orr.w	r3, r3, #1
 8005be4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005be8:	f7fd f9fa 	bl	8002fe0 <HAL_GetTick>
 8005bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bee:	e008      	b.n	8005c02 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bf0:	f7fd f9f6 	bl	8002fe0 <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d901      	bls.n	8005c02 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e20c      	b.n	800601c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c02:	4b41      	ldr	r3, [pc, #260]	; (8005d08 <HAL_RCC_OscConfig+0x504>)
 8005c04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c08:	f003 0302 	and.w	r3, r3, #2
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d0ef      	beq.n	8005bf0 <HAL_RCC_OscConfig+0x3ec>
 8005c10:	e01b      	b.n	8005c4a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c12:	4b3d      	ldr	r3, [pc, #244]	; (8005d08 <HAL_RCC_OscConfig+0x504>)
 8005c14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c18:	4a3b      	ldr	r2, [pc, #236]	; (8005d08 <HAL_RCC_OscConfig+0x504>)
 8005c1a:	f023 0301 	bic.w	r3, r3, #1
 8005c1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c22:	f7fd f9dd 	bl	8002fe0 <HAL_GetTick>
 8005c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c28:	e008      	b.n	8005c3c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c2a:	f7fd f9d9 	bl	8002fe0 <HAL_GetTick>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d901      	bls.n	8005c3c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e1ef      	b.n	800601c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c3c:	4b32      	ldr	r3, [pc, #200]	; (8005d08 <HAL_RCC_OscConfig+0x504>)
 8005c3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c42:	f003 0302 	and.w	r3, r3, #2
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1ef      	bne.n	8005c2a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0304 	and.w	r3, r3, #4
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	f000 80a6 	beq.w	8005da4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005c5c:	4b2a      	ldr	r3, [pc, #168]	; (8005d08 <HAL_RCC_OscConfig+0x504>)
 8005c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10d      	bne.n	8005c84 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c68:	4b27      	ldr	r3, [pc, #156]	; (8005d08 <HAL_RCC_OscConfig+0x504>)
 8005c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c6c:	4a26      	ldr	r2, [pc, #152]	; (8005d08 <HAL_RCC_OscConfig+0x504>)
 8005c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c72:	6593      	str	r3, [r2, #88]	; 0x58
 8005c74:	4b24      	ldr	r3, [pc, #144]	; (8005d08 <HAL_RCC_OscConfig+0x504>)
 8005c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c7c:	60bb      	str	r3, [r7, #8]
 8005c7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c80:	2301      	movs	r3, #1
 8005c82:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c84:	4b21      	ldr	r3, [pc, #132]	; (8005d0c <HAL_RCC_OscConfig+0x508>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d118      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c90:	4b1e      	ldr	r3, [pc, #120]	; (8005d0c <HAL_RCC_OscConfig+0x508>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a1d      	ldr	r2, [pc, #116]	; (8005d0c <HAL_RCC_OscConfig+0x508>)
 8005c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c9c:	f7fd f9a0 	bl	8002fe0 <HAL_GetTick>
 8005ca0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ca2:	e008      	b.n	8005cb6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ca4:	f7fd f99c 	bl	8002fe0 <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d901      	bls.n	8005cb6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e1b2      	b.n	800601c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005cb6:	4b15      	ldr	r3, [pc, #84]	; (8005d0c <HAL_RCC_OscConfig+0x508>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d0f0      	beq.n	8005ca4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d108      	bne.n	8005cdc <HAL_RCC_OscConfig+0x4d8>
 8005cca:	4b0f      	ldr	r3, [pc, #60]	; (8005d08 <HAL_RCC_OscConfig+0x504>)
 8005ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd0:	4a0d      	ldr	r2, [pc, #52]	; (8005d08 <HAL_RCC_OscConfig+0x504>)
 8005cd2:	f043 0301 	orr.w	r3, r3, #1
 8005cd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cda:	e029      	b.n	8005d30 <HAL_RCC_OscConfig+0x52c>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	2b05      	cmp	r3, #5
 8005ce2:	d115      	bne.n	8005d10 <HAL_RCC_OscConfig+0x50c>
 8005ce4:	4b08      	ldr	r3, [pc, #32]	; (8005d08 <HAL_RCC_OscConfig+0x504>)
 8005ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cea:	4a07      	ldr	r2, [pc, #28]	; (8005d08 <HAL_RCC_OscConfig+0x504>)
 8005cec:	f043 0304 	orr.w	r3, r3, #4
 8005cf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cf4:	4b04      	ldr	r3, [pc, #16]	; (8005d08 <HAL_RCC_OscConfig+0x504>)
 8005cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cfa:	4a03      	ldr	r2, [pc, #12]	; (8005d08 <HAL_RCC_OscConfig+0x504>)
 8005cfc:	f043 0301 	orr.w	r3, r3, #1
 8005d00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d04:	e014      	b.n	8005d30 <HAL_RCC_OscConfig+0x52c>
 8005d06:	bf00      	nop
 8005d08:	40021000 	.word	0x40021000
 8005d0c:	40007000 	.word	0x40007000
 8005d10:	4b9a      	ldr	r3, [pc, #616]	; (8005f7c <HAL_RCC_OscConfig+0x778>)
 8005d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d16:	4a99      	ldr	r2, [pc, #612]	; (8005f7c <HAL_RCC_OscConfig+0x778>)
 8005d18:	f023 0301 	bic.w	r3, r3, #1
 8005d1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d20:	4b96      	ldr	r3, [pc, #600]	; (8005f7c <HAL_RCC_OscConfig+0x778>)
 8005d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d26:	4a95      	ldr	r2, [pc, #596]	; (8005f7c <HAL_RCC_OscConfig+0x778>)
 8005d28:	f023 0304 	bic.w	r3, r3, #4
 8005d2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d016      	beq.n	8005d66 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d38:	f7fd f952 	bl	8002fe0 <HAL_GetTick>
 8005d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d3e:	e00a      	b.n	8005d56 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d40:	f7fd f94e 	bl	8002fe0 <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d901      	bls.n	8005d56 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e162      	b.n	800601c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d56:	4b89      	ldr	r3, [pc, #548]	; (8005f7c <HAL_RCC_OscConfig+0x778>)
 8005d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d0ed      	beq.n	8005d40 <HAL_RCC_OscConfig+0x53c>
 8005d64:	e015      	b.n	8005d92 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d66:	f7fd f93b 	bl	8002fe0 <HAL_GetTick>
 8005d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d6c:	e00a      	b.n	8005d84 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d6e:	f7fd f937 	bl	8002fe0 <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d901      	bls.n	8005d84 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e14b      	b.n	800601c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d84:	4b7d      	ldr	r3, [pc, #500]	; (8005f7c <HAL_RCC_OscConfig+0x778>)
 8005d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d8a:	f003 0302 	and.w	r3, r3, #2
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1ed      	bne.n	8005d6e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d92:	7ffb      	ldrb	r3, [r7, #31]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d105      	bne.n	8005da4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d98:	4b78      	ldr	r3, [pc, #480]	; (8005f7c <HAL_RCC_OscConfig+0x778>)
 8005d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d9c:	4a77      	ldr	r2, [pc, #476]	; (8005f7c <HAL_RCC_OscConfig+0x778>)
 8005d9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005da2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0320 	and.w	r3, r3, #32
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d03c      	beq.n	8005e2a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d01c      	beq.n	8005df2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005db8:	4b70      	ldr	r3, [pc, #448]	; (8005f7c <HAL_RCC_OscConfig+0x778>)
 8005dba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005dbe:	4a6f      	ldr	r2, [pc, #444]	; (8005f7c <HAL_RCC_OscConfig+0x778>)
 8005dc0:	f043 0301 	orr.w	r3, r3, #1
 8005dc4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dc8:	f7fd f90a 	bl	8002fe0 <HAL_GetTick>
 8005dcc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005dce:	e008      	b.n	8005de2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005dd0:	f7fd f906 	bl	8002fe0 <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d901      	bls.n	8005de2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e11c      	b.n	800601c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005de2:	4b66      	ldr	r3, [pc, #408]	; (8005f7c <HAL_RCC_OscConfig+0x778>)
 8005de4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005de8:	f003 0302 	and.w	r3, r3, #2
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d0ef      	beq.n	8005dd0 <HAL_RCC_OscConfig+0x5cc>
 8005df0:	e01b      	b.n	8005e2a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005df2:	4b62      	ldr	r3, [pc, #392]	; (8005f7c <HAL_RCC_OscConfig+0x778>)
 8005df4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005df8:	4a60      	ldr	r2, [pc, #384]	; (8005f7c <HAL_RCC_OscConfig+0x778>)
 8005dfa:	f023 0301 	bic.w	r3, r3, #1
 8005dfe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e02:	f7fd f8ed 	bl	8002fe0 <HAL_GetTick>
 8005e06:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005e08:	e008      	b.n	8005e1c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e0a:	f7fd f8e9 	bl	8002fe0 <HAL_GetTick>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	1ad3      	subs	r3, r2, r3
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d901      	bls.n	8005e1c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e0ff      	b.n	800601c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005e1c:	4b57      	ldr	r3, [pc, #348]	; (8005f7c <HAL_RCC_OscConfig+0x778>)
 8005e1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e22:	f003 0302 	and.w	r3, r3, #2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1ef      	bne.n	8005e0a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f000 80f3 	beq.w	800601a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	f040 80c9 	bne.w	8005fd0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005e3e:	4b4f      	ldr	r3, [pc, #316]	; (8005f7c <HAL_RCC_OscConfig+0x778>)
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	f003 0203 	and.w	r2, r3, #3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d12c      	bne.n	8005eac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d123      	bne.n	8005eac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e6e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d11b      	bne.n	8005eac <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d113      	bne.n	8005eac <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e8e:	085b      	lsrs	r3, r3, #1
 8005e90:	3b01      	subs	r3, #1
 8005e92:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d109      	bne.n	8005eac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea2:	085b      	lsrs	r3, r3, #1
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d06b      	beq.n	8005f84 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	2b0c      	cmp	r3, #12
 8005eb0:	d062      	beq.n	8005f78 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005eb2:	4b32      	ldr	r3, [pc, #200]	; (8005f7c <HAL_RCC_OscConfig+0x778>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d001      	beq.n	8005ec2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e0ac      	b.n	800601c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005ec2:	4b2e      	ldr	r3, [pc, #184]	; (8005f7c <HAL_RCC_OscConfig+0x778>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a2d      	ldr	r2, [pc, #180]	; (8005f7c <HAL_RCC_OscConfig+0x778>)
 8005ec8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ecc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005ece:	f7fd f887 	bl	8002fe0 <HAL_GetTick>
 8005ed2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ed4:	e008      	b.n	8005ee8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ed6:	f7fd f883 	bl	8002fe0 <HAL_GetTick>
 8005eda:	4602      	mov	r2, r0
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d901      	bls.n	8005ee8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	e099      	b.n	800601c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ee8:	4b24      	ldr	r3, [pc, #144]	; (8005f7c <HAL_RCC_OscConfig+0x778>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1f0      	bne.n	8005ed6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ef4:	4b21      	ldr	r3, [pc, #132]	; (8005f7c <HAL_RCC_OscConfig+0x778>)
 8005ef6:	68da      	ldr	r2, [r3, #12]
 8005ef8:	4b21      	ldr	r3, [pc, #132]	; (8005f80 <HAL_RCC_OscConfig+0x77c>)
 8005efa:	4013      	ands	r3, r2
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005f04:	3a01      	subs	r2, #1
 8005f06:	0112      	lsls	r2, r2, #4
 8005f08:	4311      	orrs	r1, r2
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005f0e:	0212      	lsls	r2, r2, #8
 8005f10:	4311      	orrs	r1, r2
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005f16:	0852      	lsrs	r2, r2, #1
 8005f18:	3a01      	subs	r2, #1
 8005f1a:	0552      	lsls	r2, r2, #21
 8005f1c:	4311      	orrs	r1, r2
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005f22:	0852      	lsrs	r2, r2, #1
 8005f24:	3a01      	subs	r2, #1
 8005f26:	0652      	lsls	r2, r2, #25
 8005f28:	4311      	orrs	r1, r2
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f2e:	06d2      	lsls	r2, r2, #27
 8005f30:	430a      	orrs	r2, r1
 8005f32:	4912      	ldr	r1, [pc, #72]	; (8005f7c <HAL_RCC_OscConfig+0x778>)
 8005f34:	4313      	orrs	r3, r2
 8005f36:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005f38:	4b10      	ldr	r3, [pc, #64]	; (8005f7c <HAL_RCC_OscConfig+0x778>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a0f      	ldr	r2, [pc, #60]	; (8005f7c <HAL_RCC_OscConfig+0x778>)
 8005f3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f42:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f44:	4b0d      	ldr	r3, [pc, #52]	; (8005f7c <HAL_RCC_OscConfig+0x778>)
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	4a0c      	ldr	r2, [pc, #48]	; (8005f7c <HAL_RCC_OscConfig+0x778>)
 8005f4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f4e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005f50:	f7fd f846 	bl	8002fe0 <HAL_GetTick>
 8005f54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f56:	e008      	b.n	8005f6a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f58:	f7fd f842 	bl	8002fe0 <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d901      	bls.n	8005f6a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e058      	b.n	800601c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f6a:	4b04      	ldr	r3, [pc, #16]	; (8005f7c <HAL_RCC_OscConfig+0x778>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d0f0      	beq.n	8005f58 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f76:	e050      	b.n	800601a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e04f      	b.n	800601c <HAL_RCC_OscConfig+0x818>
 8005f7c:	40021000 	.word	0x40021000
 8005f80:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f84:	4b27      	ldr	r3, [pc, #156]	; (8006024 <HAL_RCC_OscConfig+0x820>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d144      	bne.n	800601a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005f90:	4b24      	ldr	r3, [pc, #144]	; (8006024 <HAL_RCC_OscConfig+0x820>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a23      	ldr	r2, [pc, #140]	; (8006024 <HAL_RCC_OscConfig+0x820>)
 8005f96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f9a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f9c:	4b21      	ldr	r3, [pc, #132]	; (8006024 <HAL_RCC_OscConfig+0x820>)
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	4a20      	ldr	r2, [pc, #128]	; (8006024 <HAL_RCC_OscConfig+0x820>)
 8005fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fa6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005fa8:	f7fd f81a 	bl	8002fe0 <HAL_GetTick>
 8005fac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fae:	e008      	b.n	8005fc2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fb0:	f7fd f816 	bl	8002fe0 <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d901      	bls.n	8005fc2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e02c      	b.n	800601c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fc2:	4b18      	ldr	r3, [pc, #96]	; (8006024 <HAL_RCC_OscConfig+0x820>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d0f0      	beq.n	8005fb0 <HAL_RCC_OscConfig+0x7ac>
 8005fce:	e024      	b.n	800601a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	2b0c      	cmp	r3, #12
 8005fd4:	d01f      	beq.n	8006016 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fd6:	4b13      	ldr	r3, [pc, #76]	; (8006024 <HAL_RCC_OscConfig+0x820>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a12      	ldr	r2, [pc, #72]	; (8006024 <HAL_RCC_OscConfig+0x820>)
 8005fdc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fe0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe2:	f7fc fffd 	bl	8002fe0 <HAL_GetTick>
 8005fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fe8:	e008      	b.n	8005ffc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fea:	f7fc fff9 	bl	8002fe0 <HAL_GetTick>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d901      	bls.n	8005ffc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e00f      	b.n	800601c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ffc:	4b09      	ldr	r3, [pc, #36]	; (8006024 <HAL_RCC_OscConfig+0x820>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1f0      	bne.n	8005fea <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006008:	4b06      	ldr	r3, [pc, #24]	; (8006024 <HAL_RCC_OscConfig+0x820>)
 800600a:	68da      	ldr	r2, [r3, #12]
 800600c:	4905      	ldr	r1, [pc, #20]	; (8006024 <HAL_RCC_OscConfig+0x820>)
 800600e:	4b06      	ldr	r3, [pc, #24]	; (8006028 <HAL_RCC_OscConfig+0x824>)
 8006010:	4013      	ands	r3, r2
 8006012:	60cb      	str	r3, [r1, #12]
 8006014:	e001      	b.n	800601a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e000      	b.n	800601c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3720      	adds	r7, #32
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	40021000 	.word	0x40021000
 8006028:	feeefffc 	.word	0xfeeefffc

0800602c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d101      	bne.n	8006040 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e0e7      	b.n	8006210 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006040:	4b75      	ldr	r3, [pc, #468]	; (8006218 <HAL_RCC_ClockConfig+0x1ec>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0307 	and.w	r3, r3, #7
 8006048:	683a      	ldr	r2, [r7, #0]
 800604a:	429a      	cmp	r2, r3
 800604c:	d910      	bls.n	8006070 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800604e:	4b72      	ldr	r3, [pc, #456]	; (8006218 <HAL_RCC_ClockConfig+0x1ec>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f023 0207 	bic.w	r2, r3, #7
 8006056:	4970      	ldr	r1, [pc, #448]	; (8006218 <HAL_RCC_ClockConfig+0x1ec>)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	4313      	orrs	r3, r2
 800605c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800605e:	4b6e      	ldr	r3, [pc, #440]	; (8006218 <HAL_RCC_ClockConfig+0x1ec>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0307 	and.w	r3, r3, #7
 8006066:	683a      	ldr	r2, [r7, #0]
 8006068:	429a      	cmp	r2, r3
 800606a:	d001      	beq.n	8006070 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e0cf      	b.n	8006210 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d010      	beq.n	800609e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	689a      	ldr	r2, [r3, #8]
 8006080:	4b66      	ldr	r3, [pc, #408]	; (800621c <HAL_RCC_ClockConfig+0x1f0>)
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006088:	429a      	cmp	r2, r3
 800608a:	d908      	bls.n	800609e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800608c:	4b63      	ldr	r3, [pc, #396]	; (800621c <HAL_RCC_ClockConfig+0x1f0>)
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	4960      	ldr	r1, [pc, #384]	; (800621c <HAL_RCC_ClockConfig+0x1f0>)
 800609a:	4313      	orrs	r3, r2
 800609c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 0301 	and.w	r3, r3, #1
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d04c      	beq.n	8006144 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	2b03      	cmp	r3, #3
 80060b0:	d107      	bne.n	80060c2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060b2:	4b5a      	ldr	r3, [pc, #360]	; (800621c <HAL_RCC_ClockConfig+0x1f0>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d121      	bne.n	8006102 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e0a6      	b.n	8006210 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d107      	bne.n	80060da <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80060ca:	4b54      	ldr	r3, [pc, #336]	; (800621c <HAL_RCC_ClockConfig+0x1f0>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d115      	bne.n	8006102 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e09a      	b.n	8006210 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d107      	bne.n	80060f2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80060e2:	4b4e      	ldr	r3, [pc, #312]	; (800621c <HAL_RCC_ClockConfig+0x1f0>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0302 	and.w	r3, r3, #2
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d109      	bne.n	8006102 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e08e      	b.n	8006210 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060f2:	4b4a      	ldr	r3, [pc, #296]	; (800621c <HAL_RCC_ClockConfig+0x1f0>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e086      	b.n	8006210 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006102:	4b46      	ldr	r3, [pc, #280]	; (800621c <HAL_RCC_ClockConfig+0x1f0>)
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f023 0203 	bic.w	r2, r3, #3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	4943      	ldr	r1, [pc, #268]	; (800621c <HAL_RCC_ClockConfig+0x1f0>)
 8006110:	4313      	orrs	r3, r2
 8006112:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006114:	f7fc ff64 	bl	8002fe0 <HAL_GetTick>
 8006118:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800611a:	e00a      	b.n	8006132 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800611c:	f7fc ff60 	bl	8002fe0 <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	f241 3288 	movw	r2, #5000	; 0x1388
 800612a:	4293      	cmp	r3, r2
 800612c:	d901      	bls.n	8006132 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e06e      	b.n	8006210 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006132:	4b3a      	ldr	r3, [pc, #232]	; (800621c <HAL_RCC_ClockConfig+0x1f0>)
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f003 020c 	and.w	r2, r3, #12
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	429a      	cmp	r2, r3
 8006142:	d1eb      	bne.n	800611c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 0302 	and.w	r3, r3, #2
 800614c:	2b00      	cmp	r3, #0
 800614e:	d010      	beq.n	8006172 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689a      	ldr	r2, [r3, #8]
 8006154:	4b31      	ldr	r3, [pc, #196]	; (800621c <HAL_RCC_ClockConfig+0x1f0>)
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800615c:	429a      	cmp	r2, r3
 800615e:	d208      	bcs.n	8006172 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006160:	4b2e      	ldr	r3, [pc, #184]	; (800621c <HAL_RCC_ClockConfig+0x1f0>)
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	492b      	ldr	r1, [pc, #172]	; (800621c <HAL_RCC_ClockConfig+0x1f0>)
 800616e:	4313      	orrs	r3, r2
 8006170:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006172:	4b29      	ldr	r3, [pc, #164]	; (8006218 <HAL_RCC_ClockConfig+0x1ec>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0307 	and.w	r3, r3, #7
 800617a:	683a      	ldr	r2, [r7, #0]
 800617c:	429a      	cmp	r2, r3
 800617e:	d210      	bcs.n	80061a2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006180:	4b25      	ldr	r3, [pc, #148]	; (8006218 <HAL_RCC_ClockConfig+0x1ec>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f023 0207 	bic.w	r2, r3, #7
 8006188:	4923      	ldr	r1, [pc, #140]	; (8006218 <HAL_RCC_ClockConfig+0x1ec>)
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	4313      	orrs	r3, r2
 800618e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006190:	4b21      	ldr	r3, [pc, #132]	; (8006218 <HAL_RCC_ClockConfig+0x1ec>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0307 	and.w	r3, r3, #7
 8006198:	683a      	ldr	r2, [r7, #0]
 800619a:	429a      	cmp	r2, r3
 800619c:	d001      	beq.n	80061a2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e036      	b.n	8006210 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 0304 	and.w	r3, r3, #4
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d008      	beq.n	80061c0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061ae:	4b1b      	ldr	r3, [pc, #108]	; (800621c <HAL_RCC_ClockConfig+0x1f0>)
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	4918      	ldr	r1, [pc, #96]	; (800621c <HAL_RCC_ClockConfig+0x1f0>)
 80061bc:	4313      	orrs	r3, r2
 80061be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0308 	and.w	r3, r3, #8
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d009      	beq.n	80061e0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061cc:	4b13      	ldr	r3, [pc, #76]	; (800621c <HAL_RCC_ClockConfig+0x1f0>)
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	00db      	lsls	r3, r3, #3
 80061da:	4910      	ldr	r1, [pc, #64]	; (800621c <HAL_RCC_ClockConfig+0x1f0>)
 80061dc:	4313      	orrs	r3, r2
 80061de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80061e0:	f000 f824 	bl	800622c <HAL_RCC_GetSysClockFreq>
 80061e4:	4602      	mov	r2, r0
 80061e6:	4b0d      	ldr	r3, [pc, #52]	; (800621c <HAL_RCC_ClockConfig+0x1f0>)
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	091b      	lsrs	r3, r3, #4
 80061ec:	f003 030f 	and.w	r3, r3, #15
 80061f0:	490b      	ldr	r1, [pc, #44]	; (8006220 <HAL_RCC_ClockConfig+0x1f4>)
 80061f2:	5ccb      	ldrb	r3, [r1, r3]
 80061f4:	f003 031f 	and.w	r3, r3, #31
 80061f8:	fa22 f303 	lsr.w	r3, r2, r3
 80061fc:	4a09      	ldr	r2, [pc, #36]	; (8006224 <HAL_RCC_ClockConfig+0x1f8>)
 80061fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006200:	4b09      	ldr	r3, [pc, #36]	; (8006228 <HAL_RCC_ClockConfig+0x1fc>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4618      	mov	r0, r3
 8006206:	f7fc fe9b 	bl	8002f40 <HAL_InitTick>
 800620a:	4603      	mov	r3, r0
 800620c:	72fb      	strb	r3, [r7, #11]

  return status;
 800620e:	7afb      	ldrb	r3, [r7, #11]
}
 8006210:	4618      	mov	r0, r3
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	40022000 	.word	0x40022000
 800621c:	40021000 	.word	0x40021000
 8006220:	0800cc38 	.word	0x0800cc38
 8006224:	2000000c 	.word	0x2000000c
 8006228:	20000010 	.word	0x20000010

0800622c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800622c:	b480      	push	{r7}
 800622e:	b089      	sub	sp, #36	; 0x24
 8006230:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006232:	2300      	movs	r3, #0
 8006234:	61fb      	str	r3, [r7, #28]
 8006236:	2300      	movs	r3, #0
 8006238:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800623a:	4b3e      	ldr	r3, [pc, #248]	; (8006334 <HAL_RCC_GetSysClockFreq+0x108>)
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	f003 030c 	and.w	r3, r3, #12
 8006242:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006244:	4b3b      	ldr	r3, [pc, #236]	; (8006334 <HAL_RCC_GetSysClockFreq+0x108>)
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	f003 0303 	and.w	r3, r3, #3
 800624c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d005      	beq.n	8006260 <HAL_RCC_GetSysClockFreq+0x34>
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	2b0c      	cmp	r3, #12
 8006258:	d121      	bne.n	800629e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d11e      	bne.n	800629e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006260:	4b34      	ldr	r3, [pc, #208]	; (8006334 <HAL_RCC_GetSysClockFreq+0x108>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0308 	and.w	r3, r3, #8
 8006268:	2b00      	cmp	r3, #0
 800626a:	d107      	bne.n	800627c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800626c:	4b31      	ldr	r3, [pc, #196]	; (8006334 <HAL_RCC_GetSysClockFreq+0x108>)
 800626e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006272:	0a1b      	lsrs	r3, r3, #8
 8006274:	f003 030f 	and.w	r3, r3, #15
 8006278:	61fb      	str	r3, [r7, #28]
 800627a:	e005      	b.n	8006288 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800627c:	4b2d      	ldr	r3, [pc, #180]	; (8006334 <HAL_RCC_GetSysClockFreq+0x108>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	091b      	lsrs	r3, r3, #4
 8006282:	f003 030f 	and.w	r3, r3, #15
 8006286:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006288:	4a2b      	ldr	r2, [pc, #172]	; (8006338 <HAL_RCC_GetSysClockFreq+0x10c>)
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006290:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d10d      	bne.n	80062b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800629c:	e00a      	b.n	80062b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	2b04      	cmp	r3, #4
 80062a2:	d102      	bne.n	80062aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80062a4:	4b25      	ldr	r3, [pc, #148]	; (800633c <HAL_RCC_GetSysClockFreq+0x110>)
 80062a6:	61bb      	str	r3, [r7, #24]
 80062a8:	e004      	b.n	80062b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	2b08      	cmp	r3, #8
 80062ae:	d101      	bne.n	80062b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80062b0:	4b23      	ldr	r3, [pc, #140]	; (8006340 <HAL_RCC_GetSysClockFreq+0x114>)
 80062b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	2b0c      	cmp	r3, #12
 80062b8:	d134      	bne.n	8006324 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80062ba:	4b1e      	ldr	r3, [pc, #120]	; (8006334 <HAL_RCC_GetSysClockFreq+0x108>)
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	f003 0303 	and.w	r3, r3, #3
 80062c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d003      	beq.n	80062d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	2b03      	cmp	r3, #3
 80062ce:	d003      	beq.n	80062d8 <HAL_RCC_GetSysClockFreq+0xac>
 80062d0:	e005      	b.n	80062de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80062d2:	4b1a      	ldr	r3, [pc, #104]	; (800633c <HAL_RCC_GetSysClockFreq+0x110>)
 80062d4:	617b      	str	r3, [r7, #20]
      break;
 80062d6:	e005      	b.n	80062e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80062d8:	4b19      	ldr	r3, [pc, #100]	; (8006340 <HAL_RCC_GetSysClockFreq+0x114>)
 80062da:	617b      	str	r3, [r7, #20]
      break;
 80062dc:	e002      	b.n	80062e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	617b      	str	r3, [r7, #20]
      break;
 80062e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80062e4:	4b13      	ldr	r3, [pc, #76]	; (8006334 <HAL_RCC_GetSysClockFreq+0x108>)
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	091b      	lsrs	r3, r3, #4
 80062ea:	f003 0307 	and.w	r3, r3, #7
 80062ee:	3301      	adds	r3, #1
 80062f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80062f2:	4b10      	ldr	r3, [pc, #64]	; (8006334 <HAL_RCC_GetSysClockFreq+0x108>)
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	0a1b      	lsrs	r3, r3, #8
 80062f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	fb03 f202 	mul.w	r2, r3, r2
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	fbb2 f3f3 	udiv	r3, r2, r3
 8006308:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800630a:	4b0a      	ldr	r3, [pc, #40]	; (8006334 <HAL_RCC_GetSysClockFreq+0x108>)
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	0e5b      	lsrs	r3, r3, #25
 8006310:	f003 0303 	and.w	r3, r3, #3
 8006314:	3301      	adds	r3, #1
 8006316:	005b      	lsls	r3, r3, #1
 8006318:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006322:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006324:	69bb      	ldr	r3, [r7, #24]
}
 8006326:	4618      	mov	r0, r3
 8006328:	3724      	adds	r7, #36	; 0x24
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	40021000 	.word	0x40021000
 8006338:	0800cc48 	.word	0x0800cc48
 800633c:	00f42400 	.word	0x00f42400
 8006340:	007a1200 	.word	0x007a1200

08006344 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800634c:	2300      	movs	r3, #0
 800634e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006350:	4b2a      	ldr	r3, [pc, #168]	; (80063fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d003      	beq.n	8006364 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800635c:	f7ff f9ee 	bl	800573c <HAL_PWREx_GetVoltageRange>
 8006360:	6178      	str	r0, [r7, #20]
 8006362:	e014      	b.n	800638e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006364:	4b25      	ldr	r3, [pc, #148]	; (80063fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006368:	4a24      	ldr	r2, [pc, #144]	; (80063fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800636a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800636e:	6593      	str	r3, [r2, #88]	; 0x58
 8006370:	4b22      	ldr	r3, [pc, #136]	; (80063fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006378:	60fb      	str	r3, [r7, #12]
 800637a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800637c:	f7ff f9de 	bl	800573c <HAL_PWREx_GetVoltageRange>
 8006380:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006382:	4b1e      	ldr	r3, [pc, #120]	; (80063fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006386:	4a1d      	ldr	r2, [pc, #116]	; (80063fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006388:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800638c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006394:	d10b      	bne.n	80063ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2b80      	cmp	r3, #128	; 0x80
 800639a:	d919      	bls.n	80063d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2ba0      	cmp	r3, #160	; 0xa0
 80063a0:	d902      	bls.n	80063a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80063a2:	2302      	movs	r3, #2
 80063a4:	613b      	str	r3, [r7, #16]
 80063a6:	e013      	b.n	80063d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80063a8:	2301      	movs	r3, #1
 80063aa:	613b      	str	r3, [r7, #16]
 80063ac:	e010      	b.n	80063d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2b80      	cmp	r3, #128	; 0x80
 80063b2:	d902      	bls.n	80063ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80063b4:	2303      	movs	r3, #3
 80063b6:	613b      	str	r3, [r7, #16]
 80063b8:	e00a      	b.n	80063d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2b80      	cmp	r3, #128	; 0x80
 80063be:	d102      	bne.n	80063c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80063c0:	2302      	movs	r3, #2
 80063c2:	613b      	str	r3, [r7, #16]
 80063c4:	e004      	b.n	80063d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2b70      	cmp	r3, #112	; 0x70
 80063ca:	d101      	bne.n	80063d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80063cc:	2301      	movs	r3, #1
 80063ce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80063d0:	4b0b      	ldr	r3, [pc, #44]	; (8006400 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f023 0207 	bic.w	r2, r3, #7
 80063d8:	4909      	ldr	r1, [pc, #36]	; (8006400 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	4313      	orrs	r3, r2
 80063de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80063e0:	4b07      	ldr	r3, [pc, #28]	; (8006400 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0307 	and.w	r3, r3, #7
 80063e8:	693a      	ldr	r2, [r7, #16]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d001      	beq.n	80063f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e000      	b.n	80063f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3718      	adds	r7, #24
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	40021000 	.word	0x40021000
 8006400:	40022000 	.word	0x40022000

08006404 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b086      	sub	sp, #24
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800640c:	2300      	movs	r3, #0
 800640e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006410:	2300      	movs	r3, #0
 8006412:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800641c:	2b00      	cmp	r3, #0
 800641e:	d031      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006424:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006428:	d01a      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800642a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800642e:	d814      	bhi.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006430:	2b00      	cmp	r3, #0
 8006432:	d009      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006434:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006438:	d10f      	bne.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800643a:	4b5d      	ldr	r3, [pc, #372]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	4a5c      	ldr	r2, [pc, #368]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006444:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006446:	e00c      	b.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	3304      	adds	r3, #4
 800644c:	2100      	movs	r1, #0
 800644e:	4618      	mov	r0, r3
 8006450:	f000 f9f0 	bl	8006834 <RCCEx_PLLSAI1_Config>
 8006454:	4603      	mov	r3, r0
 8006456:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006458:	e003      	b.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	74fb      	strb	r3, [r7, #19]
      break;
 800645e:	e000      	b.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006460:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006462:	7cfb      	ldrb	r3, [r7, #19]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10b      	bne.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006468:	4b51      	ldr	r3, [pc, #324]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800646a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800646e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006476:	494e      	ldr	r1, [pc, #312]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006478:	4313      	orrs	r3, r2
 800647a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800647e:	e001      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006480:	7cfb      	ldrb	r3, [r7, #19]
 8006482:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800648c:	2b00      	cmp	r3, #0
 800648e:	f000 809e 	beq.w	80065ce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006492:	2300      	movs	r3, #0
 8006494:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006496:	4b46      	ldr	r3, [pc, #280]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800649a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d101      	bne.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80064a2:	2301      	movs	r3, #1
 80064a4:	e000      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80064a6:	2300      	movs	r3, #0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00d      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064ac:	4b40      	ldr	r3, [pc, #256]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80064ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b0:	4a3f      	ldr	r2, [pc, #252]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80064b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064b6:	6593      	str	r3, [r2, #88]	; 0x58
 80064b8:	4b3d      	ldr	r3, [pc, #244]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80064ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064c0:	60bb      	str	r3, [r7, #8]
 80064c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064c4:	2301      	movs	r3, #1
 80064c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064c8:	4b3a      	ldr	r3, [pc, #232]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a39      	ldr	r2, [pc, #228]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80064ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064d4:	f7fc fd84 	bl	8002fe0 <HAL_GetTick>
 80064d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80064da:	e009      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064dc:	f7fc fd80 	bl	8002fe0 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d902      	bls.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	74fb      	strb	r3, [r7, #19]
        break;
 80064ee:	e005      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80064f0:	4b30      	ldr	r3, [pc, #192]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d0ef      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80064fc:	7cfb      	ldrb	r3, [r7, #19]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d15a      	bne.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006502:	4b2b      	ldr	r3, [pc, #172]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006508:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800650c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d01e      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006518:	697a      	ldr	r2, [r7, #20]
 800651a:	429a      	cmp	r2, r3
 800651c:	d019      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800651e:	4b24      	ldr	r3, [pc, #144]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006524:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006528:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800652a:	4b21      	ldr	r3, [pc, #132]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800652c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006530:	4a1f      	ldr	r2, [pc, #124]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006536:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800653a:	4b1d      	ldr	r3, [pc, #116]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800653c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006540:	4a1b      	ldr	r2, [pc, #108]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006546:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800654a:	4a19      	ldr	r2, [pc, #100]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f003 0301 	and.w	r3, r3, #1
 8006558:	2b00      	cmp	r3, #0
 800655a:	d016      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800655c:	f7fc fd40 	bl	8002fe0 <HAL_GetTick>
 8006560:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006562:	e00b      	b.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006564:	f7fc fd3c 	bl	8002fe0 <HAL_GetTick>
 8006568:	4602      	mov	r2, r0
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006572:	4293      	cmp	r3, r2
 8006574:	d902      	bls.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	74fb      	strb	r3, [r7, #19]
            break;
 800657a:	e006      	b.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800657c:	4b0c      	ldr	r3, [pc, #48]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800657e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006582:	f003 0302 	and.w	r3, r3, #2
 8006586:	2b00      	cmp	r3, #0
 8006588:	d0ec      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800658a:	7cfb      	ldrb	r3, [r7, #19]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10b      	bne.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006590:	4b07      	ldr	r3, [pc, #28]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006596:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800659e:	4904      	ldr	r1, [pc, #16]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80065a6:	e009      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80065a8:	7cfb      	ldrb	r3, [r7, #19]
 80065aa:	74bb      	strb	r3, [r7, #18]
 80065ac:	e006      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80065ae:	bf00      	nop
 80065b0:	40021000 	.word	0x40021000
 80065b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065b8:	7cfb      	ldrb	r3, [r7, #19]
 80065ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80065bc:	7c7b      	ldrb	r3, [r7, #17]
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d105      	bne.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065c2:	4b9b      	ldr	r3, [pc, #620]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80065c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065c6:	4a9a      	ldr	r2, [pc, #616]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80065c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00a      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80065da:	4b95      	ldr	r3, [pc, #596]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80065dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065e0:	f023 0203 	bic.w	r2, r3, #3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a1b      	ldr	r3, [r3, #32]
 80065e8:	4991      	ldr	r1, [pc, #580]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0302 	and.w	r3, r3, #2
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00a      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80065fc:	4b8c      	ldr	r3, [pc, #560]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80065fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006602:	f023 020c 	bic.w	r2, r3, #12
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660a:	4989      	ldr	r1, [pc, #548]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800660c:	4313      	orrs	r3, r2
 800660e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 0304 	and.w	r3, r3, #4
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00a      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800661e:	4b84      	ldr	r3, [pc, #528]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006624:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662c:	4980      	ldr	r1, [pc, #512]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800662e:	4313      	orrs	r3, r2
 8006630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0320 	and.w	r3, r3, #32
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00a      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006640:	4b7b      	ldr	r3, [pc, #492]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006646:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664e:	4978      	ldr	r1, [pc, #480]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006650:	4313      	orrs	r3, r2
 8006652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00a      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006662:	4b73      	ldr	r3, [pc, #460]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006668:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006670:	496f      	ldr	r1, [pc, #444]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006672:	4313      	orrs	r3, r2
 8006674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00a      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006684:	4b6a      	ldr	r3, [pc, #424]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800668a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006692:	4967      	ldr	r1, [pc, #412]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006694:	4313      	orrs	r3, r2
 8006696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00a      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80066a6:	4b62      	ldr	r3, [pc, #392]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80066a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b4:	495e      	ldr	r1, [pc, #376]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00a      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80066c8:	4b59      	ldr	r3, [pc, #356]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80066ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d6:	4956      	ldr	r1, [pc, #344]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80066d8:	4313      	orrs	r3, r2
 80066da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00a      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80066ea:	4b51      	ldr	r3, [pc, #324]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80066ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f8:	494d      	ldr	r1, [pc, #308]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80066fa:	4313      	orrs	r3, r2
 80066fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d028      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800670c:	4b48      	ldr	r3, [pc, #288]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800670e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006712:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800671a:	4945      	ldr	r1, [pc, #276]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800671c:	4313      	orrs	r3, r2
 800671e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006726:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800672a:	d106      	bne.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800672c:	4b40      	ldr	r3, [pc, #256]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	4a3f      	ldr	r2, [pc, #252]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006732:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006736:	60d3      	str	r3, [r2, #12]
 8006738:	e011      	b.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800673e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006742:	d10c      	bne.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	3304      	adds	r3, #4
 8006748:	2101      	movs	r1, #1
 800674a:	4618      	mov	r0, r3
 800674c:	f000 f872 	bl	8006834 <RCCEx_PLLSAI1_Config>
 8006750:	4603      	mov	r3, r0
 8006752:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006754:	7cfb      	ldrb	r3, [r7, #19]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d001      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 800675a:	7cfb      	ldrb	r3, [r7, #19]
 800675c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d028      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800676a:	4b31      	ldr	r3, [pc, #196]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800676c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006770:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006778:	492d      	ldr	r1, [pc, #180]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800677a:	4313      	orrs	r3, r2
 800677c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006784:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006788:	d106      	bne.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800678a:	4b29      	ldr	r3, [pc, #164]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	4a28      	ldr	r2, [pc, #160]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006790:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006794:	60d3      	str	r3, [r2, #12]
 8006796:	e011      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800679c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067a0:	d10c      	bne.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	3304      	adds	r3, #4
 80067a6:	2101      	movs	r1, #1
 80067a8:	4618      	mov	r0, r3
 80067aa:	f000 f843 	bl	8006834 <RCCEx_PLLSAI1_Config>
 80067ae:	4603      	mov	r3, r0
 80067b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80067b2:	7cfb      	ldrb	r3, [r7, #19]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d001      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80067b8:	7cfb      	ldrb	r3, [r7, #19]
 80067ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d01c      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80067c8:	4b19      	ldr	r3, [pc, #100]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80067ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067d6:	4916      	ldr	r1, [pc, #88]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067e6:	d10c      	bne.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	3304      	adds	r3, #4
 80067ec:	2102      	movs	r1, #2
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 f820 	bl	8006834 <RCCEx_PLLSAI1_Config>
 80067f4:	4603      	mov	r3, r0
 80067f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80067f8:	7cfb      	ldrb	r3, [r7, #19]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d001      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 80067fe:	7cfb      	ldrb	r3, [r7, #19]
 8006800:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00a      	beq.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800680e:	4b08      	ldr	r3, [pc, #32]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006814:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800681c:	4904      	ldr	r1, [pc, #16]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800681e:	4313      	orrs	r3, r2
 8006820:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006824:	7cbb      	ldrb	r3, [r7, #18]
}
 8006826:	4618      	mov	r0, r3
 8006828:	3718      	adds	r7, #24
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	40021000 	.word	0x40021000

08006834 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800683e:	2300      	movs	r3, #0
 8006840:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006842:	4b74      	ldr	r3, [pc, #464]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	f003 0303 	and.w	r3, r3, #3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d018      	beq.n	8006880 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800684e:	4b71      	ldr	r3, [pc, #452]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	f003 0203 	and.w	r2, r3, #3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	429a      	cmp	r2, r3
 800685c:	d10d      	bne.n	800687a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
       ||
 8006862:	2b00      	cmp	r3, #0
 8006864:	d009      	beq.n	800687a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006866:	4b6b      	ldr	r3, [pc, #428]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	091b      	lsrs	r3, r3, #4
 800686c:	f003 0307 	and.w	r3, r3, #7
 8006870:	1c5a      	adds	r2, r3, #1
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	685b      	ldr	r3, [r3, #4]
       ||
 8006876:	429a      	cmp	r2, r3
 8006878:	d047      	beq.n	800690a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	73fb      	strb	r3, [r7, #15]
 800687e:	e044      	b.n	800690a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2b03      	cmp	r3, #3
 8006886:	d018      	beq.n	80068ba <RCCEx_PLLSAI1_Config+0x86>
 8006888:	2b03      	cmp	r3, #3
 800688a:	d825      	bhi.n	80068d8 <RCCEx_PLLSAI1_Config+0xa4>
 800688c:	2b01      	cmp	r3, #1
 800688e:	d002      	beq.n	8006896 <RCCEx_PLLSAI1_Config+0x62>
 8006890:	2b02      	cmp	r3, #2
 8006892:	d009      	beq.n	80068a8 <RCCEx_PLLSAI1_Config+0x74>
 8006894:	e020      	b.n	80068d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006896:	4b5f      	ldr	r3, [pc, #380]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0302 	and.w	r3, r3, #2
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d11d      	bne.n	80068de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068a6:	e01a      	b.n	80068de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80068a8:	4b5a      	ldr	r3, [pc, #360]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d116      	bne.n	80068e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068b8:	e013      	b.n	80068e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80068ba:	4b56      	ldr	r3, [pc, #344]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10f      	bne.n	80068e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80068c6:	4b53      	ldr	r3, [pc, #332]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d109      	bne.n	80068e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80068d6:	e006      	b.n	80068e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	73fb      	strb	r3, [r7, #15]
      break;
 80068dc:	e004      	b.n	80068e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80068de:	bf00      	nop
 80068e0:	e002      	b.n	80068e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80068e2:	bf00      	nop
 80068e4:	e000      	b.n	80068e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80068e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80068e8:	7bfb      	ldrb	r3, [r7, #15]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d10d      	bne.n	800690a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80068ee:	4b49      	ldr	r3, [pc, #292]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6819      	ldr	r1, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	3b01      	subs	r3, #1
 8006900:	011b      	lsls	r3, r3, #4
 8006902:	430b      	orrs	r3, r1
 8006904:	4943      	ldr	r1, [pc, #268]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006906:	4313      	orrs	r3, r2
 8006908:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800690a:	7bfb      	ldrb	r3, [r7, #15]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d17c      	bne.n	8006a0a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006910:	4b40      	ldr	r3, [pc, #256]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a3f      	ldr	r2, [pc, #252]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006916:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800691a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800691c:	f7fc fb60 	bl	8002fe0 <HAL_GetTick>
 8006920:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006922:	e009      	b.n	8006938 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006924:	f7fc fb5c 	bl	8002fe0 <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	2b02      	cmp	r3, #2
 8006930:	d902      	bls.n	8006938 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	73fb      	strb	r3, [r7, #15]
        break;
 8006936:	e005      	b.n	8006944 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006938:	4b36      	ldr	r3, [pc, #216]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1ef      	bne.n	8006924 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006944:	7bfb      	ldrb	r3, [r7, #15]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d15f      	bne.n	8006a0a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d110      	bne.n	8006972 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006950:	4b30      	ldr	r3, [pc, #192]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006958:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	6892      	ldr	r2, [r2, #8]
 8006960:	0211      	lsls	r1, r2, #8
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	68d2      	ldr	r2, [r2, #12]
 8006966:	06d2      	lsls	r2, r2, #27
 8006968:	430a      	orrs	r2, r1
 800696a:	492a      	ldr	r1, [pc, #168]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 800696c:	4313      	orrs	r3, r2
 800696e:	610b      	str	r3, [r1, #16]
 8006970:	e027      	b.n	80069c2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d112      	bne.n	800699e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006978:	4b26      	ldr	r3, [pc, #152]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006980:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	6892      	ldr	r2, [r2, #8]
 8006988:	0211      	lsls	r1, r2, #8
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	6912      	ldr	r2, [r2, #16]
 800698e:	0852      	lsrs	r2, r2, #1
 8006990:	3a01      	subs	r2, #1
 8006992:	0552      	lsls	r2, r2, #21
 8006994:	430a      	orrs	r2, r1
 8006996:	491f      	ldr	r1, [pc, #124]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006998:	4313      	orrs	r3, r2
 800699a:	610b      	str	r3, [r1, #16]
 800699c:	e011      	b.n	80069c2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800699e:	4b1d      	ldr	r3, [pc, #116]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80069a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	6892      	ldr	r2, [r2, #8]
 80069ae:	0211      	lsls	r1, r2, #8
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	6952      	ldr	r2, [r2, #20]
 80069b4:	0852      	lsrs	r2, r2, #1
 80069b6:	3a01      	subs	r2, #1
 80069b8:	0652      	lsls	r2, r2, #25
 80069ba:	430a      	orrs	r2, r1
 80069bc:	4915      	ldr	r1, [pc, #84]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069be:	4313      	orrs	r3, r2
 80069c0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80069c2:	4b14      	ldr	r3, [pc, #80]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a13      	ldr	r2, [pc, #76]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80069cc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069ce:	f7fc fb07 	bl	8002fe0 <HAL_GetTick>
 80069d2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80069d4:	e009      	b.n	80069ea <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80069d6:	f7fc fb03 	bl	8002fe0 <HAL_GetTick>
 80069da:	4602      	mov	r2, r0
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	1ad3      	subs	r3, r2, r3
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d902      	bls.n	80069ea <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	73fb      	strb	r3, [r7, #15]
          break;
 80069e8:	e005      	b.n	80069f6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80069ea:	4b0a      	ldr	r3, [pc, #40]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d0ef      	beq.n	80069d6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80069f6:	7bfb      	ldrb	r3, [r7, #15]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d106      	bne.n	8006a0a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80069fc:	4b05      	ldr	r3, [pc, #20]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069fe:	691a      	ldr	r2, [r3, #16]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	4903      	ldr	r1, [pc, #12]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a06:	4313      	orrs	r3, r2
 8006a08:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	40021000 	.word	0x40021000

08006a18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d101      	bne.n	8006a2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e049      	b.n	8006abe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d106      	bne.n	8006a44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7fc f86e 	bl	8002b20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2202      	movs	r2, #2
 8006a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	3304      	adds	r3, #4
 8006a54:	4619      	mov	r1, r3
 8006a56:	4610      	mov	r0, r2
 8006a58:	f000 fda6 	bl	80075a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3708      	adds	r7, #8
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
	...

08006ac8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d001      	beq.n	8006ae0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e03b      	b.n	8006b58 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68da      	ldr	r2, [r3, #12]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f042 0201 	orr.w	r2, r2, #1
 8006af6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a19      	ldr	r2, [pc, #100]	; (8006b64 <HAL_TIM_Base_Start_IT+0x9c>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d009      	beq.n	8006b16 <HAL_TIM_Base_Start_IT+0x4e>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b0a:	d004      	beq.n	8006b16 <HAL_TIM_Base_Start_IT+0x4e>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a15      	ldr	r2, [pc, #84]	; (8006b68 <HAL_TIM_Base_Start_IT+0xa0>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d115      	bne.n	8006b42 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	689a      	ldr	r2, [r3, #8]
 8006b1c:	4b13      	ldr	r3, [pc, #76]	; (8006b6c <HAL_TIM_Base_Start_IT+0xa4>)
 8006b1e:	4013      	ands	r3, r2
 8006b20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2b06      	cmp	r3, #6
 8006b26:	d015      	beq.n	8006b54 <HAL_TIM_Base_Start_IT+0x8c>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b2e:	d011      	beq.n	8006b54 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f042 0201 	orr.w	r2, r2, #1
 8006b3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b40:	e008      	b.n	8006b54 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f042 0201 	orr.w	r2, r2, #1
 8006b50:	601a      	str	r2, [r3, #0]
 8006b52:	e000      	b.n	8006b56 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b54:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3714      	adds	r7, #20
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr
 8006b64:	40012c00 	.word	0x40012c00
 8006b68:	40014000 	.word	0x40014000
 8006b6c:	00010007 	.word	0x00010007

08006b70 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68da      	ldr	r2, [r3, #12]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f022 0201 	bic.w	r2, r2, #1
 8006b86:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	6a1a      	ldr	r2, [r3, #32]
 8006b8e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006b92:	4013      	ands	r3, r2
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10f      	bne.n	8006bb8 <HAL_TIM_Base_Stop_IT+0x48>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	6a1a      	ldr	r2, [r3, #32]
 8006b9e:	f240 4344 	movw	r3, #1092	; 0x444
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d107      	bne.n	8006bb8 <HAL_TIM_Base_Stop_IT+0x48>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f022 0201 	bic.w	r2, r2, #1
 8006bb6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	370c      	adds	r7, #12
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr

08006bce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b082      	sub	sp, #8
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d101      	bne.n	8006be0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e049      	b.n	8006c74 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d106      	bne.n	8006bfa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 f841 	bl	8006c7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2202      	movs	r2, #2
 8006bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	3304      	adds	r3, #4
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	4610      	mov	r0, r2
 8006c0e:	f000 fccb 	bl	80075a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2201      	movs	r2, #1
 8006c56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2201      	movs	r2, #1
 8006c66:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3708      	adds	r7, #8
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006c84:	bf00      	nop
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d109      	bne.n	8006cb4 <HAL_TIM_PWM_Start+0x24>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	bf14      	ite	ne
 8006cac:	2301      	movne	r3, #1
 8006cae:	2300      	moveq	r3, #0
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	e03c      	b.n	8006d2e <HAL_TIM_PWM_Start+0x9e>
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	2b04      	cmp	r3, #4
 8006cb8:	d109      	bne.n	8006cce <HAL_TIM_PWM_Start+0x3e>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	bf14      	ite	ne
 8006cc6:	2301      	movne	r3, #1
 8006cc8:	2300      	moveq	r3, #0
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	e02f      	b.n	8006d2e <HAL_TIM_PWM_Start+0x9e>
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	2b08      	cmp	r3, #8
 8006cd2:	d109      	bne.n	8006ce8 <HAL_TIM_PWM_Start+0x58>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	bf14      	ite	ne
 8006ce0:	2301      	movne	r3, #1
 8006ce2:	2300      	moveq	r3, #0
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	e022      	b.n	8006d2e <HAL_TIM_PWM_Start+0x9e>
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	2b0c      	cmp	r3, #12
 8006cec:	d109      	bne.n	8006d02 <HAL_TIM_PWM_Start+0x72>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	bf14      	ite	ne
 8006cfa:	2301      	movne	r3, #1
 8006cfc:	2300      	moveq	r3, #0
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	e015      	b.n	8006d2e <HAL_TIM_PWM_Start+0x9e>
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	2b10      	cmp	r3, #16
 8006d06:	d109      	bne.n	8006d1c <HAL_TIM_PWM_Start+0x8c>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	bf14      	ite	ne
 8006d14:	2301      	movne	r3, #1
 8006d16:	2300      	moveq	r3, #0
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	e008      	b.n	8006d2e <HAL_TIM_PWM_Start+0x9e>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	bf14      	ite	ne
 8006d28:	2301      	movne	r3, #1
 8006d2a:	2300      	moveq	r3, #0
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d001      	beq.n	8006d36 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e07e      	b.n	8006e34 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d104      	bne.n	8006d46 <HAL_TIM_PWM_Start+0xb6>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2202      	movs	r2, #2
 8006d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d44:	e023      	b.n	8006d8e <HAL_TIM_PWM_Start+0xfe>
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	2b04      	cmp	r3, #4
 8006d4a:	d104      	bne.n	8006d56 <HAL_TIM_PWM_Start+0xc6>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2202      	movs	r2, #2
 8006d50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d54:	e01b      	b.n	8006d8e <HAL_TIM_PWM_Start+0xfe>
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	2b08      	cmp	r3, #8
 8006d5a:	d104      	bne.n	8006d66 <HAL_TIM_PWM_Start+0xd6>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2202      	movs	r2, #2
 8006d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d64:	e013      	b.n	8006d8e <HAL_TIM_PWM_Start+0xfe>
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	2b0c      	cmp	r3, #12
 8006d6a:	d104      	bne.n	8006d76 <HAL_TIM_PWM_Start+0xe6>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2202      	movs	r2, #2
 8006d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d74:	e00b      	b.n	8006d8e <HAL_TIM_PWM_Start+0xfe>
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	2b10      	cmp	r3, #16
 8006d7a:	d104      	bne.n	8006d86 <HAL_TIM_PWM_Start+0xf6>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2202      	movs	r2, #2
 8006d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d84:	e003      	b.n	8006d8e <HAL_TIM_PWM_Start+0xfe>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2202      	movs	r2, #2
 8006d8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2201      	movs	r2, #1
 8006d94:	6839      	ldr	r1, [r7, #0]
 8006d96:	4618      	mov	r0, r3
 8006d98:	f000 ff82 	bl	8007ca0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a26      	ldr	r2, [pc, #152]	; (8006e3c <HAL_TIM_PWM_Start+0x1ac>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d009      	beq.n	8006dba <HAL_TIM_PWM_Start+0x12a>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a25      	ldr	r2, [pc, #148]	; (8006e40 <HAL_TIM_PWM_Start+0x1b0>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d004      	beq.n	8006dba <HAL_TIM_PWM_Start+0x12a>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a23      	ldr	r2, [pc, #140]	; (8006e44 <HAL_TIM_PWM_Start+0x1b4>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d101      	bne.n	8006dbe <HAL_TIM_PWM_Start+0x12e>
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e000      	b.n	8006dc0 <HAL_TIM_PWM_Start+0x130>
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d007      	beq.n	8006dd4 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006dd2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a18      	ldr	r2, [pc, #96]	; (8006e3c <HAL_TIM_PWM_Start+0x1ac>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d009      	beq.n	8006df2 <HAL_TIM_PWM_Start+0x162>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006de6:	d004      	beq.n	8006df2 <HAL_TIM_PWM_Start+0x162>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a14      	ldr	r2, [pc, #80]	; (8006e40 <HAL_TIM_PWM_Start+0x1b0>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d115      	bne.n	8006e1e <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	689a      	ldr	r2, [r3, #8]
 8006df8:	4b13      	ldr	r3, [pc, #76]	; (8006e48 <HAL_TIM_PWM_Start+0x1b8>)
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2b06      	cmp	r3, #6
 8006e02:	d015      	beq.n	8006e30 <HAL_TIM_PWM_Start+0x1a0>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e0a:	d011      	beq.n	8006e30 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f042 0201 	orr.w	r2, r2, #1
 8006e1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e1c:	e008      	b.n	8006e30 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f042 0201 	orr.w	r2, r2, #1
 8006e2c:	601a      	str	r2, [r3, #0]
 8006e2e:	e000      	b.n	8006e32 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e30:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3710      	adds	r7, #16
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	40012c00 	.word	0x40012c00
 8006e40:	40014000 	.word	0x40014000
 8006e44:	40014400 	.word	0x40014400
 8006e48:	00010007 	.word	0x00010007

08006e4c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	6839      	ldr	r1, [r7, #0]
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f000 ff1e 	bl	8007ca0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a39      	ldr	r2, [pc, #228]	; (8006f50 <HAL_TIM_PWM_Stop+0x104>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d009      	beq.n	8006e82 <HAL_TIM_PWM_Stop+0x36>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a38      	ldr	r2, [pc, #224]	; (8006f54 <HAL_TIM_PWM_Stop+0x108>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d004      	beq.n	8006e82 <HAL_TIM_PWM_Stop+0x36>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a36      	ldr	r2, [pc, #216]	; (8006f58 <HAL_TIM_PWM_Stop+0x10c>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d101      	bne.n	8006e86 <HAL_TIM_PWM_Stop+0x3a>
 8006e82:	2301      	movs	r3, #1
 8006e84:	e000      	b.n	8006e88 <HAL_TIM_PWM_Stop+0x3c>
 8006e86:	2300      	movs	r3, #0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d017      	beq.n	8006ebc <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	6a1a      	ldr	r2, [r3, #32]
 8006e92:	f241 1311 	movw	r3, #4369	; 0x1111
 8006e96:	4013      	ands	r3, r2
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10f      	bne.n	8006ebc <HAL_TIM_PWM_Stop+0x70>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	6a1a      	ldr	r2, [r3, #32]
 8006ea2:	f240 4344 	movw	r3, #1092	; 0x444
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d107      	bne.n	8006ebc <HAL_TIM_PWM_Stop+0x70>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006eba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	6a1a      	ldr	r2, [r3, #32]
 8006ec2:	f241 1311 	movw	r3, #4369	; 0x1111
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d10f      	bne.n	8006eec <HAL_TIM_PWM_Stop+0xa0>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	6a1a      	ldr	r2, [r3, #32]
 8006ed2:	f240 4344 	movw	r3, #1092	; 0x444
 8006ed6:	4013      	ands	r3, r2
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d107      	bne.n	8006eec <HAL_TIM_PWM_Stop+0xa0>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f022 0201 	bic.w	r2, r2, #1
 8006eea:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d104      	bne.n	8006efc <HAL_TIM_PWM_Stop+0xb0>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006efa:	e023      	b.n	8006f44 <HAL_TIM_PWM_Stop+0xf8>
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	2b04      	cmp	r3, #4
 8006f00:	d104      	bne.n	8006f0c <HAL_TIM_PWM_Stop+0xc0>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2201      	movs	r2, #1
 8006f06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f0a:	e01b      	b.n	8006f44 <HAL_TIM_PWM_Stop+0xf8>
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	2b08      	cmp	r3, #8
 8006f10:	d104      	bne.n	8006f1c <HAL_TIM_PWM_Stop+0xd0>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f1a:	e013      	b.n	8006f44 <HAL_TIM_PWM_Stop+0xf8>
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	2b0c      	cmp	r3, #12
 8006f20:	d104      	bne.n	8006f2c <HAL_TIM_PWM_Stop+0xe0>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f2a:	e00b      	b.n	8006f44 <HAL_TIM_PWM_Stop+0xf8>
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	2b10      	cmp	r3, #16
 8006f30:	d104      	bne.n	8006f3c <HAL_TIM_PWM_Stop+0xf0>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f3a:	e003      	b.n	8006f44 <HAL_TIM_PWM_Stop+0xf8>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3708      	adds	r7, #8
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	40012c00 	.word	0x40012c00
 8006f54:	40014000 	.word	0x40014000
 8006f58:	40014400 	.word	0x40014400

08006f5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	f003 0302 	and.w	r3, r3, #2
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d122      	bne.n	8006fb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	f003 0302 	and.w	r3, r3, #2
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	d11b      	bne.n	8006fb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f06f 0202 	mvn.w	r2, #2
 8006f88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	f003 0303 	and.w	r3, r3, #3
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d003      	beq.n	8006fa6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 fae3 	bl	800756a <HAL_TIM_IC_CaptureCallback>
 8006fa4:	e005      	b.n	8006fb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fad5 	bl	8007556 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 fae6 	bl	800757e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	f003 0304 	and.w	r3, r3, #4
 8006fc2:	2b04      	cmp	r3, #4
 8006fc4:	d122      	bne.n	800700c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	f003 0304 	and.w	r3, r3, #4
 8006fd0:	2b04      	cmp	r3, #4
 8006fd2:	d11b      	bne.n	800700c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f06f 0204 	mvn.w	r2, #4
 8006fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2202      	movs	r2, #2
 8006fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	699b      	ldr	r3, [r3, #24]
 8006fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d003      	beq.n	8006ffa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fab9 	bl	800756a <HAL_TIM_IC_CaptureCallback>
 8006ff8:	e005      	b.n	8007006 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 faab 	bl	8007556 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 fabc 	bl	800757e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	f003 0308 	and.w	r3, r3, #8
 8007016:	2b08      	cmp	r3, #8
 8007018:	d122      	bne.n	8007060 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	f003 0308 	and.w	r3, r3, #8
 8007024:	2b08      	cmp	r3, #8
 8007026:	d11b      	bne.n	8007060 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f06f 0208 	mvn.w	r2, #8
 8007030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2204      	movs	r2, #4
 8007036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	69db      	ldr	r3, [r3, #28]
 800703e:	f003 0303 	and.w	r3, r3, #3
 8007042:	2b00      	cmp	r3, #0
 8007044:	d003      	beq.n	800704e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fa8f 	bl	800756a <HAL_TIM_IC_CaptureCallback>
 800704c:	e005      	b.n	800705a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 fa81 	bl	8007556 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 fa92 	bl	800757e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	f003 0310 	and.w	r3, r3, #16
 800706a:	2b10      	cmp	r3, #16
 800706c:	d122      	bne.n	80070b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	f003 0310 	and.w	r3, r3, #16
 8007078:	2b10      	cmp	r3, #16
 800707a:	d11b      	bne.n	80070b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f06f 0210 	mvn.w	r2, #16
 8007084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2208      	movs	r2, #8
 800708a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	69db      	ldr	r3, [r3, #28]
 8007092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007096:	2b00      	cmp	r3, #0
 8007098:	d003      	beq.n	80070a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 fa65 	bl	800756a <HAL_TIM_IC_CaptureCallback>
 80070a0:	e005      	b.n	80070ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fa57 	bl	8007556 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 fa68 	bl	800757e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d10e      	bne.n	80070e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	f003 0301 	and.w	r3, r3, #1
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d107      	bne.n	80070e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f06f 0201 	mvn.w	r2, #1
 80070d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7fa fb0e 	bl	80016fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ea:	2b80      	cmp	r3, #128	; 0x80
 80070ec:	d10e      	bne.n	800710c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070f8:	2b80      	cmp	r3, #128	; 0x80
 80070fa:	d107      	bne.n	800710c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 fed8 	bl	8007ebc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800711a:	d10e      	bne.n	800713a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007126:	2b80      	cmp	r3, #128	; 0x80
 8007128:	d107      	bne.n	800713a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 fecb 	bl	8007ed0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007144:	2b40      	cmp	r3, #64	; 0x40
 8007146:	d10e      	bne.n	8007166 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007152:	2b40      	cmp	r3, #64	; 0x40
 8007154:	d107      	bne.n	8007166 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800715e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 fa16 	bl	8007592 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	f003 0320 	and.w	r3, r3, #32
 8007170:	2b20      	cmp	r3, #32
 8007172:	d10e      	bne.n	8007192 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	f003 0320 	and.w	r3, r3, #32
 800717e:	2b20      	cmp	r3, #32
 8007180:	d107      	bne.n	8007192 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f06f 0220 	mvn.w	r2, #32
 800718a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 fe8b 	bl	8007ea8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007192:	bf00      	nop
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
	...

0800719c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071a8:	2300      	movs	r3, #0
 80071aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d101      	bne.n	80071ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80071b6:	2302      	movs	r3, #2
 80071b8:	e0ff      	b.n	80073ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2b14      	cmp	r3, #20
 80071c6:	f200 80f0 	bhi.w	80073aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80071ca:	a201      	add	r2, pc, #4	; (adr r2, 80071d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80071cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d0:	08007225 	.word	0x08007225
 80071d4:	080073ab 	.word	0x080073ab
 80071d8:	080073ab 	.word	0x080073ab
 80071dc:	080073ab 	.word	0x080073ab
 80071e0:	08007265 	.word	0x08007265
 80071e4:	080073ab 	.word	0x080073ab
 80071e8:	080073ab 	.word	0x080073ab
 80071ec:	080073ab 	.word	0x080073ab
 80071f0:	080072a7 	.word	0x080072a7
 80071f4:	080073ab 	.word	0x080073ab
 80071f8:	080073ab 	.word	0x080073ab
 80071fc:	080073ab 	.word	0x080073ab
 8007200:	080072e7 	.word	0x080072e7
 8007204:	080073ab 	.word	0x080073ab
 8007208:	080073ab 	.word	0x080073ab
 800720c:	080073ab 	.word	0x080073ab
 8007210:	08007329 	.word	0x08007329
 8007214:	080073ab 	.word	0x080073ab
 8007218:	080073ab 	.word	0x080073ab
 800721c:	080073ab 	.word	0x080073ab
 8007220:	08007369 	.word	0x08007369
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	68b9      	ldr	r1, [r7, #8]
 800722a:	4618      	mov	r0, r3
 800722c:	f000 fa20 	bl	8007670 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	699a      	ldr	r2, [r3, #24]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f042 0208 	orr.w	r2, r2, #8
 800723e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	699a      	ldr	r2, [r3, #24]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f022 0204 	bic.w	r2, r2, #4
 800724e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	6999      	ldr	r1, [r3, #24]
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	691a      	ldr	r2, [r3, #16]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	430a      	orrs	r2, r1
 8007260:	619a      	str	r2, [r3, #24]
      break;
 8007262:	e0a5      	b.n	80073b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	68b9      	ldr	r1, [r7, #8]
 800726a:	4618      	mov	r0, r3
 800726c:	f000 fa7c 	bl	8007768 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	699a      	ldr	r2, [r3, #24]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800727e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	699a      	ldr	r2, [r3, #24]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800728e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	6999      	ldr	r1, [r3, #24]
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	021a      	lsls	r2, r3, #8
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	430a      	orrs	r2, r1
 80072a2:	619a      	str	r2, [r3, #24]
      break;
 80072a4:	e084      	b.n	80073b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68b9      	ldr	r1, [r7, #8]
 80072ac:	4618      	mov	r0, r3
 80072ae:	f000 fad5 	bl	800785c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	69da      	ldr	r2, [r3, #28]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f042 0208 	orr.w	r2, r2, #8
 80072c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	69da      	ldr	r2, [r3, #28]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f022 0204 	bic.w	r2, r2, #4
 80072d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	69d9      	ldr	r1, [r3, #28]
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	691a      	ldr	r2, [r3, #16]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	430a      	orrs	r2, r1
 80072e2:	61da      	str	r2, [r3, #28]
      break;
 80072e4:	e064      	b.n	80073b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	68b9      	ldr	r1, [r7, #8]
 80072ec:	4618      	mov	r0, r3
 80072ee:	f000 fb2d 	bl	800794c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	69da      	ldr	r2, [r3, #28]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007300:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	69da      	ldr	r2, [r3, #28]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007310:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	69d9      	ldr	r1, [r3, #28]
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	691b      	ldr	r3, [r3, #16]
 800731c:	021a      	lsls	r2, r3, #8
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	430a      	orrs	r2, r1
 8007324:	61da      	str	r2, [r3, #28]
      break;
 8007326:	e043      	b.n	80073b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68b9      	ldr	r1, [r7, #8]
 800732e:	4618      	mov	r0, r3
 8007330:	f000 fb6a 	bl	8007a08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f042 0208 	orr.w	r2, r2, #8
 8007342:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f022 0204 	bic.w	r2, r2, #4
 8007352:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	691a      	ldr	r2, [r3, #16]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	430a      	orrs	r2, r1
 8007364:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007366:	e023      	b.n	80073b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	68b9      	ldr	r1, [r7, #8]
 800736e:	4618      	mov	r0, r3
 8007370:	f000 fba2 	bl	8007ab8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007382:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007392:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	021a      	lsls	r2, r3, #8
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	430a      	orrs	r2, r1
 80073a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80073a8:	e002      	b.n	80073b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	75fb      	strb	r3, [r7, #23]
      break;
 80073ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80073b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3718      	adds	r7, #24
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop

080073c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073ce:	2300      	movs	r3, #0
 80073d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d101      	bne.n	80073e0 <HAL_TIM_ConfigClockSource+0x1c>
 80073dc:	2302      	movs	r3, #2
 80073de:	e0b6      	b.n	800754e <HAL_TIM_ConfigClockSource+0x18a>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2202      	movs	r2, #2
 80073ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007402:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800740a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68ba      	ldr	r2, [r7, #8]
 8007412:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800741c:	d03e      	beq.n	800749c <HAL_TIM_ConfigClockSource+0xd8>
 800741e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007422:	f200 8087 	bhi.w	8007534 <HAL_TIM_ConfigClockSource+0x170>
 8007426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800742a:	f000 8086 	beq.w	800753a <HAL_TIM_ConfigClockSource+0x176>
 800742e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007432:	d87f      	bhi.n	8007534 <HAL_TIM_ConfigClockSource+0x170>
 8007434:	2b70      	cmp	r3, #112	; 0x70
 8007436:	d01a      	beq.n	800746e <HAL_TIM_ConfigClockSource+0xaa>
 8007438:	2b70      	cmp	r3, #112	; 0x70
 800743a:	d87b      	bhi.n	8007534 <HAL_TIM_ConfigClockSource+0x170>
 800743c:	2b60      	cmp	r3, #96	; 0x60
 800743e:	d050      	beq.n	80074e2 <HAL_TIM_ConfigClockSource+0x11e>
 8007440:	2b60      	cmp	r3, #96	; 0x60
 8007442:	d877      	bhi.n	8007534 <HAL_TIM_ConfigClockSource+0x170>
 8007444:	2b50      	cmp	r3, #80	; 0x50
 8007446:	d03c      	beq.n	80074c2 <HAL_TIM_ConfigClockSource+0xfe>
 8007448:	2b50      	cmp	r3, #80	; 0x50
 800744a:	d873      	bhi.n	8007534 <HAL_TIM_ConfigClockSource+0x170>
 800744c:	2b40      	cmp	r3, #64	; 0x40
 800744e:	d058      	beq.n	8007502 <HAL_TIM_ConfigClockSource+0x13e>
 8007450:	2b40      	cmp	r3, #64	; 0x40
 8007452:	d86f      	bhi.n	8007534 <HAL_TIM_ConfigClockSource+0x170>
 8007454:	2b30      	cmp	r3, #48	; 0x30
 8007456:	d064      	beq.n	8007522 <HAL_TIM_ConfigClockSource+0x15e>
 8007458:	2b30      	cmp	r3, #48	; 0x30
 800745a:	d86b      	bhi.n	8007534 <HAL_TIM_ConfigClockSource+0x170>
 800745c:	2b20      	cmp	r3, #32
 800745e:	d060      	beq.n	8007522 <HAL_TIM_ConfigClockSource+0x15e>
 8007460:	2b20      	cmp	r3, #32
 8007462:	d867      	bhi.n	8007534 <HAL_TIM_ConfigClockSource+0x170>
 8007464:	2b00      	cmp	r3, #0
 8007466:	d05c      	beq.n	8007522 <HAL_TIM_ConfigClockSource+0x15e>
 8007468:	2b10      	cmp	r3, #16
 800746a:	d05a      	beq.n	8007522 <HAL_TIM_ConfigClockSource+0x15e>
 800746c:	e062      	b.n	8007534 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6818      	ldr	r0, [r3, #0]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	6899      	ldr	r1, [r3, #8]
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	685a      	ldr	r2, [r3, #4]
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	f000 fbef 	bl	8007c60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007490:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68ba      	ldr	r2, [r7, #8]
 8007498:	609a      	str	r2, [r3, #8]
      break;
 800749a:	e04f      	b.n	800753c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6818      	ldr	r0, [r3, #0]
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	6899      	ldr	r1, [r3, #8]
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	685a      	ldr	r2, [r3, #4]
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	f000 fbd8 	bl	8007c60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	689a      	ldr	r2, [r3, #8]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074be:	609a      	str	r2, [r3, #8]
      break;
 80074c0:	e03c      	b.n	800753c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6818      	ldr	r0, [r3, #0]
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	6859      	ldr	r1, [r3, #4]
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	461a      	mov	r2, r3
 80074d0:	f000 fb4c 	bl	8007b6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2150      	movs	r1, #80	; 0x50
 80074da:	4618      	mov	r0, r3
 80074dc:	f000 fba5 	bl	8007c2a <TIM_ITRx_SetConfig>
      break;
 80074e0:	e02c      	b.n	800753c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6818      	ldr	r0, [r3, #0]
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	6859      	ldr	r1, [r3, #4]
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	461a      	mov	r2, r3
 80074f0:	f000 fb6b 	bl	8007bca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2160      	movs	r1, #96	; 0x60
 80074fa:	4618      	mov	r0, r3
 80074fc:	f000 fb95 	bl	8007c2a <TIM_ITRx_SetConfig>
      break;
 8007500:	e01c      	b.n	800753c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6818      	ldr	r0, [r3, #0]
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	6859      	ldr	r1, [r3, #4]
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	461a      	mov	r2, r3
 8007510:	f000 fb2c 	bl	8007b6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2140      	movs	r1, #64	; 0x40
 800751a:	4618      	mov	r0, r3
 800751c:	f000 fb85 	bl	8007c2a <TIM_ITRx_SetConfig>
      break;
 8007520:	e00c      	b.n	800753c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4619      	mov	r1, r3
 800752c:	4610      	mov	r0, r2
 800752e:	f000 fb7c 	bl	8007c2a <TIM_ITRx_SetConfig>
      break;
 8007532:	e003      	b.n	800753c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	73fb      	strb	r3, [r7, #15]
      break;
 8007538:	e000      	b.n	800753c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800753a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800754c:	7bfb      	ldrb	r3, [r7, #15]
}
 800754e:	4618      	mov	r0, r3
 8007550:	3710      	adds	r7, #16
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007556:	b480      	push	{r7}
 8007558:	b083      	sub	sp, #12
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800755e:	bf00      	nop
 8007560:	370c      	adds	r7, #12
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr

0800756a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800756a:	b480      	push	{r7}
 800756c:	b083      	sub	sp, #12
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007572:	bf00      	nop
 8007574:	370c      	adds	r7, #12
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr

0800757e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800757e:	b480      	push	{r7}
 8007580:	b083      	sub	sp, #12
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007586:	bf00      	nop
 8007588:	370c      	adds	r7, #12
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr

08007592 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007592:	b480      	push	{r7}
 8007594:	b083      	sub	sp, #12
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800759a:	bf00      	nop
 800759c:	370c      	adds	r7, #12
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
	...

080075a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a2a      	ldr	r2, [pc, #168]	; (8007664 <TIM_Base_SetConfig+0xbc>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d003      	beq.n	80075c8 <TIM_Base_SetConfig+0x20>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075c6:	d108      	bne.n	80075da <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	68fa      	ldr	r2, [r7, #12]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a21      	ldr	r2, [pc, #132]	; (8007664 <TIM_Base_SetConfig+0xbc>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d00b      	beq.n	80075fa <TIM_Base_SetConfig+0x52>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075e8:	d007      	beq.n	80075fa <TIM_Base_SetConfig+0x52>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a1e      	ldr	r2, [pc, #120]	; (8007668 <TIM_Base_SetConfig+0xc0>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d003      	beq.n	80075fa <TIM_Base_SetConfig+0x52>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a1d      	ldr	r2, [pc, #116]	; (800766c <TIM_Base_SetConfig+0xc4>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d108      	bne.n	800760c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007600:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	4313      	orrs	r3, r2
 800760a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	695b      	ldr	r3, [r3, #20]
 8007616:	4313      	orrs	r3, r2
 8007618:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	689a      	ldr	r2, [r3, #8]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a0c      	ldr	r2, [pc, #48]	; (8007664 <TIM_Base_SetConfig+0xbc>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d007      	beq.n	8007648 <TIM_Base_SetConfig+0xa0>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a0b      	ldr	r2, [pc, #44]	; (8007668 <TIM_Base_SetConfig+0xc0>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d003      	beq.n	8007648 <TIM_Base_SetConfig+0xa0>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a0a      	ldr	r2, [pc, #40]	; (800766c <TIM_Base_SetConfig+0xc4>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d103      	bne.n	8007650 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	691a      	ldr	r2, [r3, #16]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	615a      	str	r2, [r3, #20]
}
 8007656:	bf00      	nop
 8007658:	3714      	adds	r7, #20
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	40012c00 	.word	0x40012c00
 8007668:	40014000 	.word	0x40014000
 800766c:	40014400 	.word	0x40014400

08007670 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007670:	b480      	push	{r7}
 8007672:	b087      	sub	sp, #28
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a1b      	ldr	r3, [r3, #32]
 800767e:	f023 0201 	bic.w	r2, r3, #1
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a1b      	ldr	r3, [r3, #32]
 800768a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	699b      	ldr	r3, [r3, #24]
 8007696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800769e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f023 0303 	bic.w	r3, r3, #3
 80076aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	f023 0302 	bic.w	r3, r3, #2
 80076bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	697a      	ldr	r2, [r7, #20]
 80076c4:	4313      	orrs	r3, r2
 80076c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a24      	ldr	r2, [pc, #144]	; (800775c <TIM_OC1_SetConfig+0xec>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d007      	beq.n	80076e0 <TIM_OC1_SetConfig+0x70>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a23      	ldr	r2, [pc, #140]	; (8007760 <TIM_OC1_SetConfig+0xf0>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d003      	beq.n	80076e0 <TIM_OC1_SetConfig+0x70>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a22      	ldr	r2, [pc, #136]	; (8007764 <TIM_OC1_SetConfig+0xf4>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d10c      	bne.n	80076fa <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	f023 0308 	bic.w	r3, r3, #8
 80076e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	697a      	ldr	r2, [r7, #20]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	f023 0304 	bic.w	r3, r3, #4
 80076f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a17      	ldr	r2, [pc, #92]	; (800775c <TIM_OC1_SetConfig+0xec>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d007      	beq.n	8007712 <TIM_OC1_SetConfig+0xa2>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4a16      	ldr	r2, [pc, #88]	; (8007760 <TIM_OC1_SetConfig+0xf0>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d003      	beq.n	8007712 <TIM_OC1_SetConfig+0xa2>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a15      	ldr	r2, [pc, #84]	; (8007764 <TIM_OC1_SetConfig+0xf4>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d111      	bne.n	8007736 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007718:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007720:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	695b      	ldr	r3, [r3, #20]
 8007726:	693a      	ldr	r2, [r7, #16]
 8007728:	4313      	orrs	r3, r2
 800772a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	699b      	ldr	r3, [r3, #24]
 8007730:	693a      	ldr	r2, [r7, #16]
 8007732:	4313      	orrs	r3, r2
 8007734:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	693a      	ldr	r2, [r7, #16]
 800773a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	685a      	ldr	r2, [r3, #4]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	697a      	ldr	r2, [r7, #20]
 800774e:	621a      	str	r2, [r3, #32]
}
 8007750:	bf00      	nop
 8007752:	371c      	adds	r7, #28
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr
 800775c:	40012c00 	.word	0x40012c00
 8007760:	40014000 	.word	0x40014000
 8007764:	40014400 	.word	0x40014400

08007768 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007768:	b480      	push	{r7}
 800776a:	b087      	sub	sp, #28
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a1b      	ldr	r3, [r3, #32]
 8007776:	f023 0210 	bic.w	r2, r3, #16
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a1b      	ldr	r3, [r3, #32]
 8007782:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	699b      	ldr	r3, [r3, #24]
 800778e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800779a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	021b      	lsls	r3, r3, #8
 80077aa:	68fa      	ldr	r2, [r7, #12]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	f023 0320 	bic.w	r3, r3, #32
 80077b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	011b      	lsls	r3, r3, #4
 80077be:	697a      	ldr	r2, [r7, #20]
 80077c0:	4313      	orrs	r3, r2
 80077c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a22      	ldr	r2, [pc, #136]	; (8007850 <TIM_OC2_SetConfig+0xe8>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d10d      	bne.n	80077e8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	011b      	lsls	r3, r3, #4
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	4313      	orrs	r3, r2
 80077de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a19      	ldr	r2, [pc, #100]	; (8007850 <TIM_OC2_SetConfig+0xe8>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d007      	beq.n	8007800 <TIM_OC2_SetConfig+0x98>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4a18      	ldr	r2, [pc, #96]	; (8007854 <TIM_OC2_SetConfig+0xec>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d003      	beq.n	8007800 <TIM_OC2_SetConfig+0x98>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4a17      	ldr	r2, [pc, #92]	; (8007858 <TIM_OC2_SetConfig+0xf0>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d113      	bne.n	8007828 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007806:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800780e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	695b      	ldr	r3, [r3, #20]
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	693a      	ldr	r2, [r7, #16]
 8007818:	4313      	orrs	r3, r2
 800781a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	699b      	ldr	r3, [r3, #24]
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	693a      	ldr	r2, [r7, #16]
 8007824:	4313      	orrs	r3, r2
 8007826:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	693a      	ldr	r2, [r7, #16]
 800782c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	68fa      	ldr	r2, [r7, #12]
 8007832:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	685a      	ldr	r2, [r3, #4]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	697a      	ldr	r2, [r7, #20]
 8007840:	621a      	str	r2, [r3, #32]
}
 8007842:	bf00      	nop
 8007844:	371c      	adds	r7, #28
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr
 800784e:	bf00      	nop
 8007850:	40012c00 	.word	0x40012c00
 8007854:	40014000 	.word	0x40014000
 8007858:	40014400 	.word	0x40014400

0800785c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800785c:	b480      	push	{r7}
 800785e:	b087      	sub	sp, #28
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a1b      	ldr	r3, [r3, #32]
 800786a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a1b      	ldr	r3, [r3, #32]
 8007876:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	69db      	ldr	r3, [r3, #28]
 8007882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800788a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800788e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f023 0303 	bic.w	r3, r3, #3
 8007896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	4313      	orrs	r3, r2
 80078a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	021b      	lsls	r3, r3, #8
 80078b0:	697a      	ldr	r2, [r7, #20]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a21      	ldr	r2, [pc, #132]	; (8007940 <TIM_OC3_SetConfig+0xe4>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d10d      	bne.n	80078da <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	021b      	lsls	r3, r3, #8
 80078cc:	697a      	ldr	r2, [r7, #20]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a18      	ldr	r2, [pc, #96]	; (8007940 <TIM_OC3_SetConfig+0xe4>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d007      	beq.n	80078f2 <TIM_OC3_SetConfig+0x96>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a17      	ldr	r2, [pc, #92]	; (8007944 <TIM_OC3_SetConfig+0xe8>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d003      	beq.n	80078f2 <TIM_OC3_SetConfig+0x96>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a16      	ldr	r2, [pc, #88]	; (8007948 <TIM_OC3_SetConfig+0xec>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d113      	bne.n	800791a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	695b      	ldr	r3, [r3, #20]
 8007906:	011b      	lsls	r3, r3, #4
 8007908:	693a      	ldr	r2, [r7, #16]
 800790a:	4313      	orrs	r3, r2
 800790c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	699b      	ldr	r3, [r3, #24]
 8007912:	011b      	lsls	r3, r3, #4
 8007914:	693a      	ldr	r2, [r7, #16]
 8007916:	4313      	orrs	r3, r2
 8007918:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	693a      	ldr	r2, [r7, #16]
 800791e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	685a      	ldr	r2, [r3, #4]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	697a      	ldr	r2, [r7, #20]
 8007932:	621a      	str	r2, [r3, #32]
}
 8007934:	bf00      	nop
 8007936:	371c      	adds	r7, #28
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr
 8007940:	40012c00 	.word	0x40012c00
 8007944:	40014000 	.word	0x40014000
 8007948:	40014400 	.word	0x40014400

0800794c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800794c:	b480      	push	{r7}
 800794e:	b087      	sub	sp, #28
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a1b      	ldr	r3, [r3, #32]
 8007966:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	69db      	ldr	r3, [r3, #28]
 8007972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800797a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800797e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007986:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	021b      	lsls	r3, r3, #8
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	4313      	orrs	r3, r2
 8007992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800799a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	031b      	lsls	r3, r3, #12
 80079a2:	693a      	ldr	r2, [r7, #16]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4a14      	ldr	r2, [pc, #80]	; (80079fc <TIM_OC4_SetConfig+0xb0>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d007      	beq.n	80079c0 <TIM_OC4_SetConfig+0x74>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4a13      	ldr	r2, [pc, #76]	; (8007a00 <TIM_OC4_SetConfig+0xb4>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d003      	beq.n	80079c0 <TIM_OC4_SetConfig+0x74>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4a12      	ldr	r2, [pc, #72]	; (8007a04 <TIM_OC4_SetConfig+0xb8>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d109      	bne.n	80079d4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	695b      	ldr	r3, [r3, #20]
 80079cc:	019b      	lsls	r3, r3, #6
 80079ce:	697a      	ldr	r2, [r7, #20]
 80079d0:	4313      	orrs	r3, r2
 80079d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	697a      	ldr	r2, [r7, #20]
 80079d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	68fa      	ldr	r2, [r7, #12]
 80079de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	685a      	ldr	r2, [r3, #4]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	693a      	ldr	r2, [r7, #16]
 80079ec:	621a      	str	r2, [r3, #32]
}
 80079ee:	bf00      	nop
 80079f0:	371c      	adds	r7, #28
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop
 80079fc:	40012c00 	.word	0x40012c00
 8007a00:	40014000 	.word	0x40014000
 8007a04:	40014400 	.word	0x40014400

08007a08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b087      	sub	sp, #28
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a1b      	ldr	r3, [r3, #32]
 8007a16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a1b      	ldr	r3, [r3, #32]
 8007a22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007a4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	041b      	lsls	r3, r3, #16
 8007a54:	693a      	ldr	r2, [r7, #16]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4a13      	ldr	r2, [pc, #76]	; (8007aac <TIM_OC5_SetConfig+0xa4>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d007      	beq.n	8007a72 <TIM_OC5_SetConfig+0x6a>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4a12      	ldr	r2, [pc, #72]	; (8007ab0 <TIM_OC5_SetConfig+0xa8>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d003      	beq.n	8007a72 <TIM_OC5_SetConfig+0x6a>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4a11      	ldr	r2, [pc, #68]	; (8007ab4 <TIM_OC5_SetConfig+0xac>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d109      	bne.n	8007a86 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	695b      	ldr	r3, [r3, #20]
 8007a7e:	021b      	lsls	r3, r3, #8
 8007a80:	697a      	ldr	r2, [r7, #20]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	697a      	ldr	r2, [r7, #20]
 8007a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	685a      	ldr	r2, [r3, #4]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	693a      	ldr	r2, [r7, #16]
 8007a9e:	621a      	str	r2, [r3, #32]
}
 8007aa0:	bf00      	nop
 8007aa2:	371c      	adds	r7, #28
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr
 8007aac:	40012c00 	.word	0x40012c00
 8007ab0:	40014000 	.word	0x40014000
 8007ab4:	40014400 	.word	0x40014400

08007ab8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b087      	sub	sp, #28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a1b      	ldr	r3, [r3, #32]
 8007ac6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a1b      	ldr	r3, [r3, #32]
 8007ad2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	021b      	lsls	r3, r3, #8
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007afe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	051b      	lsls	r3, r3, #20
 8007b06:	693a      	ldr	r2, [r7, #16]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a14      	ldr	r2, [pc, #80]	; (8007b60 <TIM_OC6_SetConfig+0xa8>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d007      	beq.n	8007b24 <TIM_OC6_SetConfig+0x6c>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4a13      	ldr	r2, [pc, #76]	; (8007b64 <TIM_OC6_SetConfig+0xac>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d003      	beq.n	8007b24 <TIM_OC6_SetConfig+0x6c>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4a12      	ldr	r2, [pc, #72]	; (8007b68 <TIM_OC6_SetConfig+0xb0>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d109      	bne.n	8007b38 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	695b      	ldr	r3, [r3, #20]
 8007b30:	029b      	lsls	r3, r3, #10
 8007b32:	697a      	ldr	r2, [r7, #20]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	68fa      	ldr	r2, [r7, #12]
 8007b42:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	685a      	ldr	r2, [r3, #4]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	693a      	ldr	r2, [r7, #16]
 8007b50:	621a      	str	r2, [r3, #32]
}
 8007b52:	bf00      	nop
 8007b54:	371c      	adds	r7, #28
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop
 8007b60:	40012c00 	.word	0x40012c00
 8007b64:	40014000 	.word	0x40014000
 8007b68:	40014400 	.word	0x40014400

08007b6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b087      	sub	sp, #28
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6a1b      	ldr	r3, [r3, #32]
 8007b7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6a1b      	ldr	r3, [r3, #32]
 8007b82:	f023 0201 	bic.w	r2, r3, #1
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	699b      	ldr	r3, [r3, #24]
 8007b8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	011b      	lsls	r3, r3, #4
 8007b9c:	693a      	ldr	r2, [r7, #16]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	f023 030a 	bic.w	r3, r3, #10
 8007ba8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007baa:	697a      	ldr	r2, [r7, #20]
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	693a      	ldr	r2, [r7, #16]
 8007bb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	697a      	ldr	r2, [r7, #20]
 8007bbc:	621a      	str	r2, [r3, #32]
}
 8007bbe:	bf00      	nop
 8007bc0:	371c      	adds	r7, #28
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr

08007bca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bca:	b480      	push	{r7}
 8007bcc:	b087      	sub	sp, #28
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	60f8      	str	r0, [r7, #12]
 8007bd2:	60b9      	str	r1, [r7, #8]
 8007bd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6a1b      	ldr	r3, [r3, #32]
 8007bda:	f023 0210 	bic.w	r2, r3, #16
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	699b      	ldr	r3, [r3, #24]
 8007be6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6a1b      	ldr	r3, [r3, #32]
 8007bec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007bf4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	031b      	lsls	r3, r3, #12
 8007bfa:	697a      	ldr	r2, [r7, #20]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	011b      	lsls	r3, r3, #4
 8007c0c:	693a      	ldr	r2, [r7, #16]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	697a      	ldr	r2, [r7, #20]
 8007c16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	693a      	ldr	r2, [r7, #16]
 8007c1c:	621a      	str	r2, [r3, #32]
}
 8007c1e:	bf00      	nop
 8007c20:	371c      	adds	r7, #28
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr

08007c2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b085      	sub	sp, #20
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
 8007c32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c42:	683a      	ldr	r2, [r7, #0]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	f043 0307 	orr.w	r3, r3, #7
 8007c4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	609a      	str	r2, [r3, #8]
}
 8007c54:	bf00      	nop
 8007c56:	3714      	adds	r7, #20
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b087      	sub	sp, #28
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	607a      	str	r2, [r7, #4]
 8007c6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	021a      	lsls	r2, r3, #8
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	431a      	orrs	r2, r3
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	697a      	ldr	r2, [r7, #20]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	697a      	ldr	r2, [r7, #20]
 8007c92:	609a      	str	r2, [r3, #8]
}
 8007c94:	bf00      	nop
 8007c96:	371c      	adds	r7, #28
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b087      	sub	sp, #28
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	60b9      	str	r1, [r7, #8]
 8007caa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	f003 031f 	and.w	r3, r3, #31
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	6a1a      	ldr	r2, [r3, #32]
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	43db      	mvns	r3, r3
 8007cc2:	401a      	ands	r2, r3
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6a1a      	ldr	r2, [r3, #32]
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	f003 031f 	and.w	r3, r3, #31
 8007cd2:	6879      	ldr	r1, [r7, #4]
 8007cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8007cd8:	431a      	orrs	r2, r3
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	621a      	str	r2, [r3, #32]
}
 8007cde:	bf00      	nop
 8007ce0:	371c      	adds	r7, #28
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr
	...

08007cec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b085      	sub	sp, #20
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d101      	bne.n	8007d04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d00:	2302      	movs	r3, #2
 8007d02:	e04f      	b.n	8007da4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2202      	movs	r2, #2
 8007d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a21      	ldr	r2, [pc, #132]	; (8007db0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d108      	bne.n	8007d40 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007d34:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	68fa      	ldr	r2, [r7, #12]
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68fa      	ldr	r2, [r7, #12]
 8007d58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a14      	ldr	r2, [pc, #80]	; (8007db0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d009      	beq.n	8007d78 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d6c:	d004      	beq.n	8007d78 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a10      	ldr	r2, [pc, #64]	; (8007db4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d10c      	bne.n	8007d92 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	68ba      	ldr	r2, [r7, #8]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68ba      	ldr	r2, [r7, #8]
 8007d90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3714      	adds	r7, #20
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr
 8007db0:	40012c00 	.word	0x40012c00
 8007db4:	40014000 	.word	0x40014000

08007db8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d101      	bne.n	8007dd4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007dd0:	2302      	movs	r3, #2
 8007dd2:	e060      	b.n	8007e96 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	695b      	ldr	r3, [r3, #20]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	699b      	ldr	r3, [r3, #24]
 8007e48:	041b      	lsls	r3, r3, #16
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a14      	ldr	r2, [pc, #80]	; (8007ea4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d115      	bne.n	8007e84 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e62:	051b      	lsls	r3, r3, #20
 8007e64:	4313      	orrs	r3, r2
 8007e66:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	69db      	ldr	r3, [r3, #28]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	6a1b      	ldr	r3, [r3, #32]
 8007e80:	4313      	orrs	r3, r2
 8007e82:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3714      	adds	r7, #20
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop
 8007ea4:	40012c00 	.word	0x40012c00

08007ea8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007eb0:	bf00      	nop
 8007eb2:	370c      	adds	r7, #12
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ec4:	bf00      	nop
 8007ec6:	370c      	adds	r7, #12
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007ed8:	bf00      	nop
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <__errno>:
 8007ee4:	4b01      	ldr	r3, [pc, #4]	; (8007eec <__errno+0x8>)
 8007ee6:	6818      	ldr	r0, [r3, #0]
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	20000018 	.word	0x20000018

08007ef0 <__libc_init_array>:
 8007ef0:	b570      	push	{r4, r5, r6, lr}
 8007ef2:	4d0d      	ldr	r5, [pc, #52]	; (8007f28 <__libc_init_array+0x38>)
 8007ef4:	4c0d      	ldr	r4, [pc, #52]	; (8007f2c <__libc_init_array+0x3c>)
 8007ef6:	1b64      	subs	r4, r4, r5
 8007ef8:	10a4      	asrs	r4, r4, #2
 8007efa:	2600      	movs	r6, #0
 8007efc:	42a6      	cmp	r6, r4
 8007efe:	d109      	bne.n	8007f14 <__libc_init_array+0x24>
 8007f00:	4d0b      	ldr	r5, [pc, #44]	; (8007f30 <__libc_init_array+0x40>)
 8007f02:	4c0c      	ldr	r4, [pc, #48]	; (8007f34 <__libc_init_array+0x44>)
 8007f04:	f004 fe8a 	bl	800cc1c <_init>
 8007f08:	1b64      	subs	r4, r4, r5
 8007f0a:	10a4      	asrs	r4, r4, #2
 8007f0c:	2600      	movs	r6, #0
 8007f0e:	42a6      	cmp	r6, r4
 8007f10:	d105      	bne.n	8007f1e <__libc_init_array+0x2e>
 8007f12:	bd70      	pop	{r4, r5, r6, pc}
 8007f14:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f18:	4798      	blx	r3
 8007f1a:	3601      	adds	r6, #1
 8007f1c:	e7ee      	b.n	8007efc <__libc_init_array+0xc>
 8007f1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f22:	4798      	blx	r3
 8007f24:	3601      	adds	r6, #1
 8007f26:	e7f2      	b.n	8007f0e <__libc_init_array+0x1e>
 8007f28:	0800d11c 	.word	0x0800d11c
 8007f2c:	0800d11c 	.word	0x0800d11c
 8007f30:	0800d11c 	.word	0x0800d11c
 8007f34:	0800d120 	.word	0x0800d120

08007f38 <memset>:
 8007f38:	4402      	add	r2, r0
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d100      	bne.n	8007f42 <memset+0xa>
 8007f40:	4770      	bx	lr
 8007f42:	f803 1b01 	strb.w	r1, [r3], #1
 8007f46:	e7f9      	b.n	8007f3c <memset+0x4>

08007f48 <__cvt>:
 8007f48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f4c:	ec55 4b10 	vmov	r4, r5, d0
 8007f50:	2d00      	cmp	r5, #0
 8007f52:	460e      	mov	r6, r1
 8007f54:	4619      	mov	r1, r3
 8007f56:	462b      	mov	r3, r5
 8007f58:	bfbb      	ittet	lt
 8007f5a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007f5e:	461d      	movlt	r5, r3
 8007f60:	2300      	movge	r3, #0
 8007f62:	232d      	movlt	r3, #45	; 0x2d
 8007f64:	700b      	strb	r3, [r1, #0]
 8007f66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f68:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007f6c:	4691      	mov	r9, r2
 8007f6e:	f023 0820 	bic.w	r8, r3, #32
 8007f72:	bfbc      	itt	lt
 8007f74:	4622      	movlt	r2, r4
 8007f76:	4614      	movlt	r4, r2
 8007f78:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f7c:	d005      	beq.n	8007f8a <__cvt+0x42>
 8007f7e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007f82:	d100      	bne.n	8007f86 <__cvt+0x3e>
 8007f84:	3601      	adds	r6, #1
 8007f86:	2102      	movs	r1, #2
 8007f88:	e000      	b.n	8007f8c <__cvt+0x44>
 8007f8a:	2103      	movs	r1, #3
 8007f8c:	ab03      	add	r3, sp, #12
 8007f8e:	9301      	str	r3, [sp, #4]
 8007f90:	ab02      	add	r3, sp, #8
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	ec45 4b10 	vmov	d0, r4, r5
 8007f98:	4653      	mov	r3, sl
 8007f9a:	4632      	mov	r2, r6
 8007f9c:	f001 fdac 	bl	8009af8 <_dtoa_r>
 8007fa0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007fa4:	4607      	mov	r7, r0
 8007fa6:	d102      	bne.n	8007fae <__cvt+0x66>
 8007fa8:	f019 0f01 	tst.w	r9, #1
 8007fac:	d022      	beq.n	8007ff4 <__cvt+0xac>
 8007fae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007fb2:	eb07 0906 	add.w	r9, r7, r6
 8007fb6:	d110      	bne.n	8007fda <__cvt+0x92>
 8007fb8:	783b      	ldrb	r3, [r7, #0]
 8007fba:	2b30      	cmp	r3, #48	; 0x30
 8007fbc:	d10a      	bne.n	8007fd4 <__cvt+0x8c>
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	4629      	mov	r1, r5
 8007fc6:	f7f8 fd7f 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fca:	b918      	cbnz	r0, 8007fd4 <__cvt+0x8c>
 8007fcc:	f1c6 0601 	rsb	r6, r6, #1
 8007fd0:	f8ca 6000 	str.w	r6, [sl]
 8007fd4:	f8da 3000 	ldr.w	r3, [sl]
 8007fd8:	4499      	add	r9, r3
 8007fda:	2200      	movs	r2, #0
 8007fdc:	2300      	movs	r3, #0
 8007fde:	4620      	mov	r0, r4
 8007fe0:	4629      	mov	r1, r5
 8007fe2:	f7f8 fd71 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fe6:	b108      	cbz	r0, 8007fec <__cvt+0xa4>
 8007fe8:	f8cd 900c 	str.w	r9, [sp, #12]
 8007fec:	2230      	movs	r2, #48	; 0x30
 8007fee:	9b03      	ldr	r3, [sp, #12]
 8007ff0:	454b      	cmp	r3, r9
 8007ff2:	d307      	bcc.n	8008004 <__cvt+0xbc>
 8007ff4:	9b03      	ldr	r3, [sp, #12]
 8007ff6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ff8:	1bdb      	subs	r3, r3, r7
 8007ffa:	4638      	mov	r0, r7
 8007ffc:	6013      	str	r3, [r2, #0]
 8007ffe:	b004      	add	sp, #16
 8008000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008004:	1c59      	adds	r1, r3, #1
 8008006:	9103      	str	r1, [sp, #12]
 8008008:	701a      	strb	r2, [r3, #0]
 800800a:	e7f0      	b.n	8007fee <__cvt+0xa6>

0800800c <__exponent>:
 800800c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800800e:	4603      	mov	r3, r0
 8008010:	2900      	cmp	r1, #0
 8008012:	bfb8      	it	lt
 8008014:	4249      	neglt	r1, r1
 8008016:	f803 2b02 	strb.w	r2, [r3], #2
 800801a:	bfb4      	ite	lt
 800801c:	222d      	movlt	r2, #45	; 0x2d
 800801e:	222b      	movge	r2, #43	; 0x2b
 8008020:	2909      	cmp	r1, #9
 8008022:	7042      	strb	r2, [r0, #1]
 8008024:	dd2a      	ble.n	800807c <__exponent+0x70>
 8008026:	f10d 0407 	add.w	r4, sp, #7
 800802a:	46a4      	mov	ip, r4
 800802c:	270a      	movs	r7, #10
 800802e:	46a6      	mov	lr, r4
 8008030:	460a      	mov	r2, r1
 8008032:	fb91 f6f7 	sdiv	r6, r1, r7
 8008036:	fb07 1516 	mls	r5, r7, r6, r1
 800803a:	3530      	adds	r5, #48	; 0x30
 800803c:	2a63      	cmp	r2, #99	; 0x63
 800803e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008042:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008046:	4631      	mov	r1, r6
 8008048:	dcf1      	bgt.n	800802e <__exponent+0x22>
 800804a:	3130      	adds	r1, #48	; 0x30
 800804c:	f1ae 0502 	sub.w	r5, lr, #2
 8008050:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008054:	1c44      	adds	r4, r0, #1
 8008056:	4629      	mov	r1, r5
 8008058:	4561      	cmp	r1, ip
 800805a:	d30a      	bcc.n	8008072 <__exponent+0x66>
 800805c:	f10d 0209 	add.w	r2, sp, #9
 8008060:	eba2 020e 	sub.w	r2, r2, lr
 8008064:	4565      	cmp	r5, ip
 8008066:	bf88      	it	hi
 8008068:	2200      	movhi	r2, #0
 800806a:	4413      	add	r3, r2
 800806c:	1a18      	subs	r0, r3, r0
 800806e:	b003      	add	sp, #12
 8008070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008072:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008076:	f804 2f01 	strb.w	r2, [r4, #1]!
 800807a:	e7ed      	b.n	8008058 <__exponent+0x4c>
 800807c:	2330      	movs	r3, #48	; 0x30
 800807e:	3130      	adds	r1, #48	; 0x30
 8008080:	7083      	strb	r3, [r0, #2]
 8008082:	70c1      	strb	r1, [r0, #3]
 8008084:	1d03      	adds	r3, r0, #4
 8008086:	e7f1      	b.n	800806c <__exponent+0x60>

08008088 <_printf_float>:
 8008088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800808c:	ed2d 8b02 	vpush	{d8}
 8008090:	b08d      	sub	sp, #52	; 0x34
 8008092:	460c      	mov	r4, r1
 8008094:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008098:	4616      	mov	r6, r2
 800809a:	461f      	mov	r7, r3
 800809c:	4605      	mov	r5, r0
 800809e:	f002 fe89 	bl	800adb4 <_localeconv_r>
 80080a2:	f8d0 a000 	ldr.w	sl, [r0]
 80080a6:	4650      	mov	r0, sl
 80080a8:	f7f8 f892 	bl	80001d0 <strlen>
 80080ac:	2300      	movs	r3, #0
 80080ae:	930a      	str	r3, [sp, #40]	; 0x28
 80080b0:	6823      	ldr	r3, [r4, #0]
 80080b2:	9305      	str	r3, [sp, #20]
 80080b4:	f8d8 3000 	ldr.w	r3, [r8]
 80080b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80080bc:	3307      	adds	r3, #7
 80080be:	f023 0307 	bic.w	r3, r3, #7
 80080c2:	f103 0208 	add.w	r2, r3, #8
 80080c6:	f8c8 2000 	str.w	r2, [r8]
 80080ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80080d2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80080d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80080da:	9307      	str	r3, [sp, #28]
 80080dc:	f8cd 8018 	str.w	r8, [sp, #24]
 80080e0:	ee08 0a10 	vmov	s16, r0
 80080e4:	4b9f      	ldr	r3, [pc, #636]	; (8008364 <_printf_float+0x2dc>)
 80080e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080ea:	f04f 32ff 	mov.w	r2, #4294967295
 80080ee:	f7f8 fd1d 	bl	8000b2c <__aeabi_dcmpun>
 80080f2:	bb88      	cbnz	r0, 8008158 <_printf_float+0xd0>
 80080f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080f8:	4b9a      	ldr	r3, [pc, #616]	; (8008364 <_printf_float+0x2dc>)
 80080fa:	f04f 32ff 	mov.w	r2, #4294967295
 80080fe:	f7f8 fcf7 	bl	8000af0 <__aeabi_dcmple>
 8008102:	bb48      	cbnz	r0, 8008158 <_printf_float+0xd0>
 8008104:	2200      	movs	r2, #0
 8008106:	2300      	movs	r3, #0
 8008108:	4640      	mov	r0, r8
 800810a:	4649      	mov	r1, r9
 800810c:	f7f8 fce6 	bl	8000adc <__aeabi_dcmplt>
 8008110:	b110      	cbz	r0, 8008118 <_printf_float+0x90>
 8008112:	232d      	movs	r3, #45	; 0x2d
 8008114:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008118:	4b93      	ldr	r3, [pc, #588]	; (8008368 <_printf_float+0x2e0>)
 800811a:	4894      	ldr	r0, [pc, #592]	; (800836c <_printf_float+0x2e4>)
 800811c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008120:	bf94      	ite	ls
 8008122:	4698      	movls	r8, r3
 8008124:	4680      	movhi	r8, r0
 8008126:	2303      	movs	r3, #3
 8008128:	6123      	str	r3, [r4, #16]
 800812a:	9b05      	ldr	r3, [sp, #20]
 800812c:	f023 0204 	bic.w	r2, r3, #4
 8008130:	6022      	str	r2, [r4, #0]
 8008132:	f04f 0900 	mov.w	r9, #0
 8008136:	9700      	str	r7, [sp, #0]
 8008138:	4633      	mov	r3, r6
 800813a:	aa0b      	add	r2, sp, #44	; 0x2c
 800813c:	4621      	mov	r1, r4
 800813e:	4628      	mov	r0, r5
 8008140:	f000 f9d8 	bl	80084f4 <_printf_common>
 8008144:	3001      	adds	r0, #1
 8008146:	f040 8090 	bne.w	800826a <_printf_float+0x1e2>
 800814a:	f04f 30ff 	mov.w	r0, #4294967295
 800814e:	b00d      	add	sp, #52	; 0x34
 8008150:	ecbd 8b02 	vpop	{d8}
 8008154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008158:	4642      	mov	r2, r8
 800815a:	464b      	mov	r3, r9
 800815c:	4640      	mov	r0, r8
 800815e:	4649      	mov	r1, r9
 8008160:	f7f8 fce4 	bl	8000b2c <__aeabi_dcmpun>
 8008164:	b140      	cbz	r0, 8008178 <_printf_float+0xf0>
 8008166:	464b      	mov	r3, r9
 8008168:	2b00      	cmp	r3, #0
 800816a:	bfbc      	itt	lt
 800816c:	232d      	movlt	r3, #45	; 0x2d
 800816e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008172:	487f      	ldr	r0, [pc, #508]	; (8008370 <_printf_float+0x2e8>)
 8008174:	4b7f      	ldr	r3, [pc, #508]	; (8008374 <_printf_float+0x2ec>)
 8008176:	e7d1      	b.n	800811c <_printf_float+0x94>
 8008178:	6863      	ldr	r3, [r4, #4]
 800817a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800817e:	9206      	str	r2, [sp, #24]
 8008180:	1c5a      	adds	r2, r3, #1
 8008182:	d13f      	bne.n	8008204 <_printf_float+0x17c>
 8008184:	2306      	movs	r3, #6
 8008186:	6063      	str	r3, [r4, #4]
 8008188:	9b05      	ldr	r3, [sp, #20]
 800818a:	6861      	ldr	r1, [r4, #4]
 800818c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008190:	2300      	movs	r3, #0
 8008192:	9303      	str	r3, [sp, #12]
 8008194:	ab0a      	add	r3, sp, #40	; 0x28
 8008196:	e9cd b301 	strd	fp, r3, [sp, #4]
 800819a:	ab09      	add	r3, sp, #36	; 0x24
 800819c:	ec49 8b10 	vmov	d0, r8, r9
 80081a0:	9300      	str	r3, [sp, #0]
 80081a2:	6022      	str	r2, [r4, #0]
 80081a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80081a8:	4628      	mov	r0, r5
 80081aa:	f7ff fecd 	bl	8007f48 <__cvt>
 80081ae:	9b06      	ldr	r3, [sp, #24]
 80081b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081b2:	2b47      	cmp	r3, #71	; 0x47
 80081b4:	4680      	mov	r8, r0
 80081b6:	d108      	bne.n	80081ca <_printf_float+0x142>
 80081b8:	1cc8      	adds	r0, r1, #3
 80081ba:	db02      	blt.n	80081c2 <_printf_float+0x13a>
 80081bc:	6863      	ldr	r3, [r4, #4]
 80081be:	4299      	cmp	r1, r3
 80081c0:	dd41      	ble.n	8008246 <_printf_float+0x1be>
 80081c2:	f1ab 0b02 	sub.w	fp, fp, #2
 80081c6:	fa5f fb8b 	uxtb.w	fp, fp
 80081ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80081ce:	d820      	bhi.n	8008212 <_printf_float+0x18a>
 80081d0:	3901      	subs	r1, #1
 80081d2:	465a      	mov	r2, fp
 80081d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80081d8:	9109      	str	r1, [sp, #36]	; 0x24
 80081da:	f7ff ff17 	bl	800800c <__exponent>
 80081de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081e0:	1813      	adds	r3, r2, r0
 80081e2:	2a01      	cmp	r2, #1
 80081e4:	4681      	mov	r9, r0
 80081e6:	6123      	str	r3, [r4, #16]
 80081e8:	dc02      	bgt.n	80081f0 <_printf_float+0x168>
 80081ea:	6822      	ldr	r2, [r4, #0]
 80081ec:	07d2      	lsls	r2, r2, #31
 80081ee:	d501      	bpl.n	80081f4 <_printf_float+0x16c>
 80081f0:	3301      	adds	r3, #1
 80081f2:	6123      	str	r3, [r4, #16]
 80081f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d09c      	beq.n	8008136 <_printf_float+0xae>
 80081fc:	232d      	movs	r3, #45	; 0x2d
 80081fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008202:	e798      	b.n	8008136 <_printf_float+0xae>
 8008204:	9a06      	ldr	r2, [sp, #24]
 8008206:	2a47      	cmp	r2, #71	; 0x47
 8008208:	d1be      	bne.n	8008188 <_printf_float+0x100>
 800820a:	2b00      	cmp	r3, #0
 800820c:	d1bc      	bne.n	8008188 <_printf_float+0x100>
 800820e:	2301      	movs	r3, #1
 8008210:	e7b9      	b.n	8008186 <_printf_float+0xfe>
 8008212:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008216:	d118      	bne.n	800824a <_printf_float+0x1c2>
 8008218:	2900      	cmp	r1, #0
 800821a:	6863      	ldr	r3, [r4, #4]
 800821c:	dd0b      	ble.n	8008236 <_printf_float+0x1ae>
 800821e:	6121      	str	r1, [r4, #16]
 8008220:	b913      	cbnz	r3, 8008228 <_printf_float+0x1a0>
 8008222:	6822      	ldr	r2, [r4, #0]
 8008224:	07d0      	lsls	r0, r2, #31
 8008226:	d502      	bpl.n	800822e <_printf_float+0x1a6>
 8008228:	3301      	adds	r3, #1
 800822a:	440b      	add	r3, r1
 800822c:	6123      	str	r3, [r4, #16]
 800822e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008230:	f04f 0900 	mov.w	r9, #0
 8008234:	e7de      	b.n	80081f4 <_printf_float+0x16c>
 8008236:	b913      	cbnz	r3, 800823e <_printf_float+0x1b6>
 8008238:	6822      	ldr	r2, [r4, #0]
 800823a:	07d2      	lsls	r2, r2, #31
 800823c:	d501      	bpl.n	8008242 <_printf_float+0x1ba>
 800823e:	3302      	adds	r3, #2
 8008240:	e7f4      	b.n	800822c <_printf_float+0x1a4>
 8008242:	2301      	movs	r3, #1
 8008244:	e7f2      	b.n	800822c <_printf_float+0x1a4>
 8008246:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800824a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800824c:	4299      	cmp	r1, r3
 800824e:	db05      	blt.n	800825c <_printf_float+0x1d4>
 8008250:	6823      	ldr	r3, [r4, #0]
 8008252:	6121      	str	r1, [r4, #16]
 8008254:	07d8      	lsls	r0, r3, #31
 8008256:	d5ea      	bpl.n	800822e <_printf_float+0x1a6>
 8008258:	1c4b      	adds	r3, r1, #1
 800825a:	e7e7      	b.n	800822c <_printf_float+0x1a4>
 800825c:	2900      	cmp	r1, #0
 800825e:	bfd4      	ite	le
 8008260:	f1c1 0202 	rsble	r2, r1, #2
 8008264:	2201      	movgt	r2, #1
 8008266:	4413      	add	r3, r2
 8008268:	e7e0      	b.n	800822c <_printf_float+0x1a4>
 800826a:	6823      	ldr	r3, [r4, #0]
 800826c:	055a      	lsls	r2, r3, #21
 800826e:	d407      	bmi.n	8008280 <_printf_float+0x1f8>
 8008270:	6923      	ldr	r3, [r4, #16]
 8008272:	4642      	mov	r2, r8
 8008274:	4631      	mov	r1, r6
 8008276:	4628      	mov	r0, r5
 8008278:	47b8      	blx	r7
 800827a:	3001      	adds	r0, #1
 800827c:	d12c      	bne.n	80082d8 <_printf_float+0x250>
 800827e:	e764      	b.n	800814a <_printf_float+0xc2>
 8008280:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008284:	f240 80e0 	bls.w	8008448 <_printf_float+0x3c0>
 8008288:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800828c:	2200      	movs	r2, #0
 800828e:	2300      	movs	r3, #0
 8008290:	f7f8 fc1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008294:	2800      	cmp	r0, #0
 8008296:	d034      	beq.n	8008302 <_printf_float+0x27a>
 8008298:	4a37      	ldr	r2, [pc, #220]	; (8008378 <_printf_float+0x2f0>)
 800829a:	2301      	movs	r3, #1
 800829c:	4631      	mov	r1, r6
 800829e:	4628      	mov	r0, r5
 80082a0:	47b8      	blx	r7
 80082a2:	3001      	adds	r0, #1
 80082a4:	f43f af51 	beq.w	800814a <_printf_float+0xc2>
 80082a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082ac:	429a      	cmp	r2, r3
 80082ae:	db02      	blt.n	80082b6 <_printf_float+0x22e>
 80082b0:	6823      	ldr	r3, [r4, #0]
 80082b2:	07d8      	lsls	r0, r3, #31
 80082b4:	d510      	bpl.n	80082d8 <_printf_float+0x250>
 80082b6:	ee18 3a10 	vmov	r3, s16
 80082ba:	4652      	mov	r2, sl
 80082bc:	4631      	mov	r1, r6
 80082be:	4628      	mov	r0, r5
 80082c0:	47b8      	blx	r7
 80082c2:	3001      	adds	r0, #1
 80082c4:	f43f af41 	beq.w	800814a <_printf_float+0xc2>
 80082c8:	f04f 0800 	mov.w	r8, #0
 80082cc:	f104 091a 	add.w	r9, r4, #26
 80082d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082d2:	3b01      	subs	r3, #1
 80082d4:	4543      	cmp	r3, r8
 80082d6:	dc09      	bgt.n	80082ec <_printf_float+0x264>
 80082d8:	6823      	ldr	r3, [r4, #0]
 80082da:	079b      	lsls	r3, r3, #30
 80082dc:	f100 8105 	bmi.w	80084ea <_printf_float+0x462>
 80082e0:	68e0      	ldr	r0, [r4, #12]
 80082e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082e4:	4298      	cmp	r0, r3
 80082e6:	bfb8      	it	lt
 80082e8:	4618      	movlt	r0, r3
 80082ea:	e730      	b.n	800814e <_printf_float+0xc6>
 80082ec:	2301      	movs	r3, #1
 80082ee:	464a      	mov	r2, r9
 80082f0:	4631      	mov	r1, r6
 80082f2:	4628      	mov	r0, r5
 80082f4:	47b8      	blx	r7
 80082f6:	3001      	adds	r0, #1
 80082f8:	f43f af27 	beq.w	800814a <_printf_float+0xc2>
 80082fc:	f108 0801 	add.w	r8, r8, #1
 8008300:	e7e6      	b.n	80082d0 <_printf_float+0x248>
 8008302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008304:	2b00      	cmp	r3, #0
 8008306:	dc39      	bgt.n	800837c <_printf_float+0x2f4>
 8008308:	4a1b      	ldr	r2, [pc, #108]	; (8008378 <_printf_float+0x2f0>)
 800830a:	2301      	movs	r3, #1
 800830c:	4631      	mov	r1, r6
 800830e:	4628      	mov	r0, r5
 8008310:	47b8      	blx	r7
 8008312:	3001      	adds	r0, #1
 8008314:	f43f af19 	beq.w	800814a <_printf_float+0xc2>
 8008318:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800831c:	4313      	orrs	r3, r2
 800831e:	d102      	bne.n	8008326 <_printf_float+0x29e>
 8008320:	6823      	ldr	r3, [r4, #0]
 8008322:	07d9      	lsls	r1, r3, #31
 8008324:	d5d8      	bpl.n	80082d8 <_printf_float+0x250>
 8008326:	ee18 3a10 	vmov	r3, s16
 800832a:	4652      	mov	r2, sl
 800832c:	4631      	mov	r1, r6
 800832e:	4628      	mov	r0, r5
 8008330:	47b8      	blx	r7
 8008332:	3001      	adds	r0, #1
 8008334:	f43f af09 	beq.w	800814a <_printf_float+0xc2>
 8008338:	f04f 0900 	mov.w	r9, #0
 800833c:	f104 0a1a 	add.w	sl, r4, #26
 8008340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008342:	425b      	negs	r3, r3
 8008344:	454b      	cmp	r3, r9
 8008346:	dc01      	bgt.n	800834c <_printf_float+0x2c4>
 8008348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800834a:	e792      	b.n	8008272 <_printf_float+0x1ea>
 800834c:	2301      	movs	r3, #1
 800834e:	4652      	mov	r2, sl
 8008350:	4631      	mov	r1, r6
 8008352:	4628      	mov	r0, r5
 8008354:	47b8      	blx	r7
 8008356:	3001      	adds	r0, #1
 8008358:	f43f aef7 	beq.w	800814a <_printf_float+0xc2>
 800835c:	f109 0901 	add.w	r9, r9, #1
 8008360:	e7ee      	b.n	8008340 <_printf_float+0x2b8>
 8008362:	bf00      	nop
 8008364:	7fefffff 	.word	0x7fefffff
 8008368:	0800cc7c 	.word	0x0800cc7c
 800836c:	0800cc80 	.word	0x0800cc80
 8008370:	0800cc88 	.word	0x0800cc88
 8008374:	0800cc84 	.word	0x0800cc84
 8008378:	0800cc8c 	.word	0x0800cc8c
 800837c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800837e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008380:	429a      	cmp	r2, r3
 8008382:	bfa8      	it	ge
 8008384:	461a      	movge	r2, r3
 8008386:	2a00      	cmp	r2, #0
 8008388:	4691      	mov	r9, r2
 800838a:	dc37      	bgt.n	80083fc <_printf_float+0x374>
 800838c:	f04f 0b00 	mov.w	fp, #0
 8008390:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008394:	f104 021a 	add.w	r2, r4, #26
 8008398:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800839a:	9305      	str	r3, [sp, #20]
 800839c:	eba3 0309 	sub.w	r3, r3, r9
 80083a0:	455b      	cmp	r3, fp
 80083a2:	dc33      	bgt.n	800840c <_printf_float+0x384>
 80083a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083a8:	429a      	cmp	r2, r3
 80083aa:	db3b      	blt.n	8008424 <_printf_float+0x39c>
 80083ac:	6823      	ldr	r3, [r4, #0]
 80083ae:	07da      	lsls	r2, r3, #31
 80083b0:	d438      	bmi.n	8008424 <_printf_float+0x39c>
 80083b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083b4:	9a05      	ldr	r2, [sp, #20]
 80083b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083b8:	1a9a      	subs	r2, r3, r2
 80083ba:	eba3 0901 	sub.w	r9, r3, r1
 80083be:	4591      	cmp	r9, r2
 80083c0:	bfa8      	it	ge
 80083c2:	4691      	movge	r9, r2
 80083c4:	f1b9 0f00 	cmp.w	r9, #0
 80083c8:	dc35      	bgt.n	8008436 <_printf_float+0x3ae>
 80083ca:	f04f 0800 	mov.w	r8, #0
 80083ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083d2:	f104 0a1a 	add.w	sl, r4, #26
 80083d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083da:	1a9b      	subs	r3, r3, r2
 80083dc:	eba3 0309 	sub.w	r3, r3, r9
 80083e0:	4543      	cmp	r3, r8
 80083e2:	f77f af79 	ble.w	80082d8 <_printf_float+0x250>
 80083e6:	2301      	movs	r3, #1
 80083e8:	4652      	mov	r2, sl
 80083ea:	4631      	mov	r1, r6
 80083ec:	4628      	mov	r0, r5
 80083ee:	47b8      	blx	r7
 80083f0:	3001      	adds	r0, #1
 80083f2:	f43f aeaa 	beq.w	800814a <_printf_float+0xc2>
 80083f6:	f108 0801 	add.w	r8, r8, #1
 80083fa:	e7ec      	b.n	80083d6 <_printf_float+0x34e>
 80083fc:	4613      	mov	r3, r2
 80083fe:	4631      	mov	r1, r6
 8008400:	4642      	mov	r2, r8
 8008402:	4628      	mov	r0, r5
 8008404:	47b8      	blx	r7
 8008406:	3001      	adds	r0, #1
 8008408:	d1c0      	bne.n	800838c <_printf_float+0x304>
 800840a:	e69e      	b.n	800814a <_printf_float+0xc2>
 800840c:	2301      	movs	r3, #1
 800840e:	4631      	mov	r1, r6
 8008410:	4628      	mov	r0, r5
 8008412:	9205      	str	r2, [sp, #20]
 8008414:	47b8      	blx	r7
 8008416:	3001      	adds	r0, #1
 8008418:	f43f ae97 	beq.w	800814a <_printf_float+0xc2>
 800841c:	9a05      	ldr	r2, [sp, #20]
 800841e:	f10b 0b01 	add.w	fp, fp, #1
 8008422:	e7b9      	b.n	8008398 <_printf_float+0x310>
 8008424:	ee18 3a10 	vmov	r3, s16
 8008428:	4652      	mov	r2, sl
 800842a:	4631      	mov	r1, r6
 800842c:	4628      	mov	r0, r5
 800842e:	47b8      	blx	r7
 8008430:	3001      	adds	r0, #1
 8008432:	d1be      	bne.n	80083b2 <_printf_float+0x32a>
 8008434:	e689      	b.n	800814a <_printf_float+0xc2>
 8008436:	9a05      	ldr	r2, [sp, #20]
 8008438:	464b      	mov	r3, r9
 800843a:	4442      	add	r2, r8
 800843c:	4631      	mov	r1, r6
 800843e:	4628      	mov	r0, r5
 8008440:	47b8      	blx	r7
 8008442:	3001      	adds	r0, #1
 8008444:	d1c1      	bne.n	80083ca <_printf_float+0x342>
 8008446:	e680      	b.n	800814a <_printf_float+0xc2>
 8008448:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800844a:	2a01      	cmp	r2, #1
 800844c:	dc01      	bgt.n	8008452 <_printf_float+0x3ca>
 800844e:	07db      	lsls	r3, r3, #31
 8008450:	d538      	bpl.n	80084c4 <_printf_float+0x43c>
 8008452:	2301      	movs	r3, #1
 8008454:	4642      	mov	r2, r8
 8008456:	4631      	mov	r1, r6
 8008458:	4628      	mov	r0, r5
 800845a:	47b8      	blx	r7
 800845c:	3001      	adds	r0, #1
 800845e:	f43f ae74 	beq.w	800814a <_printf_float+0xc2>
 8008462:	ee18 3a10 	vmov	r3, s16
 8008466:	4652      	mov	r2, sl
 8008468:	4631      	mov	r1, r6
 800846a:	4628      	mov	r0, r5
 800846c:	47b8      	blx	r7
 800846e:	3001      	adds	r0, #1
 8008470:	f43f ae6b 	beq.w	800814a <_printf_float+0xc2>
 8008474:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008478:	2200      	movs	r2, #0
 800847a:	2300      	movs	r3, #0
 800847c:	f7f8 fb24 	bl	8000ac8 <__aeabi_dcmpeq>
 8008480:	b9d8      	cbnz	r0, 80084ba <_printf_float+0x432>
 8008482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008484:	f108 0201 	add.w	r2, r8, #1
 8008488:	3b01      	subs	r3, #1
 800848a:	4631      	mov	r1, r6
 800848c:	4628      	mov	r0, r5
 800848e:	47b8      	blx	r7
 8008490:	3001      	adds	r0, #1
 8008492:	d10e      	bne.n	80084b2 <_printf_float+0x42a>
 8008494:	e659      	b.n	800814a <_printf_float+0xc2>
 8008496:	2301      	movs	r3, #1
 8008498:	4652      	mov	r2, sl
 800849a:	4631      	mov	r1, r6
 800849c:	4628      	mov	r0, r5
 800849e:	47b8      	blx	r7
 80084a0:	3001      	adds	r0, #1
 80084a2:	f43f ae52 	beq.w	800814a <_printf_float+0xc2>
 80084a6:	f108 0801 	add.w	r8, r8, #1
 80084aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084ac:	3b01      	subs	r3, #1
 80084ae:	4543      	cmp	r3, r8
 80084b0:	dcf1      	bgt.n	8008496 <_printf_float+0x40e>
 80084b2:	464b      	mov	r3, r9
 80084b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80084b8:	e6dc      	b.n	8008274 <_printf_float+0x1ec>
 80084ba:	f04f 0800 	mov.w	r8, #0
 80084be:	f104 0a1a 	add.w	sl, r4, #26
 80084c2:	e7f2      	b.n	80084aa <_printf_float+0x422>
 80084c4:	2301      	movs	r3, #1
 80084c6:	4642      	mov	r2, r8
 80084c8:	e7df      	b.n	800848a <_printf_float+0x402>
 80084ca:	2301      	movs	r3, #1
 80084cc:	464a      	mov	r2, r9
 80084ce:	4631      	mov	r1, r6
 80084d0:	4628      	mov	r0, r5
 80084d2:	47b8      	blx	r7
 80084d4:	3001      	adds	r0, #1
 80084d6:	f43f ae38 	beq.w	800814a <_printf_float+0xc2>
 80084da:	f108 0801 	add.w	r8, r8, #1
 80084de:	68e3      	ldr	r3, [r4, #12]
 80084e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80084e2:	1a5b      	subs	r3, r3, r1
 80084e4:	4543      	cmp	r3, r8
 80084e6:	dcf0      	bgt.n	80084ca <_printf_float+0x442>
 80084e8:	e6fa      	b.n	80082e0 <_printf_float+0x258>
 80084ea:	f04f 0800 	mov.w	r8, #0
 80084ee:	f104 0919 	add.w	r9, r4, #25
 80084f2:	e7f4      	b.n	80084de <_printf_float+0x456>

080084f4 <_printf_common>:
 80084f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084f8:	4616      	mov	r6, r2
 80084fa:	4699      	mov	r9, r3
 80084fc:	688a      	ldr	r2, [r1, #8]
 80084fe:	690b      	ldr	r3, [r1, #16]
 8008500:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008504:	4293      	cmp	r3, r2
 8008506:	bfb8      	it	lt
 8008508:	4613      	movlt	r3, r2
 800850a:	6033      	str	r3, [r6, #0]
 800850c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008510:	4607      	mov	r7, r0
 8008512:	460c      	mov	r4, r1
 8008514:	b10a      	cbz	r2, 800851a <_printf_common+0x26>
 8008516:	3301      	adds	r3, #1
 8008518:	6033      	str	r3, [r6, #0]
 800851a:	6823      	ldr	r3, [r4, #0]
 800851c:	0699      	lsls	r1, r3, #26
 800851e:	bf42      	ittt	mi
 8008520:	6833      	ldrmi	r3, [r6, #0]
 8008522:	3302      	addmi	r3, #2
 8008524:	6033      	strmi	r3, [r6, #0]
 8008526:	6825      	ldr	r5, [r4, #0]
 8008528:	f015 0506 	ands.w	r5, r5, #6
 800852c:	d106      	bne.n	800853c <_printf_common+0x48>
 800852e:	f104 0a19 	add.w	sl, r4, #25
 8008532:	68e3      	ldr	r3, [r4, #12]
 8008534:	6832      	ldr	r2, [r6, #0]
 8008536:	1a9b      	subs	r3, r3, r2
 8008538:	42ab      	cmp	r3, r5
 800853a:	dc26      	bgt.n	800858a <_printf_common+0x96>
 800853c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008540:	1e13      	subs	r3, r2, #0
 8008542:	6822      	ldr	r2, [r4, #0]
 8008544:	bf18      	it	ne
 8008546:	2301      	movne	r3, #1
 8008548:	0692      	lsls	r2, r2, #26
 800854a:	d42b      	bmi.n	80085a4 <_printf_common+0xb0>
 800854c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008550:	4649      	mov	r1, r9
 8008552:	4638      	mov	r0, r7
 8008554:	47c0      	blx	r8
 8008556:	3001      	adds	r0, #1
 8008558:	d01e      	beq.n	8008598 <_printf_common+0xa4>
 800855a:	6823      	ldr	r3, [r4, #0]
 800855c:	68e5      	ldr	r5, [r4, #12]
 800855e:	6832      	ldr	r2, [r6, #0]
 8008560:	f003 0306 	and.w	r3, r3, #6
 8008564:	2b04      	cmp	r3, #4
 8008566:	bf08      	it	eq
 8008568:	1aad      	subeq	r5, r5, r2
 800856a:	68a3      	ldr	r3, [r4, #8]
 800856c:	6922      	ldr	r2, [r4, #16]
 800856e:	bf0c      	ite	eq
 8008570:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008574:	2500      	movne	r5, #0
 8008576:	4293      	cmp	r3, r2
 8008578:	bfc4      	itt	gt
 800857a:	1a9b      	subgt	r3, r3, r2
 800857c:	18ed      	addgt	r5, r5, r3
 800857e:	2600      	movs	r6, #0
 8008580:	341a      	adds	r4, #26
 8008582:	42b5      	cmp	r5, r6
 8008584:	d11a      	bne.n	80085bc <_printf_common+0xc8>
 8008586:	2000      	movs	r0, #0
 8008588:	e008      	b.n	800859c <_printf_common+0xa8>
 800858a:	2301      	movs	r3, #1
 800858c:	4652      	mov	r2, sl
 800858e:	4649      	mov	r1, r9
 8008590:	4638      	mov	r0, r7
 8008592:	47c0      	blx	r8
 8008594:	3001      	adds	r0, #1
 8008596:	d103      	bne.n	80085a0 <_printf_common+0xac>
 8008598:	f04f 30ff 	mov.w	r0, #4294967295
 800859c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085a0:	3501      	adds	r5, #1
 80085a2:	e7c6      	b.n	8008532 <_printf_common+0x3e>
 80085a4:	18e1      	adds	r1, r4, r3
 80085a6:	1c5a      	adds	r2, r3, #1
 80085a8:	2030      	movs	r0, #48	; 0x30
 80085aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085ae:	4422      	add	r2, r4
 80085b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80085b8:	3302      	adds	r3, #2
 80085ba:	e7c7      	b.n	800854c <_printf_common+0x58>
 80085bc:	2301      	movs	r3, #1
 80085be:	4622      	mov	r2, r4
 80085c0:	4649      	mov	r1, r9
 80085c2:	4638      	mov	r0, r7
 80085c4:	47c0      	blx	r8
 80085c6:	3001      	adds	r0, #1
 80085c8:	d0e6      	beq.n	8008598 <_printf_common+0xa4>
 80085ca:	3601      	adds	r6, #1
 80085cc:	e7d9      	b.n	8008582 <_printf_common+0x8e>
	...

080085d0 <_printf_i>:
 80085d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085d4:	7e0f      	ldrb	r7, [r1, #24]
 80085d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80085d8:	2f78      	cmp	r7, #120	; 0x78
 80085da:	4691      	mov	r9, r2
 80085dc:	4680      	mov	r8, r0
 80085de:	460c      	mov	r4, r1
 80085e0:	469a      	mov	sl, r3
 80085e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80085e6:	d807      	bhi.n	80085f8 <_printf_i+0x28>
 80085e8:	2f62      	cmp	r7, #98	; 0x62
 80085ea:	d80a      	bhi.n	8008602 <_printf_i+0x32>
 80085ec:	2f00      	cmp	r7, #0
 80085ee:	f000 80d8 	beq.w	80087a2 <_printf_i+0x1d2>
 80085f2:	2f58      	cmp	r7, #88	; 0x58
 80085f4:	f000 80a3 	beq.w	800873e <_printf_i+0x16e>
 80085f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008600:	e03a      	b.n	8008678 <_printf_i+0xa8>
 8008602:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008606:	2b15      	cmp	r3, #21
 8008608:	d8f6      	bhi.n	80085f8 <_printf_i+0x28>
 800860a:	a101      	add	r1, pc, #4	; (adr r1, 8008610 <_printf_i+0x40>)
 800860c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008610:	08008669 	.word	0x08008669
 8008614:	0800867d 	.word	0x0800867d
 8008618:	080085f9 	.word	0x080085f9
 800861c:	080085f9 	.word	0x080085f9
 8008620:	080085f9 	.word	0x080085f9
 8008624:	080085f9 	.word	0x080085f9
 8008628:	0800867d 	.word	0x0800867d
 800862c:	080085f9 	.word	0x080085f9
 8008630:	080085f9 	.word	0x080085f9
 8008634:	080085f9 	.word	0x080085f9
 8008638:	080085f9 	.word	0x080085f9
 800863c:	08008789 	.word	0x08008789
 8008640:	080086ad 	.word	0x080086ad
 8008644:	0800876b 	.word	0x0800876b
 8008648:	080085f9 	.word	0x080085f9
 800864c:	080085f9 	.word	0x080085f9
 8008650:	080087ab 	.word	0x080087ab
 8008654:	080085f9 	.word	0x080085f9
 8008658:	080086ad 	.word	0x080086ad
 800865c:	080085f9 	.word	0x080085f9
 8008660:	080085f9 	.word	0x080085f9
 8008664:	08008773 	.word	0x08008773
 8008668:	682b      	ldr	r3, [r5, #0]
 800866a:	1d1a      	adds	r2, r3, #4
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	602a      	str	r2, [r5, #0]
 8008670:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008674:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008678:	2301      	movs	r3, #1
 800867a:	e0a3      	b.n	80087c4 <_printf_i+0x1f4>
 800867c:	6820      	ldr	r0, [r4, #0]
 800867e:	6829      	ldr	r1, [r5, #0]
 8008680:	0606      	lsls	r6, r0, #24
 8008682:	f101 0304 	add.w	r3, r1, #4
 8008686:	d50a      	bpl.n	800869e <_printf_i+0xce>
 8008688:	680e      	ldr	r6, [r1, #0]
 800868a:	602b      	str	r3, [r5, #0]
 800868c:	2e00      	cmp	r6, #0
 800868e:	da03      	bge.n	8008698 <_printf_i+0xc8>
 8008690:	232d      	movs	r3, #45	; 0x2d
 8008692:	4276      	negs	r6, r6
 8008694:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008698:	485e      	ldr	r0, [pc, #376]	; (8008814 <_printf_i+0x244>)
 800869a:	230a      	movs	r3, #10
 800869c:	e019      	b.n	80086d2 <_printf_i+0x102>
 800869e:	680e      	ldr	r6, [r1, #0]
 80086a0:	602b      	str	r3, [r5, #0]
 80086a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80086a6:	bf18      	it	ne
 80086a8:	b236      	sxthne	r6, r6
 80086aa:	e7ef      	b.n	800868c <_printf_i+0xbc>
 80086ac:	682b      	ldr	r3, [r5, #0]
 80086ae:	6820      	ldr	r0, [r4, #0]
 80086b0:	1d19      	adds	r1, r3, #4
 80086b2:	6029      	str	r1, [r5, #0]
 80086b4:	0601      	lsls	r1, r0, #24
 80086b6:	d501      	bpl.n	80086bc <_printf_i+0xec>
 80086b8:	681e      	ldr	r6, [r3, #0]
 80086ba:	e002      	b.n	80086c2 <_printf_i+0xf2>
 80086bc:	0646      	lsls	r6, r0, #25
 80086be:	d5fb      	bpl.n	80086b8 <_printf_i+0xe8>
 80086c0:	881e      	ldrh	r6, [r3, #0]
 80086c2:	4854      	ldr	r0, [pc, #336]	; (8008814 <_printf_i+0x244>)
 80086c4:	2f6f      	cmp	r7, #111	; 0x6f
 80086c6:	bf0c      	ite	eq
 80086c8:	2308      	moveq	r3, #8
 80086ca:	230a      	movne	r3, #10
 80086cc:	2100      	movs	r1, #0
 80086ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80086d2:	6865      	ldr	r5, [r4, #4]
 80086d4:	60a5      	str	r5, [r4, #8]
 80086d6:	2d00      	cmp	r5, #0
 80086d8:	bfa2      	ittt	ge
 80086da:	6821      	ldrge	r1, [r4, #0]
 80086dc:	f021 0104 	bicge.w	r1, r1, #4
 80086e0:	6021      	strge	r1, [r4, #0]
 80086e2:	b90e      	cbnz	r6, 80086e8 <_printf_i+0x118>
 80086e4:	2d00      	cmp	r5, #0
 80086e6:	d04d      	beq.n	8008784 <_printf_i+0x1b4>
 80086e8:	4615      	mov	r5, r2
 80086ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80086ee:	fb03 6711 	mls	r7, r3, r1, r6
 80086f2:	5dc7      	ldrb	r7, [r0, r7]
 80086f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80086f8:	4637      	mov	r7, r6
 80086fa:	42bb      	cmp	r3, r7
 80086fc:	460e      	mov	r6, r1
 80086fe:	d9f4      	bls.n	80086ea <_printf_i+0x11a>
 8008700:	2b08      	cmp	r3, #8
 8008702:	d10b      	bne.n	800871c <_printf_i+0x14c>
 8008704:	6823      	ldr	r3, [r4, #0]
 8008706:	07de      	lsls	r6, r3, #31
 8008708:	d508      	bpl.n	800871c <_printf_i+0x14c>
 800870a:	6923      	ldr	r3, [r4, #16]
 800870c:	6861      	ldr	r1, [r4, #4]
 800870e:	4299      	cmp	r1, r3
 8008710:	bfde      	ittt	le
 8008712:	2330      	movle	r3, #48	; 0x30
 8008714:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008718:	f105 35ff 	addle.w	r5, r5, #4294967295
 800871c:	1b52      	subs	r2, r2, r5
 800871e:	6122      	str	r2, [r4, #16]
 8008720:	f8cd a000 	str.w	sl, [sp]
 8008724:	464b      	mov	r3, r9
 8008726:	aa03      	add	r2, sp, #12
 8008728:	4621      	mov	r1, r4
 800872a:	4640      	mov	r0, r8
 800872c:	f7ff fee2 	bl	80084f4 <_printf_common>
 8008730:	3001      	adds	r0, #1
 8008732:	d14c      	bne.n	80087ce <_printf_i+0x1fe>
 8008734:	f04f 30ff 	mov.w	r0, #4294967295
 8008738:	b004      	add	sp, #16
 800873a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800873e:	4835      	ldr	r0, [pc, #212]	; (8008814 <_printf_i+0x244>)
 8008740:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008744:	6829      	ldr	r1, [r5, #0]
 8008746:	6823      	ldr	r3, [r4, #0]
 8008748:	f851 6b04 	ldr.w	r6, [r1], #4
 800874c:	6029      	str	r1, [r5, #0]
 800874e:	061d      	lsls	r5, r3, #24
 8008750:	d514      	bpl.n	800877c <_printf_i+0x1ac>
 8008752:	07df      	lsls	r7, r3, #31
 8008754:	bf44      	itt	mi
 8008756:	f043 0320 	orrmi.w	r3, r3, #32
 800875a:	6023      	strmi	r3, [r4, #0]
 800875c:	b91e      	cbnz	r6, 8008766 <_printf_i+0x196>
 800875e:	6823      	ldr	r3, [r4, #0]
 8008760:	f023 0320 	bic.w	r3, r3, #32
 8008764:	6023      	str	r3, [r4, #0]
 8008766:	2310      	movs	r3, #16
 8008768:	e7b0      	b.n	80086cc <_printf_i+0xfc>
 800876a:	6823      	ldr	r3, [r4, #0]
 800876c:	f043 0320 	orr.w	r3, r3, #32
 8008770:	6023      	str	r3, [r4, #0]
 8008772:	2378      	movs	r3, #120	; 0x78
 8008774:	4828      	ldr	r0, [pc, #160]	; (8008818 <_printf_i+0x248>)
 8008776:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800877a:	e7e3      	b.n	8008744 <_printf_i+0x174>
 800877c:	0659      	lsls	r1, r3, #25
 800877e:	bf48      	it	mi
 8008780:	b2b6      	uxthmi	r6, r6
 8008782:	e7e6      	b.n	8008752 <_printf_i+0x182>
 8008784:	4615      	mov	r5, r2
 8008786:	e7bb      	b.n	8008700 <_printf_i+0x130>
 8008788:	682b      	ldr	r3, [r5, #0]
 800878a:	6826      	ldr	r6, [r4, #0]
 800878c:	6961      	ldr	r1, [r4, #20]
 800878e:	1d18      	adds	r0, r3, #4
 8008790:	6028      	str	r0, [r5, #0]
 8008792:	0635      	lsls	r5, r6, #24
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	d501      	bpl.n	800879c <_printf_i+0x1cc>
 8008798:	6019      	str	r1, [r3, #0]
 800879a:	e002      	b.n	80087a2 <_printf_i+0x1d2>
 800879c:	0670      	lsls	r0, r6, #25
 800879e:	d5fb      	bpl.n	8008798 <_printf_i+0x1c8>
 80087a0:	8019      	strh	r1, [r3, #0]
 80087a2:	2300      	movs	r3, #0
 80087a4:	6123      	str	r3, [r4, #16]
 80087a6:	4615      	mov	r5, r2
 80087a8:	e7ba      	b.n	8008720 <_printf_i+0x150>
 80087aa:	682b      	ldr	r3, [r5, #0]
 80087ac:	1d1a      	adds	r2, r3, #4
 80087ae:	602a      	str	r2, [r5, #0]
 80087b0:	681d      	ldr	r5, [r3, #0]
 80087b2:	6862      	ldr	r2, [r4, #4]
 80087b4:	2100      	movs	r1, #0
 80087b6:	4628      	mov	r0, r5
 80087b8:	f7f7 fd12 	bl	80001e0 <memchr>
 80087bc:	b108      	cbz	r0, 80087c2 <_printf_i+0x1f2>
 80087be:	1b40      	subs	r0, r0, r5
 80087c0:	6060      	str	r0, [r4, #4]
 80087c2:	6863      	ldr	r3, [r4, #4]
 80087c4:	6123      	str	r3, [r4, #16]
 80087c6:	2300      	movs	r3, #0
 80087c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087cc:	e7a8      	b.n	8008720 <_printf_i+0x150>
 80087ce:	6923      	ldr	r3, [r4, #16]
 80087d0:	462a      	mov	r2, r5
 80087d2:	4649      	mov	r1, r9
 80087d4:	4640      	mov	r0, r8
 80087d6:	47d0      	blx	sl
 80087d8:	3001      	adds	r0, #1
 80087da:	d0ab      	beq.n	8008734 <_printf_i+0x164>
 80087dc:	6823      	ldr	r3, [r4, #0]
 80087de:	079b      	lsls	r3, r3, #30
 80087e0:	d413      	bmi.n	800880a <_printf_i+0x23a>
 80087e2:	68e0      	ldr	r0, [r4, #12]
 80087e4:	9b03      	ldr	r3, [sp, #12]
 80087e6:	4298      	cmp	r0, r3
 80087e8:	bfb8      	it	lt
 80087ea:	4618      	movlt	r0, r3
 80087ec:	e7a4      	b.n	8008738 <_printf_i+0x168>
 80087ee:	2301      	movs	r3, #1
 80087f0:	4632      	mov	r2, r6
 80087f2:	4649      	mov	r1, r9
 80087f4:	4640      	mov	r0, r8
 80087f6:	47d0      	blx	sl
 80087f8:	3001      	adds	r0, #1
 80087fa:	d09b      	beq.n	8008734 <_printf_i+0x164>
 80087fc:	3501      	adds	r5, #1
 80087fe:	68e3      	ldr	r3, [r4, #12]
 8008800:	9903      	ldr	r1, [sp, #12]
 8008802:	1a5b      	subs	r3, r3, r1
 8008804:	42ab      	cmp	r3, r5
 8008806:	dcf2      	bgt.n	80087ee <_printf_i+0x21e>
 8008808:	e7eb      	b.n	80087e2 <_printf_i+0x212>
 800880a:	2500      	movs	r5, #0
 800880c:	f104 0619 	add.w	r6, r4, #25
 8008810:	e7f5      	b.n	80087fe <_printf_i+0x22e>
 8008812:	bf00      	nop
 8008814:	0800cc8e 	.word	0x0800cc8e
 8008818:	0800cc9f 	.word	0x0800cc9f

0800881c <_scanf_float>:
 800881c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008820:	b087      	sub	sp, #28
 8008822:	4617      	mov	r7, r2
 8008824:	9303      	str	r3, [sp, #12]
 8008826:	688b      	ldr	r3, [r1, #8]
 8008828:	1e5a      	subs	r2, r3, #1
 800882a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800882e:	bf83      	ittte	hi
 8008830:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008834:	195b      	addhi	r3, r3, r5
 8008836:	9302      	strhi	r3, [sp, #8]
 8008838:	2300      	movls	r3, #0
 800883a:	bf86      	itte	hi
 800883c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008840:	608b      	strhi	r3, [r1, #8]
 8008842:	9302      	strls	r3, [sp, #8]
 8008844:	680b      	ldr	r3, [r1, #0]
 8008846:	468b      	mov	fp, r1
 8008848:	2500      	movs	r5, #0
 800884a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800884e:	f84b 3b1c 	str.w	r3, [fp], #28
 8008852:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008856:	4680      	mov	r8, r0
 8008858:	460c      	mov	r4, r1
 800885a:	465e      	mov	r6, fp
 800885c:	46aa      	mov	sl, r5
 800885e:	46a9      	mov	r9, r5
 8008860:	9501      	str	r5, [sp, #4]
 8008862:	68a2      	ldr	r2, [r4, #8]
 8008864:	b152      	cbz	r2, 800887c <_scanf_float+0x60>
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	2b4e      	cmp	r3, #78	; 0x4e
 800886c:	d864      	bhi.n	8008938 <_scanf_float+0x11c>
 800886e:	2b40      	cmp	r3, #64	; 0x40
 8008870:	d83c      	bhi.n	80088ec <_scanf_float+0xd0>
 8008872:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008876:	b2c8      	uxtb	r0, r1
 8008878:	280e      	cmp	r0, #14
 800887a:	d93a      	bls.n	80088f2 <_scanf_float+0xd6>
 800887c:	f1b9 0f00 	cmp.w	r9, #0
 8008880:	d003      	beq.n	800888a <_scanf_float+0x6e>
 8008882:	6823      	ldr	r3, [r4, #0]
 8008884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008888:	6023      	str	r3, [r4, #0]
 800888a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800888e:	f1ba 0f01 	cmp.w	sl, #1
 8008892:	f200 8113 	bhi.w	8008abc <_scanf_float+0x2a0>
 8008896:	455e      	cmp	r6, fp
 8008898:	f200 8105 	bhi.w	8008aa6 <_scanf_float+0x28a>
 800889c:	2501      	movs	r5, #1
 800889e:	4628      	mov	r0, r5
 80088a0:	b007      	add	sp, #28
 80088a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088a6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80088aa:	2a0d      	cmp	r2, #13
 80088ac:	d8e6      	bhi.n	800887c <_scanf_float+0x60>
 80088ae:	a101      	add	r1, pc, #4	; (adr r1, 80088b4 <_scanf_float+0x98>)
 80088b0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80088b4:	080089f3 	.word	0x080089f3
 80088b8:	0800887d 	.word	0x0800887d
 80088bc:	0800887d 	.word	0x0800887d
 80088c0:	0800887d 	.word	0x0800887d
 80088c4:	08008a53 	.word	0x08008a53
 80088c8:	08008a2b 	.word	0x08008a2b
 80088cc:	0800887d 	.word	0x0800887d
 80088d0:	0800887d 	.word	0x0800887d
 80088d4:	08008a01 	.word	0x08008a01
 80088d8:	0800887d 	.word	0x0800887d
 80088dc:	0800887d 	.word	0x0800887d
 80088e0:	0800887d 	.word	0x0800887d
 80088e4:	0800887d 	.word	0x0800887d
 80088e8:	080089b9 	.word	0x080089b9
 80088ec:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80088f0:	e7db      	b.n	80088aa <_scanf_float+0x8e>
 80088f2:	290e      	cmp	r1, #14
 80088f4:	d8c2      	bhi.n	800887c <_scanf_float+0x60>
 80088f6:	a001      	add	r0, pc, #4	; (adr r0, 80088fc <_scanf_float+0xe0>)
 80088f8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80088fc:	080089ab 	.word	0x080089ab
 8008900:	0800887d 	.word	0x0800887d
 8008904:	080089ab 	.word	0x080089ab
 8008908:	08008a3f 	.word	0x08008a3f
 800890c:	0800887d 	.word	0x0800887d
 8008910:	08008959 	.word	0x08008959
 8008914:	08008995 	.word	0x08008995
 8008918:	08008995 	.word	0x08008995
 800891c:	08008995 	.word	0x08008995
 8008920:	08008995 	.word	0x08008995
 8008924:	08008995 	.word	0x08008995
 8008928:	08008995 	.word	0x08008995
 800892c:	08008995 	.word	0x08008995
 8008930:	08008995 	.word	0x08008995
 8008934:	08008995 	.word	0x08008995
 8008938:	2b6e      	cmp	r3, #110	; 0x6e
 800893a:	d809      	bhi.n	8008950 <_scanf_float+0x134>
 800893c:	2b60      	cmp	r3, #96	; 0x60
 800893e:	d8b2      	bhi.n	80088a6 <_scanf_float+0x8a>
 8008940:	2b54      	cmp	r3, #84	; 0x54
 8008942:	d077      	beq.n	8008a34 <_scanf_float+0x218>
 8008944:	2b59      	cmp	r3, #89	; 0x59
 8008946:	d199      	bne.n	800887c <_scanf_float+0x60>
 8008948:	2d07      	cmp	r5, #7
 800894a:	d197      	bne.n	800887c <_scanf_float+0x60>
 800894c:	2508      	movs	r5, #8
 800894e:	e029      	b.n	80089a4 <_scanf_float+0x188>
 8008950:	2b74      	cmp	r3, #116	; 0x74
 8008952:	d06f      	beq.n	8008a34 <_scanf_float+0x218>
 8008954:	2b79      	cmp	r3, #121	; 0x79
 8008956:	e7f6      	b.n	8008946 <_scanf_float+0x12a>
 8008958:	6821      	ldr	r1, [r4, #0]
 800895a:	05c8      	lsls	r0, r1, #23
 800895c:	d51a      	bpl.n	8008994 <_scanf_float+0x178>
 800895e:	9b02      	ldr	r3, [sp, #8]
 8008960:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008964:	6021      	str	r1, [r4, #0]
 8008966:	f109 0901 	add.w	r9, r9, #1
 800896a:	b11b      	cbz	r3, 8008974 <_scanf_float+0x158>
 800896c:	3b01      	subs	r3, #1
 800896e:	3201      	adds	r2, #1
 8008970:	9302      	str	r3, [sp, #8]
 8008972:	60a2      	str	r2, [r4, #8]
 8008974:	68a3      	ldr	r3, [r4, #8]
 8008976:	3b01      	subs	r3, #1
 8008978:	60a3      	str	r3, [r4, #8]
 800897a:	6923      	ldr	r3, [r4, #16]
 800897c:	3301      	adds	r3, #1
 800897e:	6123      	str	r3, [r4, #16]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	3b01      	subs	r3, #1
 8008984:	2b00      	cmp	r3, #0
 8008986:	607b      	str	r3, [r7, #4]
 8008988:	f340 8084 	ble.w	8008a94 <_scanf_float+0x278>
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	3301      	adds	r3, #1
 8008990:	603b      	str	r3, [r7, #0]
 8008992:	e766      	b.n	8008862 <_scanf_float+0x46>
 8008994:	eb1a 0f05 	cmn.w	sl, r5
 8008998:	f47f af70 	bne.w	800887c <_scanf_float+0x60>
 800899c:	6822      	ldr	r2, [r4, #0]
 800899e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80089a2:	6022      	str	r2, [r4, #0]
 80089a4:	f806 3b01 	strb.w	r3, [r6], #1
 80089a8:	e7e4      	b.n	8008974 <_scanf_float+0x158>
 80089aa:	6822      	ldr	r2, [r4, #0]
 80089ac:	0610      	lsls	r0, r2, #24
 80089ae:	f57f af65 	bpl.w	800887c <_scanf_float+0x60>
 80089b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80089b6:	e7f4      	b.n	80089a2 <_scanf_float+0x186>
 80089b8:	f1ba 0f00 	cmp.w	sl, #0
 80089bc:	d10e      	bne.n	80089dc <_scanf_float+0x1c0>
 80089be:	f1b9 0f00 	cmp.w	r9, #0
 80089c2:	d10e      	bne.n	80089e2 <_scanf_float+0x1c6>
 80089c4:	6822      	ldr	r2, [r4, #0]
 80089c6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80089ca:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80089ce:	d108      	bne.n	80089e2 <_scanf_float+0x1c6>
 80089d0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80089d4:	6022      	str	r2, [r4, #0]
 80089d6:	f04f 0a01 	mov.w	sl, #1
 80089da:	e7e3      	b.n	80089a4 <_scanf_float+0x188>
 80089dc:	f1ba 0f02 	cmp.w	sl, #2
 80089e0:	d055      	beq.n	8008a8e <_scanf_float+0x272>
 80089e2:	2d01      	cmp	r5, #1
 80089e4:	d002      	beq.n	80089ec <_scanf_float+0x1d0>
 80089e6:	2d04      	cmp	r5, #4
 80089e8:	f47f af48 	bne.w	800887c <_scanf_float+0x60>
 80089ec:	3501      	adds	r5, #1
 80089ee:	b2ed      	uxtb	r5, r5
 80089f0:	e7d8      	b.n	80089a4 <_scanf_float+0x188>
 80089f2:	f1ba 0f01 	cmp.w	sl, #1
 80089f6:	f47f af41 	bne.w	800887c <_scanf_float+0x60>
 80089fa:	f04f 0a02 	mov.w	sl, #2
 80089fe:	e7d1      	b.n	80089a4 <_scanf_float+0x188>
 8008a00:	b97d      	cbnz	r5, 8008a22 <_scanf_float+0x206>
 8008a02:	f1b9 0f00 	cmp.w	r9, #0
 8008a06:	f47f af3c 	bne.w	8008882 <_scanf_float+0x66>
 8008a0a:	6822      	ldr	r2, [r4, #0]
 8008a0c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008a10:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008a14:	f47f af39 	bne.w	800888a <_scanf_float+0x6e>
 8008a18:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008a1c:	6022      	str	r2, [r4, #0]
 8008a1e:	2501      	movs	r5, #1
 8008a20:	e7c0      	b.n	80089a4 <_scanf_float+0x188>
 8008a22:	2d03      	cmp	r5, #3
 8008a24:	d0e2      	beq.n	80089ec <_scanf_float+0x1d0>
 8008a26:	2d05      	cmp	r5, #5
 8008a28:	e7de      	b.n	80089e8 <_scanf_float+0x1cc>
 8008a2a:	2d02      	cmp	r5, #2
 8008a2c:	f47f af26 	bne.w	800887c <_scanf_float+0x60>
 8008a30:	2503      	movs	r5, #3
 8008a32:	e7b7      	b.n	80089a4 <_scanf_float+0x188>
 8008a34:	2d06      	cmp	r5, #6
 8008a36:	f47f af21 	bne.w	800887c <_scanf_float+0x60>
 8008a3a:	2507      	movs	r5, #7
 8008a3c:	e7b2      	b.n	80089a4 <_scanf_float+0x188>
 8008a3e:	6822      	ldr	r2, [r4, #0]
 8008a40:	0591      	lsls	r1, r2, #22
 8008a42:	f57f af1b 	bpl.w	800887c <_scanf_float+0x60>
 8008a46:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008a4a:	6022      	str	r2, [r4, #0]
 8008a4c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008a50:	e7a8      	b.n	80089a4 <_scanf_float+0x188>
 8008a52:	6822      	ldr	r2, [r4, #0]
 8008a54:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008a58:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008a5c:	d006      	beq.n	8008a6c <_scanf_float+0x250>
 8008a5e:	0550      	lsls	r0, r2, #21
 8008a60:	f57f af0c 	bpl.w	800887c <_scanf_float+0x60>
 8008a64:	f1b9 0f00 	cmp.w	r9, #0
 8008a68:	f43f af0f 	beq.w	800888a <_scanf_float+0x6e>
 8008a6c:	0591      	lsls	r1, r2, #22
 8008a6e:	bf58      	it	pl
 8008a70:	9901      	ldrpl	r1, [sp, #4]
 8008a72:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008a76:	bf58      	it	pl
 8008a78:	eba9 0101 	subpl.w	r1, r9, r1
 8008a7c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008a80:	bf58      	it	pl
 8008a82:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008a86:	6022      	str	r2, [r4, #0]
 8008a88:	f04f 0900 	mov.w	r9, #0
 8008a8c:	e78a      	b.n	80089a4 <_scanf_float+0x188>
 8008a8e:	f04f 0a03 	mov.w	sl, #3
 8008a92:	e787      	b.n	80089a4 <_scanf_float+0x188>
 8008a94:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008a98:	4639      	mov	r1, r7
 8008a9a:	4640      	mov	r0, r8
 8008a9c:	4798      	blx	r3
 8008a9e:	2800      	cmp	r0, #0
 8008aa0:	f43f aedf 	beq.w	8008862 <_scanf_float+0x46>
 8008aa4:	e6ea      	b.n	800887c <_scanf_float+0x60>
 8008aa6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008aaa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008aae:	463a      	mov	r2, r7
 8008ab0:	4640      	mov	r0, r8
 8008ab2:	4798      	blx	r3
 8008ab4:	6923      	ldr	r3, [r4, #16]
 8008ab6:	3b01      	subs	r3, #1
 8008ab8:	6123      	str	r3, [r4, #16]
 8008aba:	e6ec      	b.n	8008896 <_scanf_float+0x7a>
 8008abc:	1e6b      	subs	r3, r5, #1
 8008abe:	2b06      	cmp	r3, #6
 8008ac0:	d825      	bhi.n	8008b0e <_scanf_float+0x2f2>
 8008ac2:	2d02      	cmp	r5, #2
 8008ac4:	d836      	bhi.n	8008b34 <_scanf_float+0x318>
 8008ac6:	455e      	cmp	r6, fp
 8008ac8:	f67f aee8 	bls.w	800889c <_scanf_float+0x80>
 8008acc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ad0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008ad4:	463a      	mov	r2, r7
 8008ad6:	4640      	mov	r0, r8
 8008ad8:	4798      	blx	r3
 8008ada:	6923      	ldr	r3, [r4, #16]
 8008adc:	3b01      	subs	r3, #1
 8008ade:	6123      	str	r3, [r4, #16]
 8008ae0:	e7f1      	b.n	8008ac6 <_scanf_float+0x2aa>
 8008ae2:	9802      	ldr	r0, [sp, #8]
 8008ae4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ae8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008aec:	9002      	str	r0, [sp, #8]
 8008aee:	463a      	mov	r2, r7
 8008af0:	4640      	mov	r0, r8
 8008af2:	4798      	blx	r3
 8008af4:	6923      	ldr	r3, [r4, #16]
 8008af6:	3b01      	subs	r3, #1
 8008af8:	6123      	str	r3, [r4, #16]
 8008afa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008afe:	fa5f fa8a 	uxtb.w	sl, sl
 8008b02:	f1ba 0f02 	cmp.w	sl, #2
 8008b06:	d1ec      	bne.n	8008ae2 <_scanf_float+0x2c6>
 8008b08:	3d03      	subs	r5, #3
 8008b0a:	b2ed      	uxtb	r5, r5
 8008b0c:	1b76      	subs	r6, r6, r5
 8008b0e:	6823      	ldr	r3, [r4, #0]
 8008b10:	05da      	lsls	r2, r3, #23
 8008b12:	d52f      	bpl.n	8008b74 <_scanf_float+0x358>
 8008b14:	055b      	lsls	r3, r3, #21
 8008b16:	d510      	bpl.n	8008b3a <_scanf_float+0x31e>
 8008b18:	455e      	cmp	r6, fp
 8008b1a:	f67f aebf 	bls.w	800889c <_scanf_float+0x80>
 8008b1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008b26:	463a      	mov	r2, r7
 8008b28:	4640      	mov	r0, r8
 8008b2a:	4798      	blx	r3
 8008b2c:	6923      	ldr	r3, [r4, #16]
 8008b2e:	3b01      	subs	r3, #1
 8008b30:	6123      	str	r3, [r4, #16]
 8008b32:	e7f1      	b.n	8008b18 <_scanf_float+0x2fc>
 8008b34:	46aa      	mov	sl, r5
 8008b36:	9602      	str	r6, [sp, #8]
 8008b38:	e7df      	b.n	8008afa <_scanf_float+0x2de>
 8008b3a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008b3e:	6923      	ldr	r3, [r4, #16]
 8008b40:	2965      	cmp	r1, #101	; 0x65
 8008b42:	f103 33ff 	add.w	r3, r3, #4294967295
 8008b46:	f106 35ff 	add.w	r5, r6, #4294967295
 8008b4a:	6123      	str	r3, [r4, #16]
 8008b4c:	d00c      	beq.n	8008b68 <_scanf_float+0x34c>
 8008b4e:	2945      	cmp	r1, #69	; 0x45
 8008b50:	d00a      	beq.n	8008b68 <_scanf_float+0x34c>
 8008b52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b56:	463a      	mov	r2, r7
 8008b58:	4640      	mov	r0, r8
 8008b5a:	4798      	blx	r3
 8008b5c:	6923      	ldr	r3, [r4, #16]
 8008b5e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008b62:	3b01      	subs	r3, #1
 8008b64:	1eb5      	subs	r5, r6, #2
 8008b66:	6123      	str	r3, [r4, #16]
 8008b68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b6c:	463a      	mov	r2, r7
 8008b6e:	4640      	mov	r0, r8
 8008b70:	4798      	blx	r3
 8008b72:	462e      	mov	r6, r5
 8008b74:	6825      	ldr	r5, [r4, #0]
 8008b76:	f015 0510 	ands.w	r5, r5, #16
 8008b7a:	d159      	bne.n	8008c30 <_scanf_float+0x414>
 8008b7c:	7035      	strb	r5, [r6, #0]
 8008b7e:	6823      	ldr	r3, [r4, #0]
 8008b80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b88:	d11b      	bne.n	8008bc2 <_scanf_float+0x3a6>
 8008b8a:	9b01      	ldr	r3, [sp, #4]
 8008b8c:	454b      	cmp	r3, r9
 8008b8e:	eba3 0209 	sub.w	r2, r3, r9
 8008b92:	d123      	bne.n	8008bdc <_scanf_float+0x3c0>
 8008b94:	2200      	movs	r2, #0
 8008b96:	4659      	mov	r1, fp
 8008b98:	4640      	mov	r0, r8
 8008b9a:	f000 fe97 	bl	80098cc <_strtod_r>
 8008b9e:	6822      	ldr	r2, [r4, #0]
 8008ba0:	9b03      	ldr	r3, [sp, #12]
 8008ba2:	f012 0f02 	tst.w	r2, #2
 8008ba6:	ec57 6b10 	vmov	r6, r7, d0
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	d021      	beq.n	8008bf2 <_scanf_float+0x3d6>
 8008bae:	9903      	ldr	r1, [sp, #12]
 8008bb0:	1d1a      	adds	r2, r3, #4
 8008bb2:	600a      	str	r2, [r1, #0]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	e9c3 6700 	strd	r6, r7, [r3]
 8008bba:	68e3      	ldr	r3, [r4, #12]
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	60e3      	str	r3, [r4, #12]
 8008bc0:	e66d      	b.n	800889e <_scanf_float+0x82>
 8008bc2:	9b04      	ldr	r3, [sp, #16]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d0e5      	beq.n	8008b94 <_scanf_float+0x378>
 8008bc8:	9905      	ldr	r1, [sp, #20]
 8008bca:	230a      	movs	r3, #10
 8008bcc:	462a      	mov	r2, r5
 8008bce:	3101      	adds	r1, #1
 8008bd0:	4640      	mov	r0, r8
 8008bd2:	f000 ff03 	bl	80099dc <_strtol_r>
 8008bd6:	9b04      	ldr	r3, [sp, #16]
 8008bd8:	9e05      	ldr	r6, [sp, #20]
 8008bda:	1ac2      	subs	r2, r0, r3
 8008bdc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008be0:	429e      	cmp	r6, r3
 8008be2:	bf28      	it	cs
 8008be4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008be8:	4912      	ldr	r1, [pc, #72]	; (8008c34 <_scanf_float+0x418>)
 8008bea:	4630      	mov	r0, r6
 8008bec:	f000 f82c 	bl	8008c48 <siprintf>
 8008bf0:	e7d0      	b.n	8008b94 <_scanf_float+0x378>
 8008bf2:	9903      	ldr	r1, [sp, #12]
 8008bf4:	f012 0f04 	tst.w	r2, #4
 8008bf8:	f103 0204 	add.w	r2, r3, #4
 8008bfc:	600a      	str	r2, [r1, #0]
 8008bfe:	d1d9      	bne.n	8008bb4 <_scanf_float+0x398>
 8008c00:	f8d3 8000 	ldr.w	r8, [r3]
 8008c04:	ee10 2a10 	vmov	r2, s0
 8008c08:	ee10 0a10 	vmov	r0, s0
 8008c0c:	463b      	mov	r3, r7
 8008c0e:	4639      	mov	r1, r7
 8008c10:	f7f7 ff8c 	bl	8000b2c <__aeabi_dcmpun>
 8008c14:	b128      	cbz	r0, 8008c22 <_scanf_float+0x406>
 8008c16:	4808      	ldr	r0, [pc, #32]	; (8008c38 <_scanf_float+0x41c>)
 8008c18:	f000 f810 	bl	8008c3c <nanf>
 8008c1c:	ed88 0a00 	vstr	s0, [r8]
 8008c20:	e7cb      	b.n	8008bba <_scanf_float+0x39e>
 8008c22:	4630      	mov	r0, r6
 8008c24:	4639      	mov	r1, r7
 8008c26:	f7f7 ffdf 	bl	8000be8 <__aeabi_d2f>
 8008c2a:	f8c8 0000 	str.w	r0, [r8]
 8008c2e:	e7c4      	b.n	8008bba <_scanf_float+0x39e>
 8008c30:	2500      	movs	r5, #0
 8008c32:	e634      	b.n	800889e <_scanf_float+0x82>
 8008c34:	0800ccb0 	.word	0x0800ccb0
 8008c38:	0800d0b8 	.word	0x0800d0b8

08008c3c <nanf>:
 8008c3c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008c44 <nanf+0x8>
 8008c40:	4770      	bx	lr
 8008c42:	bf00      	nop
 8008c44:	7fc00000 	.word	0x7fc00000

08008c48 <siprintf>:
 8008c48:	b40e      	push	{r1, r2, r3}
 8008c4a:	b500      	push	{lr}
 8008c4c:	b09c      	sub	sp, #112	; 0x70
 8008c4e:	ab1d      	add	r3, sp, #116	; 0x74
 8008c50:	9002      	str	r0, [sp, #8]
 8008c52:	9006      	str	r0, [sp, #24]
 8008c54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c58:	4809      	ldr	r0, [pc, #36]	; (8008c80 <siprintf+0x38>)
 8008c5a:	9107      	str	r1, [sp, #28]
 8008c5c:	9104      	str	r1, [sp, #16]
 8008c5e:	4909      	ldr	r1, [pc, #36]	; (8008c84 <siprintf+0x3c>)
 8008c60:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c64:	9105      	str	r1, [sp, #20]
 8008c66:	6800      	ldr	r0, [r0, #0]
 8008c68:	9301      	str	r3, [sp, #4]
 8008c6a:	a902      	add	r1, sp, #8
 8008c6c:	f002 fee2 	bl	800ba34 <_svfiprintf_r>
 8008c70:	9b02      	ldr	r3, [sp, #8]
 8008c72:	2200      	movs	r2, #0
 8008c74:	701a      	strb	r2, [r3, #0]
 8008c76:	b01c      	add	sp, #112	; 0x70
 8008c78:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c7c:	b003      	add	sp, #12
 8008c7e:	4770      	bx	lr
 8008c80:	20000018 	.word	0x20000018
 8008c84:	ffff0208 	.word	0xffff0208

08008c88 <sulp>:
 8008c88:	b570      	push	{r4, r5, r6, lr}
 8008c8a:	4604      	mov	r4, r0
 8008c8c:	460d      	mov	r5, r1
 8008c8e:	ec45 4b10 	vmov	d0, r4, r5
 8008c92:	4616      	mov	r6, r2
 8008c94:	f002 fc2c 	bl	800b4f0 <__ulp>
 8008c98:	ec51 0b10 	vmov	r0, r1, d0
 8008c9c:	b17e      	cbz	r6, 8008cbe <sulp+0x36>
 8008c9e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008ca2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	dd09      	ble.n	8008cbe <sulp+0x36>
 8008caa:	051b      	lsls	r3, r3, #20
 8008cac:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008cb0:	2400      	movs	r4, #0
 8008cb2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008cb6:	4622      	mov	r2, r4
 8008cb8:	462b      	mov	r3, r5
 8008cba:	f7f7 fc9d 	bl	80005f8 <__aeabi_dmul>
 8008cbe:	bd70      	pop	{r4, r5, r6, pc}

08008cc0 <_strtod_l>:
 8008cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc4:	ed2d 8b02 	vpush	{d8}
 8008cc8:	b09d      	sub	sp, #116	; 0x74
 8008cca:	461f      	mov	r7, r3
 8008ccc:	2300      	movs	r3, #0
 8008cce:	9318      	str	r3, [sp, #96]	; 0x60
 8008cd0:	4ba2      	ldr	r3, [pc, #648]	; (8008f5c <_strtod_l+0x29c>)
 8008cd2:	9213      	str	r2, [sp, #76]	; 0x4c
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	9305      	str	r3, [sp, #20]
 8008cd8:	4604      	mov	r4, r0
 8008cda:	4618      	mov	r0, r3
 8008cdc:	4688      	mov	r8, r1
 8008cde:	f7f7 fa77 	bl	80001d0 <strlen>
 8008ce2:	f04f 0a00 	mov.w	sl, #0
 8008ce6:	4605      	mov	r5, r0
 8008ce8:	f04f 0b00 	mov.w	fp, #0
 8008cec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008cf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008cf2:	781a      	ldrb	r2, [r3, #0]
 8008cf4:	2a2b      	cmp	r2, #43	; 0x2b
 8008cf6:	d04e      	beq.n	8008d96 <_strtod_l+0xd6>
 8008cf8:	d83b      	bhi.n	8008d72 <_strtod_l+0xb2>
 8008cfa:	2a0d      	cmp	r2, #13
 8008cfc:	d834      	bhi.n	8008d68 <_strtod_l+0xa8>
 8008cfe:	2a08      	cmp	r2, #8
 8008d00:	d834      	bhi.n	8008d6c <_strtod_l+0xac>
 8008d02:	2a00      	cmp	r2, #0
 8008d04:	d03e      	beq.n	8008d84 <_strtod_l+0xc4>
 8008d06:	2300      	movs	r3, #0
 8008d08:	930a      	str	r3, [sp, #40]	; 0x28
 8008d0a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008d0c:	7833      	ldrb	r3, [r6, #0]
 8008d0e:	2b30      	cmp	r3, #48	; 0x30
 8008d10:	f040 80b0 	bne.w	8008e74 <_strtod_l+0x1b4>
 8008d14:	7873      	ldrb	r3, [r6, #1]
 8008d16:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008d1a:	2b58      	cmp	r3, #88	; 0x58
 8008d1c:	d168      	bne.n	8008df0 <_strtod_l+0x130>
 8008d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d20:	9301      	str	r3, [sp, #4]
 8008d22:	ab18      	add	r3, sp, #96	; 0x60
 8008d24:	9702      	str	r7, [sp, #8]
 8008d26:	9300      	str	r3, [sp, #0]
 8008d28:	4a8d      	ldr	r2, [pc, #564]	; (8008f60 <_strtod_l+0x2a0>)
 8008d2a:	ab19      	add	r3, sp, #100	; 0x64
 8008d2c:	a917      	add	r1, sp, #92	; 0x5c
 8008d2e:	4620      	mov	r0, r4
 8008d30:	f001 fd38 	bl	800a7a4 <__gethex>
 8008d34:	f010 0707 	ands.w	r7, r0, #7
 8008d38:	4605      	mov	r5, r0
 8008d3a:	d005      	beq.n	8008d48 <_strtod_l+0x88>
 8008d3c:	2f06      	cmp	r7, #6
 8008d3e:	d12c      	bne.n	8008d9a <_strtod_l+0xda>
 8008d40:	3601      	adds	r6, #1
 8008d42:	2300      	movs	r3, #0
 8008d44:	9617      	str	r6, [sp, #92]	; 0x5c
 8008d46:	930a      	str	r3, [sp, #40]	; 0x28
 8008d48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	f040 8590 	bne.w	8009870 <_strtod_l+0xbb0>
 8008d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d52:	b1eb      	cbz	r3, 8008d90 <_strtod_l+0xd0>
 8008d54:	4652      	mov	r2, sl
 8008d56:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008d5a:	ec43 2b10 	vmov	d0, r2, r3
 8008d5e:	b01d      	add	sp, #116	; 0x74
 8008d60:	ecbd 8b02 	vpop	{d8}
 8008d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d68:	2a20      	cmp	r2, #32
 8008d6a:	d1cc      	bne.n	8008d06 <_strtod_l+0x46>
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008d70:	e7be      	b.n	8008cf0 <_strtod_l+0x30>
 8008d72:	2a2d      	cmp	r2, #45	; 0x2d
 8008d74:	d1c7      	bne.n	8008d06 <_strtod_l+0x46>
 8008d76:	2201      	movs	r2, #1
 8008d78:	920a      	str	r2, [sp, #40]	; 0x28
 8008d7a:	1c5a      	adds	r2, r3, #1
 8008d7c:	9217      	str	r2, [sp, #92]	; 0x5c
 8008d7e:	785b      	ldrb	r3, [r3, #1]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d1c2      	bne.n	8008d0a <_strtod_l+0x4a>
 8008d84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008d86:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	f040 856e 	bne.w	800986c <_strtod_l+0xbac>
 8008d90:	4652      	mov	r2, sl
 8008d92:	465b      	mov	r3, fp
 8008d94:	e7e1      	b.n	8008d5a <_strtod_l+0x9a>
 8008d96:	2200      	movs	r2, #0
 8008d98:	e7ee      	b.n	8008d78 <_strtod_l+0xb8>
 8008d9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008d9c:	b13a      	cbz	r2, 8008dae <_strtod_l+0xee>
 8008d9e:	2135      	movs	r1, #53	; 0x35
 8008da0:	a81a      	add	r0, sp, #104	; 0x68
 8008da2:	f002 fcb0 	bl	800b706 <__copybits>
 8008da6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008da8:	4620      	mov	r0, r4
 8008daa:	f002 f86f 	bl	800ae8c <_Bfree>
 8008dae:	3f01      	subs	r7, #1
 8008db0:	2f04      	cmp	r7, #4
 8008db2:	d806      	bhi.n	8008dc2 <_strtod_l+0x102>
 8008db4:	e8df f007 	tbb	[pc, r7]
 8008db8:	1714030a 	.word	0x1714030a
 8008dbc:	0a          	.byte	0x0a
 8008dbd:	00          	.byte	0x00
 8008dbe:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008dc2:	0728      	lsls	r0, r5, #28
 8008dc4:	d5c0      	bpl.n	8008d48 <_strtod_l+0x88>
 8008dc6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008dca:	e7bd      	b.n	8008d48 <_strtod_l+0x88>
 8008dcc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008dd0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008dd2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008dd6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008dda:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008dde:	e7f0      	b.n	8008dc2 <_strtod_l+0x102>
 8008de0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008f64 <_strtod_l+0x2a4>
 8008de4:	e7ed      	b.n	8008dc2 <_strtod_l+0x102>
 8008de6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008dea:	f04f 3aff 	mov.w	sl, #4294967295
 8008dee:	e7e8      	b.n	8008dc2 <_strtod_l+0x102>
 8008df0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008df2:	1c5a      	adds	r2, r3, #1
 8008df4:	9217      	str	r2, [sp, #92]	; 0x5c
 8008df6:	785b      	ldrb	r3, [r3, #1]
 8008df8:	2b30      	cmp	r3, #48	; 0x30
 8008dfa:	d0f9      	beq.n	8008df0 <_strtod_l+0x130>
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d0a3      	beq.n	8008d48 <_strtod_l+0x88>
 8008e00:	2301      	movs	r3, #1
 8008e02:	f04f 0900 	mov.w	r9, #0
 8008e06:	9304      	str	r3, [sp, #16]
 8008e08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e0a:	9308      	str	r3, [sp, #32]
 8008e0c:	f8cd 901c 	str.w	r9, [sp, #28]
 8008e10:	464f      	mov	r7, r9
 8008e12:	220a      	movs	r2, #10
 8008e14:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008e16:	7806      	ldrb	r6, [r0, #0]
 8008e18:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008e1c:	b2d9      	uxtb	r1, r3
 8008e1e:	2909      	cmp	r1, #9
 8008e20:	d92a      	bls.n	8008e78 <_strtod_l+0x1b8>
 8008e22:	9905      	ldr	r1, [sp, #20]
 8008e24:	462a      	mov	r2, r5
 8008e26:	f002 ff1f 	bl	800bc68 <strncmp>
 8008e2a:	b398      	cbz	r0, 8008e94 <_strtod_l+0x1d4>
 8008e2c:	2000      	movs	r0, #0
 8008e2e:	4632      	mov	r2, r6
 8008e30:	463d      	mov	r5, r7
 8008e32:	9005      	str	r0, [sp, #20]
 8008e34:	4603      	mov	r3, r0
 8008e36:	2a65      	cmp	r2, #101	; 0x65
 8008e38:	d001      	beq.n	8008e3e <_strtod_l+0x17e>
 8008e3a:	2a45      	cmp	r2, #69	; 0x45
 8008e3c:	d118      	bne.n	8008e70 <_strtod_l+0x1b0>
 8008e3e:	b91d      	cbnz	r5, 8008e48 <_strtod_l+0x188>
 8008e40:	9a04      	ldr	r2, [sp, #16]
 8008e42:	4302      	orrs	r2, r0
 8008e44:	d09e      	beq.n	8008d84 <_strtod_l+0xc4>
 8008e46:	2500      	movs	r5, #0
 8008e48:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008e4c:	f108 0201 	add.w	r2, r8, #1
 8008e50:	9217      	str	r2, [sp, #92]	; 0x5c
 8008e52:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008e56:	2a2b      	cmp	r2, #43	; 0x2b
 8008e58:	d075      	beq.n	8008f46 <_strtod_l+0x286>
 8008e5a:	2a2d      	cmp	r2, #45	; 0x2d
 8008e5c:	d07b      	beq.n	8008f56 <_strtod_l+0x296>
 8008e5e:	f04f 0c00 	mov.w	ip, #0
 8008e62:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008e66:	2909      	cmp	r1, #9
 8008e68:	f240 8082 	bls.w	8008f70 <_strtod_l+0x2b0>
 8008e6c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008e70:	2600      	movs	r6, #0
 8008e72:	e09d      	b.n	8008fb0 <_strtod_l+0x2f0>
 8008e74:	2300      	movs	r3, #0
 8008e76:	e7c4      	b.n	8008e02 <_strtod_l+0x142>
 8008e78:	2f08      	cmp	r7, #8
 8008e7a:	bfd8      	it	le
 8008e7c:	9907      	ldrle	r1, [sp, #28]
 8008e7e:	f100 0001 	add.w	r0, r0, #1
 8008e82:	bfda      	itte	le
 8008e84:	fb02 3301 	mlale	r3, r2, r1, r3
 8008e88:	9307      	strle	r3, [sp, #28]
 8008e8a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008e8e:	3701      	adds	r7, #1
 8008e90:	9017      	str	r0, [sp, #92]	; 0x5c
 8008e92:	e7bf      	b.n	8008e14 <_strtod_l+0x154>
 8008e94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e96:	195a      	adds	r2, r3, r5
 8008e98:	9217      	str	r2, [sp, #92]	; 0x5c
 8008e9a:	5d5a      	ldrb	r2, [r3, r5]
 8008e9c:	2f00      	cmp	r7, #0
 8008e9e:	d037      	beq.n	8008f10 <_strtod_l+0x250>
 8008ea0:	9005      	str	r0, [sp, #20]
 8008ea2:	463d      	mov	r5, r7
 8008ea4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008ea8:	2b09      	cmp	r3, #9
 8008eaa:	d912      	bls.n	8008ed2 <_strtod_l+0x212>
 8008eac:	2301      	movs	r3, #1
 8008eae:	e7c2      	b.n	8008e36 <_strtod_l+0x176>
 8008eb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008eb2:	1c5a      	adds	r2, r3, #1
 8008eb4:	9217      	str	r2, [sp, #92]	; 0x5c
 8008eb6:	785a      	ldrb	r2, [r3, #1]
 8008eb8:	3001      	adds	r0, #1
 8008eba:	2a30      	cmp	r2, #48	; 0x30
 8008ebc:	d0f8      	beq.n	8008eb0 <_strtod_l+0x1f0>
 8008ebe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008ec2:	2b08      	cmp	r3, #8
 8008ec4:	f200 84d9 	bhi.w	800987a <_strtod_l+0xbba>
 8008ec8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008eca:	9005      	str	r0, [sp, #20]
 8008ecc:	2000      	movs	r0, #0
 8008ece:	9308      	str	r3, [sp, #32]
 8008ed0:	4605      	mov	r5, r0
 8008ed2:	3a30      	subs	r2, #48	; 0x30
 8008ed4:	f100 0301 	add.w	r3, r0, #1
 8008ed8:	d014      	beq.n	8008f04 <_strtod_l+0x244>
 8008eda:	9905      	ldr	r1, [sp, #20]
 8008edc:	4419      	add	r1, r3
 8008ede:	9105      	str	r1, [sp, #20]
 8008ee0:	462b      	mov	r3, r5
 8008ee2:	eb00 0e05 	add.w	lr, r0, r5
 8008ee6:	210a      	movs	r1, #10
 8008ee8:	4573      	cmp	r3, lr
 8008eea:	d113      	bne.n	8008f14 <_strtod_l+0x254>
 8008eec:	182b      	adds	r3, r5, r0
 8008eee:	2b08      	cmp	r3, #8
 8008ef0:	f105 0501 	add.w	r5, r5, #1
 8008ef4:	4405      	add	r5, r0
 8008ef6:	dc1c      	bgt.n	8008f32 <_strtod_l+0x272>
 8008ef8:	9907      	ldr	r1, [sp, #28]
 8008efa:	230a      	movs	r3, #10
 8008efc:	fb03 2301 	mla	r3, r3, r1, r2
 8008f00:	9307      	str	r3, [sp, #28]
 8008f02:	2300      	movs	r3, #0
 8008f04:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008f06:	1c51      	adds	r1, r2, #1
 8008f08:	9117      	str	r1, [sp, #92]	; 0x5c
 8008f0a:	7852      	ldrb	r2, [r2, #1]
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	e7c9      	b.n	8008ea4 <_strtod_l+0x1e4>
 8008f10:	4638      	mov	r0, r7
 8008f12:	e7d2      	b.n	8008eba <_strtod_l+0x1fa>
 8008f14:	2b08      	cmp	r3, #8
 8008f16:	dc04      	bgt.n	8008f22 <_strtod_l+0x262>
 8008f18:	9e07      	ldr	r6, [sp, #28]
 8008f1a:	434e      	muls	r6, r1
 8008f1c:	9607      	str	r6, [sp, #28]
 8008f1e:	3301      	adds	r3, #1
 8008f20:	e7e2      	b.n	8008ee8 <_strtod_l+0x228>
 8008f22:	f103 0c01 	add.w	ip, r3, #1
 8008f26:	f1bc 0f10 	cmp.w	ip, #16
 8008f2a:	bfd8      	it	le
 8008f2c:	fb01 f909 	mulle.w	r9, r1, r9
 8008f30:	e7f5      	b.n	8008f1e <_strtod_l+0x25e>
 8008f32:	2d10      	cmp	r5, #16
 8008f34:	bfdc      	itt	le
 8008f36:	230a      	movle	r3, #10
 8008f38:	fb03 2909 	mlale	r9, r3, r9, r2
 8008f3c:	e7e1      	b.n	8008f02 <_strtod_l+0x242>
 8008f3e:	2300      	movs	r3, #0
 8008f40:	9305      	str	r3, [sp, #20]
 8008f42:	2301      	movs	r3, #1
 8008f44:	e77c      	b.n	8008e40 <_strtod_l+0x180>
 8008f46:	f04f 0c00 	mov.w	ip, #0
 8008f4a:	f108 0202 	add.w	r2, r8, #2
 8008f4e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008f50:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008f54:	e785      	b.n	8008e62 <_strtod_l+0x1a2>
 8008f56:	f04f 0c01 	mov.w	ip, #1
 8008f5a:	e7f6      	b.n	8008f4a <_strtod_l+0x28a>
 8008f5c:	0800cf00 	.word	0x0800cf00
 8008f60:	0800ccb8 	.word	0x0800ccb8
 8008f64:	7ff00000 	.word	0x7ff00000
 8008f68:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008f6a:	1c51      	adds	r1, r2, #1
 8008f6c:	9117      	str	r1, [sp, #92]	; 0x5c
 8008f6e:	7852      	ldrb	r2, [r2, #1]
 8008f70:	2a30      	cmp	r2, #48	; 0x30
 8008f72:	d0f9      	beq.n	8008f68 <_strtod_l+0x2a8>
 8008f74:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008f78:	2908      	cmp	r1, #8
 8008f7a:	f63f af79 	bhi.w	8008e70 <_strtod_l+0x1b0>
 8008f7e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008f82:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008f84:	9206      	str	r2, [sp, #24]
 8008f86:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008f88:	1c51      	adds	r1, r2, #1
 8008f8a:	9117      	str	r1, [sp, #92]	; 0x5c
 8008f8c:	7852      	ldrb	r2, [r2, #1]
 8008f8e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008f92:	2e09      	cmp	r6, #9
 8008f94:	d937      	bls.n	8009006 <_strtod_l+0x346>
 8008f96:	9e06      	ldr	r6, [sp, #24]
 8008f98:	1b89      	subs	r1, r1, r6
 8008f9a:	2908      	cmp	r1, #8
 8008f9c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008fa0:	dc02      	bgt.n	8008fa8 <_strtod_l+0x2e8>
 8008fa2:	4576      	cmp	r6, lr
 8008fa4:	bfa8      	it	ge
 8008fa6:	4676      	movge	r6, lr
 8008fa8:	f1bc 0f00 	cmp.w	ip, #0
 8008fac:	d000      	beq.n	8008fb0 <_strtod_l+0x2f0>
 8008fae:	4276      	negs	r6, r6
 8008fb0:	2d00      	cmp	r5, #0
 8008fb2:	d14d      	bne.n	8009050 <_strtod_l+0x390>
 8008fb4:	9904      	ldr	r1, [sp, #16]
 8008fb6:	4301      	orrs	r1, r0
 8008fb8:	f47f aec6 	bne.w	8008d48 <_strtod_l+0x88>
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	f47f aee1 	bne.w	8008d84 <_strtod_l+0xc4>
 8008fc2:	2a69      	cmp	r2, #105	; 0x69
 8008fc4:	d027      	beq.n	8009016 <_strtod_l+0x356>
 8008fc6:	dc24      	bgt.n	8009012 <_strtod_l+0x352>
 8008fc8:	2a49      	cmp	r2, #73	; 0x49
 8008fca:	d024      	beq.n	8009016 <_strtod_l+0x356>
 8008fcc:	2a4e      	cmp	r2, #78	; 0x4e
 8008fce:	f47f aed9 	bne.w	8008d84 <_strtod_l+0xc4>
 8008fd2:	499f      	ldr	r1, [pc, #636]	; (8009250 <_strtod_l+0x590>)
 8008fd4:	a817      	add	r0, sp, #92	; 0x5c
 8008fd6:	f001 fe3d 	bl	800ac54 <__match>
 8008fda:	2800      	cmp	r0, #0
 8008fdc:	f43f aed2 	beq.w	8008d84 <_strtod_l+0xc4>
 8008fe0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	2b28      	cmp	r3, #40	; 0x28
 8008fe6:	d12d      	bne.n	8009044 <_strtod_l+0x384>
 8008fe8:	499a      	ldr	r1, [pc, #616]	; (8009254 <_strtod_l+0x594>)
 8008fea:	aa1a      	add	r2, sp, #104	; 0x68
 8008fec:	a817      	add	r0, sp, #92	; 0x5c
 8008fee:	f001 fe45 	bl	800ac7c <__hexnan>
 8008ff2:	2805      	cmp	r0, #5
 8008ff4:	d126      	bne.n	8009044 <_strtod_l+0x384>
 8008ff6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008ff8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008ffc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009000:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009004:	e6a0      	b.n	8008d48 <_strtod_l+0x88>
 8009006:	210a      	movs	r1, #10
 8009008:	fb01 2e0e 	mla	lr, r1, lr, r2
 800900c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009010:	e7b9      	b.n	8008f86 <_strtod_l+0x2c6>
 8009012:	2a6e      	cmp	r2, #110	; 0x6e
 8009014:	e7db      	b.n	8008fce <_strtod_l+0x30e>
 8009016:	4990      	ldr	r1, [pc, #576]	; (8009258 <_strtod_l+0x598>)
 8009018:	a817      	add	r0, sp, #92	; 0x5c
 800901a:	f001 fe1b 	bl	800ac54 <__match>
 800901e:	2800      	cmp	r0, #0
 8009020:	f43f aeb0 	beq.w	8008d84 <_strtod_l+0xc4>
 8009024:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009026:	498d      	ldr	r1, [pc, #564]	; (800925c <_strtod_l+0x59c>)
 8009028:	3b01      	subs	r3, #1
 800902a:	a817      	add	r0, sp, #92	; 0x5c
 800902c:	9317      	str	r3, [sp, #92]	; 0x5c
 800902e:	f001 fe11 	bl	800ac54 <__match>
 8009032:	b910      	cbnz	r0, 800903a <_strtod_l+0x37a>
 8009034:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009036:	3301      	adds	r3, #1
 8009038:	9317      	str	r3, [sp, #92]	; 0x5c
 800903a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800926c <_strtod_l+0x5ac>
 800903e:	f04f 0a00 	mov.w	sl, #0
 8009042:	e681      	b.n	8008d48 <_strtod_l+0x88>
 8009044:	4886      	ldr	r0, [pc, #536]	; (8009260 <_strtod_l+0x5a0>)
 8009046:	f002 fdf7 	bl	800bc38 <nan>
 800904a:	ec5b ab10 	vmov	sl, fp, d0
 800904e:	e67b      	b.n	8008d48 <_strtod_l+0x88>
 8009050:	9b05      	ldr	r3, [sp, #20]
 8009052:	9807      	ldr	r0, [sp, #28]
 8009054:	1af3      	subs	r3, r6, r3
 8009056:	2f00      	cmp	r7, #0
 8009058:	bf08      	it	eq
 800905a:	462f      	moveq	r7, r5
 800905c:	2d10      	cmp	r5, #16
 800905e:	9306      	str	r3, [sp, #24]
 8009060:	46a8      	mov	r8, r5
 8009062:	bfa8      	it	ge
 8009064:	f04f 0810 	movge.w	r8, #16
 8009068:	f7f7 fa4c 	bl	8000504 <__aeabi_ui2d>
 800906c:	2d09      	cmp	r5, #9
 800906e:	4682      	mov	sl, r0
 8009070:	468b      	mov	fp, r1
 8009072:	dd13      	ble.n	800909c <_strtod_l+0x3dc>
 8009074:	4b7b      	ldr	r3, [pc, #492]	; (8009264 <_strtod_l+0x5a4>)
 8009076:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800907a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800907e:	f7f7 fabb 	bl	80005f8 <__aeabi_dmul>
 8009082:	4682      	mov	sl, r0
 8009084:	4648      	mov	r0, r9
 8009086:	468b      	mov	fp, r1
 8009088:	f7f7 fa3c 	bl	8000504 <__aeabi_ui2d>
 800908c:	4602      	mov	r2, r0
 800908e:	460b      	mov	r3, r1
 8009090:	4650      	mov	r0, sl
 8009092:	4659      	mov	r1, fp
 8009094:	f7f7 f8fa 	bl	800028c <__adddf3>
 8009098:	4682      	mov	sl, r0
 800909a:	468b      	mov	fp, r1
 800909c:	2d0f      	cmp	r5, #15
 800909e:	dc38      	bgt.n	8009112 <_strtod_l+0x452>
 80090a0:	9b06      	ldr	r3, [sp, #24]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	f43f ae50 	beq.w	8008d48 <_strtod_l+0x88>
 80090a8:	dd24      	ble.n	80090f4 <_strtod_l+0x434>
 80090aa:	2b16      	cmp	r3, #22
 80090ac:	dc0b      	bgt.n	80090c6 <_strtod_l+0x406>
 80090ae:	496d      	ldr	r1, [pc, #436]	; (8009264 <_strtod_l+0x5a4>)
 80090b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80090b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090b8:	4652      	mov	r2, sl
 80090ba:	465b      	mov	r3, fp
 80090bc:	f7f7 fa9c 	bl	80005f8 <__aeabi_dmul>
 80090c0:	4682      	mov	sl, r0
 80090c2:	468b      	mov	fp, r1
 80090c4:	e640      	b.n	8008d48 <_strtod_l+0x88>
 80090c6:	9a06      	ldr	r2, [sp, #24]
 80090c8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80090cc:	4293      	cmp	r3, r2
 80090ce:	db20      	blt.n	8009112 <_strtod_l+0x452>
 80090d0:	4c64      	ldr	r4, [pc, #400]	; (8009264 <_strtod_l+0x5a4>)
 80090d2:	f1c5 050f 	rsb	r5, r5, #15
 80090d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80090da:	4652      	mov	r2, sl
 80090dc:	465b      	mov	r3, fp
 80090de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090e2:	f7f7 fa89 	bl	80005f8 <__aeabi_dmul>
 80090e6:	9b06      	ldr	r3, [sp, #24]
 80090e8:	1b5d      	subs	r5, r3, r5
 80090ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80090ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 80090f2:	e7e3      	b.n	80090bc <_strtod_l+0x3fc>
 80090f4:	9b06      	ldr	r3, [sp, #24]
 80090f6:	3316      	adds	r3, #22
 80090f8:	db0b      	blt.n	8009112 <_strtod_l+0x452>
 80090fa:	9b05      	ldr	r3, [sp, #20]
 80090fc:	1b9e      	subs	r6, r3, r6
 80090fe:	4b59      	ldr	r3, [pc, #356]	; (8009264 <_strtod_l+0x5a4>)
 8009100:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009104:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009108:	4650      	mov	r0, sl
 800910a:	4659      	mov	r1, fp
 800910c:	f7f7 fb9e 	bl	800084c <__aeabi_ddiv>
 8009110:	e7d6      	b.n	80090c0 <_strtod_l+0x400>
 8009112:	9b06      	ldr	r3, [sp, #24]
 8009114:	eba5 0808 	sub.w	r8, r5, r8
 8009118:	4498      	add	r8, r3
 800911a:	f1b8 0f00 	cmp.w	r8, #0
 800911e:	dd74      	ble.n	800920a <_strtod_l+0x54a>
 8009120:	f018 030f 	ands.w	r3, r8, #15
 8009124:	d00a      	beq.n	800913c <_strtod_l+0x47c>
 8009126:	494f      	ldr	r1, [pc, #316]	; (8009264 <_strtod_l+0x5a4>)
 8009128:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800912c:	4652      	mov	r2, sl
 800912e:	465b      	mov	r3, fp
 8009130:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009134:	f7f7 fa60 	bl	80005f8 <__aeabi_dmul>
 8009138:	4682      	mov	sl, r0
 800913a:	468b      	mov	fp, r1
 800913c:	f038 080f 	bics.w	r8, r8, #15
 8009140:	d04f      	beq.n	80091e2 <_strtod_l+0x522>
 8009142:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009146:	dd22      	ble.n	800918e <_strtod_l+0x4ce>
 8009148:	2500      	movs	r5, #0
 800914a:	462e      	mov	r6, r5
 800914c:	9507      	str	r5, [sp, #28]
 800914e:	9505      	str	r5, [sp, #20]
 8009150:	2322      	movs	r3, #34	; 0x22
 8009152:	f8df b118 	ldr.w	fp, [pc, #280]	; 800926c <_strtod_l+0x5ac>
 8009156:	6023      	str	r3, [r4, #0]
 8009158:	f04f 0a00 	mov.w	sl, #0
 800915c:	9b07      	ldr	r3, [sp, #28]
 800915e:	2b00      	cmp	r3, #0
 8009160:	f43f adf2 	beq.w	8008d48 <_strtod_l+0x88>
 8009164:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009166:	4620      	mov	r0, r4
 8009168:	f001 fe90 	bl	800ae8c <_Bfree>
 800916c:	9905      	ldr	r1, [sp, #20]
 800916e:	4620      	mov	r0, r4
 8009170:	f001 fe8c 	bl	800ae8c <_Bfree>
 8009174:	4631      	mov	r1, r6
 8009176:	4620      	mov	r0, r4
 8009178:	f001 fe88 	bl	800ae8c <_Bfree>
 800917c:	9907      	ldr	r1, [sp, #28]
 800917e:	4620      	mov	r0, r4
 8009180:	f001 fe84 	bl	800ae8c <_Bfree>
 8009184:	4629      	mov	r1, r5
 8009186:	4620      	mov	r0, r4
 8009188:	f001 fe80 	bl	800ae8c <_Bfree>
 800918c:	e5dc      	b.n	8008d48 <_strtod_l+0x88>
 800918e:	4b36      	ldr	r3, [pc, #216]	; (8009268 <_strtod_l+0x5a8>)
 8009190:	9304      	str	r3, [sp, #16]
 8009192:	2300      	movs	r3, #0
 8009194:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009198:	4650      	mov	r0, sl
 800919a:	4659      	mov	r1, fp
 800919c:	4699      	mov	r9, r3
 800919e:	f1b8 0f01 	cmp.w	r8, #1
 80091a2:	dc21      	bgt.n	80091e8 <_strtod_l+0x528>
 80091a4:	b10b      	cbz	r3, 80091aa <_strtod_l+0x4ea>
 80091a6:	4682      	mov	sl, r0
 80091a8:	468b      	mov	fp, r1
 80091aa:	4b2f      	ldr	r3, [pc, #188]	; (8009268 <_strtod_l+0x5a8>)
 80091ac:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80091b0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80091b4:	4652      	mov	r2, sl
 80091b6:	465b      	mov	r3, fp
 80091b8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80091bc:	f7f7 fa1c 	bl	80005f8 <__aeabi_dmul>
 80091c0:	4b2a      	ldr	r3, [pc, #168]	; (800926c <_strtod_l+0x5ac>)
 80091c2:	460a      	mov	r2, r1
 80091c4:	400b      	ands	r3, r1
 80091c6:	492a      	ldr	r1, [pc, #168]	; (8009270 <_strtod_l+0x5b0>)
 80091c8:	428b      	cmp	r3, r1
 80091ca:	4682      	mov	sl, r0
 80091cc:	d8bc      	bhi.n	8009148 <_strtod_l+0x488>
 80091ce:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80091d2:	428b      	cmp	r3, r1
 80091d4:	bf86      	itte	hi
 80091d6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009274 <_strtod_l+0x5b4>
 80091da:	f04f 3aff 	movhi.w	sl, #4294967295
 80091de:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80091e2:	2300      	movs	r3, #0
 80091e4:	9304      	str	r3, [sp, #16]
 80091e6:	e084      	b.n	80092f2 <_strtod_l+0x632>
 80091e8:	f018 0f01 	tst.w	r8, #1
 80091ec:	d005      	beq.n	80091fa <_strtod_l+0x53a>
 80091ee:	9b04      	ldr	r3, [sp, #16]
 80091f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f4:	f7f7 fa00 	bl	80005f8 <__aeabi_dmul>
 80091f8:	2301      	movs	r3, #1
 80091fa:	9a04      	ldr	r2, [sp, #16]
 80091fc:	3208      	adds	r2, #8
 80091fe:	f109 0901 	add.w	r9, r9, #1
 8009202:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009206:	9204      	str	r2, [sp, #16]
 8009208:	e7c9      	b.n	800919e <_strtod_l+0x4de>
 800920a:	d0ea      	beq.n	80091e2 <_strtod_l+0x522>
 800920c:	f1c8 0800 	rsb	r8, r8, #0
 8009210:	f018 020f 	ands.w	r2, r8, #15
 8009214:	d00a      	beq.n	800922c <_strtod_l+0x56c>
 8009216:	4b13      	ldr	r3, [pc, #76]	; (8009264 <_strtod_l+0x5a4>)
 8009218:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800921c:	4650      	mov	r0, sl
 800921e:	4659      	mov	r1, fp
 8009220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009224:	f7f7 fb12 	bl	800084c <__aeabi_ddiv>
 8009228:	4682      	mov	sl, r0
 800922a:	468b      	mov	fp, r1
 800922c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009230:	d0d7      	beq.n	80091e2 <_strtod_l+0x522>
 8009232:	f1b8 0f1f 	cmp.w	r8, #31
 8009236:	dd1f      	ble.n	8009278 <_strtod_l+0x5b8>
 8009238:	2500      	movs	r5, #0
 800923a:	462e      	mov	r6, r5
 800923c:	9507      	str	r5, [sp, #28]
 800923e:	9505      	str	r5, [sp, #20]
 8009240:	2322      	movs	r3, #34	; 0x22
 8009242:	f04f 0a00 	mov.w	sl, #0
 8009246:	f04f 0b00 	mov.w	fp, #0
 800924a:	6023      	str	r3, [r4, #0]
 800924c:	e786      	b.n	800915c <_strtod_l+0x49c>
 800924e:	bf00      	nop
 8009250:	0800cc89 	.word	0x0800cc89
 8009254:	0800cccc 	.word	0x0800cccc
 8009258:	0800cc81 	.word	0x0800cc81
 800925c:	0800ce0c 	.word	0x0800ce0c
 8009260:	0800d0b8 	.word	0x0800d0b8
 8009264:	0800cf98 	.word	0x0800cf98
 8009268:	0800cf70 	.word	0x0800cf70
 800926c:	7ff00000 	.word	0x7ff00000
 8009270:	7ca00000 	.word	0x7ca00000
 8009274:	7fefffff 	.word	0x7fefffff
 8009278:	f018 0310 	ands.w	r3, r8, #16
 800927c:	bf18      	it	ne
 800927e:	236a      	movne	r3, #106	; 0x6a
 8009280:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009630 <_strtod_l+0x970>
 8009284:	9304      	str	r3, [sp, #16]
 8009286:	4650      	mov	r0, sl
 8009288:	4659      	mov	r1, fp
 800928a:	2300      	movs	r3, #0
 800928c:	f018 0f01 	tst.w	r8, #1
 8009290:	d004      	beq.n	800929c <_strtod_l+0x5dc>
 8009292:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009296:	f7f7 f9af 	bl	80005f8 <__aeabi_dmul>
 800929a:	2301      	movs	r3, #1
 800929c:	ea5f 0868 	movs.w	r8, r8, asr #1
 80092a0:	f109 0908 	add.w	r9, r9, #8
 80092a4:	d1f2      	bne.n	800928c <_strtod_l+0x5cc>
 80092a6:	b10b      	cbz	r3, 80092ac <_strtod_l+0x5ec>
 80092a8:	4682      	mov	sl, r0
 80092aa:	468b      	mov	fp, r1
 80092ac:	9b04      	ldr	r3, [sp, #16]
 80092ae:	b1c3      	cbz	r3, 80092e2 <_strtod_l+0x622>
 80092b0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80092b4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	4659      	mov	r1, fp
 80092bc:	dd11      	ble.n	80092e2 <_strtod_l+0x622>
 80092be:	2b1f      	cmp	r3, #31
 80092c0:	f340 8124 	ble.w	800950c <_strtod_l+0x84c>
 80092c4:	2b34      	cmp	r3, #52	; 0x34
 80092c6:	bfde      	ittt	le
 80092c8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80092cc:	f04f 33ff 	movle.w	r3, #4294967295
 80092d0:	fa03 f202 	lslle.w	r2, r3, r2
 80092d4:	f04f 0a00 	mov.w	sl, #0
 80092d8:	bfcc      	ite	gt
 80092da:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80092de:	ea02 0b01 	andle.w	fp, r2, r1
 80092e2:	2200      	movs	r2, #0
 80092e4:	2300      	movs	r3, #0
 80092e6:	4650      	mov	r0, sl
 80092e8:	4659      	mov	r1, fp
 80092ea:	f7f7 fbed 	bl	8000ac8 <__aeabi_dcmpeq>
 80092ee:	2800      	cmp	r0, #0
 80092f0:	d1a2      	bne.n	8009238 <_strtod_l+0x578>
 80092f2:	9b07      	ldr	r3, [sp, #28]
 80092f4:	9300      	str	r3, [sp, #0]
 80092f6:	9908      	ldr	r1, [sp, #32]
 80092f8:	462b      	mov	r3, r5
 80092fa:	463a      	mov	r2, r7
 80092fc:	4620      	mov	r0, r4
 80092fe:	f001 fe2d 	bl	800af5c <__s2b>
 8009302:	9007      	str	r0, [sp, #28]
 8009304:	2800      	cmp	r0, #0
 8009306:	f43f af1f 	beq.w	8009148 <_strtod_l+0x488>
 800930a:	9b05      	ldr	r3, [sp, #20]
 800930c:	1b9e      	subs	r6, r3, r6
 800930e:	9b06      	ldr	r3, [sp, #24]
 8009310:	2b00      	cmp	r3, #0
 8009312:	bfb4      	ite	lt
 8009314:	4633      	movlt	r3, r6
 8009316:	2300      	movge	r3, #0
 8009318:	930c      	str	r3, [sp, #48]	; 0x30
 800931a:	9b06      	ldr	r3, [sp, #24]
 800931c:	2500      	movs	r5, #0
 800931e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009322:	9312      	str	r3, [sp, #72]	; 0x48
 8009324:	462e      	mov	r6, r5
 8009326:	9b07      	ldr	r3, [sp, #28]
 8009328:	4620      	mov	r0, r4
 800932a:	6859      	ldr	r1, [r3, #4]
 800932c:	f001 fd6e 	bl	800ae0c <_Balloc>
 8009330:	9005      	str	r0, [sp, #20]
 8009332:	2800      	cmp	r0, #0
 8009334:	f43f af0c 	beq.w	8009150 <_strtod_l+0x490>
 8009338:	9b07      	ldr	r3, [sp, #28]
 800933a:	691a      	ldr	r2, [r3, #16]
 800933c:	3202      	adds	r2, #2
 800933e:	f103 010c 	add.w	r1, r3, #12
 8009342:	0092      	lsls	r2, r2, #2
 8009344:	300c      	adds	r0, #12
 8009346:	f001 fd53 	bl	800adf0 <memcpy>
 800934a:	ec4b ab10 	vmov	d0, sl, fp
 800934e:	aa1a      	add	r2, sp, #104	; 0x68
 8009350:	a919      	add	r1, sp, #100	; 0x64
 8009352:	4620      	mov	r0, r4
 8009354:	f002 f948 	bl	800b5e8 <__d2b>
 8009358:	ec4b ab18 	vmov	d8, sl, fp
 800935c:	9018      	str	r0, [sp, #96]	; 0x60
 800935e:	2800      	cmp	r0, #0
 8009360:	f43f aef6 	beq.w	8009150 <_strtod_l+0x490>
 8009364:	2101      	movs	r1, #1
 8009366:	4620      	mov	r0, r4
 8009368:	f001 fe92 	bl	800b090 <__i2b>
 800936c:	4606      	mov	r6, r0
 800936e:	2800      	cmp	r0, #0
 8009370:	f43f aeee 	beq.w	8009150 <_strtod_l+0x490>
 8009374:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009376:	9904      	ldr	r1, [sp, #16]
 8009378:	2b00      	cmp	r3, #0
 800937a:	bfab      	itete	ge
 800937c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800937e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009380:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009382:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009386:	bfac      	ite	ge
 8009388:	eb03 0902 	addge.w	r9, r3, r2
 800938c:	1ad7      	sublt	r7, r2, r3
 800938e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009390:	eba3 0801 	sub.w	r8, r3, r1
 8009394:	4490      	add	r8, r2
 8009396:	4ba1      	ldr	r3, [pc, #644]	; (800961c <_strtod_l+0x95c>)
 8009398:	f108 38ff 	add.w	r8, r8, #4294967295
 800939c:	4598      	cmp	r8, r3
 800939e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80093a2:	f280 80c7 	bge.w	8009534 <_strtod_l+0x874>
 80093a6:	eba3 0308 	sub.w	r3, r3, r8
 80093aa:	2b1f      	cmp	r3, #31
 80093ac:	eba2 0203 	sub.w	r2, r2, r3
 80093b0:	f04f 0101 	mov.w	r1, #1
 80093b4:	f300 80b1 	bgt.w	800951a <_strtod_l+0x85a>
 80093b8:	fa01 f303 	lsl.w	r3, r1, r3
 80093bc:	930d      	str	r3, [sp, #52]	; 0x34
 80093be:	2300      	movs	r3, #0
 80093c0:	9308      	str	r3, [sp, #32]
 80093c2:	eb09 0802 	add.w	r8, r9, r2
 80093c6:	9b04      	ldr	r3, [sp, #16]
 80093c8:	45c1      	cmp	r9, r8
 80093ca:	4417      	add	r7, r2
 80093cc:	441f      	add	r7, r3
 80093ce:	464b      	mov	r3, r9
 80093d0:	bfa8      	it	ge
 80093d2:	4643      	movge	r3, r8
 80093d4:	42bb      	cmp	r3, r7
 80093d6:	bfa8      	it	ge
 80093d8:	463b      	movge	r3, r7
 80093da:	2b00      	cmp	r3, #0
 80093dc:	bfc2      	ittt	gt
 80093de:	eba8 0803 	subgt.w	r8, r8, r3
 80093e2:	1aff      	subgt	r7, r7, r3
 80093e4:	eba9 0903 	subgt.w	r9, r9, r3
 80093e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	dd17      	ble.n	800941e <_strtod_l+0x75e>
 80093ee:	4631      	mov	r1, r6
 80093f0:	461a      	mov	r2, r3
 80093f2:	4620      	mov	r0, r4
 80093f4:	f001 ff0c 	bl	800b210 <__pow5mult>
 80093f8:	4606      	mov	r6, r0
 80093fa:	2800      	cmp	r0, #0
 80093fc:	f43f aea8 	beq.w	8009150 <_strtod_l+0x490>
 8009400:	4601      	mov	r1, r0
 8009402:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009404:	4620      	mov	r0, r4
 8009406:	f001 fe59 	bl	800b0bc <__multiply>
 800940a:	900b      	str	r0, [sp, #44]	; 0x2c
 800940c:	2800      	cmp	r0, #0
 800940e:	f43f ae9f 	beq.w	8009150 <_strtod_l+0x490>
 8009412:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009414:	4620      	mov	r0, r4
 8009416:	f001 fd39 	bl	800ae8c <_Bfree>
 800941a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800941c:	9318      	str	r3, [sp, #96]	; 0x60
 800941e:	f1b8 0f00 	cmp.w	r8, #0
 8009422:	f300 808c 	bgt.w	800953e <_strtod_l+0x87e>
 8009426:	9b06      	ldr	r3, [sp, #24]
 8009428:	2b00      	cmp	r3, #0
 800942a:	dd08      	ble.n	800943e <_strtod_l+0x77e>
 800942c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800942e:	9905      	ldr	r1, [sp, #20]
 8009430:	4620      	mov	r0, r4
 8009432:	f001 feed 	bl	800b210 <__pow5mult>
 8009436:	9005      	str	r0, [sp, #20]
 8009438:	2800      	cmp	r0, #0
 800943a:	f43f ae89 	beq.w	8009150 <_strtod_l+0x490>
 800943e:	2f00      	cmp	r7, #0
 8009440:	dd08      	ble.n	8009454 <_strtod_l+0x794>
 8009442:	9905      	ldr	r1, [sp, #20]
 8009444:	463a      	mov	r2, r7
 8009446:	4620      	mov	r0, r4
 8009448:	f001 ff3c 	bl	800b2c4 <__lshift>
 800944c:	9005      	str	r0, [sp, #20]
 800944e:	2800      	cmp	r0, #0
 8009450:	f43f ae7e 	beq.w	8009150 <_strtod_l+0x490>
 8009454:	f1b9 0f00 	cmp.w	r9, #0
 8009458:	dd08      	ble.n	800946c <_strtod_l+0x7ac>
 800945a:	4631      	mov	r1, r6
 800945c:	464a      	mov	r2, r9
 800945e:	4620      	mov	r0, r4
 8009460:	f001 ff30 	bl	800b2c4 <__lshift>
 8009464:	4606      	mov	r6, r0
 8009466:	2800      	cmp	r0, #0
 8009468:	f43f ae72 	beq.w	8009150 <_strtod_l+0x490>
 800946c:	9a05      	ldr	r2, [sp, #20]
 800946e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009470:	4620      	mov	r0, r4
 8009472:	f001 ffb3 	bl	800b3dc <__mdiff>
 8009476:	4605      	mov	r5, r0
 8009478:	2800      	cmp	r0, #0
 800947a:	f43f ae69 	beq.w	8009150 <_strtod_l+0x490>
 800947e:	68c3      	ldr	r3, [r0, #12]
 8009480:	930b      	str	r3, [sp, #44]	; 0x2c
 8009482:	2300      	movs	r3, #0
 8009484:	60c3      	str	r3, [r0, #12]
 8009486:	4631      	mov	r1, r6
 8009488:	f001 ff8c 	bl	800b3a4 <__mcmp>
 800948c:	2800      	cmp	r0, #0
 800948e:	da60      	bge.n	8009552 <_strtod_l+0x892>
 8009490:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009492:	ea53 030a 	orrs.w	r3, r3, sl
 8009496:	f040 8082 	bne.w	800959e <_strtod_l+0x8de>
 800949a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d17d      	bne.n	800959e <_strtod_l+0x8de>
 80094a2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80094a6:	0d1b      	lsrs	r3, r3, #20
 80094a8:	051b      	lsls	r3, r3, #20
 80094aa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80094ae:	d976      	bls.n	800959e <_strtod_l+0x8de>
 80094b0:	696b      	ldr	r3, [r5, #20]
 80094b2:	b913      	cbnz	r3, 80094ba <_strtod_l+0x7fa>
 80094b4:	692b      	ldr	r3, [r5, #16]
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	dd71      	ble.n	800959e <_strtod_l+0x8de>
 80094ba:	4629      	mov	r1, r5
 80094bc:	2201      	movs	r2, #1
 80094be:	4620      	mov	r0, r4
 80094c0:	f001 ff00 	bl	800b2c4 <__lshift>
 80094c4:	4631      	mov	r1, r6
 80094c6:	4605      	mov	r5, r0
 80094c8:	f001 ff6c 	bl	800b3a4 <__mcmp>
 80094cc:	2800      	cmp	r0, #0
 80094ce:	dd66      	ble.n	800959e <_strtod_l+0x8de>
 80094d0:	9904      	ldr	r1, [sp, #16]
 80094d2:	4a53      	ldr	r2, [pc, #332]	; (8009620 <_strtod_l+0x960>)
 80094d4:	465b      	mov	r3, fp
 80094d6:	2900      	cmp	r1, #0
 80094d8:	f000 8081 	beq.w	80095de <_strtod_l+0x91e>
 80094dc:	ea02 010b 	and.w	r1, r2, fp
 80094e0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80094e4:	dc7b      	bgt.n	80095de <_strtod_l+0x91e>
 80094e6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80094ea:	f77f aea9 	ble.w	8009240 <_strtod_l+0x580>
 80094ee:	4b4d      	ldr	r3, [pc, #308]	; (8009624 <_strtod_l+0x964>)
 80094f0:	4650      	mov	r0, sl
 80094f2:	4659      	mov	r1, fp
 80094f4:	2200      	movs	r2, #0
 80094f6:	f7f7 f87f 	bl	80005f8 <__aeabi_dmul>
 80094fa:	460b      	mov	r3, r1
 80094fc:	4303      	orrs	r3, r0
 80094fe:	bf08      	it	eq
 8009500:	2322      	moveq	r3, #34	; 0x22
 8009502:	4682      	mov	sl, r0
 8009504:	468b      	mov	fp, r1
 8009506:	bf08      	it	eq
 8009508:	6023      	streq	r3, [r4, #0]
 800950a:	e62b      	b.n	8009164 <_strtod_l+0x4a4>
 800950c:	f04f 32ff 	mov.w	r2, #4294967295
 8009510:	fa02 f303 	lsl.w	r3, r2, r3
 8009514:	ea03 0a0a 	and.w	sl, r3, sl
 8009518:	e6e3      	b.n	80092e2 <_strtod_l+0x622>
 800951a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800951e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009522:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009526:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800952a:	fa01 f308 	lsl.w	r3, r1, r8
 800952e:	9308      	str	r3, [sp, #32]
 8009530:	910d      	str	r1, [sp, #52]	; 0x34
 8009532:	e746      	b.n	80093c2 <_strtod_l+0x702>
 8009534:	2300      	movs	r3, #0
 8009536:	9308      	str	r3, [sp, #32]
 8009538:	2301      	movs	r3, #1
 800953a:	930d      	str	r3, [sp, #52]	; 0x34
 800953c:	e741      	b.n	80093c2 <_strtod_l+0x702>
 800953e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009540:	4642      	mov	r2, r8
 8009542:	4620      	mov	r0, r4
 8009544:	f001 febe 	bl	800b2c4 <__lshift>
 8009548:	9018      	str	r0, [sp, #96]	; 0x60
 800954a:	2800      	cmp	r0, #0
 800954c:	f47f af6b 	bne.w	8009426 <_strtod_l+0x766>
 8009550:	e5fe      	b.n	8009150 <_strtod_l+0x490>
 8009552:	465f      	mov	r7, fp
 8009554:	d16e      	bne.n	8009634 <_strtod_l+0x974>
 8009556:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009558:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800955c:	b342      	cbz	r2, 80095b0 <_strtod_l+0x8f0>
 800955e:	4a32      	ldr	r2, [pc, #200]	; (8009628 <_strtod_l+0x968>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d128      	bne.n	80095b6 <_strtod_l+0x8f6>
 8009564:	9b04      	ldr	r3, [sp, #16]
 8009566:	4651      	mov	r1, sl
 8009568:	b1eb      	cbz	r3, 80095a6 <_strtod_l+0x8e6>
 800956a:	4b2d      	ldr	r3, [pc, #180]	; (8009620 <_strtod_l+0x960>)
 800956c:	403b      	ands	r3, r7
 800956e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009572:	f04f 32ff 	mov.w	r2, #4294967295
 8009576:	d819      	bhi.n	80095ac <_strtod_l+0x8ec>
 8009578:	0d1b      	lsrs	r3, r3, #20
 800957a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800957e:	fa02 f303 	lsl.w	r3, r2, r3
 8009582:	4299      	cmp	r1, r3
 8009584:	d117      	bne.n	80095b6 <_strtod_l+0x8f6>
 8009586:	4b29      	ldr	r3, [pc, #164]	; (800962c <_strtod_l+0x96c>)
 8009588:	429f      	cmp	r7, r3
 800958a:	d102      	bne.n	8009592 <_strtod_l+0x8d2>
 800958c:	3101      	adds	r1, #1
 800958e:	f43f addf 	beq.w	8009150 <_strtod_l+0x490>
 8009592:	4b23      	ldr	r3, [pc, #140]	; (8009620 <_strtod_l+0x960>)
 8009594:	403b      	ands	r3, r7
 8009596:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800959a:	f04f 0a00 	mov.w	sl, #0
 800959e:	9b04      	ldr	r3, [sp, #16]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d1a4      	bne.n	80094ee <_strtod_l+0x82e>
 80095a4:	e5de      	b.n	8009164 <_strtod_l+0x4a4>
 80095a6:	f04f 33ff 	mov.w	r3, #4294967295
 80095aa:	e7ea      	b.n	8009582 <_strtod_l+0x8c2>
 80095ac:	4613      	mov	r3, r2
 80095ae:	e7e8      	b.n	8009582 <_strtod_l+0x8c2>
 80095b0:	ea53 030a 	orrs.w	r3, r3, sl
 80095b4:	d08c      	beq.n	80094d0 <_strtod_l+0x810>
 80095b6:	9b08      	ldr	r3, [sp, #32]
 80095b8:	b1db      	cbz	r3, 80095f2 <_strtod_l+0x932>
 80095ba:	423b      	tst	r3, r7
 80095bc:	d0ef      	beq.n	800959e <_strtod_l+0x8de>
 80095be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095c0:	9a04      	ldr	r2, [sp, #16]
 80095c2:	4650      	mov	r0, sl
 80095c4:	4659      	mov	r1, fp
 80095c6:	b1c3      	cbz	r3, 80095fa <_strtod_l+0x93a>
 80095c8:	f7ff fb5e 	bl	8008c88 <sulp>
 80095cc:	4602      	mov	r2, r0
 80095ce:	460b      	mov	r3, r1
 80095d0:	ec51 0b18 	vmov	r0, r1, d8
 80095d4:	f7f6 fe5a 	bl	800028c <__adddf3>
 80095d8:	4682      	mov	sl, r0
 80095da:	468b      	mov	fp, r1
 80095dc:	e7df      	b.n	800959e <_strtod_l+0x8de>
 80095de:	4013      	ands	r3, r2
 80095e0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80095e4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80095e8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80095ec:	f04f 3aff 	mov.w	sl, #4294967295
 80095f0:	e7d5      	b.n	800959e <_strtod_l+0x8de>
 80095f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095f4:	ea13 0f0a 	tst.w	r3, sl
 80095f8:	e7e0      	b.n	80095bc <_strtod_l+0x8fc>
 80095fa:	f7ff fb45 	bl	8008c88 <sulp>
 80095fe:	4602      	mov	r2, r0
 8009600:	460b      	mov	r3, r1
 8009602:	ec51 0b18 	vmov	r0, r1, d8
 8009606:	f7f6 fe3f 	bl	8000288 <__aeabi_dsub>
 800960a:	2200      	movs	r2, #0
 800960c:	2300      	movs	r3, #0
 800960e:	4682      	mov	sl, r0
 8009610:	468b      	mov	fp, r1
 8009612:	f7f7 fa59 	bl	8000ac8 <__aeabi_dcmpeq>
 8009616:	2800      	cmp	r0, #0
 8009618:	d0c1      	beq.n	800959e <_strtod_l+0x8de>
 800961a:	e611      	b.n	8009240 <_strtod_l+0x580>
 800961c:	fffffc02 	.word	0xfffffc02
 8009620:	7ff00000 	.word	0x7ff00000
 8009624:	39500000 	.word	0x39500000
 8009628:	000fffff 	.word	0x000fffff
 800962c:	7fefffff 	.word	0x7fefffff
 8009630:	0800cce0 	.word	0x0800cce0
 8009634:	4631      	mov	r1, r6
 8009636:	4628      	mov	r0, r5
 8009638:	f002 f832 	bl	800b6a0 <__ratio>
 800963c:	ec59 8b10 	vmov	r8, r9, d0
 8009640:	ee10 0a10 	vmov	r0, s0
 8009644:	2200      	movs	r2, #0
 8009646:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800964a:	4649      	mov	r1, r9
 800964c:	f7f7 fa50 	bl	8000af0 <__aeabi_dcmple>
 8009650:	2800      	cmp	r0, #0
 8009652:	d07a      	beq.n	800974a <_strtod_l+0xa8a>
 8009654:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009656:	2b00      	cmp	r3, #0
 8009658:	d04a      	beq.n	80096f0 <_strtod_l+0xa30>
 800965a:	4b95      	ldr	r3, [pc, #596]	; (80098b0 <_strtod_l+0xbf0>)
 800965c:	2200      	movs	r2, #0
 800965e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009662:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80098b0 <_strtod_l+0xbf0>
 8009666:	f04f 0800 	mov.w	r8, #0
 800966a:	4b92      	ldr	r3, [pc, #584]	; (80098b4 <_strtod_l+0xbf4>)
 800966c:	403b      	ands	r3, r7
 800966e:	930d      	str	r3, [sp, #52]	; 0x34
 8009670:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009672:	4b91      	ldr	r3, [pc, #580]	; (80098b8 <_strtod_l+0xbf8>)
 8009674:	429a      	cmp	r2, r3
 8009676:	f040 80b0 	bne.w	80097da <_strtod_l+0xb1a>
 800967a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800967e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009682:	ec4b ab10 	vmov	d0, sl, fp
 8009686:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800968a:	f001 ff31 	bl	800b4f0 <__ulp>
 800968e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009692:	ec53 2b10 	vmov	r2, r3, d0
 8009696:	f7f6 ffaf 	bl	80005f8 <__aeabi_dmul>
 800969a:	4652      	mov	r2, sl
 800969c:	465b      	mov	r3, fp
 800969e:	f7f6 fdf5 	bl	800028c <__adddf3>
 80096a2:	460b      	mov	r3, r1
 80096a4:	4983      	ldr	r1, [pc, #524]	; (80098b4 <_strtod_l+0xbf4>)
 80096a6:	4a85      	ldr	r2, [pc, #532]	; (80098bc <_strtod_l+0xbfc>)
 80096a8:	4019      	ands	r1, r3
 80096aa:	4291      	cmp	r1, r2
 80096ac:	4682      	mov	sl, r0
 80096ae:	d960      	bls.n	8009772 <_strtod_l+0xab2>
 80096b0:	ee18 3a90 	vmov	r3, s17
 80096b4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d104      	bne.n	80096c6 <_strtod_l+0xa06>
 80096bc:	ee18 3a10 	vmov	r3, s16
 80096c0:	3301      	adds	r3, #1
 80096c2:	f43f ad45 	beq.w	8009150 <_strtod_l+0x490>
 80096c6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80098c8 <_strtod_l+0xc08>
 80096ca:	f04f 3aff 	mov.w	sl, #4294967295
 80096ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80096d0:	4620      	mov	r0, r4
 80096d2:	f001 fbdb 	bl	800ae8c <_Bfree>
 80096d6:	9905      	ldr	r1, [sp, #20]
 80096d8:	4620      	mov	r0, r4
 80096da:	f001 fbd7 	bl	800ae8c <_Bfree>
 80096de:	4631      	mov	r1, r6
 80096e0:	4620      	mov	r0, r4
 80096e2:	f001 fbd3 	bl	800ae8c <_Bfree>
 80096e6:	4629      	mov	r1, r5
 80096e8:	4620      	mov	r0, r4
 80096ea:	f001 fbcf 	bl	800ae8c <_Bfree>
 80096ee:	e61a      	b.n	8009326 <_strtod_l+0x666>
 80096f0:	f1ba 0f00 	cmp.w	sl, #0
 80096f4:	d11b      	bne.n	800972e <_strtod_l+0xa6e>
 80096f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80096fa:	b9f3      	cbnz	r3, 800973a <_strtod_l+0xa7a>
 80096fc:	4b6c      	ldr	r3, [pc, #432]	; (80098b0 <_strtod_l+0xbf0>)
 80096fe:	2200      	movs	r2, #0
 8009700:	4640      	mov	r0, r8
 8009702:	4649      	mov	r1, r9
 8009704:	f7f7 f9ea 	bl	8000adc <__aeabi_dcmplt>
 8009708:	b9d0      	cbnz	r0, 8009740 <_strtod_l+0xa80>
 800970a:	4640      	mov	r0, r8
 800970c:	4649      	mov	r1, r9
 800970e:	4b6c      	ldr	r3, [pc, #432]	; (80098c0 <_strtod_l+0xc00>)
 8009710:	2200      	movs	r2, #0
 8009712:	f7f6 ff71 	bl	80005f8 <__aeabi_dmul>
 8009716:	4680      	mov	r8, r0
 8009718:	4689      	mov	r9, r1
 800971a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800971e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009722:	9315      	str	r3, [sp, #84]	; 0x54
 8009724:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009728:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800972c:	e79d      	b.n	800966a <_strtod_l+0x9aa>
 800972e:	f1ba 0f01 	cmp.w	sl, #1
 8009732:	d102      	bne.n	800973a <_strtod_l+0xa7a>
 8009734:	2f00      	cmp	r7, #0
 8009736:	f43f ad83 	beq.w	8009240 <_strtod_l+0x580>
 800973a:	4b62      	ldr	r3, [pc, #392]	; (80098c4 <_strtod_l+0xc04>)
 800973c:	2200      	movs	r2, #0
 800973e:	e78e      	b.n	800965e <_strtod_l+0x99e>
 8009740:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80098c0 <_strtod_l+0xc00>
 8009744:	f04f 0800 	mov.w	r8, #0
 8009748:	e7e7      	b.n	800971a <_strtod_l+0xa5a>
 800974a:	4b5d      	ldr	r3, [pc, #372]	; (80098c0 <_strtod_l+0xc00>)
 800974c:	4640      	mov	r0, r8
 800974e:	4649      	mov	r1, r9
 8009750:	2200      	movs	r2, #0
 8009752:	f7f6 ff51 	bl	80005f8 <__aeabi_dmul>
 8009756:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009758:	4680      	mov	r8, r0
 800975a:	4689      	mov	r9, r1
 800975c:	b933      	cbnz	r3, 800976c <_strtod_l+0xaac>
 800975e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009762:	900e      	str	r0, [sp, #56]	; 0x38
 8009764:	930f      	str	r3, [sp, #60]	; 0x3c
 8009766:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800976a:	e7dd      	b.n	8009728 <_strtod_l+0xa68>
 800976c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009770:	e7f9      	b.n	8009766 <_strtod_l+0xaa6>
 8009772:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009776:	9b04      	ldr	r3, [sp, #16]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d1a8      	bne.n	80096ce <_strtod_l+0xa0e>
 800977c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009780:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009782:	0d1b      	lsrs	r3, r3, #20
 8009784:	051b      	lsls	r3, r3, #20
 8009786:	429a      	cmp	r2, r3
 8009788:	d1a1      	bne.n	80096ce <_strtod_l+0xa0e>
 800978a:	4640      	mov	r0, r8
 800978c:	4649      	mov	r1, r9
 800978e:	f7f7 fa7b 	bl	8000c88 <__aeabi_d2lz>
 8009792:	f7f6 ff03 	bl	800059c <__aeabi_l2d>
 8009796:	4602      	mov	r2, r0
 8009798:	460b      	mov	r3, r1
 800979a:	4640      	mov	r0, r8
 800979c:	4649      	mov	r1, r9
 800979e:	f7f6 fd73 	bl	8000288 <__aeabi_dsub>
 80097a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80097a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80097a8:	ea43 030a 	orr.w	r3, r3, sl
 80097ac:	4313      	orrs	r3, r2
 80097ae:	4680      	mov	r8, r0
 80097b0:	4689      	mov	r9, r1
 80097b2:	d055      	beq.n	8009860 <_strtod_l+0xba0>
 80097b4:	a336      	add	r3, pc, #216	; (adr r3, 8009890 <_strtod_l+0xbd0>)
 80097b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ba:	f7f7 f98f 	bl	8000adc <__aeabi_dcmplt>
 80097be:	2800      	cmp	r0, #0
 80097c0:	f47f acd0 	bne.w	8009164 <_strtod_l+0x4a4>
 80097c4:	a334      	add	r3, pc, #208	; (adr r3, 8009898 <_strtod_l+0xbd8>)
 80097c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ca:	4640      	mov	r0, r8
 80097cc:	4649      	mov	r1, r9
 80097ce:	f7f7 f9a3 	bl	8000b18 <__aeabi_dcmpgt>
 80097d2:	2800      	cmp	r0, #0
 80097d4:	f43f af7b 	beq.w	80096ce <_strtod_l+0xa0e>
 80097d8:	e4c4      	b.n	8009164 <_strtod_l+0x4a4>
 80097da:	9b04      	ldr	r3, [sp, #16]
 80097dc:	b333      	cbz	r3, 800982c <_strtod_l+0xb6c>
 80097de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097e0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80097e4:	d822      	bhi.n	800982c <_strtod_l+0xb6c>
 80097e6:	a32e      	add	r3, pc, #184	; (adr r3, 80098a0 <_strtod_l+0xbe0>)
 80097e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ec:	4640      	mov	r0, r8
 80097ee:	4649      	mov	r1, r9
 80097f0:	f7f7 f97e 	bl	8000af0 <__aeabi_dcmple>
 80097f4:	b1a0      	cbz	r0, 8009820 <_strtod_l+0xb60>
 80097f6:	4649      	mov	r1, r9
 80097f8:	4640      	mov	r0, r8
 80097fa:	f7f7 f9d5 	bl	8000ba8 <__aeabi_d2uiz>
 80097fe:	2801      	cmp	r0, #1
 8009800:	bf38      	it	cc
 8009802:	2001      	movcc	r0, #1
 8009804:	f7f6 fe7e 	bl	8000504 <__aeabi_ui2d>
 8009808:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800980a:	4680      	mov	r8, r0
 800980c:	4689      	mov	r9, r1
 800980e:	bb23      	cbnz	r3, 800985a <_strtod_l+0xb9a>
 8009810:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009814:	9010      	str	r0, [sp, #64]	; 0x40
 8009816:	9311      	str	r3, [sp, #68]	; 0x44
 8009818:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800981c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009822:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009824:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009828:	1a9b      	subs	r3, r3, r2
 800982a:	9309      	str	r3, [sp, #36]	; 0x24
 800982c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009830:	eeb0 0a48 	vmov.f32	s0, s16
 8009834:	eef0 0a68 	vmov.f32	s1, s17
 8009838:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800983c:	f001 fe58 	bl	800b4f0 <__ulp>
 8009840:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009844:	ec53 2b10 	vmov	r2, r3, d0
 8009848:	f7f6 fed6 	bl	80005f8 <__aeabi_dmul>
 800984c:	ec53 2b18 	vmov	r2, r3, d8
 8009850:	f7f6 fd1c 	bl	800028c <__adddf3>
 8009854:	4682      	mov	sl, r0
 8009856:	468b      	mov	fp, r1
 8009858:	e78d      	b.n	8009776 <_strtod_l+0xab6>
 800985a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800985e:	e7db      	b.n	8009818 <_strtod_l+0xb58>
 8009860:	a311      	add	r3, pc, #68	; (adr r3, 80098a8 <_strtod_l+0xbe8>)
 8009862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009866:	f7f7 f939 	bl	8000adc <__aeabi_dcmplt>
 800986a:	e7b2      	b.n	80097d2 <_strtod_l+0xb12>
 800986c:	2300      	movs	r3, #0
 800986e:	930a      	str	r3, [sp, #40]	; 0x28
 8009870:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009872:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009874:	6013      	str	r3, [r2, #0]
 8009876:	f7ff ba6b 	b.w	8008d50 <_strtod_l+0x90>
 800987a:	2a65      	cmp	r2, #101	; 0x65
 800987c:	f43f ab5f 	beq.w	8008f3e <_strtod_l+0x27e>
 8009880:	2a45      	cmp	r2, #69	; 0x45
 8009882:	f43f ab5c 	beq.w	8008f3e <_strtod_l+0x27e>
 8009886:	2301      	movs	r3, #1
 8009888:	f7ff bb94 	b.w	8008fb4 <_strtod_l+0x2f4>
 800988c:	f3af 8000 	nop.w
 8009890:	94a03595 	.word	0x94a03595
 8009894:	3fdfffff 	.word	0x3fdfffff
 8009898:	35afe535 	.word	0x35afe535
 800989c:	3fe00000 	.word	0x3fe00000
 80098a0:	ffc00000 	.word	0xffc00000
 80098a4:	41dfffff 	.word	0x41dfffff
 80098a8:	94a03595 	.word	0x94a03595
 80098ac:	3fcfffff 	.word	0x3fcfffff
 80098b0:	3ff00000 	.word	0x3ff00000
 80098b4:	7ff00000 	.word	0x7ff00000
 80098b8:	7fe00000 	.word	0x7fe00000
 80098bc:	7c9fffff 	.word	0x7c9fffff
 80098c0:	3fe00000 	.word	0x3fe00000
 80098c4:	bff00000 	.word	0xbff00000
 80098c8:	7fefffff 	.word	0x7fefffff

080098cc <_strtod_r>:
 80098cc:	4b01      	ldr	r3, [pc, #4]	; (80098d4 <_strtod_r+0x8>)
 80098ce:	f7ff b9f7 	b.w	8008cc0 <_strtod_l>
 80098d2:	bf00      	nop
 80098d4:	20000080 	.word	0x20000080

080098d8 <_strtol_l.constprop.0>:
 80098d8:	2b01      	cmp	r3, #1
 80098da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098de:	d001      	beq.n	80098e4 <_strtol_l.constprop.0+0xc>
 80098e0:	2b24      	cmp	r3, #36	; 0x24
 80098e2:	d906      	bls.n	80098f2 <_strtol_l.constprop.0+0x1a>
 80098e4:	f7fe fafe 	bl	8007ee4 <__errno>
 80098e8:	2316      	movs	r3, #22
 80098ea:	6003      	str	r3, [r0, #0]
 80098ec:	2000      	movs	r0, #0
 80098ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098f2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80099d8 <_strtol_l.constprop.0+0x100>
 80098f6:	460d      	mov	r5, r1
 80098f8:	462e      	mov	r6, r5
 80098fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80098fe:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009902:	f017 0708 	ands.w	r7, r7, #8
 8009906:	d1f7      	bne.n	80098f8 <_strtol_l.constprop.0+0x20>
 8009908:	2c2d      	cmp	r4, #45	; 0x2d
 800990a:	d132      	bne.n	8009972 <_strtol_l.constprop.0+0x9a>
 800990c:	782c      	ldrb	r4, [r5, #0]
 800990e:	2701      	movs	r7, #1
 8009910:	1cb5      	adds	r5, r6, #2
 8009912:	2b00      	cmp	r3, #0
 8009914:	d05b      	beq.n	80099ce <_strtol_l.constprop.0+0xf6>
 8009916:	2b10      	cmp	r3, #16
 8009918:	d109      	bne.n	800992e <_strtol_l.constprop.0+0x56>
 800991a:	2c30      	cmp	r4, #48	; 0x30
 800991c:	d107      	bne.n	800992e <_strtol_l.constprop.0+0x56>
 800991e:	782c      	ldrb	r4, [r5, #0]
 8009920:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009924:	2c58      	cmp	r4, #88	; 0x58
 8009926:	d14d      	bne.n	80099c4 <_strtol_l.constprop.0+0xec>
 8009928:	786c      	ldrb	r4, [r5, #1]
 800992a:	2310      	movs	r3, #16
 800992c:	3502      	adds	r5, #2
 800992e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009932:	f108 38ff 	add.w	r8, r8, #4294967295
 8009936:	f04f 0c00 	mov.w	ip, #0
 800993a:	fbb8 f9f3 	udiv	r9, r8, r3
 800993e:	4666      	mov	r6, ip
 8009940:	fb03 8a19 	mls	sl, r3, r9, r8
 8009944:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009948:	f1be 0f09 	cmp.w	lr, #9
 800994c:	d816      	bhi.n	800997c <_strtol_l.constprop.0+0xa4>
 800994e:	4674      	mov	r4, lr
 8009950:	42a3      	cmp	r3, r4
 8009952:	dd24      	ble.n	800999e <_strtol_l.constprop.0+0xc6>
 8009954:	f1bc 0f00 	cmp.w	ip, #0
 8009958:	db1e      	blt.n	8009998 <_strtol_l.constprop.0+0xc0>
 800995a:	45b1      	cmp	r9, r6
 800995c:	d31c      	bcc.n	8009998 <_strtol_l.constprop.0+0xc0>
 800995e:	d101      	bne.n	8009964 <_strtol_l.constprop.0+0x8c>
 8009960:	45a2      	cmp	sl, r4
 8009962:	db19      	blt.n	8009998 <_strtol_l.constprop.0+0xc0>
 8009964:	fb06 4603 	mla	r6, r6, r3, r4
 8009968:	f04f 0c01 	mov.w	ip, #1
 800996c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009970:	e7e8      	b.n	8009944 <_strtol_l.constprop.0+0x6c>
 8009972:	2c2b      	cmp	r4, #43	; 0x2b
 8009974:	bf04      	itt	eq
 8009976:	782c      	ldrbeq	r4, [r5, #0]
 8009978:	1cb5      	addeq	r5, r6, #2
 800997a:	e7ca      	b.n	8009912 <_strtol_l.constprop.0+0x3a>
 800997c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009980:	f1be 0f19 	cmp.w	lr, #25
 8009984:	d801      	bhi.n	800998a <_strtol_l.constprop.0+0xb2>
 8009986:	3c37      	subs	r4, #55	; 0x37
 8009988:	e7e2      	b.n	8009950 <_strtol_l.constprop.0+0x78>
 800998a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800998e:	f1be 0f19 	cmp.w	lr, #25
 8009992:	d804      	bhi.n	800999e <_strtol_l.constprop.0+0xc6>
 8009994:	3c57      	subs	r4, #87	; 0x57
 8009996:	e7db      	b.n	8009950 <_strtol_l.constprop.0+0x78>
 8009998:	f04f 3cff 	mov.w	ip, #4294967295
 800999c:	e7e6      	b.n	800996c <_strtol_l.constprop.0+0x94>
 800999e:	f1bc 0f00 	cmp.w	ip, #0
 80099a2:	da05      	bge.n	80099b0 <_strtol_l.constprop.0+0xd8>
 80099a4:	2322      	movs	r3, #34	; 0x22
 80099a6:	6003      	str	r3, [r0, #0]
 80099a8:	4646      	mov	r6, r8
 80099aa:	b942      	cbnz	r2, 80099be <_strtol_l.constprop.0+0xe6>
 80099ac:	4630      	mov	r0, r6
 80099ae:	e79e      	b.n	80098ee <_strtol_l.constprop.0+0x16>
 80099b0:	b107      	cbz	r7, 80099b4 <_strtol_l.constprop.0+0xdc>
 80099b2:	4276      	negs	r6, r6
 80099b4:	2a00      	cmp	r2, #0
 80099b6:	d0f9      	beq.n	80099ac <_strtol_l.constprop.0+0xd4>
 80099b8:	f1bc 0f00 	cmp.w	ip, #0
 80099bc:	d000      	beq.n	80099c0 <_strtol_l.constprop.0+0xe8>
 80099be:	1e69      	subs	r1, r5, #1
 80099c0:	6011      	str	r1, [r2, #0]
 80099c2:	e7f3      	b.n	80099ac <_strtol_l.constprop.0+0xd4>
 80099c4:	2430      	movs	r4, #48	; 0x30
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d1b1      	bne.n	800992e <_strtol_l.constprop.0+0x56>
 80099ca:	2308      	movs	r3, #8
 80099cc:	e7af      	b.n	800992e <_strtol_l.constprop.0+0x56>
 80099ce:	2c30      	cmp	r4, #48	; 0x30
 80099d0:	d0a5      	beq.n	800991e <_strtol_l.constprop.0+0x46>
 80099d2:	230a      	movs	r3, #10
 80099d4:	e7ab      	b.n	800992e <_strtol_l.constprop.0+0x56>
 80099d6:	bf00      	nop
 80099d8:	0800cd09 	.word	0x0800cd09

080099dc <_strtol_r>:
 80099dc:	f7ff bf7c 	b.w	80098d8 <_strtol_l.constprop.0>

080099e0 <quorem>:
 80099e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e4:	6903      	ldr	r3, [r0, #16]
 80099e6:	690c      	ldr	r4, [r1, #16]
 80099e8:	42a3      	cmp	r3, r4
 80099ea:	4607      	mov	r7, r0
 80099ec:	f2c0 8081 	blt.w	8009af2 <quorem+0x112>
 80099f0:	3c01      	subs	r4, #1
 80099f2:	f101 0814 	add.w	r8, r1, #20
 80099f6:	f100 0514 	add.w	r5, r0, #20
 80099fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80099fe:	9301      	str	r3, [sp, #4]
 8009a00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009a04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a08:	3301      	adds	r3, #1
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009a10:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009a14:	fbb2 f6f3 	udiv	r6, r2, r3
 8009a18:	d331      	bcc.n	8009a7e <quorem+0x9e>
 8009a1a:	f04f 0e00 	mov.w	lr, #0
 8009a1e:	4640      	mov	r0, r8
 8009a20:	46ac      	mov	ip, r5
 8009a22:	46f2      	mov	sl, lr
 8009a24:	f850 2b04 	ldr.w	r2, [r0], #4
 8009a28:	b293      	uxth	r3, r2
 8009a2a:	fb06 e303 	mla	r3, r6, r3, lr
 8009a2e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	ebaa 0303 	sub.w	r3, sl, r3
 8009a38:	f8dc a000 	ldr.w	sl, [ip]
 8009a3c:	0c12      	lsrs	r2, r2, #16
 8009a3e:	fa13 f38a 	uxtah	r3, r3, sl
 8009a42:	fb06 e202 	mla	r2, r6, r2, lr
 8009a46:	9300      	str	r3, [sp, #0]
 8009a48:	9b00      	ldr	r3, [sp, #0]
 8009a4a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009a4e:	b292      	uxth	r2, r2
 8009a50:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009a54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a58:	f8bd 3000 	ldrh.w	r3, [sp]
 8009a5c:	4581      	cmp	r9, r0
 8009a5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a62:	f84c 3b04 	str.w	r3, [ip], #4
 8009a66:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009a6a:	d2db      	bcs.n	8009a24 <quorem+0x44>
 8009a6c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009a70:	b92b      	cbnz	r3, 8009a7e <quorem+0x9e>
 8009a72:	9b01      	ldr	r3, [sp, #4]
 8009a74:	3b04      	subs	r3, #4
 8009a76:	429d      	cmp	r5, r3
 8009a78:	461a      	mov	r2, r3
 8009a7a:	d32e      	bcc.n	8009ada <quorem+0xfa>
 8009a7c:	613c      	str	r4, [r7, #16]
 8009a7e:	4638      	mov	r0, r7
 8009a80:	f001 fc90 	bl	800b3a4 <__mcmp>
 8009a84:	2800      	cmp	r0, #0
 8009a86:	db24      	blt.n	8009ad2 <quorem+0xf2>
 8009a88:	3601      	adds	r6, #1
 8009a8a:	4628      	mov	r0, r5
 8009a8c:	f04f 0c00 	mov.w	ip, #0
 8009a90:	f858 2b04 	ldr.w	r2, [r8], #4
 8009a94:	f8d0 e000 	ldr.w	lr, [r0]
 8009a98:	b293      	uxth	r3, r2
 8009a9a:	ebac 0303 	sub.w	r3, ip, r3
 8009a9e:	0c12      	lsrs	r2, r2, #16
 8009aa0:	fa13 f38e 	uxtah	r3, r3, lr
 8009aa4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009aa8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009aac:	b29b      	uxth	r3, r3
 8009aae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ab2:	45c1      	cmp	r9, r8
 8009ab4:	f840 3b04 	str.w	r3, [r0], #4
 8009ab8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009abc:	d2e8      	bcs.n	8009a90 <quorem+0xb0>
 8009abe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ac2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ac6:	b922      	cbnz	r2, 8009ad2 <quorem+0xf2>
 8009ac8:	3b04      	subs	r3, #4
 8009aca:	429d      	cmp	r5, r3
 8009acc:	461a      	mov	r2, r3
 8009ace:	d30a      	bcc.n	8009ae6 <quorem+0x106>
 8009ad0:	613c      	str	r4, [r7, #16]
 8009ad2:	4630      	mov	r0, r6
 8009ad4:	b003      	add	sp, #12
 8009ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ada:	6812      	ldr	r2, [r2, #0]
 8009adc:	3b04      	subs	r3, #4
 8009ade:	2a00      	cmp	r2, #0
 8009ae0:	d1cc      	bne.n	8009a7c <quorem+0x9c>
 8009ae2:	3c01      	subs	r4, #1
 8009ae4:	e7c7      	b.n	8009a76 <quorem+0x96>
 8009ae6:	6812      	ldr	r2, [r2, #0]
 8009ae8:	3b04      	subs	r3, #4
 8009aea:	2a00      	cmp	r2, #0
 8009aec:	d1f0      	bne.n	8009ad0 <quorem+0xf0>
 8009aee:	3c01      	subs	r4, #1
 8009af0:	e7eb      	b.n	8009aca <quorem+0xea>
 8009af2:	2000      	movs	r0, #0
 8009af4:	e7ee      	b.n	8009ad4 <quorem+0xf4>
	...

08009af8 <_dtoa_r>:
 8009af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009afc:	ed2d 8b04 	vpush	{d8-d9}
 8009b00:	ec57 6b10 	vmov	r6, r7, d0
 8009b04:	b093      	sub	sp, #76	; 0x4c
 8009b06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009b08:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009b0c:	9106      	str	r1, [sp, #24]
 8009b0e:	ee10 aa10 	vmov	sl, s0
 8009b12:	4604      	mov	r4, r0
 8009b14:	9209      	str	r2, [sp, #36]	; 0x24
 8009b16:	930c      	str	r3, [sp, #48]	; 0x30
 8009b18:	46bb      	mov	fp, r7
 8009b1a:	b975      	cbnz	r5, 8009b3a <_dtoa_r+0x42>
 8009b1c:	2010      	movs	r0, #16
 8009b1e:	f001 f94d 	bl	800adbc <malloc>
 8009b22:	4602      	mov	r2, r0
 8009b24:	6260      	str	r0, [r4, #36]	; 0x24
 8009b26:	b920      	cbnz	r0, 8009b32 <_dtoa_r+0x3a>
 8009b28:	4ba7      	ldr	r3, [pc, #668]	; (8009dc8 <_dtoa_r+0x2d0>)
 8009b2a:	21ea      	movs	r1, #234	; 0xea
 8009b2c:	48a7      	ldr	r0, [pc, #668]	; (8009dcc <_dtoa_r+0x2d4>)
 8009b2e:	f002 f8bd 	bl	800bcac <__assert_func>
 8009b32:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009b36:	6005      	str	r5, [r0, #0]
 8009b38:	60c5      	str	r5, [r0, #12]
 8009b3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b3c:	6819      	ldr	r1, [r3, #0]
 8009b3e:	b151      	cbz	r1, 8009b56 <_dtoa_r+0x5e>
 8009b40:	685a      	ldr	r2, [r3, #4]
 8009b42:	604a      	str	r2, [r1, #4]
 8009b44:	2301      	movs	r3, #1
 8009b46:	4093      	lsls	r3, r2
 8009b48:	608b      	str	r3, [r1, #8]
 8009b4a:	4620      	mov	r0, r4
 8009b4c:	f001 f99e 	bl	800ae8c <_Bfree>
 8009b50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b52:	2200      	movs	r2, #0
 8009b54:	601a      	str	r2, [r3, #0]
 8009b56:	1e3b      	subs	r3, r7, #0
 8009b58:	bfaa      	itet	ge
 8009b5a:	2300      	movge	r3, #0
 8009b5c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009b60:	f8c8 3000 	strge.w	r3, [r8]
 8009b64:	4b9a      	ldr	r3, [pc, #616]	; (8009dd0 <_dtoa_r+0x2d8>)
 8009b66:	bfbc      	itt	lt
 8009b68:	2201      	movlt	r2, #1
 8009b6a:	f8c8 2000 	strlt.w	r2, [r8]
 8009b6e:	ea33 030b 	bics.w	r3, r3, fp
 8009b72:	d11b      	bne.n	8009bac <_dtoa_r+0xb4>
 8009b74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b76:	f242 730f 	movw	r3, #9999	; 0x270f
 8009b7a:	6013      	str	r3, [r2, #0]
 8009b7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b80:	4333      	orrs	r3, r6
 8009b82:	f000 8592 	beq.w	800a6aa <_dtoa_r+0xbb2>
 8009b86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b88:	b963      	cbnz	r3, 8009ba4 <_dtoa_r+0xac>
 8009b8a:	4b92      	ldr	r3, [pc, #584]	; (8009dd4 <_dtoa_r+0x2dc>)
 8009b8c:	e022      	b.n	8009bd4 <_dtoa_r+0xdc>
 8009b8e:	4b92      	ldr	r3, [pc, #584]	; (8009dd8 <_dtoa_r+0x2e0>)
 8009b90:	9301      	str	r3, [sp, #4]
 8009b92:	3308      	adds	r3, #8
 8009b94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009b96:	6013      	str	r3, [r2, #0]
 8009b98:	9801      	ldr	r0, [sp, #4]
 8009b9a:	b013      	add	sp, #76	; 0x4c
 8009b9c:	ecbd 8b04 	vpop	{d8-d9}
 8009ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ba4:	4b8b      	ldr	r3, [pc, #556]	; (8009dd4 <_dtoa_r+0x2dc>)
 8009ba6:	9301      	str	r3, [sp, #4]
 8009ba8:	3303      	adds	r3, #3
 8009baa:	e7f3      	b.n	8009b94 <_dtoa_r+0x9c>
 8009bac:	2200      	movs	r2, #0
 8009bae:	2300      	movs	r3, #0
 8009bb0:	4650      	mov	r0, sl
 8009bb2:	4659      	mov	r1, fp
 8009bb4:	f7f6 ff88 	bl	8000ac8 <__aeabi_dcmpeq>
 8009bb8:	ec4b ab19 	vmov	d9, sl, fp
 8009bbc:	4680      	mov	r8, r0
 8009bbe:	b158      	cbz	r0, 8009bd8 <_dtoa_r+0xe0>
 8009bc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	6013      	str	r3, [r2, #0]
 8009bc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	f000 856b 	beq.w	800a6a4 <_dtoa_r+0xbac>
 8009bce:	4883      	ldr	r0, [pc, #524]	; (8009ddc <_dtoa_r+0x2e4>)
 8009bd0:	6018      	str	r0, [r3, #0]
 8009bd2:	1e43      	subs	r3, r0, #1
 8009bd4:	9301      	str	r3, [sp, #4]
 8009bd6:	e7df      	b.n	8009b98 <_dtoa_r+0xa0>
 8009bd8:	ec4b ab10 	vmov	d0, sl, fp
 8009bdc:	aa10      	add	r2, sp, #64	; 0x40
 8009bde:	a911      	add	r1, sp, #68	; 0x44
 8009be0:	4620      	mov	r0, r4
 8009be2:	f001 fd01 	bl	800b5e8 <__d2b>
 8009be6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009bea:	ee08 0a10 	vmov	s16, r0
 8009bee:	2d00      	cmp	r5, #0
 8009bf0:	f000 8084 	beq.w	8009cfc <_dtoa_r+0x204>
 8009bf4:	ee19 3a90 	vmov	r3, s19
 8009bf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009bfc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009c00:	4656      	mov	r6, sl
 8009c02:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009c06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009c0a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009c0e:	4b74      	ldr	r3, [pc, #464]	; (8009de0 <_dtoa_r+0x2e8>)
 8009c10:	2200      	movs	r2, #0
 8009c12:	4630      	mov	r0, r6
 8009c14:	4639      	mov	r1, r7
 8009c16:	f7f6 fb37 	bl	8000288 <__aeabi_dsub>
 8009c1a:	a365      	add	r3, pc, #404	; (adr r3, 8009db0 <_dtoa_r+0x2b8>)
 8009c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c20:	f7f6 fcea 	bl	80005f8 <__aeabi_dmul>
 8009c24:	a364      	add	r3, pc, #400	; (adr r3, 8009db8 <_dtoa_r+0x2c0>)
 8009c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2a:	f7f6 fb2f 	bl	800028c <__adddf3>
 8009c2e:	4606      	mov	r6, r0
 8009c30:	4628      	mov	r0, r5
 8009c32:	460f      	mov	r7, r1
 8009c34:	f7f6 fc76 	bl	8000524 <__aeabi_i2d>
 8009c38:	a361      	add	r3, pc, #388	; (adr r3, 8009dc0 <_dtoa_r+0x2c8>)
 8009c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3e:	f7f6 fcdb 	bl	80005f8 <__aeabi_dmul>
 8009c42:	4602      	mov	r2, r0
 8009c44:	460b      	mov	r3, r1
 8009c46:	4630      	mov	r0, r6
 8009c48:	4639      	mov	r1, r7
 8009c4a:	f7f6 fb1f 	bl	800028c <__adddf3>
 8009c4e:	4606      	mov	r6, r0
 8009c50:	460f      	mov	r7, r1
 8009c52:	f7f6 ff81 	bl	8000b58 <__aeabi_d2iz>
 8009c56:	2200      	movs	r2, #0
 8009c58:	9000      	str	r0, [sp, #0]
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	4630      	mov	r0, r6
 8009c5e:	4639      	mov	r1, r7
 8009c60:	f7f6 ff3c 	bl	8000adc <__aeabi_dcmplt>
 8009c64:	b150      	cbz	r0, 8009c7c <_dtoa_r+0x184>
 8009c66:	9800      	ldr	r0, [sp, #0]
 8009c68:	f7f6 fc5c 	bl	8000524 <__aeabi_i2d>
 8009c6c:	4632      	mov	r2, r6
 8009c6e:	463b      	mov	r3, r7
 8009c70:	f7f6 ff2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c74:	b910      	cbnz	r0, 8009c7c <_dtoa_r+0x184>
 8009c76:	9b00      	ldr	r3, [sp, #0]
 8009c78:	3b01      	subs	r3, #1
 8009c7a:	9300      	str	r3, [sp, #0]
 8009c7c:	9b00      	ldr	r3, [sp, #0]
 8009c7e:	2b16      	cmp	r3, #22
 8009c80:	d85a      	bhi.n	8009d38 <_dtoa_r+0x240>
 8009c82:	9a00      	ldr	r2, [sp, #0]
 8009c84:	4b57      	ldr	r3, [pc, #348]	; (8009de4 <_dtoa_r+0x2ec>)
 8009c86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c8e:	ec51 0b19 	vmov	r0, r1, d9
 8009c92:	f7f6 ff23 	bl	8000adc <__aeabi_dcmplt>
 8009c96:	2800      	cmp	r0, #0
 8009c98:	d050      	beq.n	8009d3c <_dtoa_r+0x244>
 8009c9a:	9b00      	ldr	r3, [sp, #0]
 8009c9c:	3b01      	subs	r3, #1
 8009c9e:	9300      	str	r3, [sp, #0]
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ca4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ca6:	1b5d      	subs	r5, r3, r5
 8009ca8:	1e6b      	subs	r3, r5, #1
 8009caa:	9305      	str	r3, [sp, #20]
 8009cac:	bf45      	ittet	mi
 8009cae:	f1c5 0301 	rsbmi	r3, r5, #1
 8009cb2:	9304      	strmi	r3, [sp, #16]
 8009cb4:	2300      	movpl	r3, #0
 8009cb6:	2300      	movmi	r3, #0
 8009cb8:	bf4c      	ite	mi
 8009cba:	9305      	strmi	r3, [sp, #20]
 8009cbc:	9304      	strpl	r3, [sp, #16]
 8009cbe:	9b00      	ldr	r3, [sp, #0]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	db3d      	blt.n	8009d40 <_dtoa_r+0x248>
 8009cc4:	9b05      	ldr	r3, [sp, #20]
 8009cc6:	9a00      	ldr	r2, [sp, #0]
 8009cc8:	920a      	str	r2, [sp, #40]	; 0x28
 8009cca:	4413      	add	r3, r2
 8009ccc:	9305      	str	r3, [sp, #20]
 8009cce:	2300      	movs	r3, #0
 8009cd0:	9307      	str	r3, [sp, #28]
 8009cd2:	9b06      	ldr	r3, [sp, #24]
 8009cd4:	2b09      	cmp	r3, #9
 8009cd6:	f200 8089 	bhi.w	8009dec <_dtoa_r+0x2f4>
 8009cda:	2b05      	cmp	r3, #5
 8009cdc:	bfc4      	itt	gt
 8009cde:	3b04      	subgt	r3, #4
 8009ce0:	9306      	strgt	r3, [sp, #24]
 8009ce2:	9b06      	ldr	r3, [sp, #24]
 8009ce4:	f1a3 0302 	sub.w	r3, r3, #2
 8009ce8:	bfcc      	ite	gt
 8009cea:	2500      	movgt	r5, #0
 8009cec:	2501      	movle	r5, #1
 8009cee:	2b03      	cmp	r3, #3
 8009cf0:	f200 8087 	bhi.w	8009e02 <_dtoa_r+0x30a>
 8009cf4:	e8df f003 	tbb	[pc, r3]
 8009cf8:	59383a2d 	.word	0x59383a2d
 8009cfc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009d00:	441d      	add	r5, r3
 8009d02:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009d06:	2b20      	cmp	r3, #32
 8009d08:	bfc1      	itttt	gt
 8009d0a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009d0e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009d12:	fa0b f303 	lslgt.w	r3, fp, r3
 8009d16:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009d1a:	bfda      	itte	le
 8009d1c:	f1c3 0320 	rsble	r3, r3, #32
 8009d20:	fa06 f003 	lslle.w	r0, r6, r3
 8009d24:	4318      	orrgt	r0, r3
 8009d26:	f7f6 fbed 	bl	8000504 <__aeabi_ui2d>
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	4606      	mov	r6, r0
 8009d2e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009d32:	3d01      	subs	r5, #1
 8009d34:	930e      	str	r3, [sp, #56]	; 0x38
 8009d36:	e76a      	b.n	8009c0e <_dtoa_r+0x116>
 8009d38:	2301      	movs	r3, #1
 8009d3a:	e7b2      	b.n	8009ca2 <_dtoa_r+0x1aa>
 8009d3c:	900b      	str	r0, [sp, #44]	; 0x2c
 8009d3e:	e7b1      	b.n	8009ca4 <_dtoa_r+0x1ac>
 8009d40:	9b04      	ldr	r3, [sp, #16]
 8009d42:	9a00      	ldr	r2, [sp, #0]
 8009d44:	1a9b      	subs	r3, r3, r2
 8009d46:	9304      	str	r3, [sp, #16]
 8009d48:	4253      	negs	r3, r2
 8009d4a:	9307      	str	r3, [sp, #28]
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	930a      	str	r3, [sp, #40]	; 0x28
 8009d50:	e7bf      	b.n	8009cd2 <_dtoa_r+0x1da>
 8009d52:	2300      	movs	r3, #0
 8009d54:	9308      	str	r3, [sp, #32]
 8009d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	dc55      	bgt.n	8009e08 <_dtoa_r+0x310>
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009d62:	461a      	mov	r2, r3
 8009d64:	9209      	str	r2, [sp, #36]	; 0x24
 8009d66:	e00c      	b.n	8009d82 <_dtoa_r+0x28a>
 8009d68:	2301      	movs	r3, #1
 8009d6a:	e7f3      	b.n	8009d54 <_dtoa_r+0x25c>
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d70:	9308      	str	r3, [sp, #32]
 8009d72:	9b00      	ldr	r3, [sp, #0]
 8009d74:	4413      	add	r3, r2
 8009d76:	9302      	str	r3, [sp, #8]
 8009d78:	3301      	adds	r3, #1
 8009d7a:	2b01      	cmp	r3, #1
 8009d7c:	9303      	str	r3, [sp, #12]
 8009d7e:	bfb8      	it	lt
 8009d80:	2301      	movlt	r3, #1
 8009d82:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009d84:	2200      	movs	r2, #0
 8009d86:	6042      	str	r2, [r0, #4]
 8009d88:	2204      	movs	r2, #4
 8009d8a:	f102 0614 	add.w	r6, r2, #20
 8009d8e:	429e      	cmp	r6, r3
 8009d90:	6841      	ldr	r1, [r0, #4]
 8009d92:	d93d      	bls.n	8009e10 <_dtoa_r+0x318>
 8009d94:	4620      	mov	r0, r4
 8009d96:	f001 f839 	bl	800ae0c <_Balloc>
 8009d9a:	9001      	str	r0, [sp, #4]
 8009d9c:	2800      	cmp	r0, #0
 8009d9e:	d13b      	bne.n	8009e18 <_dtoa_r+0x320>
 8009da0:	4b11      	ldr	r3, [pc, #68]	; (8009de8 <_dtoa_r+0x2f0>)
 8009da2:	4602      	mov	r2, r0
 8009da4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009da8:	e6c0      	b.n	8009b2c <_dtoa_r+0x34>
 8009daa:	2301      	movs	r3, #1
 8009dac:	e7df      	b.n	8009d6e <_dtoa_r+0x276>
 8009dae:	bf00      	nop
 8009db0:	636f4361 	.word	0x636f4361
 8009db4:	3fd287a7 	.word	0x3fd287a7
 8009db8:	8b60c8b3 	.word	0x8b60c8b3
 8009dbc:	3fc68a28 	.word	0x3fc68a28
 8009dc0:	509f79fb 	.word	0x509f79fb
 8009dc4:	3fd34413 	.word	0x3fd34413
 8009dc8:	0800ce16 	.word	0x0800ce16
 8009dcc:	0800ce2d 	.word	0x0800ce2d
 8009dd0:	7ff00000 	.word	0x7ff00000
 8009dd4:	0800ce12 	.word	0x0800ce12
 8009dd8:	0800ce09 	.word	0x0800ce09
 8009ddc:	0800cc8d 	.word	0x0800cc8d
 8009de0:	3ff80000 	.word	0x3ff80000
 8009de4:	0800cf98 	.word	0x0800cf98
 8009de8:	0800ce88 	.word	0x0800ce88
 8009dec:	2501      	movs	r5, #1
 8009dee:	2300      	movs	r3, #0
 8009df0:	9306      	str	r3, [sp, #24]
 8009df2:	9508      	str	r5, [sp, #32]
 8009df4:	f04f 33ff 	mov.w	r3, #4294967295
 8009df8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	2312      	movs	r3, #18
 8009e00:	e7b0      	b.n	8009d64 <_dtoa_r+0x26c>
 8009e02:	2301      	movs	r3, #1
 8009e04:	9308      	str	r3, [sp, #32]
 8009e06:	e7f5      	b.n	8009df4 <_dtoa_r+0x2fc>
 8009e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e0a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009e0e:	e7b8      	b.n	8009d82 <_dtoa_r+0x28a>
 8009e10:	3101      	adds	r1, #1
 8009e12:	6041      	str	r1, [r0, #4]
 8009e14:	0052      	lsls	r2, r2, #1
 8009e16:	e7b8      	b.n	8009d8a <_dtoa_r+0x292>
 8009e18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e1a:	9a01      	ldr	r2, [sp, #4]
 8009e1c:	601a      	str	r2, [r3, #0]
 8009e1e:	9b03      	ldr	r3, [sp, #12]
 8009e20:	2b0e      	cmp	r3, #14
 8009e22:	f200 809d 	bhi.w	8009f60 <_dtoa_r+0x468>
 8009e26:	2d00      	cmp	r5, #0
 8009e28:	f000 809a 	beq.w	8009f60 <_dtoa_r+0x468>
 8009e2c:	9b00      	ldr	r3, [sp, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	dd32      	ble.n	8009e98 <_dtoa_r+0x3a0>
 8009e32:	4ab7      	ldr	r2, [pc, #732]	; (800a110 <_dtoa_r+0x618>)
 8009e34:	f003 030f 	and.w	r3, r3, #15
 8009e38:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009e3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e40:	9b00      	ldr	r3, [sp, #0]
 8009e42:	05d8      	lsls	r0, r3, #23
 8009e44:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009e48:	d516      	bpl.n	8009e78 <_dtoa_r+0x380>
 8009e4a:	4bb2      	ldr	r3, [pc, #712]	; (800a114 <_dtoa_r+0x61c>)
 8009e4c:	ec51 0b19 	vmov	r0, r1, d9
 8009e50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009e54:	f7f6 fcfa 	bl	800084c <__aeabi_ddiv>
 8009e58:	f007 070f 	and.w	r7, r7, #15
 8009e5c:	4682      	mov	sl, r0
 8009e5e:	468b      	mov	fp, r1
 8009e60:	2503      	movs	r5, #3
 8009e62:	4eac      	ldr	r6, [pc, #688]	; (800a114 <_dtoa_r+0x61c>)
 8009e64:	b957      	cbnz	r7, 8009e7c <_dtoa_r+0x384>
 8009e66:	4642      	mov	r2, r8
 8009e68:	464b      	mov	r3, r9
 8009e6a:	4650      	mov	r0, sl
 8009e6c:	4659      	mov	r1, fp
 8009e6e:	f7f6 fced 	bl	800084c <__aeabi_ddiv>
 8009e72:	4682      	mov	sl, r0
 8009e74:	468b      	mov	fp, r1
 8009e76:	e028      	b.n	8009eca <_dtoa_r+0x3d2>
 8009e78:	2502      	movs	r5, #2
 8009e7a:	e7f2      	b.n	8009e62 <_dtoa_r+0x36a>
 8009e7c:	07f9      	lsls	r1, r7, #31
 8009e7e:	d508      	bpl.n	8009e92 <_dtoa_r+0x39a>
 8009e80:	4640      	mov	r0, r8
 8009e82:	4649      	mov	r1, r9
 8009e84:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009e88:	f7f6 fbb6 	bl	80005f8 <__aeabi_dmul>
 8009e8c:	3501      	adds	r5, #1
 8009e8e:	4680      	mov	r8, r0
 8009e90:	4689      	mov	r9, r1
 8009e92:	107f      	asrs	r7, r7, #1
 8009e94:	3608      	adds	r6, #8
 8009e96:	e7e5      	b.n	8009e64 <_dtoa_r+0x36c>
 8009e98:	f000 809b 	beq.w	8009fd2 <_dtoa_r+0x4da>
 8009e9c:	9b00      	ldr	r3, [sp, #0]
 8009e9e:	4f9d      	ldr	r7, [pc, #628]	; (800a114 <_dtoa_r+0x61c>)
 8009ea0:	425e      	negs	r6, r3
 8009ea2:	4b9b      	ldr	r3, [pc, #620]	; (800a110 <_dtoa_r+0x618>)
 8009ea4:	f006 020f 	and.w	r2, r6, #15
 8009ea8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb0:	ec51 0b19 	vmov	r0, r1, d9
 8009eb4:	f7f6 fba0 	bl	80005f8 <__aeabi_dmul>
 8009eb8:	1136      	asrs	r6, r6, #4
 8009eba:	4682      	mov	sl, r0
 8009ebc:	468b      	mov	fp, r1
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	2502      	movs	r5, #2
 8009ec2:	2e00      	cmp	r6, #0
 8009ec4:	d17a      	bne.n	8009fbc <_dtoa_r+0x4c4>
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d1d3      	bne.n	8009e72 <_dtoa_r+0x37a>
 8009eca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	f000 8082 	beq.w	8009fd6 <_dtoa_r+0x4de>
 8009ed2:	4b91      	ldr	r3, [pc, #580]	; (800a118 <_dtoa_r+0x620>)
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	4650      	mov	r0, sl
 8009ed8:	4659      	mov	r1, fp
 8009eda:	f7f6 fdff 	bl	8000adc <__aeabi_dcmplt>
 8009ede:	2800      	cmp	r0, #0
 8009ee0:	d079      	beq.n	8009fd6 <_dtoa_r+0x4de>
 8009ee2:	9b03      	ldr	r3, [sp, #12]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d076      	beq.n	8009fd6 <_dtoa_r+0x4de>
 8009ee8:	9b02      	ldr	r3, [sp, #8]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	dd36      	ble.n	8009f5c <_dtoa_r+0x464>
 8009eee:	9b00      	ldr	r3, [sp, #0]
 8009ef0:	4650      	mov	r0, sl
 8009ef2:	4659      	mov	r1, fp
 8009ef4:	1e5f      	subs	r7, r3, #1
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	4b88      	ldr	r3, [pc, #544]	; (800a11c <_dtoa_r+0x624>)
 8009efa:	f7f6 fb7d 	bl	80005f8 <__aeabi_dmul>
 8009efe:	9e02      	ldr	r6, [sp, #8]
 8009f00:	4682      	mov	sl, r0
 8009f02:	468b      	mov	fp, r1
 8009f04:	3501      	adds	r5, #1
 8009f06:	4628      	mov	r0, r5
 8009f08:	f7f6 fb0c 	bl	8000524 <__aeabi_i2d>
 8009f0c:	4652      	mov	r2, sl
 8009f0e:	465b      	mov	r3, fp
 8009f10:	f7f6 fb72 	bl	80005f8 <__aeabi_dmul>
 8009f14:	4b82      	ldr	r3, [pc, #520]	; (800a120 <_dtoa_r+0x628>)
 8009f16:	2200      	movs	r2, #0
 8009f18:	f7f6 f9b8 	bl	800028c <__adddf3>
 8009f1c:	46d0      	mov	r8, sl
 8009f1e:	46d9      	mov	r9, fp
 8009f20:	4682      	mov	sl, r0
 8009f22:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009f26:	2e00      	cmp	r6, #0
 8009f28:	d158      	bne.n	8009fdc <_dtoa_r+0x4e4>
 8009f2a:	4b7e      	ldr	r3, [pc, #504]	; (800a124 <_dtoa_r+0x62c>)
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	4640      	mov	r0, r8
 8009f30:	4649      	mov	r1, r9
 8009f32:	f7f6 f9a9 	bl	8000288 <__aeabi_dsub>
 8009f36:	4652      	mov	r2, sl
 8009f38:	465b      	mov	r3, fp
 8009f3a:	4680      	mov	r8, r0
 8009f3c:	4689      	mov	r9, r1
 8009f3e:	f7f6 fdeb 	bl	8000b18 <__aeabi_dcmpgt>
 8009f42:	2800      	cmp	r0, #0
 8009f44:	f040 8295 	bne.w	800a472 <_dtoa_r+0x97a>
 8009f48:	4652      	mov	r2, sl
 8009f4a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009f4e:	4640      	mov	r0, r8
 8009f50:	4649      	mov	r1, r9
 8009f52:	f7f6 fdc3 	bl	8000adc <__aeabi_dcmplt>
 8009f56:	2800      	cmp	r0, #0
 8009f58:	f040 8289 	bne.w	800a46e <_dtoa_r+0x976>
 8009f5c:	ec5b ab19 	vmov	sl, fp, d9
 8009f60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	f2c0 8148 	blt.w	800a1f8 <_dtoa_r+0x700>
 8009f68:	9a00      	ldr	r2, [sp, #0]
 8009f6a:	2a0e      	cmp	r2, #14
 8009f6c:	f300 8144 	bgt.w	800a1f8 <_dtoa_r+0x700>
 8009f70:	4b67      	ldr	r3, [pc, #412]	; (800a110 <_dtoa_r+0x618>)
 8009f72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f76:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	f280 80d5 	bge.w	800a12c <_dtoa_r+0x634>
 8009f82:	9b03      	ldr	r3, [sp, #12]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	f300 80d1 	bgt.w	800a12c <_dtoa_r+0x634>
 8009f8a:	f040 826f 	bne.w	800a46c <_dtoa_r+0x974>
 8009f8e:	4b65      	ldr	r3, [pc, #404]	; (800a124 <_dtoa_r+0x62c>)
 8009f90:	2200      	movs	r2, #0
 8009f92:	4640      	mov	r0, r8
 8009f94:	4649      	mov	r1, r9
 8009f96:	f7f6 fb2f 	bl	80005f8 <__aeabi_dmul>
 8009f9a:	4652      	mov	r2, sl
 8009f9c:	465b      	mov	r3, fp
 8009f9e:	f7f6 fdb1 	bl	8000b04 <__aeabi_dcmpge>
 8009fa2:	9e03      	ldr	r6, [sp, #12]
 8009fa4:	4637      	mov	r7, r6
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	f040 8245 	bne.w	800a436 <_dtoa_r+0x93e>
 8009fac:	9d01      	ldr	r5, [sp, #4]
 8009fae:	2331      	movs	r3, #49	; 0x31
 8009fb0:	f805 3b01 	strb.w	r3, [r5], #1
 8009fb4:	9b00      	ldr	r3, [sp, #0]
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	9300      	str	r3, [sp, #0]
 8009fba:	e240      	b.n	800a43e <_dtoa_r+0x946>
 8009fbc:	07f2      	lsls	r2, r6, #31
 8009fbe:	d505      	bpl.n	8009fcc <_dtoa_r+0x4d4>
 8009fc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fc4:	f7f6 fb18 	bl	80005f8 <__aeabi_dmul>
 8009fc8:	3501      	adds	r5, #1
 8009fca:	2301      	movs	r3, #1
 8009fcc:	1076      	asrs	r6, r6, #1
 8009fce:	3708      	adds	r7, #8
 8009fd0:	e777      	b.n	8009ec2 <_dtoa_r+0x3ca>
 8009fd2:	2502      	movs	r5, #2
 8009fd4:	e779      	b.n	8009eca <_dtoa_r+0x3d2>
 8009fd6:	9f00      	ldr	r7, [sp, #0]
 8009fd8:	9e03      	ldr	r6, [sp, #12]
 8009fda:	e794      	b.n	8009f06 <_dtoa_r+0x40e>
 8009fdc:	9901      	ldr	r1, [sp, #4]
 8009fde:	4b4c      	ldr	r3, [pc, #304]	; (800a110 <_dtoa_r+0x618>)
 8009fe0:	4431      	add	r1, r6
 8009fe2:	910d      	str	r1, [sp, #52]	; 0x34
 8009fe4:	9908      	ldr	r1, [sp, #32]
 8009fe6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009fea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009fee:	2900      	cmp	r1, #0
 8009ff0:	d043      	beq.n	800a07a <_dtoa_r+0x582>
 8009ff2:	494d      	ldr	r1, [pc, #308]	; (800a128 <_dtoa_r+0x630>)
 8009ff4:	2000      	movs	r0, #0
 8009ff6:	f7f6 fc29 	bl	800084c <__aeabi_ddiv>
 8009ffa:	4652      	mov	r2, sl
 8009ffc:	465b      	mov	r3, fp
 8009ffe:	f7f6 f943 	bl	8000288 <__aeabi_dsub>
 800a002:	9d01      	ldr	r5, [sp, #4]
 800a004:	4682      	mov	sl, r0
 800a006:	468b      	mov	fp, r1
 800a008:	4649      	mov	r1, r9
 800a00a:	4640      	mov	r0, r8
 800a00c:	f7f6 fda4 	bl	8000b58 <__aeabi_d2iz>
 800a010:	4606      	mov	r6, r0
 800a012:	f7f6 fa87 	bl	8000524 <__aeabi_i2d>
 800a016:	4602      	mov	r2, r0
 800a018:	460b      	mov	r3, r1
 800a01a:	4640      	mov	r0, r8
 800a01c:	4649      	mov	r1, r9
 800a01e:	f7f6 f933 	bl	8000288 <__aeabi_dsub>
 800a022:	3630      	adds	r6, #48	; 0x30
 800a024:	f805 6b01 	strb.w	r6, [r5], #1
 800a028:	4652      	mov	r2, sl
 800a02a:	465b      	mov	r3, fp
 800a02c:	4680      	mov	r8, r0
 800a02e:	4689      	mov	r9, r1
 800a030:	f7f6 fd54 	bl	8000adc <__aeabi_dcmplt>
 800a034:	2800      	cmp	r0, #0
 800a036:	d163      	bne.n	800a100 <_dtoa_r+0x608>
 800a038:	4642      	mov	r2, r8
 800a03a:	464b      	mov	r3, r9
 800a03c:	4936      	ldr	r1, [pc, #216]	; (800a118 <_dtoa_r+0x620>)
 800a03e:	2000      	movs	r0, #0
 800a040:	f7f6 f922 	bl	8000288 <__aeabi_dsub>
 800a044:	4652      	mov	r2, sl
 800a046:	465b      	mov	r3, fp
 800a048:	f7f6 fd48 	bl	8000adc <__aeabi_dcmplt>
 800a04c:	2800      	cmp	r0, #0
 800a04e:	f040 80b5 	bne.w	800a1bc <_dtoa_r+0x6c4>
 800a052:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a054:	429d      	cmp	r5, r3
 800a056:	d081      	beq.n	8009f5c <_dtoa_r+0x464>
 800a058:	4b30      	ldr	r3, [pc, #192]	; (800a11c <_dtoa_r+0x624>)
 800a05a:	2200      	movs	r2, #0
 800a05c:	4650      	mov	r0, sl
 800a05e:	4659      	mov	r1, fp
 800a060:	f7f6 faca 	bl	80005f8 <__aeabi_dmul>
 800a064:	4b2d      	ldr	r3, [pc, #180]	; (800a11c <_dtoa_r+0x624>)
 800a066:	4682      	mov	sl, r0
 800a068:	468b      	mov	fp, r1
 800a06a:	4640      	mov	r0, r8
 800a06c:	4649      	mov	r1, r9
 800a06e:	2200      	movs	r2, #0
 800a070:	f7f6 fac2 	bl	80005f8 <__aeabi_dmul>
 800a074:	4680      	mov	r8, r0
 800a076:	4689      	mov	r9, r1
 800a078:	e7c6      	b.n	800a008 <_dtoa_r+0x510>
 800a07a:	4650      	mov	r0, sl
 800a07c:	4659      	mov	r1, fp
 800a07e:	f7f6 fabb 	bl	80005f8 <__aeabi_dmul>
 800a082:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a084:	9d01      	ldr	r5, [sp, #4]
 800a086:	930f      	str	r3, [sp, #60]	; 0x3c
 800a088:	4682      	mov	sl, r0
 800a08a:	468b      	mov	fp, r1
 800a08c:	4649      	mov	r1, r9
 800a08e:	4640      	mov	r0, r8
 800a090:	f7f6 fd62 	bl	8000b58 <__aeabi_d2iz>
 800a094:	4606      	mov	r6, r0
 800a096:	f7f6 fa45 	bl	8000524 <__aeabi_i2d>
 800a09a:	3630      	adds	r6, #48	; 0x30
 800a09c:	4602      	mov	r2, r0
 800a09e:	460b      	mov	r3, r1
 800a0a0:	4640      	mov	r0, r8
 800a0a2:	4649      	mov	r1, r9
 800a0a4:	f7f6 f8f0 	bl	8000288 <__aeabi_dsub>
 800a0a8:	f805 6b01 	strb.w	r6, [r5], #1
 800a0ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0ae:	429d      	cmp	r5, r3
 800a0b0:	4680      	mov	r8, r0
 800a0b2:	4689      	mov	r9, r1
 800a0b4:	f04f 0200 	mov.w	r2, #0
 800a0b8:	d124      	bne.n	800a104 <_dtoa_r+0x60c>
 800a0ba:	4b1b      	ldr	r3, [pc, #108]	; (800a128 <_dtoa_r+0x630>)
 800a0bc:	4650      	mov	r0, sl
 800a0be:	4659      	mov	r1, fp
 800a0c0:	f7f6 f8e4 	bl	800028c <__adddf3>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	460b      	mov	r3, r1
 800a0c8:	4640      	mov	r0, r8
 800a0ca:	4649      	mov	r1, r9
 800a0cc:	f7f6 fd24 	bl	8000b18 <__aeabi_dcmpgt>
 800a0d0:	2800      	cmp	r0, #0
 800a0d2:	d173      	bne.n	800a1bc <_dtoa_r+0x6c4>
 800a0d4:	4652      	mov	r2, sl
 800a0d6:	465b      	mov	r3, fp
 800a0d8:	4913      	ldr	r1, [pc, #76]	; (800a128 <_dtoa_r+0x630>)
 800a0da:	2000      	movs	r0, #0
 800a0dc:	f7f6 f8d4 	bl	8000288 <__aeabi_dsub>
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	460b      	mov	r3, r1
 800a0e4:	4640      	mov	r0, r8
 800a0e6:	4649      	mov	r1, r9
 800a0e8:	f7f6 fcf8 	bl	8000adc <__aeabi_dcmplt>
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	f43f af35 	beq.w	8009f5c <_dtoa_r+0x464>
 800a0f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a0f4:	1e6b      	subs	r3, r5, #1
 800a0f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a0f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a0fc:	2b30      	cmp	r3, #48	; 0x30
 800a0fe:	d0f8      	beq.n	800a0f2 <_dtoa_r+0x5fa>
 800a100:	9700      	str	r7, [sp, #0]
 800a102:	e049      	b.n	800a198 <_dtoa_r+0x6a0>
 800a104:	4b05      	ldr	r3, [pc, #20]	; (800a11c <_dtoa_r+0x624>)
 800a106:	f7f6 fa77 	bl	80005f8 <__aeabi_dmul>
 800a10a:	4680      	mov	r8, r0
 800a10c:	4689      	mov	r9, r1
 800a10e:	e7bd      	b.n	800a08c <_dtoa_r+0x594>
 800a110:	0800cf98 	.word	0x0800cf98
 800a114:	0800cf70 	.word	0x0800cf70
 800a118:	3ff00000 	.word	0x3ff00000
 800a11c:	40240000 	.word	0x40240000
 800a120:	401c0000 	.word	0x401c0000
 800a124:	40140000 	.word	0x40140000
 800a128:	3fe00000 	.word	0x3fe00000
 800a12c:	9d01      	ldr	r5, [sp, #4]
 800a12e:	4656      	mov	r6, sl
 800a130:	465f      	mov	r7, fp
 800a132:	4642      	mov	r2, r8
 800a134:	464b      	mov	r3, r9
 800a136:	4630      	mov	r0, r6
 800a138:	4639      	mov	r1, r7
 800a13a:	f7f6 fb87 	bl	800084c <__aeabi_ddiv>
 800a13e:	f7f6 fd0b 	bl	8000b58 <__aeabi_d2iz>
 800a142:	4682      	mov	sl, r0
 800a144:	f7f6 f9ee 	bl	8000524 <__aeabi_i2d>
 800a148:	4642      	mov	r2, r8
 800a14a:	464b      	mov	r3, r9
 800a14c:	f7f6 fa54 	bl	80005f8 <__aeabi_dmul>
 800a150:	4602      	mov	r2, r0
 800a152:	460b      	mov	r3, r1
 800a154:	4630      	mov	r0, r6
 800a156:	4639      	mov	r1, r7
 800a158:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a15c:	f7f6 f894 	bl	8000288 <__aeabi_dsub>
 800a160:	f805 6b01 	strb.w	r6, [r5], #1
 800a164:	9e01      	ldr	r6, [sp, #4]
 800a166:	9f03      	ldr	r7, [sp, #12]
 800a168:	1bae      	subs	r6, r5, r6
 800a16a:	42b7      	cmp	r7, r6
 800a16c:	4602      	mov	r2, r0
 800a16e:	460b      	mov	r3, r1
 800a170:	d135      	bne.n	800a1de <_dtoa_r+0x6e6>
 800a172:	f7f6 f88b 	bl	800028c <__adddf3>
 800a176:	4642      	mov	r2, r8
 800a178:	464b      	mov	r3, r9
 800a17a:	4606      	mov	r6, r0
 800a17c:	460f      	mov	r7, r1
 800a17e:	f7f6 fccb 	bl	8000b18 <__aeabi_dcmpgt>
 800a182:	b9d0      	cbnz	r0, 800a1ba <_dtoa_r+0x6c2>
 800a184:	4642      	mov	r2, r8
 800a186:	464b      	mov	r3, r9
 800a188:	4630      	mov	r0, r6
 800a18a:	4639      	mov	r1, r7
 800a18c:	f7f6 fc9c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a190:	b110      	cbz	r0, 800a198 <_dtoa_r+0x6a0>
 800a192:	f01a 0f01 	tst.w	sl, #1
 800a196:	d110      	bne.n	800a1ba <_dtoa_r+0x6c2>
 800a198:	4620      	mov	r0, r4
 800a19a:	ee18 1a10 	vmov	r1, s16
 800a19e:	f000 fe75 	bl	800ae8c <_Bfree>
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	9800      	ldr	r0, [sp, #0]
 800a1a6:	702b      	strb	r3, [r5, #0]
 800a1a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1aa:	3001      	adds	r0, #1
 800a1ac:	6018      	str	r0, [r3, #0]
 800a1ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	f43f acf1 	beq.w	8009b98 <_dtoa_r+0xa0>
 800a1b6:	601d      	str	r5, [r3, #0]
 800a1b8:	e4ee      	b.n	8009b98 <_dtoa_r+0xa0>
 800a1ba:	9f00      	ldr	r7, [sp, #0]
 800a1bc:	462b      	mov	r3, r5
 800a1be:	461d      	mov	r5, r3
 800a1c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a1c4:	2a39      	cmp	r2, #57	; 0x39
 800a1c6:	d106      	bne.n	800a1d6 <_dtoa_r+0x6de>
 800a1c8:	9a01      	ldr	r2, [sp, #4]
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d1f7      	bne.n	800a1be <_dtoa_r+0x6c6>
 800a1ce:	9901      	ldr	r1, [sp, #4]
 800a1d0:	2230      	movs	r2, #48	; 0x30
 800a1d2:	3701      	adds	r7, #1
 800a1d4:	700a      	strb	r2, [r1, #0]
 800a1d6:	781a      	ldrb	r2, [r3, #0]
 800a1d8:	3201      	adds	r2, #1
 800a1da:	701a      	strb	r2, [r3, #0]
 800a1dc:	e790      	b.n	800a100 <_dtoa_r+0x608>
 800a1de:	4ba6      	ldr	r3, [pc, #664]	; (800a478 <_dtoa_r+0x980>)
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	f7f6 fa09 	bl	80005f8 <__aeabi_dmul>
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	4606      	mov	r6, r0
 800a1ec:	460f      	mov	r7, r1
 800a1ee:	f7f6 fc6b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1f2:	2800      	cmp	r0, #0
 800a1f4:	d09d      	beq.n	800a132 <_dtoa_r+0x63a>
 800a1f6:	e7cf      	b.n	800a198 <_dtoa_r+0x6a0>
 800a1f8:	9a08      	ldr	r2, [sp, #32]
 800a1fa:	2a00      	cmp	r2, #0
 800a1fc:	f000 80d7 	beq.w	800a3ae <_dtoa_r+0x8b6>
 800a200:	9a06      	ldr	r2, [sp, #24]
 800a202:	2a01      	cmp	r2, #1
 800a204:	f300 80ba 	bgt.w	800a37c <_dtoa_r+0x884>
 800a208:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a20a:	2a00      	cmp	r2, #0
 800a20c:	f000 80b2 	beq.w	800a374 <_dtoa_r+0x87c>
 800a210:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a214:	9e07      	ldr	r6, [sp, #28]
 800a216:	9d04      	ldr	r5, [sp, #16]
 800a218:	9a04      	ldr	r2, [sp, #16]
 800a21a:	441a      	add	r2, r3
 800a21c:	9204      	str	r2, [sp, #16]
 800a21e:	9a05      	ldr	r2, [sp, #20]
 800a220:	2101      	movs	r1, #1
 800a222:	441a      	add	r2, r3
 800a224:	4620      	mov	r0, r4
 800a226:	9205      	str	r2, [sp, #20]
 800a228:	f000 ff32 	bl	800b090 <__i2b>
 800a22c:	4607      	mov	r7, r0
 800a22e:	2d00      	cmp	r5, #0
 800a230:	dd0c      	ble.n	800a24c <_dtoa_r+0x754>
 800a232:	9b05      	ldr	r3, [sp, #20]
 800a234:	2b00      	cmp	r3, #0
 800a236:	dd09      	ble.n	800a24c <_dtoa_r+0x754>
 800a238:	42ab      	cmp	r3, r5
 800a23a:	9a04      	ldr	r2, [sp, #16]
 800a23c:	bfa8      	it	ge
 800a23e:	462b      	movge	r3, r5
 800a240:	1ad2      	subs	r2, r2, r3
 800a242:	9204      	str	r2, [sp, #16]
 800a244:	9a05      	ldr	r2, [sp, #20]
 800a246:	1aed      	subs	r5, r5, r3
 800a248:	1ad3      	subs	r3, r2, r3
 800a24a:	9305      	str	r3, [sp, #20]
 800a24c:	9b07      	ldr	r3, [sp, #28]
 800a24e:	b31b      	cbz	r3, 800a298 <_dtoa_r+0x7a0>
 800a250:	9b08      	ldr	r3, [sp, #32]
 800a252:	2b00      	cmp	r3, #0
 800a254:	f000 80af 	beq.w	800a3b6 <_dtoa_r+0x8be>
 800a258:	2e00      	cmp	r6, #0
 800a25a:	dd13      	ble.n	800a284 <_dtoa_r+0x78c>
 800a25c:	4639      	mov	r1, r7
 800a25e:	4632      	mov	r2, r6
 800a260:	4620      	mov	r0, r4
 800a262:	f000 ffd5 	bl	800b210 <__pow5mult>
 800a266:	ee18 2a10 	vmov	r2, s16
 800a26a:	4601      	mov	r1, r0
 800a26c:	4607      	mov	r7, r0
 800a26e:	4620      	mov	r0, r4
 800a270:	f000 ff24 	bl	800b0bc <__multiply>
 800a274:	ee18 1a10 	vmov	r1, s16
 800a278:	4680      	mov	r8, r0
 800a27a:	4620      	mov	r0, r4
 800a27c:	f000 fe06 	bl	800ae8c <_Bfree>
 800a280:	ee08 8a10 	vmov	s16, r8
 800a284:	9b07      	ldr	r3, [sp, #28]
 800a286:	1b9a      	subs	r2, r3, r6
 800a288:	d006      	beq.n	800a298 <_dtoa_r+0x7a0>
 800a28a:	ee18 1a10 	vmov	r1, s16
 800a28e:	4620      	mov	r0, r4
 800a290:	f000 ffbe 	bl	800b210 <__pow5mult>
 800a294:	ee08 0a10 	vmov	s16, r0
 800a298:	2101      	movs	r1, #1
 800a29a:	4620      	mov	r0, r4
 800a29c:	f000 fef8 	bl	800b090 <__i2b>
 800a2a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	4606      	mov	r6, r0
 800a2a6:	f340 8088 	ble.w	800a3ba <_dtoa_r+0x8c2>
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	4601      	mov	r1, r0
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	f000 ffae 	bl	800b210 <__pow5mult>
 800a2b4:	9b06      	ldr	r3, [sp, #24]
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	4606      	mov	r6, r0
 800a2ba:	f340 8081 	ble.w	800a3c0 <_dtoa_r+0x8c8>
 800a2be:	f04f 0800 	mov.w	r8, #0
 800a2c2:	6933      	ldr	r3, [r6, #16]
 800a2c4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a2c8:	6918      	ldr	r0, [r3, #16]
 800a2ca:	f000 fe91 	bl	800aff0 <__hi0bits>
 800a2ce:	f1c0 0020 	rsb	r0, r0, #32
 800a2d2:	9b05      	ldr	r3, [sp, #20]
 800a2d4:	4418      	add	r0, r3
 800a2d6:	f010 001f 	ands.w	r0, r0, #31
 800a2da:	f000 8092 	beq.w	800a402 <_dtoa_r+0x90a>
 800a2de:	f1c0 0320 	rsb	r3, r0, #32
 800a2e2:	2b04      	cmp	r3, #4
 800a2e4:	f340 808a 	ble.w	800a3fc <_dtoa_r+0x904>
 800a2e8:	f1c0 001c 	rsb	r0, r0, #28
 800a2ec:	9b04      	ldr	r3, [sp, #16]
 800a2ee:	4403      	add	r3, r0
 800a2f0:	9304      	str	r3, [sp, #16]
 800a2f2:	9b05      	ldr	r3, [sp, #20]
 800a2f4:	4403      	add	r3, r0
 800a2f6:	4405      	add	r5, r0
 800a2f8:	9305      	str	r3, [sp, #20]
 800a2fa:	9b04      	ldr	r3, [sp, #16]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	dd07      	ble.n	800a310 <_dtoa_r+0x818>
 800a300:	ee18 1a10 	vmov	r1, s16
 800a304:	461a      	mov	r2, r3
 800a306:	4620      	mov	r0, r4
 800a308:	f000 ffdc 	bl	800b2c4 <__lshift>
 800a30c:	ee08 0a10 	vmov	s16, r0
 800a310:	9b05      	ldr	r3, [sp, #20]
 800a312:	2b00      	cmp	r3, #0
 800a314:	dd05      	ble.n	800a322 <_dtoa_r+0x82a>
 800a316:	4631      	mov	r1, r6
 800a318:	461a      	mov	r2, r3
 800a31a:	4620      	mov	r0, r4
 800a31c:	f000 ffd2 	bl	800b2c4 <__lshift>
 800a320:	4606      	mov	r6, r0
 800a322:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a324:	2b00      	cmp	r3, #0
 800a326:	d06e      	beq.n	800a406 <_dtoa_r+0x90e>
 800a328:	ee18 0a10 	vmov	r0, s16
 800a32c:	4631      	mov	r1, r6
 800a32e:	f001 f839 	bl	800b3a4 <__mcmp>
 800a332:	2800      	cmp	r0, #0
 800a334:	da67      	bge.n	800a406 <_dtoa_r+0x90e>
 800a336:	9b00      	ldr	r3, [sp, #0]
 800a338:	3b01      	subs	r3, #1
 800a33a:	ee18 1a10 	vmov	r1, s16
 800a33e:	9300      	str	r3, [sp, #0]
 800a340:	220a      	movs	r2, #10
 800a342:	2300      	movs	r3, #0
 800a344:	4620      	mov	r0, r4
 800a346:	f000 fdc3 	bl	800aed0 <__multadd>
 800a34a:	9b08      	ldr	r3, [sp, #32]
 800a34c:	ee08 0a10 	vmov	s16, r0
 800a350:	2b00      	cmp	r3, #0
 800a352:	f000 81b1 	beq.w	800a6b8 <_dtoa_r+0xbc0>
 800a356:	2300      	movs	r3, #0
 800a358:	4639      	mov	r1, r7
 800a35a:	220a      	movs	r2, #10
 800a35c:	4620      	mov	r0, r4
 800a35e:	f000 fdb7 	bl	800aed0 <__multadd>
 800a362:	9b02      	ldr	r3, [sp, #8]
 800a364:	2b00      	cmp	r3, #0
 800a366:	4607      	mov	r7, r0
 800a368:	f300 808e 	bgt.w	800a488 <_dtoa_r+0x990>
 800a36c:	9b06      	ldr	r3, [sp, #24]
 800a36e:	2b02      	cmp	r3, #2
 800a370:	dc51      	bgt.n	800a416 <_dtoa_r+0x91e>
 800a372:	e089      	b.n	800a488 <_dtoa_r+0x990>
 800a374:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a376:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a37a:	e74b      	b.n	800a214 <_dtoa_r+0x71c>
 800a37c:	9b03      	ldr	r3, [sp, #12]
 800a37e:	1e5e      	subs	r6, r3, #1
 800a380:	9b07      	ldr	r3, [sp, #28]
 800a382:	42b3      	cmp	r3, r6
 800a384:	bfbf      	itttt	lt
 800a386:	9b07      	ldrlt	r3, [sp, #28]
 800a388:	9607      	strlt	r6, [sp, #28]
 800a38a:	1af2      	sublt	r2, r6, r3
 800a38c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a38e:	bfb6      	itet	lt
 800a390:	189b      	addlt	r3, r3, r2
 800a392:	1b9e      	subge	r6, r3, r6
 800a394:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a396:	9b03      	ldr	r3, [sp, #12]
 800a398:	bfb8      	it	lt
 800a39a:	2600      	movlt	r6, #0
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	bfb7      	itett	lt
 800a3a0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a3a4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a3a8:	1a9d      	sublt	r5, r3, r2
 800a3aa:	2300      	movlt	r3, #0
 800a3ac:	e734      	b.n	800a218 <_dtoa_r+0x720>
 800a3ae:	9e07      	ldr	r6, [sp, #28]
 800a3b0:	9d04      	ldr	r5, [sp, #16]
 800a3b2:	9f08      	ldr	r7, [sp, #32]
 800a3b4:	e73b      	b.n	800a22e <_dtoa_r+0x736>
 800a3b6:	9a07      	ldr	r2, [sp, #28]
 800a3b8:	e767      	b.n	800a28a <_dtoa_r+0x792>
 800a3ba:	9b06      	ldr	r3, [sp, #24]
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	dc18      	bgt.n	800a3f2 <_dtoa_r+0x8fa>
 800a3c0:	f1ba 0f00 	cmp.w	sl, #0
 800a3c4:	d115      	bne.n	800a3f2 <_dtoa_r+0x8fa>
 800a3c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a3ca:	b993      	cbnz	r3, 800a3f2 <_dtoa_r+0x8fa>
 800a3cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a3d0:	0d1b      	lsrs	r3, r3, #20
 800a3d2:	051b      	lsls	r3, r3, #20
 800a3d4:	b183      	cbz	r3, 800a3f8 <_dtoa_r+0x900>
 800a3d6:	9b04      	ldr	r3, [sp, #16]
 800a3d8:	3301      	adds	r3, #1
 800a3da:	9304      	str	r3, [sp, #16]
 800a3dc:	9b05      	ldr	r3, [sp, #20]
 800a3de:	3301      	adds	r3, #1
 800a3e0:	9305      	str	r3, [sp, #20]
 800a3e2:	f04f 0801 	mov.w	r8, #1
 800a3e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	f47f af6a 	bne.w	800a2c2 <_dtoa_r+0x7ca>
 800a3ee:	2001      	movs	r0, #1
 800a3f0:	e76f      	b.n	800a2d2 <_dtoa_r+0x7da>
 800a3f2:	f04f 0800 	mov.w	r8, #0
 800a3f6:	e7f6      	b.n	800a3e6 <_dtoa_r+0x8ee>
 800a3f8:	4698      	mov	r8, r3
 800a3fa:	e7f4      	b.n	800a3e6 <_dtoa_r+0x8ee>
 800a3fc:	f43f af7d 	beq.w	800a2fa <_dtoa_r+0x802>
 800a400:	4618      	mov	r0, r3
 800a402:	301c      	adds	r0, #28
 800a404:	e772      	b.n	800a2ec <_dtoa_r+0x7f4>
 800a406:	9b03      	ldr	r3, [sp, #12]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	dc37      	bgt.n	800a47c <_dtoa_r+0x984>
 800a40c:	9b06      	ldr	r3, [sp, #24]
 800a40e:	2b02      	cmp	r3, #2
 800a410:	dd34      	ble.n	800a47c <_dtoa_r+0x984>
 800a412:	9b03      	ldr	r3, [sp, #12]
 800a414:	9302      	str	r3, [sp, #8]
 800a416:	9b02      	ldr	r3, [sp, #8]
 800a418:	b96b      	cbnz	r3, 800a436 <_dtoa_r+0x93e>
 800a41a:	4631      	mov	r1, r6
 800a41c:	2205      	movs	r2, #5
 800a41e:	4620      	mov	r0, r4
 800a420:	f000 fd56 	bl	800aed0 <__multadd>
 800a424:	4601      	mov	r1, r0
 800a426:	4606      	mov	r6, r0
 800a428:	ee18 0a10 	vmov	r0, s16
 800a42c:	f000 ffba 	bl	800b3a4 <__mcmp>
 800a430:	2800      	cmp	r0, #0
 800a432:	f73f adbb 	bgt.w	8009fac <_dtoa_r+0x4b4>
 800a436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a438:	9d01      	ldr	r5, [sp, #4]
 800a43a:	43db      	mvns	r3, r3
 800a43c:	9300      	str	r3, [sp, #0]
 800a43e:	f04f 0800 	mov.w	r8, #0
 800a442:	4631      	mov	r1, r6
 800a444:	4620      	mov	r0, r4
 800a446:	f000 fd21 	bl	800ae8c <_Bfree>
 800a44a:	2f00      	cmp	r7, #0
 800a44c:	f43f aea4 	beq.w	800a198 <_dtoa_r+0x6a0>
 800a450:	f1b8 0f00 	cmp.w	r8, #0
 800a454:	d005      	beq.n	800a462 <_dtoa_r+0x96a>
 800a456:	45b8      	cmp	r8, r7
 800a458:	d003      	beq.n	800a462 <_dtoa_r+0x96a>
 800a45a:	4641      	mov	r1, r8
 800a45c:	4620      	mov	r0, r4
 800a45e:	f000 fd15 	bl	800ae8c <_Bfree>
 800a462:	4639      	mov	r1, r7
 800a464:	4620      	mov	r0, r4
 800a466:	f000 fd11 	bl	800ae8c <_Bfree>
 800a46a:	e695      	b.n	800a198 <_dtoa_r+0x6a0>
 800a46c:	2600      	movs	r6, #0
 800a46e:	4637      	mov	r7, r6
 800a470:	e7e1      	b.n	800a436 <_dtoa_r+0x93e>
 800a472:	9700      	str	r7, [sp, #0]
 800a474:	4637      	mov	r7, r6
 800a476:	e599      	b.n	8009fac <_dtoa_r+0x4b4>
 800a478:	40240000 	.word	0x40240000
 800a47c:	9b08      	ldr	r3, [sp, #32]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	f000 80ca 	beq.w	800a618 <_dtoa_r+0xb20>
 800a484:	9b03      	ldr	r3, [sp, #12]
 800a486:	9302      	str	r3, [sp, #8]
 800a488:	2d00      	cmp	r5, #0
 800a48a:	dd05      	ble.n	800a498 <_dtoa_r+0x9a0>
 800a48c:	4639      	mov	r1, r7
 800a48e:	462a      	mov	r2, r5
 800a490:	4620      	mov	r0, r4
 800a492:	f000 ff17 	bl	800b2c4 <__lshift>
 800a496:	4607      	mov	r7, r0
 800a498:	f1b8 0f00 	cmp.w	r8, #0
 800a49c:	d05b      	beq.n	800a556 <_dtoa_r+0xa5e>
 800a49e:	6879      	ldr	r1, [r7, #4]
 800a4a0:	4620      	mov	r0, r4
 800a4a2:	f000 fcb3 	bl	800ae0c <_Balloc>
 800a4a6:	4605      	mov	r5, r0
 800a4a8:	b928      	cbnz	r0, 800a4b6 <_dtoa_r+0x9be>
 800a4aa:	4b87      	ldr	r3, [pc, #540]	; (800a6c8 <_dtoa_r+0xbd0>)
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a4b2:	f7ff bb3b 	b.w	8009b2c <_dtoa_r+0x34>
 800a4b6:	693a      	ldr	r2, [r7, #16]
 800a4b8:	3202      	adds	r2, #2
 800a4ba:	0092      	lsls	r2, r2, #2
 800a4bc:	f107 010c 	add.w	r1, r7, #12
 800a4c0:	300c      	adds	r0, #12
 800a4c2:	f000 fc95 	bl	800adf0 <memcpy>
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	4629      	mov	r1, r5
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	f000 fefa 	bl	800b2c4 <__lshift>
 800a4d0:	9b01      	ldr	r3, [sp, #4]
 800a4d2:	f103 0901 	add.w	r9, r3, #1
 800a4d6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a4da:	4413      	add	r3, r2
 800a4dc:	9305      	str	r3, [sp, #20]
 800a4de:	f00a 0301 	and.w	r3, sl, #1
 800a4e2:	46b8      	mov	r8, r7
 800a4e4:	9304      	str	r3, [sp, #16]
 800a4e6:	4607      	mov	r7, r0
 800a4e8:	4631      	mov	r1, r6
 800a4ea:	ee18 0a10 	vmov	r0, s16
 800a4ee:	f7ff fa77 	bl	80099e0 <quorem>
 800a4f2:	4641      	mov	r1, r8
 800a4f4:	9002      	str	r0, [sp, #8]
 800a4f6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a4fa:	ee18 0a10 	vmov	r0, s16
 800a4fe:	f000 ff51 	bl	800b3a4 <__mcmp>
 800a502:	463a      	mov	r2, r7
 800a504:	9003      	str	r0, [sp, #12]
 800a506:	4631      	mov	r1, r6
 800a508:	4620      	mov	r0, r4
 800a50a:	f000 ff67 	bl	800b3dc <__mdiff>
 800a50e:	68c2      	ldr	r2, [r0, #12]
 800a510:	f109 3bff 	add.w	fp, r9, #4294967295
 800a514:	4605      	mov	r5, r0
 800a516:	bb02      	cbnz	r2, 800a55a <_dtoa_r+0xa62>
 800a518:	4601      	mov	r1, r0
 800a51a:	ee18 0a10 	vmov	r0, s16
 800a51e:	f000 ff41 	bl	800b3a4 <__mcmp>
 800a522:	4602      	mov	r2, r0
 800a524:	4629      	mov	r1, r5
 800a526:	4620      	mov	r0, r4
 800a528:	9207      	str	r2, [sp, #28]
 800a52a:	f000 fcaf 	bl	800ae8c <_Bfree>
 800a52e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a532:	ea43 0102 	orr.w	r1, r3, r2
 800a536:	9b04      	ldr	r3, [sp, #16]
 800a538:	430b      	orrs	r3, r1
 800a53a:	464d      	mov	r5, r9
 800a53c:	d10f      	bne.n	800a55e <_dtoa_r+0xa66>
 800a53e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a542:	d02a      	beq.n	800a59a <_dtoa_r+0xaa2>
 800a544:	9b03      	ldr	r3, [sp, #12]
 800a546:	2b00      	cmp	r3, #0
 800a548:	dd02      	ble.n	800a550 <_dtoa_r+0xa58>
 800a54a:	9b02      	ldr	r3, [sp, #8]
 800a54c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a550:	f88b a000 	strb.w	sl, [fp]
 800a554:	e775      	b.n	800a442 <_dtoa_r+0x94a>
 800a556:	4638      	mov	r0, r7
 800a558:	e7ba      	b.n	800a4d0 <_dtoa_r+0x9d8>
 800a55a:	2201      	movs	r2, #1
 800a55c:	e7e2      	b.n	800a524 <_dtoa_r+0xa2c>
 800a55e:	9b03      	ldr	r3, [sp, #12]
 800a560:	2b00      	cmp	r3, #0
 800a562:	db04      	blt.n	800a56e <_dtoa_r+0xa76>
 800a564:	9906      	ldr	r1, [sp, #24]
 800a566:	430b      	orrs	r3, r1
 800a568:	9904      	ldr	r1, [sp, #16]
 800a56a:	430b      	orrs	r3, r1
 800a56c:	d122      	bne.n	800a5b4 <_dtoa_r+0xabc>
 800a56e:	2a00      	cmp	r2, #0
 800a570:	ddee      	ble.n	800a550 <_dtoa_r+0xa58>
 800a572:	ee18 1a10 	vmov	r1, s16
 800a576:	2201      	movs	r2, #1
 800a578:	4620      	mov	r0, r4
 800a57a:	f000 fea3 	bl	800b2c4 <__lshift>
 800a57e:	4631      	mov	r1, r6
 800a580:	ee08 0a10 	vmov	s16, r0
 800a584:	f000 ff0e 	bl	800b3a4 <__mcmp>
 800a588:	2800      	cmp	r0, #0
 800a58a:	dc03      	bgt.n	800a594 <_dtoa_r+0xa9c>
 800a58c:	d1e0      	bne.n	800a550 <_dtoa_r+0xa58>
 800a58e:	f01a 0f01 	tst.w	sl, #1
 800a592:	d0dd      	beq.n	800a550 <_dtoa_r+0xa58>
 800a594:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a598:	d1d7      	bne.n	800a54a <_dtoa_r+0xa52>
 800a59a:	2339      	movs	r3, #57	; 0x39
 800a59c:	f88b 3000 	strb.w	r3, [fp]
 800a5a0:	462b      	mov	r3, r5
 800a5a2:	461d      	mov	r5, r3
 800a5a4:	3b01      	subs	r3, #1
 800a5a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a5aa:	2a39      	cmp	r2, #57	; 0x39
 800a5ac:	d071      	beq.n	800a692 <_dtoa_r+0xb9a>
 800a5ae:	3201      	adds	r2, #1
 800a5b0:	701a      	strb	r2, [r3, #0]
 800a5b2:	e746      	b.n	800a442 <_dtoa_r+0x94a>
 800a5b4:	2a00      	cmp	r2, #0
 800a5b6:	dd07      	ble.n	800a5c8 <_dtoa_r+0xad0>
 800a5b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a5bc:	d0ed      	beq.n	800a59a <_dtoa_r+0xaa2>
 800a5be:	f10a 0301 	add.w	r3, sl, #1
 800a5c2:	f88b 3000 	strb.w	r3, [fp]
 800a5c6:	e73c      	b.n	800a442 <_dtoa_r+0x94a>
 800a5c8:	9b05      	ldr	r3, [sp, #20]
 800a5ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a5ce:	4599      	cmp	r9, r3
 800a5d0:	d047      	beq.n	800a662 <_dtoa_r+0xb6a>
 800a5d2:	ee18 1a10 	vmov	r1, s16
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	220a      	movs	r2, #10
 800a5da:	4620      	mov	r0, r4
 800a5dc:	f000 fc78 	bl	800aed0 <__multadd>
 800a5e0:	45b8      	cmp	r8, r7
 800a5e2:	ee08 0a10 	vmov	s16, r0
 800a5e6:	f04f 0300 	mov.w	r3, #0
 800a5ea:	f04f 020a 	mov.w	r2, #10
 800a5ee:	4641      	mov	r1, r8
 800a5f0:	4620      	mov	r0, r4
 800a5f2:	d106      	bne.n	800a602 <_dtoa_r+0xb0a>
 800a5f4:	f000 fc6c 	bl	800aed0 <__multadd>
 800a5f8:	4680      	mov	r8, r0
 800a5fa:	4607      	mov	r7, r0
 800a5fc:	f109 0901 	add.w	r9, r9, #1
 800a600:	e772      	b.n	800a4e8 <_dtoa_r+0x9f0>
 800a602:	f000 fc65 	bl	800aed0 <__multadd>
 800a606:	4639      	mov	r1, r7
 800a608:	4680      	mov	r8, r0
 800a60a:	2300      	movs	r3, #0
 800a60c:	220a      	movs	r2, #10
 800a60e:	4620      	mov	r0, r4
 800a610:	f000 fc5e 	bl	800aed0 <__multadd>
 800a614:	4607      	mov	r7, r0
 800a616:	e7f1      	b.n	800a5fc <_dtoa_r+0xb04>
 800a618:	9b03      	ldr	r3, [sp, #12]
 800a61a:	9302      	str	r3, [sp, #8]
 800a61c:	9d01      	ldr	r5, [sp, #4]
 800a61e:	ee18 0a10 	vmov	r0, s16
 800a622:	4631      	mov	r1, r6
 800a624:	f7ff f9dc 	bl	80099e0 <quorem>
 800a628:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a62c:	9b01      	ldr	r3, [sp, #4]
 800a62e:	f805 ab01 	strb.w	sl, [r5], #1
 800a632:	1aea      	subs	r2, r5, r3
 800a634:	9b02      	ldr	r3, [sp, #8]
 800a636:	4293      	cmp	r3, r2
 800a638:	dd09      	ble.n	800a64e <_dtoa_r+0xb56>
 800a63a:	ee18 1a10 	vmov	r1, s16
 800a63e:	2300      	movs	r3, #0
 800a640:	220a      	movs	r2, #10
 800a642:	4620      	mov	r0, r4
 800a644:	f000 fc44 	bl	800aed0 <__multadd>
 800a648:	ee08 0a10 	vmov	s16, r0
 800a64c:	e7e7      	b.n	800a61e <_dtoa_r+0xb26>
 800a64e:	9b02      	ldr	r3, [sp, #8]
 800a650:	2b00      	cmp	r3, #0
 800a652:	bfc8      	it	gt
 800a654:	461d      	movgt	r5, r3
 800a656:	9b01      	ldr	r3, [sp, #4]
 800a658:	bfd8      	it	le
 800a65a:	2501      	movle	r5, #1
 800a65c:	441d      	add	r5, r3
 800a65e:	f04f 0800 	mov.w	r8, #0
 800a662:	ee18 1a10 	vmov	r1, s16
 800a666:	2201      	movs	r2, #1
 800a668:	4620      	mov	r0, r4
 800a66a:	f000 fe2b 	bl	800b2c4 <__lshift>
 800a66e:	4631      	mov	r1, r6
 800a670:	ee08 0a10 	vmov	s16, r0
 800a674:	f000 fe96 	bl	800b3a4 <__mcmp>
 800a678:	2800      	cmp	r0, #0
 800a67a:	dc91      	bgt.n	800a5a0 <_dtoa_r+0xaa8>
 800a67c:	d102      	bne.n	800a684 <_dtoa_r+0xb8c>
 800a67e:	f01a 0f01 	tst.w	sl, #1
 800a682:	d18d      	bne.n	800a5a0 <_dtoa_r+0xaa8>
 800a684:	462b      	mov	r3, r5
 800a686:	461d      	mov	r5, r3
 800a688:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a68c:	2a30      	cmp	r2, #48	; 0x30
 800a68e:	d0fa      	beq.n	800a686 <_dtoa_r+0xb8e>
 800a690:	e6d7      	b.n	800a442 <_dtoa_r+0x94a>
 800a692:	9a01      	ldr	r2, [sp, #4]
 800a694:	429a      	cmp	r2, r3
 800a696:	d184      	bne.n	800a5a2 <_dtoa_r+0xaaa>
 800a698:	9b00      	ldr	r3, [sp, #0]
 800a69a:	3301      	adds	r3, #1
 800a69c:	9300      	str	r3, [sp, #0]
 800a69e:	2331      	movs	r3, #49	; 0x31
 800a6a0:	7013      	strb	r3, [r2, #0]
 800a6a2:	e6ce      	b.n	800a442 <_dtoa_r+0x94a>
 800a6a4:	4b09      	ldr	r3, [pc, #36]	; (800a6cc <_dtoa_r+0xbd4>)
 800a6a6:	f7ff ba95 	b.w	8009bd4 <_dtoa_r+0xdc>
 800a6aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	f47f aa6e 	bne.w	8009b8e <_dtoa_r+0x96>
 800a6b2:	4b07      	ldr	r3, [pc, #28]	; (800a6d0 <_dtoa_r+0xbd8>)
 800a6b4:	f7ff ba8e 	b.w	8009bd4 <_dtoa_r+0xdc>
 800a6b8:	9b02      	ldr	r3, [sp, #8]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	dcae      	bgt.n	800a61c <_dtoa_r+0xb24>
 800a6be:	9b06      	ldr	r3, [sp, #24]
 800a6c0:	2b02      	cmp	r3, #2
 800a6c2:	f73f aea8 	bgt.w	800a416 <_dtoa_r+0x91e>
 800a6c6:	e7a9      	b.n	800a61c <_dtoa_r+0xb24>
 800a6c8:	0800ce88 	.word	0x0800ce88
 800a6cc:	0800cc8c 	.word	0x0800cc8c
 800a6d0:	0800ce09 	.word	0x0800ce09

0800a6d4 <rshift>:
 800a6d4:	6903      	ldr	r3, [r0, #16]
 800a6d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a6da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a6de:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a6e2:	f100 0414 	add.w	r4, r0, #20
 800a6e6:	dd45      	ble.n	800a774 <rshift+0xa0>
 800a6e8:	f011 011f 	ands.w	r1, r1, #31
 800a6ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a6f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a6f4:	d10c      	bne.n	800a710 <rshift+0x3c>
 800a6f6:	f100 0710 	add.w	r7, r0, #16
 800a6fa:	4629      	mov	r1, r5
 800a6fc:	42b1      	cmp	r1, r6
 800a6fe:	d334      	bcc.n	800a76a <rshift+0x96>
 800a700:	1a9b      	subs	r3, r3, r2
 800a702:	009b      	lsls	r3, r3, #2
 800a704:	1eea      	subs	r2, r5, #3
 800a706:	4296      	cmp	r6, r2
 800a708:	bf38      	it	cc
 800a70a:	2300      	movcc	r3, #0
 800a70c:	4423      	add	r3, r4
 800a70e:	e015      	b.n	800a73c <rshift+0x68>
 800a710:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a714:	f1c1 0820 	rsb	r8, r1, #32
 800a718:	40cf      	lsrs	r7, r1
 800a71a:	f105 0e04 	add.w	lr, r5, #4
 800a71e:	46a1      	mov	r9, r4
 800a720:	4576      	cmp	r6, lr
 800a722:	46f4      	mov	ip, lr
 800a724:	d815      	bhi.n	800a752 <rshift+0x7e>
 800a726:	1a9a      	subs	r2, r3, r2
 800a728:	0092      	lsls	r2, r2, #2
 800a72a:	3a04      	subs	r2, #4
 800a72c:	3501      	adds	r5, #1
 800a72e:	42ae      	cmp	r6, r5
 800a730:	bf38      	it	cc
 800a732:	2200      	movcc	r2, #0
 800a734:	18a3      	adds	r3, r4, r2
 800a736:	50a7      	str	r7, [r4, r2]
 800a738:	b107      	cbz	r7, 800a73c <rshift+0x68>
 800a73a:	3304      	adds	r3, #4
 800a73c:	1b1a      	subs	r2, r3, r4
 800a73e:	42a3      	cmp	r3, r4
 800a740:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a744:	bf08      	it	eq
 800a746:	2300      	moveq	r3, #0
 800a748:	6102      	str	r2, [r0, #16]
 800a74a:	bf08      	it	eq
 800a74c:	6143      	streq	r3, [r0, #20]
 800a74e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a752:	f8dc c000 	ldr.w	ip, [ip]
 800a756:	fa0c fc08 	lsl.w	ip, ip, r8
 800a75a:	ea4c 0707 	orr.w	r7, ip, r7
 800a75e:	f849 7b04 	str.w	r7, [r9], #4
 800a762:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a766:	40cf      	lsrs	r7, r1
 800a768:	e7da      	b.n	800a720 <rshift+0x4c>
 800a76a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a76e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a772:	e7c3      	b.n	800a6fc <rshift+0x28>
 800a774:	4623      	mov	r3, r4
 800a776:	e7e1      	b.n	800a73c <rshift+0x68>

0800a778 <__hexdig_fun>:
 800a778:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a77c:	2b09      	cmp	r3, #9
 800a77e:	d802      	bhi.n	800a786 <__hexdig_fun+0xe>
 800a780:	3820      	subs	r0, #32
 800a782:	b2c0      	uxtb	r0, r0
 800a784:	4770      	bx	lr
 800a786:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a78a:	2b05      	cmp	r3, #5
 800a78c:	d801      	bhi.n	800a792 <__hexdig_fun+0x1a>
 800a78e:	3847      	subs	r0, #71	; 0x47
 800a790:	e7f7      	b.n	800a782 <__hexdig_fun+0xa>
 800a792:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a796:	2b05      	cmp	r3, #5
 800a798:	d801      	bhi.n	800a79e <__hexdig_fun+0x26>
 800a79a:	3827      	subs	r0, #39	; 0x27
 800a79c:	e7f1      	b.n	800a782 <__hexdig_fun+0xa>
 800a79e:	2000      	movs	r0, #0
 800a7a0:	4770      	bx	lr
	...

0800a7a4 <__gethex>:
 800a7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7a8:	ed2d 8b02 	vpush	{d8}
 800a7ac:	b089      	sub	sp, #36	; 0x24
 800a7ae:	ee08 0a10 	vmov	s16, r0
 800a7b2:	9304      	str	r3, [sp, #16]
 800a7b4:	4bb4      	ldr	r3, [pc, #720]	; (800aa88 <__gethex+0x2e4>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	9301      	str	r3, [sp, #4]
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	468b      	mov	fp, r1
 800a7be:	4690      	mov	r8, r2
 800a7c0:	f7f5 fd06 	bl	80001d0 <strlen>
 800a7c4:	9b01      	ldr	r3, [sp, #4]
 800a7c6:	f8db 2000 	ldr.w	r2, [fp]
 800a7ca:	4403      	add	r3, r0
 800a7cc:	4682      	mov	sl, r0
 800a7ce:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a7d2:	9305      	str	r3, [sp, #20]
 800a7d4:	1c93      	adds	r3, r2, #2
 800a7d6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a7da:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a7de:	32fe      	adds	r2, #254	; 0xfe
 800a7e0:	18d1      	adds	r1, r2, r3
 800a7e2:	461f      	mov	r7, r3
 800a7e4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a7e8:	9100      	str	r1, [sp, #0]
 800a7ea:	2830      	cmp	r0, #48	; 0x30
 800a7ec:	d0f8      	beq.n	800a7e0 <__gethex+0x3c>
 800a7ee:	f7ff ffc3 	bl	800a778 <__hexdig_fun>
 800a7f2:	4604      	mov	r4, r0
 800a7f4:	2800      	cmp	r0, #0
 800a7f6:	d13a      	bne.n	800a86e <__gethex+0xca>
 800a7f8:	9901      	ldr	r1, [sp, #4]
 800a7fa:	4652      	mov	r2, sl
 800a7fc:	4638      	mov	r0, r7
 800a7fe:	f001 fa33 	bl	800bc68 <strncmp>
 800a802:	4605      	mov	r5, r0
 800a804:	2800      	cmp	r0, #0
 800a806:	d168      	bne.n	800a8da <__gethex+0x136>
 800a808:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a80c:	eb07 060a 	add.w	r6, r7, sl
 800a810:	f7ff ffb2 	bl	800a778 <__hexdig_fun>
 800a814:	2800      	cmp	r0, #0
 800a816:	d062      	beq.n	800a8de <__gethex+0x13a>
 800a818:	4633      	mov	r3, r6
 800a81a:	7818      	ldrb	r0, [r3, #0]
 800a81c:	2830      	cmp	r0, #48	; 0x30
 800a81e:	461f      	mov	r7, r3
 800a820:	f103 0301 	add.w	r3, r3, #1
 800a824:	d0f9      	beq.n	800a81a <__gethex+0x76>
 800a826:	f7ff ffa7 	bl	800a778 <__hexdig_fun>
 800a82a:	2301      	movs	r3, #1
 800a82c:	fab0 f480 	clz	r4, r0
 800a830:	0964      	lsrs	r4, r4, #5
 800a832:	4635      	mov	r5, r6
 800a834:	9300      	str	r3, [sp, #0]
 800a836:	463a      	mov	r2, r7
 800a838:	4616      	mov	r6, r2
 800a83a:	3201      	adds	r2, #1
 800a83c:	7830      	ldrb	r0, [r6, #0]
 800a83e:	f7ff ff9b 	bl	800a778 <__hexdig_fun>
 800a842:	2800      	cmp	r0, #0
 800a844:	d1f8      	bne.n	800a838 <__gethex+0x94>
 800a846:	9901      	ldr	r1, [sp, #4]
 800a848:	4652      	mov	r2, sl
 800a84a:	4630      	mov	r0, r6
 800a84c:	f001 fa0c 	bl	800bc68 <strncmp>
 800a850:	b980      	cbnz	r0, 800a874 <__gethex+0xd0>
 800a852:	b94d      	cbnz	r5, 800a868 <__gethex+0xc4>
 800a854:	eb06 050a 	add.w	r5, r6, sl
 800a858:	462a      	mov	r2, r5
 800a85a:	4616      	mov	r6, r2
 800a85c:	3201      	adds	r2, #1
 800a85e:	7830      	ldrb	r0, [r6, #0]
 800a860:	f7ff ff8a 	bl	800a778 <__hexdig_fun>
 800a864:	2800      	cmp	r0, #0
 800a866:	d1f8      	bne.n	800a85a <__gethex+0xb6>
 800a868:	1bad      	subs	r5, r5, r6
 800a86a:	00ad      	lsls	r5, r5, #2
 800a86c:	e004      	b.n	800a878 <__gethex+0xd4>
 800a86e:	2400      	movs	r4, #0
 800a870:	4625      	mov	r5, r4
 800a872:	e7e0      	b.n	800a836 <__gethex+0x92>
 800a874:	2d00      	cmp	r5, #0
 800a876:	d1f7      	bne.n	800a868 <__gethex+0xc4>
 800a878:	7833      	ldrb	r3, [r6, #0]
 800a87a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a87e:	2b50      	cmp	r3, #80	; 0x50
 800a880:	d13b      	bne.n	800a8fa <__gethex+0x156>
 800a882:	7873      	ldrb	r3, [r6, #1]
 800a884:	2b2b      	cmp	r3, #43	; 0x2b
 800a886:	d02c      	beq.n	800a8e2 <__gethex+0x13e>
 800a888:	2b2d      	cmp	r3, #45	; 0x2d
 800a88a:	d02e      	beq.n	800a8ea <__gethex+0x146>
 800a88c:	1c71      	adds	r1, r6, #1
 800a88e:	f04f 0900 	mov.w	r9, #0
 800a892:	7808      	ldrb	r0, [r1, #0]
 800a894:	f7ff ff70 	bl	800a778 <__hexdig_fun>
 800a898:	1e43      	subs	r3, r0, #1
 800a89a:	b2db      	uxtb	r3, r3
 800a89c:	2b18      	cmp	r3, #24
 800a89e:	d82c      	bhi.n	800a8fa <__gethex+0x156>
 800a8a0:	f1a0 0210 	sub.w	r2, r0, #16
 800a8a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a8a8:	f7ff ff66 	bl	800a778 <__hexdig_fun>
 800a8ac:	1e43      	subs	r3, r0, #1
 800a8ae:	b2db      	uxtb	r3, r3
 800a8b0:	2b18      	cmp	r3, #24
 800a8b2:	d91d      	bls.n	800a8f0 <__gethex+0x14c>
 800a8b4:	f1b9 0f00 	cmp.w	r9, #0
 800a8b8:	d000      	beq.n	800a8bc <__gethex+0x118>
 800a8ba:	4252      	negs	r2, r2
 800a8bc:	4415      	add	r5, r2
 800a8be:	f8cb 1000 	str.w	r1, [fp]
 800a8c2:	b1e4      	cbz	r4, 800a8fe <__gethex+0x15a>
 800a8c4:	9b00      	ldr	r3, [sp, #0]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	bf14      	ite	ne
 800a8ca:	2700      	movne	r7, #0
 800a8cc:	2706      	moveq	r7, #6
 800a8ce:	4638      	mov	r0, r7
 800a8d0:	b009      	add	sp, #36	; 0x24
 800a8d2:	ecbd 8b02 	vpop	{d8}
 800a8d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8da:	463e      	mov	r6, r7
 800a8dc:	4625      	mov	r5, r4
 800a8de:	2401      	movs	r4, #1
 800a8e0:	e7ca      	b.n	800a878 <__gethex+0xd4>
 800a8e2:	f04f 0900 	mov.w	r9, #0
 800a8e6:	1cb1      	adds	r1, r6, #2
 800a8e8:	e7d3      	b.n	800a892 <__gethex+0xee>
 800a8ea:	f04f 0901 	mov.w	r9, #1
 800a8ee:	e7fa      	b.n	800a8e6 <__gethex+0x142>
 800a8f0:	230a      	movs	r3, #10
 800a8f2:	fb03 0202 	mla	r2, r3, r2, r0
 800a8f6:	3a10      	subs	r2, #16
 800a8f8:	e7d4      	b.n	800a8a4 <__gethex+0x100>
 800a8fa:	4631      	mov	r1, r6
 800a8fc:	e7df      	b.n	800a8be <__gethex+0x11a>
 800a8fe:	1bf3      	subs	r3, r6, r7
 800a900:	3b01      	subs	r3, #1
 800a902:	4621      	mov	r1, r4
 800a904:	2b07      	cmp	r3, #7
 800a906:	dc0b      	bgt.n	800a920 <__gethex+0x17c>
 800a908:	ee18 0a10 	vmov	r0, s16
 800a90c:	f000 fa7e 	bl	800ae0c <_Balloc>
 800a910:	4604      	mov	r4, r0
 800a912:	b940      	cbnz	r0, 800a926 <__gethex+0x182>
 800a914:	4b5d      	ldr	r3, [pc, #372]	; (800aa8c <__gethex+0x2e8>)
 800a916:	4602      	mov	r2, r0
 800a918:	21de      	movs	r1, #222	; 0xde
 800a91a:	485d      	ldr	r0, [pc, #372]	; (800aa90 <__gethex+0x2ec>)
 800a91c:	f001 f9c6 	bl	800bcac <__assert_func>
 800a920:	3101      	adds	r1, #1
 800a922:	105b      	asrs	r3, r3, #1
 800a924:	e7ee      	b.n	800a904 <__gethex+0x160>
 800a926:	f100 0914 	add.w	r9, r0, #20
 800a92a:	f04f 0b00 	mov.w	fp, #0
 800a92e:	f1ca 0301 	rsb	r3, sl, #1
 800a932:	f8cd 9008 	str.w	r9, [sp, #8]
 800a936:	f8cd b000 	str.w	fp, [sp]
 800a93a:	9306      	str	r3, [sp, #24]
 800a93c:	42b7      	cmp	r7, r6
 800a93e:	d340      	bcc.n	800a9c2 <__gethex+0x21e>
 800a940:	9802      	ldr	r0, [sp, #8]
 800a942:	9b00      	ldr	r3, [sp, #0]
 800a944:	f840 3b04 	str.w	r3, [r0], #4
 800a948:	eba0 0009 	sub.w	r0, r0, r9
 800a94c:	1080      	asrs	r0, r0, #2
 800a94e:	0146      	lsls	r6, r0, #5
 800a950:	6120      	str	r0, [r4, #16]
 800a952:	4618      	mov	r0, r3
 800a954:	f000 fb4c 	bl	800aff0 <__hi0bits>
 800a958:	1a30      	subs	r0, r6, r0
 800a95a:	f8d8 6000 	ldr.w	r6, [r8]
 800a95e:	42b0      	cmp	r0, r6
 800a960:	dd63      	ble.n	800aa2a <__gethex+0x286>
 800a962:	1b87      	subs	r7, r0, r6
 800a964:	4639      	mov	r1, r7
 800a966:	4620      	mov	r0, r4
 800a968:	f000 fef0 	bl	800b74c <__any_on>
 800a96c:	4682      	mov	sl, r0
 800a96e:	b1a8      	cbz	r0, 800a99c <__gethex+0x1f8>
 800a970:	1e7b      	subs	r3, r7, #1
 800a972:	1159      	asrs	r1, r3, #5
 800a974:	f003 021f 	and.w	r2, r3, #31
 800a978:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a97c:	f04f 0a01 	mov.w	sl, #1
 800a980:	fa0a f202 	lsl.w	r2, sl, r2
 800a984:	420a      	tst	r2, r1
 800a986:	d009      	beq.n	800a99c <__gethex+0x1f8>
 800a988:	4553      	cmp	r3, sl
 800a98a:	dd05      	ble.n	800a998 <__gethex+0x1f4>
 800a98c:	1eb9      	subs	r1, r7, #2
 800a98e:	4620      	mov	r0, r4
 800a990:	f000 fedc 	bl	800b74c <__any_on>
 800a994:	2800      	cmp	r0, #0
 800a996:	d145      	bne.n	800aa24 <__gethex+0x280>
 800a998:	f04f 0a02 	mov.w	sl, #2
 800a99c:	4639      	mov	r1, r7
 800a99e:	4620      	mov	r0, r4
 800a9a0:	f7ff fe98 	bl	800a6d4 <rshift>
 800a9a4:	443d      	add	r5, r7
 800a9a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a9aa:	42ab      	cmp	r3, r5
 800a9ac:	da4c      	bge.n	800aa48 <__gethex+0x2a4>
 800a9ae:	ee18 0a10 	vmov	r0, s16
 800a9b2:	4621      	mov	r1, r4
 800a9b4:	f000 fa6a 	bl	800ae8c <_Bfree>
 800a9b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	6013      	str	r3, [r2, #0]
 800a9be:	27a3      	movs	r7, #163	; 0xa3
 800a9c0:	e785      	b.n	800a8ce <__gethex+0x12a>
 800a9c2:	1e73      	subs	r3, r6, #1
 800a9c4:	9a05      	ldr	r2, [sp, #20]
 800a9c6:	9303      	str	r3, [sp, #12]
 800a9c8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d019      	beq.n	800aa04 <__gethex+0x260>
 800a9d0:	f1bb 0f20 	cmp.w	fp, #32
 800a9d4:	d107      	bne.n	800a9e6 <__gethex+0x242>
 800a9d6:	9b02      	ldr	r3, [sp, #8]
 800a9d8:	9a00      	ldr	r2, [sp, #0]
 800a9da:	f843 2b04 	str.w	r2, [r3], #4
 800a9de:	9302      	str	r3, [sp, #8]
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	9300      	str	r3, [sp, #0]
 800a9e4:	469b      	mov	fp, r3
 800a9e6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a9ea:	f7ff fec5 	bl	800a778 <__hexdig_fun>
 800a9ee:	9b00      	ldr	r3, [sp, #0]
 800a9f0:	f000 000f 	and.w	r0, r0, #15
 800a9f4:	fa00 f00b 	lsl.w	r0, r0, fp
 800a9f8:	4303      	orrs	r3, r0
 800a9fa:	9300      	str	r3, [sp, #0]
 800a9fc:	f10b 0b04 	add.w	fp, fp, #4
 800aa00:	9b03      	ldr	r3, [sp, #12]
 800aa02:	e00d      	b.n	800aa20 <__gethex+0x27c>
 800aa04:	9b03      	ldr	r3, [sp, #12]
 800aa06:	9a06      	ldr	r2, [sp, #24]
 800aa08:	4413      	add	r3, r2
 800aa0a:	42bb      	cmp	r3, r7
 800aa0c:	d3e0      	bcc.n	800a9d0 <__gethex+0x22c>
 800aa0e:	4618      	mov	r0, r3
 800aa10:	9901      	ldr	r1, [sp, #4]
 800aa12:	9307      	str	r3, [sp, #28]
 800aa14:	4652      	mov	r2, sl
 800aa16:	f001 f927 	bl	800bc68 <strncmp>
 800aa1a:	9b07      	ldr	r3, [sp, #28]
 800aa1c:	2800      	cmp	r0, #0
 800aa1e:	d1d7      	bne.n	800a9d0 <__gethex+0x22c>
 800aa20:	461e      	mov	r6, r3
 800aa22:	e78b      	b.n	800a93c <__gethex+0x198>
 800aa24:	f04f 0a03 	mov.w	sl, #3
 800aa28:	e7b8      	b.n	800a99c <__gethex+0x1f8>
 800aa2a:	da0a      	bge.n	800aa42 <__gethex+0x29e>
 800aa2c:	1a37      	subs	r7, r6, r0
 800aa2e:	4621      	mov	r1, r4
 800aa30:	ee18 0a10 	vmov	r0, s16
 800aa34:	463a      	mov	r2, r7
 800aa36:	f000 fc45 	bl	800b2c4 <__lshift>
 800aa3a:	1bed      	subs	r5, r5, r7
 800aa3c:	4604      	mov	r4, r0
 800aa3e:	f100 0914 	add.w	r9, r0, #20
 800aa42:	f04f 0a00 	mov.w	sl, #0
 800aa46:	e7ae      	b.n	800a9a6 <__gethex+0x202>
 800aa48:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800aa4c:	42a8      	cmp	r0, r5
 800aa4e:	dd72      	ble.n	800ab36 <__gethex+0x392>
 800aa50:	1b45      	subs	r5, r0, r5
 800aa52:	42ae      	cmp	r6, r5
 800aa54:	dc36      	bgt.n	800aac4 <__gethex+0x320>
 800aa56:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aa5a:	2b02      	cmp	r3, #2
 800aa5c:	d02a      	beq.n	800aab4 <__gethex+0x310>
 800aa5e:	2b03      	cmp	r3, #3
 800aa60:	d02c      	beq.n	800aabc <__gethex+0x318>
 800aa62:	2b01      	cmp	r3, #1
 800aa64:	d11c      	bne.n	800aaa0 <__gethex+0x2fc>
 800aa66:	42ae      	cmp	r6, r5
 800aa68:	d11a      	bne.n	800aaa0 <__gethex+0x2fc>
 800aa6a:	2e01      	cmp	r6, #1
 800aa6c:	d112      	bne.n	800aa94 <__gethex+0x2f0>
 800aa6e:	9a04      	ldr	r2, [sp, #16]
 800aa70:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aa74:	6013      	str	r3, [r2, #0]
 800aa76:	2301      	movs	r3, #1
 800aa78:	6123      	str	r3, [r4, #16]
 800aa7a:	f8c9 3000 	str.w	r3, [r9]
 800aa7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa80:	2762      	movs	r7, #98	; 0x62
 800aa82:	601c      	str	r4, [r3, #0]
 800aa84:	e723      	b.n	800a8ce <__gethex+0x12a>
 800aa86:	bf00      	nop
 800aa88:	0800cf00 	.word	0x0800cf00
 800aa8c:	0800ce88 	.word	0x0800ce88
 800aa90:	0800ce99 	.word	0x0800ce99
 800aa94:	1e71      	subs	r1, r6, #1
 800aa96:	4620      	mov	r0, r4
 800aa98:	f000 fe58 	bl	800b74c <__any_on>
 800aa9c:	2800      	cmp	r0, #0
 800aa9e:	d1e6      	bne.n	800aa6e <__gethex+0x2ca>
 800aaa0:	ee18 0a10 	vmov	r0, s16
 800aaa4:	4621      	mov	r1, r4
 800aaa6:	f000 f9f1 	bl	800ae8c <_Bfree>
 800aaaa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aaac:	2300      	movs	r3, #0
 800aaae:	6013      	str	r3, [r2, #0]
 800aab0:	2750      	movs	r7, #80	; 0x50
 800aab2:	e70c      	b.n	800a8ce <__gethex+0x12a>
 800aab4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d1f2      	bne.n	800aaa0 <__gethex+0x2fc>
 800aaba:	e7d8      	b.n	800aa6e <__gethex+0x2ca>
 800aabc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d1d5      	bne.n	800aa6e <__gethex+0x2ca>
 800aac2:	e7ed      	b.n	800aaa0 <__gethex+0x2fc>
 800aac4:	1e6f      	subs	r7, r5, #1
 800aac6:	f1ba 0f00 	cmp.w	sl, #0
 800aaca:	d131      	bne.n	800ab30 <__gethex+0x38c>
 800aacc:	b127      	cbz	r7, 800aad8 <__gethex+0x334>
 800aace:	4639      	mov	r1, r7
 800aad0:	4620      	mov	r0, r4
 800aad2:	f000 fe3b 	bl	800b74c <__any_on>
 800aad6:	4682      	mov	sl, r0
 800aad8:	117b      	asrs	r3, r7, #5
 800aada:	2101      	movs	r1, #1
 800aadc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800aae0:	f007 071f 	and.w	r7, r7, #31
 800aae4:	fa01 f707 	lsl.w	r7, r1, r7
 800aae8:	421f      	tst	r7, r3
 800aaea:	4629      	mov	r1, r5
 800aaec:	4620      	mov	r0, r4
 800aaee:	bf18      	it	ne
 800aaf0:	f04a 0a02 	orrne.w	sl, sl, #2
 800aaf4:	1b76      	subs	r6, r6, r5
 800aaf6:	f7ff fded 	bl	800a6d4 <rshift>
 800aafa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800aafe:	2702      	movs	r7, #2
 800ab00:	f1ba 0f00 	cmp.w	sl, #0
 800ab04:	d048      	beq.n	800ab98 <__gethex+0x3f4>
 800ab06:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ab0a:	2b02      	cmp	r3, #2
 800ab0c:	d015      	beq.n	800ab3a <__gethex+0x396>
 800ab0e:	2b03      	cmp	r3, #3
 800ab10:	d017      	beq.n	800ab42 <__gethex+0x39e>
 800ab12:	2b01      	cmp	r3, #1
 800ab14:	d109      	bne.n	800ab2a <__gethex+0x386>
 800ab16:	f01a 0f02 	tst.w	sl, #2
 800ab1a:	d006      	beq.n	800ab2a <__gethex+0x386>
 800ab1c:	f8d9 0000 	ldr.w	r0, [r9]
 800ab20:	ea4a 0a00 	orr.w	sl, sl, r0
 800ab24:	f01a 0f01 	tst.w	sl, #1
 800ab28:	d10e      	bne.n	800ab48 <__gethex+0x3a4>
 800ab2a:	f047 0710 	orr.w	r7, r7, #16
 800ab2e:	e033      	b.n	800ab98 <__gethex+0x3f4>
 800ab30:	f04f 0a01 	mov.w	sl, #1
 800ab34:	e7d0      	b.n	800aad8 <__gethex+0x334>
 800ab36:	2701      	movs	r7, #1
 800ab38:	e7e2      	b.n	800ab00 <__gethex+0x35c>
 800ab3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab3c:	f1c3 0301 	rsb	r3, r3, #1
 800ab40:	9315      	str	r3, [sp, #84]	; 0x54
 800ab42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d0f0      	beq.n	800ab2a <__gethex+0x386>
 800ab48:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ab4c:	f104 0314 	add.w	r3, r4, #20
 800ab50:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ab54:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ab58:	f04f 0c00 	mov.w	ip, #0
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab62:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ab66:	d01c      	beq.n	800aba2 <__gethex+0x3fe>
 800ab68:	3201      	adds	r2, #1
 800ab6a:	6002      	str	r2, [r0, #0]
 800ab6c:	2f02      	cmp	r7, #2
 800ab6e:	f104 0314 	add.w	r3, r4, #20
 800ab72:	d13f      	bne.n	800abf4 <__gethex+0x450>
 800ab74:	f8d8 2000 	ldr.w	r2, [r8]
 800ab78:	3a01      	subs	r2, #1
 800ab7a:	42b2      	cmp	r2, r6
 800ab7c:	d10a      	bne.n	800ab94 <__gethex+0x3f0>
 800ab7e:	1171      	asrs	r1, r6, #5
 800ab80:	2201      	movs	r2, #1
 800ab82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ab86:	f006 061f 	and.w	r6, r6, #31
 800ab8a:	fa02 f606 	lsl.w	r6, r2, r6
 800ab8e:	421e      	tst	r6, r3
 800ab90:	bf18      	it	ne
 800ab92:	4617      	movne	r7, r2
 800ab94:	f047 0720 	orr.w	r7, r7, #32
 800ab98:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ab9a:	601c      	str	r4, [r3, #0]
 800ab9c:	9b04      	ldr	r3, [sp, #16]
 800ab9e:	601d      	str	r5, [r3, #0]
 800aba0:	e695      	b.n	800a8ce <__gethex+0x12a>
 800aba2:	4299      	cmp	r1, r3
 800aba4:	f843 cc04 	str.w	ip, [r3, #-4]
 800aba8:	d8d8      	bhi.n	800ab5c <__gethex+0x3b8>
 800abaa:	68a3      	ldr	r3, [r4, #8]
 800abac:	459b      	cmp	fp, r3
 800abae:	db19      	blt.n	800abe4 <__gethex+0x440>
 800abb0:	6861      	ldr	r1, [r4, #4]
 800abb2:	ee18 0a10 	vmov	r0, s16
 800abb6:	3101      	adds	r1, #1
 800abb8:	f000 f928 	bl	800ae0c <_Balloc>
 800abbc:	4681      	mov	r9, r0
 800abbe:	b918      	cbnz	r0, 800abc8 <__gethex+0x424>
 800abc0:	4b1a      	ldr	r3, [pc, #104]	; (800ac2c <__gethex+0x488>)
 800abc2:	4602      	mov	r2, r0
 800abc4:	2184      	movs	r1, #132	; 0x84
 800abc6:	e6a8      	b.n	800a91a <__gethex+0x176>
 800abc8:	6922      	ldr	r2, [r4, #16]
 800abca:	3202      	adds	r2, #2
 800abcc:	f104 010c 	add.w	r1, r4, #12
 800abd0:	0092      	lsls	r2, r2, #2
 800abd2:	300c      	adds	r0, #12
 800abd4:	f000 f90c 	bl	800adf0 <memcpy>
 800abd8:	4621      	mov	r1, r4
 800abda:	ee18 0a10 	vmov	r0, s16
 800abde:	f000 f955 	bl	800ae8c <_Bfree>
 800abe2:	464c      	mov	r4, r9
 800abe4:	6923      	ldr	r3, [r4, #16]
 800abe6:	1c5a      	adds	r2, r3, #1
 800abe8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800abec:	6122      	str	r2, [r4, #16]
 800abee:	2201      	movs	r2, #1
 800abf0:	615a      	str	r2, [r3, #20]
 800abf2:	e7bb      	b.n	800ab6c <__gethex+0x3c8>
 800abf4:	6922      	ldr	r2, [r4, #16]
 800abf6:	455a      	cmp	r2, fp
 800abf8:	dd0b      	ble.n	800ac12 <__gethex+0x46e>
 800abfa:	2101      	movs	r1, #1
 800abfc:	4620      	mov	r0, r4
 800abfe:	f7ff fd69 	bl	800a6d4 <rshift>
 800ac02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac06:	3501      	adds	r5, #1
 800ac08:	42ab      	cmp	r3, r5
 800ac0a:	f6ff aed0 	blt.w	800a9ae <__gethex+0x20a>
 800ac0e:	2701      	movs	r7, #1
 800ac10:	e7c0      	b.n	800ab94 <__gethex+0x3f0>
 800ac12:	f016 061f 	ands.w	r6, r6, #31
 800ac16:	d0fa      	beq.n	800ac0e <__gethex+0x46a>
 800ac18:	4453      	add	r3, sl
 800ac1a:	f1c6 0620 	rsb	r6, r6, #32
 800ac1e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ac22:	f000 f9e5 	bl	800aff0 <__hi0bits>
 800ac26:	42b0      	cmp	r0, r6
 800ac28:	dbe7      	blt.n	800abfa <__gethex+0x456>
 800ac2a:	e7f0      	b.n	800ac0e <__gethex+0x46a>
 800ac2c:	0800ce88 	.word	0x0800ce88

0800ac30 <L_shift>:
 800ac30:	f1c2 0208 	rsb	r2, r2, #8
 800ac34:	0092      	lsls	r2, r2, #2
 800ac36:	b570      	push	{r4, r5, r6, lr}
 800ac38:	f1c2 0620 	rsb	r6, r2, #32
 800ac3c:	6843      	ldr	r3, [r0, #4]
 800ac3e:	6804      	ldr	r4, [r0, #0]
 800ac40:	fa03 f506 	lsl.w	r5, r3, r6
 800ac44:	432c      	orrs	r4, r5
 800ac46:	40d3      	lsrs	r3, r2
 800ac48:	6004      	str	r4, [r0, #0]
 800ac4a:	f840 3f04 	str.w	r3, [r0, #4]!
 800ac4e:	4288      	cmp	r0, r1
 800ac50:	d3f4      	bcc.n	800ac3c <L_shift+0xc>
 800ac52:	bd70      	pop	{r4, r5, r6, pc}

0800ac54 <__match>:
 800ac54:	b530      	push	{r4, r5, lr}
 800ac56:	6803      	ldr	r3, [r0, #0]
 800ac58:	3301      	adds	r3, #1
 800ac5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac5e:	b914      	cbnz	r4, 800ac66 <__match+0x12>
 800ac60:	6003      	str	r3, [r0, #0]
 800ac62:	2001      	movs	r0, #1
 800ac64:	bd30      	pop	{r4, r5, pc}
 800ac66:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac6a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ac6e:	2d19      	cmp	r5, #25
 800ac70:	bf98      	it	ls
 800ac72:	3220      	addls	r2, #32
 800ac74:	42a2      	cmp	r2, r4
 800ac76:	d0f0      	beq.n	800ac5a <__match+0x6>
 800ac78:	2000      	movs	r0, #0
 800ac7a:	e7f3      	b.n	800ac64 <__match+0x10>

0800ac7c <__hexnan>:
 800ac7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac80:	680b      	ldr	r3, [r1, #0]
 800ac82:	115e      	asrs	r6, r3, #5
 800ac84:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ac88:	f013 031f 	ands.w	r3, r3, #31
 800ac8c:	b087      	sub	sp, #28
 800ac8e:	bf18      	it	ne
 800ac90:	3604      	addne	r6, #4
 800ac92:	2500      	movs	r5, #0
 800ac94:	1f37      	subs	r7, r6, #4
 800ac96:	4690      	mov	r8, r2
 800ac98:	6802      	ldr	r2, [r0, #0]
 800ac9a:	9301      	str	r3, [sp, #4]
 800ac9c:	4682      	mov	sl, r0
 800ac9e:	f846 5c04 	str.w	r5, [r6, #-4]
 800aca2:	46b9      	mov	r9, r7
 800aca4:	463c      	mov	r4, r7
 800aca6:	9502      	str	r5, [sp, #8]
 800aca8:	46ab      	mov	fp, r5
 800acaa:	7851      	ldrb	r1, [r2, #1]
 800acac:	1c53      	adds	r3, r2, #1
 800acae:	9303      	str	r3, [sp, #12]
 800acb0:	b341      	cbz	r1, 800ad04 <__hexnan+0x88>
 800acb2:	4608      	mov	r0, r1
 800acb4:	9205      	str	r2, [sp, #20]
 800acb6:	9104      	str	r1, [sp, #16]
 800acb8:	f7ff fd5e 	bl	800a778 <__hexdig_fun>
 800acbc:	2800      	cmp	r0, #0
 800acbe:	d14f      	bne.n	800ad60 <__hexnan+0xe4>
 800acc0:	9904      	ldr	r1, [sp, #16]
 800acc2:	9a05      	ldr	r2, [sp, #20]
 800acc4:	2920      	cmp	r1, #32
 800acc6:	d818      	bhi.n	800acfa <__hexnan+0x7e>
 800acc8:	9b02      	ldr	r3, [sp, #8]
 800acca:	459b      	cmp	fp, r3
 800accc:	dd13      	ble.n	800acf6 <__hexnan+0x7a>
 800acce:	454c      	cmp	r4, r9
 800acd0:	d206      	bcs.n	800ace0 <__hexnan+0x64>
 800acd2:	2d07      	cmp	r5, #7
 800acd4:	dc04      	bgt.n	800ace0 <__hexnan+0x64>
 800acd6:	462a      	mov	r2, r5
 800acd8:	4649      	mov	r1, r9
 800acda:	4620      	mov	r0, r4
 800acdc:	f7ff ffa8 	bl	800ac30 <L_shift>
 800ace0:	4544      	cmp	r4, r8
 800ace2:	d950      	bls.n	800ad86 <__hexnan+0x10a>
 800ace4:	2300      	movs	r3, #0
 800ace6:	f1a4 0904 	sub.w	r9, r4, #4
 800acea:	f844 3c04 	str.w	r3, [r4, #-4]
 800acee:	f8cd b008 	str.w	fp, [sp, #8]
 800acf2:	464c      	mov	r4, r9
 800acf4:	461d      	mov	r5, r3
 800acf6:	9a03      	ldr	r2, [sp, #12]
 800acf8:	e7d7      	b.n	800acaa <__hexnan+0x2e>
 800acfa:	2929      	cmp	r1, #41	; 0x29
 800acfc:	d156      	bne.n	800adac <__hexnan+0x130>
 800acfe:	3202      	adds	r2, #2
 800ad00:	f8ca 2000 	str.w	r2, [sl]
 800ad04:	f1bb 0f00 	cmp.w	fp, #0
 800ad08:	d050      	beq.n	800adac <__hexnan+0x130>
 800ad0a:	454c      	cmp	r4, r9
 800ad0c:	d206      	bcs.n	800ad1c <__hexnan+0xa0>
 800ad0e:	2d07      	cmp	r5, #7
 800ad10:	dc04      	bgt.n	800ad1c <__hexnan+0xa0>
 800ad12:	462a      	mov	r2, r5
 800ad14:	4649      	mov	r1, r9
 800ad16:	4620      	mov	r0, r4
 800ad18:	f7ff ff8a 	bl	800ac30 <L_shift>
 800ad1c:	4544      	cmp	r4, r8
 800ad1e:	d934      	bls.n	800ad8a <__hexnan+0x10e>
 800ad20:	f1a8 0204 	sub.w	r2, r8, #4
 800ad24:	4623      	mov	r3, r4
 800ad26:	f853 1b04 	ldr.w	r1, [r3], #4
 800ad2a:	f842 1f04 	str.w	r1, [r2, #4]!
 800ad2e:	429f      	cmp	r7, r3
 800ad30:	d2f9      	bcs.n	800ad26 <__hexnan+0xaa>
 800ad32:	1b3b      	subs	r3, r7, r4
 800ad34:	f023 0303 	bic.w	r3, r3, #3
 800ad38:	3304      	adds	r3, #4
 800ad3a:	3401      	adds	r4, #1
 800ad3c:	3e03      	subs	r6, #3
 800ad3e:	42b4      	cmp	r4, r6
 800ad40:	bf88      	it	hi
 800ad42:	2304      	movhi	r3, #4
 800ad44:	4443      	add	r3, r8
 800ad46:	2200      	movs	r2, #0
 800ad48:	f843 2b04 	str.w	r2, [r3], #4
 800ad4c:	429f      	cmp	r7, r3
 800ad4e:	d2fb      	bcs.n	800ad48 <__hexnan+0xcc>
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	b91b      	cbnz	r3, 800ad5c <__hexnan+0xe0>
 800ad54:	4547      	cmp	r7, r8
 800ad56:	d127      	bne.n	800ada8 <__hexnan+0x12c>
 800ad58:	2301      	movs	r3, #1
 800ad5a:	603b      	str	r3, [r7, #0]
 800ad5c:	2005      	movs	r0, #5
 800ad5e:	e026      	b.n	800adae <__hexnan+0x132>
 800ad60:	3501      	adds	r5, #1
 800ad62:	2d08      	cmp	r5, #8
 800ad64:	f10b 0b01 	add.w	fp, fp, #1
 800ad68:	dd06      	ble.n	800ad78 <__hexnan+0xfc>
 800ad6a:	4544      	cmp	r4, r8
 800ad6c:	d9c3      	bls.n	800acf6 <__hexnan+0x7a>
 800ad6e:	2300      	movs	r3, #0
 800ad70:	f844 3c04 	str.w	r3, [r4, #-4]
 800ad74:	2501      	movs	r5, #1
 800ad76:	3c04      	subs	r4, #4
 800ad78:	6822      	ldr	r2, [r4, #0]
 800ad7a:	f000 000f 	and.w	r0, r0, #15
 800ad7e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ad82:	6022      	str	r2, [r4, #0]
 800ad84:	e7b7      	b.n	800acf6 <__hexnan+0x7a>
 800ad86:	2508      	movs	r5, #8
 800ad88:	e7b5      	b.n	800acf6 <__hexnan+0x7a>
 800ad8a:	9b01      	ldr	r3, [sp, #4]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d0df      	beq.n	800ad50 <__hexnan+0xd4>
 800ad90:	f04f 32ff 	mov.w	r2, #4294967295
 800ad94:	f1c3 0320 	rsb	r3, r3, #32
 800ad98:	fa22 f303 	lsr.w	r3, r2, r3
 800ad9c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ada0:	401a      	ands	r2, r3
 800ada2:	f846 2c04 	str.w	r2, [r6, #-4]
 800ada6:	e7d3      	b.n	800ad50 <__hexnan+0xd4>
 800ada8:	3f04      	subs	r7, #4
 800adaa:	e7d1      	b.n	800ad50 <__hexnan+0xd4>
 800adac:	2004      	movs	r0, #4
 800adae:	b007      	add	sp, #28
 800adb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800adb4 <_localeconv_r>:
 800adb4:	4800      	ldr	r0, [pc, #0]	; (800adb8 <_localeconv_r+0x4>)
 800adb6:	4770      	bx	lr
 800adb8:	20000170 	.word	0x20000170

0800adbc <malloc>:
 800adbc:	4b02      	ldr	r3, [pc, #8]	; (800adc8 <malloc+0xc>)
 800adbe:	4601      	mov	r1, r0
 800adc0:	6818      	ldr	r0, [r3, #0]
 800adc2:	f000 bd67 	b.w	800b894 <_malloc_r>
 800adc6:	bf00      	nop
 800adc8:	20000018 	.word	0x20000018

0800adcc <__ascii_mbtowc>:
 800adcc:	b082      	sub	sp, #8
 800adce:	b901      	cbnz	r1, 800add2 <__ascii_mbtowc+0x6>
 800add0:	a901      	add	r1, sp, #4
 800add2:	b142      	cbz	r2, 800ade6 <__ascii_mbtowc+0x1a>
 800add4:	b14b      	cbz	r3, 800adea <__ascii_mbtowc+0x1e>
 800add6:	7813      	ldrb	r3, [r2, #0]
 800add8:	600b      	str	r3, [r1, #0]
 800adda:	7812      	ldrb	r2, [r2, #0]
 800addc:	1e10      	subs	r0, r2, #0
 800adde:	bf18      	it	ne
 800ade0:	2001      	movne	r0, #1
 800ade2:	b002      	add	sp, #8
 800ade4:	4770      	bx	lr
 800ade6:	4610      	mov	r0, r2
 800ade8:	e7fb      	b.n	800ade2 <__ascii_mbtowc+0x16>
 800adea:	f06f 0001 	mvn.w	r0, #1
 800adee:	e7f8      	b.n	800ade2 <__ascii_mbtowc+0x16>

0800adf0 <memcpy>:
 800adf0:	440a      	add	r2, r1
 800adf2:	4291      	cmp	r1, r2
 800adf4:	f100 33ff 	add.w	r3, r0, #4294967295
 800adf8:	d100      	bne.n	800adfc <memcpy+0xc>
 800adfa:	4770      	bx	lr
 800adfc:	b510      	push	{r4, lr}
 800adfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae06:	4291      	cmp	r1, r2
 800ae08:	d1f9      	bne.n	800adfe <memcpy+0xe>
 800ae0a:	bd10      	pop	{r4, pc}

0800ae0c <_Balloc>:
 800ae0c:	b570      	push	{r4, r5, r6, lr}
 800ae0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae10:	4604      	mov	r4, r0
 800ae12:	460d      	mov	r5, r1
 800ae14:	b976      	cbnz	r6, 800ae34 <_Balloc+0x28>
 800ae16:	2010      	movs	r0, #16
 800ae18:	f7ff ffd0 	bl	800adbc <malloc>
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	6260      	str	r0, [r4, #36]	; 0x24
 800ae20:	b920      	cbnz	r0, 800ae2c <_Balloc+0x20>
 800ae22:	4b18      	ldr	r3, [pc, #96]	; (800ae84 <_Balloc+0x78>)
 800ae24:	4818      	ldr	r0, [pc, #96]	; (800ae88 <_Balloc+0x7c>)
 800ae26:	2166      	movs	r1, #102	; 0x66
 800ae28:	f000 ff40 	bl	800bcac <__assert_func>
 800ae2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae30:	6006      	str	r6, [r0, #0]
 800ae32:	60c6      	str	r6, [r0, #12]
 800ae34:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ae36:	68f3      	ldr	r3, [r6, #12]
 800ae38:	b183      	cbz	r3, 800ae5c <_Balloc+0x50>
 800ae3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae3c:	68db      	ldr	r3, [r3, #12]
 800ae3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ae42:	b9b8      	cbnz	r0, 800ae74 <_Balloc+0x68>
 800ae44:	2101      	movs	r1, #1
 800ae46:	fa01 f605 	lsl.w	r6, r1, r5
 800ae4a:	1d72      	adds	r2, r6, #5
 800ae4c:	0092      	lsls	r2, r2, #2
 800ae4e:	4620      	mov	r0, r4
 800ae50:	f000 fc9d 	bl	800b78e <_calloc_r>
 800ae54:	b160      	cbz	r0, 800ae70 <_Balloc+0x64>
 800ae56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ae5a:	e00e      	b.n	800ae7a <_Balloc+0x6e>
 800ae5c:	2221      	movs	r2, #33	; 0x21
 800ae5e:	2104      	movs	r1, #4
 800ae60:	4620      	mov	r0, r4
 800ae62:	f000 fc94 	bl	800b78e <_calloc_r>
 800ae66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae68:	60f0      	str	r0, [r6, #12]
 800ae6a:	68db      	ldr	r3, [r3, #12]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d1e4      	bne.n	800ae3a <_Balloc+0x2e>
 800ae70:	2000      	movs	r0, #0
 800ae72:	bd70      	pop	{r4, r5, r6, pc}
 800ae74:	6802      	ldr	r2, [r0, #0]
 800ae76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae80:	e7f7      	b.n	800ae72 <_Balloc+0x66>
 800ae82:	bf00      	nop
 800ae84:	0800ce16 	.word	0x0800ce16
 800ae88:	0800cf14 	.word	0x0800cf14

0800ae8c <_Bfree>:
 800ae8c:	b570      	push	{r4, r5, r6, lr}
 800ae8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae90:	4605      	mov	r5, r0
 800ae92:	460c      	mov	r4, r1
 800ae94:	b976      	cbnz	r6, 800aeb4 <_Bfree+0x28>
 800ae96:	2010      	movs	r0, #16
 800ae98:	f7ff ff90 	bl	800adbc <malloc>
 800ae9c:	4602      	mov	r2, r0
 800ae9e:	6268      	str	r0, [r5, #36]	; 0x24
 800aea0:	b920      	cbnz	r0, 800aeac <_Bfree+0x20>
 800aea2:	4b09      	ldr	r3, [pc, #36]	; (800aec8 <_Bfree+0x3c>)
 800aea4:	4809      	ldr	r0, [pc, #36]	; (800aecc <_Bfree+0x40>)
 800aea6:	218a      	movs	r1, #138	; 0x8a
 800aea8:	f000 ff00 	bl	800bcac <__assert_func>
 800aeac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aeb0:	6006      	str	r6, [r0, #0]
 800aeb2:	60c6      	str	r6, [r0, #12]
 800aeb4:	b13c      	cbz	r4, 800aec6 <_Bfree+0x3a>
 800aeb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aeb8:	6862      	ldr	r2, [r4, #4]
 800aeba:	68db      	ldr	r3, [r3, #12]
 800aebc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aec0:	6021      	str	r1, [r4, #0]
 800aec2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aec6:	bd70      	pop	{r4, r5, r6, pc}
 800aec8:	0800ce16 	.word	0x0800ce16
 800aecc:	0800cf14 	.word	0x0800cf14

0800aed0 <__multadd>:
 800aed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aed4:	690d      	ldr	r5, [r1, #16]
 800aed6:	4607      	mov	r7, r0
 800aed8:	460c      	mov	r4, r1
 800aeda:	461e      	mov	r6, r3
 800aedc:	f101 0c14 	add.w	ip, r1, #20
 800aee0:	2000      	movs	r0, #0
 800aee2:	f8dc 3000 	ldr.w	r3, [ip]
 800aee6:	b299      	uxth	r1, r3
 800aee8:	fb02 6101 	mla	r1, r2, r1, r6
 800aeec:	0c1e      	lsrs	r6, r3, #16
 800aeee:	0c0b      	lsrs	r3, r1, #16
 800aef0:	fb02 3306 	mla	r3, r2, r6, r3
 800aef4:	b289      	uxth	r1, r1
 800aef6:	3001      	adds	r0, #1
 800aef8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aefc:	4285      	cmp	r5, r0
 800aefe:	f84c 1b04 	str.w	r1, [ip], #4
 800af02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800af06:	dcec      	bgt.n	800aee2 <__multadd+0x12>
 800af08:	b30e      	cbz	r6, 800af4e <__multadd+0x7e>
 800af0a:	68a3      	ldr	r3, [r4, #8]
 800af0c:	42ab      	cmp	r3, r5
 800af0e:	dc19      	bgt.n	800af44 <__multadd+0x74>
 800af10:	6861      	ldr	r1, [r4, #4]
 800af12:	4638      	mov	r0, r7
 800af14:	3101      	adds	r1, #1
 800af16:	f7ff ff79 	bl	800ae0c <_Balloc>
 800af1a:	4680      	mov	r8, r0
 800af1c:	b928      	cbnz	r0, 800af2a <__multadd+0x5a>
 800af1e:	4602      	mov	r2, r0
 800af20:	4b0c      	ldr	r3, [pc, #48]	; (800af54 <__multadd+0x84>)
 800af22:	480d      	ldr	r0, [pc, #52]	; (800af58 <__multadd+0x88>)
 800af24:	21b5      	movs	r1, #181	; 0xb5
 800af26:	f000 fec1 	bl	800bcac <__assert_func>
 800af2a:	6922      	ldr	r2, [r4, #16]
 800af2c:	3202      	adds	r2, #2
 800af2e:	f104 010c 	add.w	r1, r4, #12
 800af32:	0092      	lsls	r2, r2, #2
 800af34:	300c      	adds	r0, #12
 800af36:	f7ff ff5b 	bl	800adf0 <memcpy>
 800af3a:	4621      	mov	r1, r4
 800af3c:	4638      	mov	r0, r7
 800af3e:	f7ff ffa5 	bl	800ae8c <_Bfree>
 800af42:	4644      	mov	r4, r8
 800af44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800af48:	3501      	adds	r5, #1
 800af4a:	615e      	str	r6, [r3, #20]
 800af4c:	6125      	str	r5, [r4, #16]
 800af4e:	4620      	mov	r0, r4
 800af50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af54:	0800ce88 	.word	0x0800ce88
 800af58:	0800cf14 	.word	0x0800cf14

0800af5c <__s2b>:
 800af5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af60:	460c      	mov	r4, r1
 800af62:	4615      	mov	r5, r2
 800af64:	461f      	mov	r7, r3
 800af66:	2209      	movs	r2, #9
 800af68:	3308      	adds	r3, #8
 800af6a:	4606      	mov	r6, r0
 800af6c:	fb93 f3f2 	sdiv	r3, r3, r2
 800af70:	2100      	movs	r1, #0
 800af72:	2201      	movs	r2, #1
 800af74:	429a      	cmp	r2, r3
 800af76:	db09      	blt.n	800af8c <__s2b+0x30>
 800af78:	4630      	mov	r0, r6
 800af7a:	f7ff ff47 	bl	800ae0c <_Balloc>
 800af7e:	b940      	cbnz	r0, 800af92 <__s2b+0x36>
 800af80:	4602      	mov	r2, r0
 800af82:	4b19      	ldr	r3, [pc, #100]	; (800afe8 <__s2b+0x8c>)
 800af84:	4819      	ldr	r0, [pc, #100]	; (800afec <__s2b+0x90>)
 800af86:	21ce      	movs	r1, #206	; 0xce
 800af88:	f000 fe90 	bl	800bcac <__assert_func>
 800af8c:	0052      	lsls	r2, r2, #1
 800af8e:	3101      	adds	r1, #1
 800af90:	e7f0      	b.n	800af74 <__s2b+0x18>
 800af92:	9b08      	ldr	r3, [sp, #32]
 800af94:	6143      	str	r3, [r0, #20]
 800af96:	2d09      	cmp	r5, #9
 800af98:	f04f 0301 	mov.w	r3, #1
 800af9c:	6103      	str	r3, [r0, #16]
 800af9e:	dd16      	ble.n	800afce <__s2b+0x72>
 800afa0:	f104 0909 	add.w	r9, r4, #9
 800afa4:	46c8      	mov	r8, r9
 800afa6:	442c      	add	r4, r5
 800afa8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800afac:	4601      	mov	r1, r0
 800afae:	3b30      	subs	r3, #48	; 0x30
 800afb0:	220a      	movs	r2, #10
 800afb2:	4630      	mov	r0, r6
 800afb4:	f7ff ff8c 	bl	800aed0 <__multadd>
 800afb8:	45a0      	cmp	r8, r4
 800afba:	d1f5      	bne.n	800afa8 <__s2b+0x4c>
 800afbc:	f1a5 0408 	sub.w	r4, r5, #8
 800afc0:	444c      	add	r4, r9
 800afc2:	1b2d      	subs	r5, r5, r4
 800afc4:	1963      	adds	r3, r4, r5
 800afc6:	42bb      	cmp	r3, r7
 800afc8:	db04      	blt.n	800afd4 <__s2b+0x78>
 800afca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afce:	340a      	adds	r4, #10
 800afd0:	2509      	movs	r5, #9
 800afd2:	e7f6      	b.n	800afc2 <__s2b+0x66>
 800afd4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800afd8:	4601      	mov	r1, r0
 800afda:	3b30      	subs	r3, #48	; 0x30
 800afdc:	220a      	movs	r2, #10
 800afde:	4630      	mov	r0, r6
 800afe0:	f7ff ff76 	bl	800aed0 <__multadd>
 800afe4:	e7ee      	b.n	800afc4 <__s2b+0x68>
 800afe6:	bf00      	nop
 800afe8:	0800ce88 	.word	0x0800ce88
 800afec:	0800cf14 	.word	0x0800cf14

0800aff0 <__hi0bits>:
 800aff0:	0c03      	lsrs	r3, r0, #16
 800aff2:	041b      	lsls	r3, r3, #16
 800aff4:	b9d3      	cbnz	r3, 800b02c <__hi0bits+0x3c>
 800aff6:	0400      	lsls	r0, r0, #16
 800aff8:	2310      	movs	r3, #16
 800affa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800affe:	bf04      	itt	eq
 800b000:	0200      	lsleq	r0, r0, #8
 800b002:	3308      	addeq	r3, #8
 800b004:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b008:	bf04      	itt	eq
 800b00a:	0100      	lsleq	r0, r0, #4
 800b00c:	3304      	addeq	r3, #4
 800b00e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b012:	bf04      	itt	eq
 800b014:	0080      	lsleq	r0, r0, #2
 800b016:	3302      	addeq	r3, #2
 800b018:	2800      	cmp	r0, #0
 800b01a:	db05      	blt.n	800b028 <__hi0bits+0x38>
 800b01c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b020:	f103 0301 	add.w	r3, r3, #1
 800b024:	bf08      	it	eq
 800b026:	2320      	moveq	r3, #32
 800b028:	4618      	mov	r0, r3
 800b02a:	4770      	bx	lr
 800b02c:	2300      	movs	r3, #0
 800b02e:	e7e4      	b.n	800affa <__hi0bits+0xa>

0800b030 <__lo0bits>:
 800b030:	6803      	ldr	r3, [r0, #0]
 800b032:	f013 0207 	ands.w	r2, r3, #7
 800b036:	4601      	mov	r1, r0
 800b038:	d00b      	beq.n	800b052 <__lo0bits+0x22>
 800b03a:	07da      	lsls	r2, r3, #31
 800b03c:	d423      	bmi.n	800b086 <__lo0bits+0x56>
 800b03e:	0798      	lsls	r0, r3, #30
 800b040:	bf49      	itett	mi
 800b042:	085b      	lsrmi	r3, r3, #1
 800b044:	089b      	lsrpl	r3, r3, #2
 800b046:	2001      	movmi	r0, #1
 800b048:	600b      	strmi	r3, [r1, #0]
 800b04a:	bf5c      	itt	pl
 800b04c:	600b      	strpl	r3, [r1, #0]
 800b04e:	2002      	movpl	r0, #2
 800b050:	4770      	bx	lr
 800b052:	b298      	uxth	r0, r3
 800b054:	b9a8      	cbnz	r0, 800b082 <__lo0bits+0x52>
 800b056:	0c1b      	lsrs	r3, r3, #16
 800b058:	2010      	movs	r0, #16
 800b05a:	b2da      	uxtb	r2, r3
 800b05c:	b90a      	cbnz	r2, 800b062 <__lo0bits+0x32>
 800b05e:	3008      	adds	r0, #8
 800b060:	0a1b      	lsrs	r3, r3, #8
 800b062:	071a      	lsls	r2, r3, #28
 800b064:	bf04      	itt	eq
 800b066:	091b      	lsreq	r3, r3, #4
 800b068:	3004      	addeq	r0, #4
 800b06a:	079a      	lsls	r2, r3, #30
 800b06c:	bf04      	itt	eq
 800b06e:	089b      	lsreq	r3, r3, #2
 800b070:	3002      	addeq	r0, #2
 800b072:	07da      	lsls	r2, r3, #31
 800b074:	d403      	bmi.n	800b07e <__lo0bits+0x4e>
 800b076:	085b      	lsrs	r3, r3, #1
 800b078:	f100 0001 	add.w	r0, r0, #1
 800b07c:	d005      	beq.n	800b08a <__lo0bits+0x5a>
 800b07e:	600b      	str	r3, [r1, #0]
 800b080:	4770      	bx	lr
 800b082:	4610      	mov	r0, r2
 800b084:	e7e9      	b.n	800b05a <__lo0bits+0x2a>
 800b086:	2000      	movs	r0, #0
 800b088:	4770      	bx	lr
 800b08a:	2020      	movs	r0, #32
 800b08c:	4770      	bx	lr
	...

0800b090 <__i2b>:
 800b090:	b510      	push	{r4, lr}
 800b092:	460c      	mov	r4, r1
 800b094:	2101      	movs	r1, #1
 800b096:	f7ff feb9 	bl	800ae0c <_Balloc>
 800b09a:	4602      	mov	r2, r0
 800b09c:	b928      	cbnz	r0, 800b0aa <__i2b+0x1a>
 800b09e:	4b05      	ldr	r3, [pc, #20]	; (800b0b4 <__i2b+0x24>)
 800b0a0:	4805      	ldr	r0, [pc, #20]	; (800b0b8 <__i2b+0x28>)
 800b0a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b0a6:	f000 fe01 	bl	800bcac <__assert_func>
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	6144      	str	r4, [r0, #20]
 800b0ae:	6103      	str	r3, [r0, #16]
 800b0b0:	bd10      	pop	{r4, pc}
 800b0b2:	bf00      	nop
 800b0b4:	0800ce88 	.word	0x0800ce88
 800b0b8:	0800cf14 	.word	0x0800cf14

0800b0bc <__multiply>:
 800b0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0c0:	4691      	mov	r9, r2
 800b0c2:	690a      	ldr	r2, [r1, #16]
 800b0c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	bfb8      	it	lt
 800b0cc:	460b      	movlt	r3, r1
 800b0ce:	460c      	mov	r4, r1
 800b0d0:	bfbc      	itt	lt
 800b0d2:	464c      	movlt	r4, r9
 800b0d4:	4699      	movlt	r9, r3
 800b0d6:	6927      	ldr	r7, [r4, #16]
 800b0d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b0dc:	68a3      	ldr	r3, [r4, #8]
 800b0de:	6861      	ldr	r1, [r4, #4]
 800b0e0:	eb07 060a 	add.w	r6, r7, sl
 800b0e4:	42b3      	cmp	r3, r6
 800b0e6:	b085      	sub	sp, #20
 800b0e8:	bfb8      	it	lt
 800b0ea:	3101      	addlt	r1, #1
 800b0ec:	f7ff fe8e 	bl	800ae0c <_Balloc>
 800b0f0:	b930      	cbnz	r0, 800b100 <__multiply+0x44>
 800b0f2:	4602      	mov	r2, r0
 800b0f4:	4b44      	ldr	r3, [pc, #272]	; (800b208 <__multiply+0x14c>)
 800b0f6:	4845      	ldr	r0, [pc, #276]	; (800b20c <__multiply+0x150>)
 800b0f8:	f240 115d 	movw	r1, #349	; 0x15d
 800b0fc:	f000 fdd6 	bl	800bcac <__assert_func>
 800b100:	f100 0514 	add.w	r5, r0, #20
 800b104:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b108:	462b      	mov	r3, r5
 800b10a:	2200      	movs	r2, #0
 800b10c:	4543      	cmp	r3, r8
 800b10e:	d321      	bcc.n	800b154 <__multiply+0x98>
 800b110:	f104 0314 	add.w	r3, r4, #20
 800b114:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b118:	f109 0314 	add.w	r3, r9, #20
 800b11c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b120:	9202      	str	r2, [sp, #8]
 800b122:	1b3a      	subs	r2, r7, r4
 800b124:	3a15      	subs	r2, #21
 800b126:	f022 0203 	bic.w	r2, r2, #3
 800b12a:	3204      	adds	r2, #4
 800b12c:	f104 0115 	add.w	r1, r4, #21
 800b130:	428f      	cmp	r7, r1
 800b132:	bf38      	it	cc
 800b134:	2204      	movcc	r2, #4
 800b136:	9201      	str	r2, [sp, #4]
 800b138:	9a02      	ldr	r2, [sp, #8]
 800b13a:	9303      	str	r3, [sp, #12]
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d80c      	bhi.n	800b15a <__multiply+0x9e>
 800b140:	2e00      	cmp	r6, #0
 800b142:	dd03      	ble.n	800b14c <__multiply+0x90>
 800b144:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d05a      	beq.n	800b202 <__multiply+0x146>
 800b14c:	6106      	str	r6, [r0, #16]
 800b14e:	b005      	add	sp, #20
 800b150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b154:	f843 2b04 	str.w	r2, [r3], #4
 800b158:	e7d8      	b.n	800b10c <__multiply+0x50>
 800b15a:	f8b3 a000 	ldrh.w	sl, [r3]
 800b15e:	f1ba 0f00 	cmp.w	sl, #0
 800b162:	d024      	beq.n	800b1ae <__multiply+0xf2>
 800b164:	f104 0e14 	add.w	lr, r4, #20
 800b168:	46a9      	mov	r9, r5
 800b16a:	f04f 0c00 	mov.w	ip, #0
 800b16e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b172:	f8d9 1000 	ldr.w	r1, [r9]
 800b176:	fa1f fb82 	uxth.w	fp, r2
 800b17a:	b289      	uxth	r1, r1
 800b17c:	fb0a 110b 	mla	r1, sl, fp, r1
 800b180:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b184:	f8d9 2000 	ldr.w	r2, [r9]
 800b188:	4461      	add	r1, ip
 800b18a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b18e:	fb0a c20b 	mla	r2, sl, fp, ip
 800b192:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b196:	b289      	uxth	r1, r1
 800b198:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b19c:	4577      	cmp	r7, lr
 800b19e:	f849 1b04 	str.w	r1, [r9], #4
 800b1a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b1a6:	d8e2      	bhi.n	800b16e <__multiply+0xb2>
 800b1a8:	9a01      	ldr	r2, [sp, #4]
 800b1aa:	f845 c002 	str.w	ip, [r5, r2]
 800b1ae:	9a03      	ldr	r2, [sp, #12]
 800b1b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b1b4:	3304      	adds	r3, #4
 800b1b6:	f1b9 0f00 	cmp.w	r9, #0
 800b1ba:	d020      	beq.n	800b1fe <__multiply+0x142>
 800b1bc:	6829      	ldr	r1, [r5, #0]
 800b1be:	f104 0c14 	add.w	ip, r4, #20
 800b1c2:	46ae      	mov	lr, r5
 800b1c4:	f04f 0a00 	mov.w	sl, #0
 800b1c8:	f8bc b000 	ldrh.w	fp, [ip]
 800b1cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b1d0:	fb09 220b 	mla	r2, r9, fp, r2
 800b1d4:	4492      	add	sl, r2
 800b1d6:	b289      	uxth	r1, r1
 800b1d8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b1dc:	f84e 1b04 	str.w	r1, [lr], #4
 800b1e0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b1e4:	f8be 1000 	ldrh.w	r1, [lr]
 800b1e8:	0c12      	lsrs	r2, r2, #16
 800b1ea:	fb09 1102 	mla	r1, r9, r2, r1
 800b1ee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b1f2:	4567      	cmp	r7, ip
 800b1f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b1f8:	d8e6      	bhi.n	800b1c8 <__multiply+0x10c>
 800b1fa:	9a01      	ldr	r2, [sp, #4]
 800b1fc:	50a9      	str	r1, [r5, r2]
 800b1fe:	3504      	adds	r5, #4
 800b200:	e79a      	b.n	800b138 <__multiply+0x7c>
 800b202:	3e01      	subs	r6, #1
 800b204:	e79c      	b.n	800b140 <__multiply+0x84>
 800b206:	bf00      	nop
 800b208:	0800ce88 	.word	0x0800ce88
 800b20c:	0800cf14 	.word	0x0800cf14

0800b210 <__pow5mult>:
 800b210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b214:	4615      	mov	r5, r2
 800b216:	f012 0203 	ands.w	r2, r2, #3
 800b21a:	4606      	mov	r6, r0
 800b21c:	460f      	mov	r7, r1
 800b21e:	d007      	beq.n	800b230 <__pow5mult+0x20>
 800b220:	4c25      	ldr	r4, [pc, #148]	; (800b2b8 <__pow5mult+0xa8>)
 800b222:	3a01      	subs	r2, #1
 800b224:	2300      	movs	r3, #0
 800b226:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b22a:	f7ff fe51 	bl	800aed0 <__multadd>
 800b22e:	4607      	mov	r7, r0
 800b230:	10ad      	asrs	r5, r5, #2
 800b232:	d03d      	beq.n	800b2b0 <__pow5mult+0xa0>
 800b234:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b236:	b97c      	cbnz	r4, 800b258 <__pow5mult+0x48>
 800b238:	2010      	movs	r0, #16
 800b23a:	f7ff fdbf 	bl	800adbc <malloc>
 800b23e:	4602      	mov	r2, r0
 800b240:	6270      	str	r0, [r6, #36]	; 0x24
 800b242:	b928      	cbnz	r0, 800b250 <__pow5mult+0x40>
 800b244:	4b1d      	ldr	r3, [pc, #116]	; (800b2bc <__pow5mult+0xac>)
 800b246:	481e      	ldr	r0, [pc, #120]	; (800b2c0 <__pow5mult+0xb0>)
 800b248:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b24c:	f000 fd2e 	bl	800bcac <__assert_func>
 800b250:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b254:	6004      	str	r4, [r0, #0]
 800b256:	60c4      	str	r4, [r0, #12]
 800b258:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b25c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b260:	b94c      	cbnz	r4, 800b276 <__pow5mult+0x66>
 800b262:	f240 2171 	movw	r1, #625	; 0x271
 800b266:	4630      	mov	r0, r6
 800b268:	f7ff ff12 	bl	800b090 <__i2b>
 800b26c:	2300      	movs	r3, #0
 800b26e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b272:	4604      	mov	r4, r0
 800b274:	6003      	str	r3, [r0, #0]
 800b276:	f04f 0900 	mov.w	r9, #0
 800b27a:	07eb      	lsls	r3, r5, #31
 800b27c:	d50a      	bpl.n	800b294 <__pow5mult+0x84>
 800b27e:	4639      	mov	r1, r7
 800b280:	4622      	mov	r2, r4
 800b282:	4630      	mov	r0, r6
 800b284:	f7ff ff1a 	bl	800b0bc <__multiply>
 800b288:	4639      	mov	r1, r7
 800b28a:	4680      	mov	r8, r0
 800b28c:	4630      	mov	r0, r6
 800b28e:	f7ff fdfd 	bl	800ae8c <_Bfree>
 800b292:	4647      	mov	r7, r8
 800b294:	106d      	asrs	r5, r5, #1
 800b296:	d00b      	beq.n	800b2b0 <__pow5mult+0xa0>
 800b298:	6820      	ldr	r0, [r4, #0]
 800b29a:	b938      	cbnz	r0, 800b2ac <__pow5mult+0x9c>
 800b29c:	4622      	mov	r2, r4
 800b29e:	4621      	mov	r1, r4
 800b2a0:	4630      	mov	r0, r6
 800b2a2:	f7ff ff0b 	bl	800b0bc <__multiply>
 800b2a6:	6020      	str	r0, [r4, #0]
 800b2a8:	f8c0 9000 	str.w	r9, [r0]
 800b2ac:	4604      	mov	r4, r0
 800b2ae:	e7e4      	b.n	800b27a <__pow5mult+0x6a>
 800b2b0:	4638      	mov	r0, r7
 800b2b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2b6:	bf00      	nop
 800b2b8:	0800d060 	.word	0x0800d060
 800b2bc:	0800ce16 	.word	0x0800ce16
 800b2c0:	0800cf14 	.word	0x0800cf14

0800b2c4 <__lshift>:
 800b2c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2c8:	460c      	mov	r4, r1
 800b2ca:	6849      	ldr	r1, [r1, #4]
 800b2cc:	6923      	ldr	r3, [r4, #16]
 800b2ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b2d2:	68a3      	ldr	r3, [r4, #8]
 800b2d4:	4607      	mov	r7, r0
 800b2d6:	4691      	mov	r9, r2
 800b2d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b2dc:	f108 0601 	add.w	r6, r8, #1
 800b2e0:	42b3      	cmp	r3, r6
 800b2e2:	db0b      	blt.n	800b2fc <__lshift+0x38>
 800b2e4:	4638      	mov	r0, r7
 800b2e6:	f7ff fd91 	bl	800ae0c <_Balloc>
 800b2ea:	4605      	mov	r5, r0
 800b2ec:	b948      	cbnz	r0, 800b302 <__lshift+0x3e>
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	4b2a      	ldr	r3, [pc, #168]	; (800b39c <__lshift+0xd8>)
 800b2f2:	482b      	ldr	r0, [pc, #172]	; (800b3a0 <__lshift+0xdc>)
 800b2f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b2f8:	f000 fcd8 	bl	800bcac <__assert_func>
 800b2fc:	3101      	adds	r1, #1
 800b2fe:	005b      	lsls	r3, r3, #1
 800b300:	e7ee      	b.n	800b2e0 <__lshift+0x1c>
 800b302:	2300      	movs	r3, #0
 800b304:	f100 0114 	add.w	r1, r0, #20
 800b308:	f100 0210 	add.w	r2, r0, #16
 800b30c:	4618      	mov	r0, r3
 800b30e:	4553      	cmp	r3, sl
 800b310:	db37      	blt.n	800b382 <__lshift+0xbe>
 800b312:	6920      	ldr	r0, [r4, #16]
 800b314:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b318:	f104 0314 	add.w	r3, r4, #20
 800b31c:	f019 091f 	ands.w	r9, r9, #31
 800b320:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b324:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b328:	d02f      	beq.n	800b38a <__lshift+0xc6>
 800b32a:	f1c9 0e20 	rsb	lr, r9, #32
 800b32e:	468a      	mov	sl, r1
 800b330:	f04f 0c00 	mov.w	ip, #0
 800b334:	681a      	ldr	r2, [r3, #0]
 800b336:	fa02 f209 	lsl.w	r2, r2, r9
 800b33a:	ea42 020c 	orr.w	r2, r2, ip
 800b33e:	f84a 2b04 	str.w	r2, [sl], #4
 800b342:	f853 2b04 	ldr.w	r2, [r3], #4
 800b346:	4298      	cmp	r0, r3
 800b348:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b34c:	d8f2      	bhi.n	800b334 <__lshift+0x70>
 800b34e:	1b03      	subs	r3, r0, r4
 800b350:	3b15      	subs	r3, #21
 800b352:	f023 0303 	bic.w	r3, r3, #3
 800b356:	3304      	adds	r3, #4
 800b358:	f104 0215 	add.w	r2, r4, #21
 800b35c:	4290      	cmp	r0, r2
 800b35e:	bf38      	it	cc
 800b360:	2304      	movcc	r3, #4
 800b362:	f841 c003 	str.w	ip, [r1, r3]
 800b366:	f1bc 0f00 	cmp.w	ip, #0
 800b36a:	d001      	beq.n	800b370 <__lshift+0xac>
 800b36c:	f108 0602 	add.w	r6, r8, #2
 800b370:	3e01      	subs	r6, #1
 800b372:	4638      	mov	r0, r7
 800b374:	612e      	str	r6, [r5, #16]
 800b376:	4621      	mov	r1, r4
 800b378:	f7ff fd88 	bl	800ae8c <_Bfree>
 800b37c:	4628      	mov	r0, r5
 800b37e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b382:	f842 0f04 	str.w	r0, [r2, #4]!
 800b386:	3301      	adds	r3, #1
 800b388:	e7c1      	b.n	800b30e <__lshift+0x4a>
 800b38a:	3904      	subs	r1, #4
 800b38c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b390:	f841 2f04 	str.w	r2, [r1, #4]!
 800b394:	4298      	cmp	r0, r3
 800b396:	d8f9      	bhi.n	800b38c <__lshift+0xc8>
 800b398:	e7ea      	b.n	800b370 <__lshift+0xac>
 800b39a:	bf00      	nop
 800b39c:	0800ce88 	.word	0x0800ce88
 800b3a0:	0800cf14 	.word	0x0800cf14

0800b3a4 <__mcmp>:
 800b3a4:	b530      	push	{r4, r5, lr}
 800b3a6:	6902      	ldr	r2, [r0, #16]
 800b3a8:	690c      	ldr	r4, [r1, #16]
 800b3aa:	1b12      	subs	r2, r2, r4
 800b3ac:	d10e      	bne.n	800b3cc <__mcmp+0x28>
 800b3ae:	f100 0314 	add.w	r3, r0, #20
 800b3b2:	3114      	adds	r1, #20
 800b3b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b3b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b3bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b3c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b3c4:	42a5      	cmp	r5, r4
 800b3c6:	d003      	beq.n	800b3d0 <__mcmp+0x2c>
 800b3c8:	d305      	bcc.n	800b3d6 <__mcmp+0x32>
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	4610      	mov	r0, r2
 800b3ce:	bd30      	pop	{r4, r5, pc}
 800b3d0:	4283      	cmp	r3, r0
 800b3d2:	d3f3      	bcc.n	800b3bc <__mcmp+0x18>
 800b3d4:	e7fa      	b.n	800b3cc <__mcmp+0x28>
 800b3d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b3da:	e7f7      	b.n	800b3cc <__mcmp+0x28>

0800b3dc <__mdiff>:
 800b3dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3e0:	460c      	mov	r4, r1
 800b3e2:	4606      	mov	r6, r0
 800b3e4:	4611      	mov	r1, r2
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	4690      	mov	r8, r2
 800b3ea:	f7ff ffdb 	bl	800b3a4 <__mcmp>
 800b3ee:	1e05      	subs	r5, r0, #0
 800b3f0:	d110      	bne.n	800b414 <__mdiff+0x38>
 800b3f2:	4629      	mov	r1, r5
 800b3f4:	4630      	mov	r0, r6
 800b3f6:	f7ff fd09 	bl	800ae0c <_Balloc>
 800b3fa:	b930      	cbnz	r0, 800b40a <__mdiff+0x2e>
 800b3fc:	4b3a      	ldr	r3, [pc, #232]	; (800b4e8 <__mdiff+0x10c>)
 800b3fe:	4602      	mov	r2, r0
 800b400:	f240 2132 	movw	r1, #562	; 0x232
 800b404:	4839      	ldr	r0, [pc, #228]	; (800b4ec <__mdiff+0x110>)
 800b406:	f000 fc51 	bl	800bcac <__assert_func>
 800b40a:	2301      	movs	r3, #1
 800b40c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b410:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b414:	bfa4      	itt	ge
 800b416:	4643      	movge	r3, r8
 800b418:	46a0      	movge	r8, r4
 800b41a:	4630      	mov	r0, r6
 800b41c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b420:	bfa6      	itte	ge
 800b422:	461c      	movge	r4, r3
 800b424:	2500      	movge	r5, #0
 800b426:	2501      	movlt	r5, #1
 800b428:	f7ff fcf0 	bl	800ae0c <_Balloc>
 800b42c:	b920      	cbnz	r0, 800b438 <__mdiff+0x5c>
 800b42e:	4b2e      	ldr	r3, [pc, #184]	; (800b4e8 <__mdiff+0x10c>)
 800b430:	4602      	mov	r2, r0
 800b432:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b436:	e7e5      	b.n	800b404 <__mdiff+0x28>
 800b438:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b43c:	6926      	ldr	r6, [r4, #16]
 800b43e:	60c5      	str	r5, [r0, #12]
 800b440:	f104 0914 	add.w	r9, r4, #20
 800b444:	f108 0514 	add.w	r5, r8, #20
 800b448:	f100 0e14 	add.w	lr, r0, #20
 800b44c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b450:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b454:	f108 0210 	add.w	r2, r8, #16
 800b458:	46f2      	mov	sl, lr
 800b45a:	2100      	movs	r1, #0
 800b45c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b460:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b464:	fa1f f883 	uxth.w	r8, r3
 800b468:	fa11 f18b 	uxtah	r1, r1, fp
 800b46c:	0c1b      	lsrs	r3, r3, #16
 800b46e:	eba1 0808 	sub.w	r8, r1, r8
 800b472:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b476:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b47a:	fa1f f888 	uxth.w	r8, r8
 800b47e:	1419      	asrs	r1, r3, #16
 800b480:	454e      	cmp	r6, r9
 800b482:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b486:	f84a 3b04 	str.w	r3, [sl], #4
 800b48a:	d8e7      	bhi.n	800b45c <__mdiff+0x80>
 800b48c:	1b33      	subs	r3, r6, r4
 800b48e:	3b15      	subs	r3, #21
 800b490:	f023 0303 	bic.w	r3, r3, #3
 800b494:	3304      	adds	r3, #4
 800b496:	3415      	adds	r4, #21
 800b498:	42a6      	cmp	r6, r4
 800b49a:	bf38      	it	cc
 800b49c:	2304      	movcc	r3, #4
 800b49e:	441d      	add	r5, r3
 800b4a0:	4473      	add	r3, lr
 800b4a2:	469e      	mov	lr, r3
 800b4a4:	462e      	mov	r6, r5
 800b4a6:	4566      	cmp	r6, ip
 800b4a8:	d30e      	bcc.n	800b4c8 <__mdiff+0xec>
 800b4aa:	f10c 0203 	add.w	r2, ip, #3
 800b4ae:	1b52      	subs	r2, r2, r5
 800b4b0:	f022 0203 	bic.w	r2, r2, #3
 800b4b4:	3d03      	subs	r5, #3
 800b4b6:	45ac      	cmp	ip, r5
 800b4b8:	bf38      	it	cc
 800b4ba:	2200      	movcc	r2, #0
 800b4bc:	441a      	add	r2, r3
 800b4be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b4c2:	b17b      	cbz	r3, 800b4e4 <__mdiff+0x108>
 800b4c4:	6107      	str	r7, [r0, #16]
 800b4c6:	e7a3      	b.n	800b410 <__mdiff+0x34>
 800b4c8:	f856 8b04 	ldr.w	r8, [r6], #4
 800b4cc:	fa11 f288 	uxtah	r2, r1, r8
 800b4d0:	1414      	asrs	r4, r2, #16
 800b4d2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b4d6:	b292      	uxth	r2, r2
 800b4d8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b4dc:	f84e 2b04 	str.w	r2, [lr], #4
 800b4e0:	1421      	asrs	r1, r4, #16
 800b4e2:	e7e0      	b.n	800b4a6 <__mdiff+0xca>
 800b4e4:	3f01      	subs	r7, #1
 800b4e6:	e7ea      	b.n	800b4be <__mdiff+0xe2>
 800b4e8:	0800ce88 	.word	0x0800ce88
 800b4ec:	0800cf14 	.word	0x0800cf14

0800b4f0 <__ulp>:
 800b4f0:	b082      	sub	sp, #8
 800b4f2:	ed8d 0b00 	vstr	d0, [sp]
 800b4f6:	9b01      	ldr	r3, [sp, #4]
 800b4f8:	4912      	ldr	r1, [pc, #72]	; (800b544 <__ulp+0x54>)
 800b4fa:	4019      	ands	r1, r3
 800b4fc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b500:	2900      	cmp	r1, #0
 800b502:	dd05      	ble.n	800b510 <__ulp+0x20>
 800b504:	2200      	movs	r2, #0
 800b506:	460b      	mov	r3, r1
 800b508:	ec43 2b10 	vmov	d0, r2, r3
 800b50c:	b002      	add	sp, #8
 800b50e:	4770      	bx	lr
 800b510:	4249      	negs	r1, r1
 800b512:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b516:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b51a:	f04f 0200 	mov.w	r2, #0
 800b51e:	f04f 0300 	mov.w	r3, #0
 800b522:	da04      	bge.n	800b52e <__ulp+0x3e>
 800b524:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b528:	fa41 f300 	asr.w	r3, r1, r0
 800b52c:	e7ec      	b.n	800b508 <__ulp+0x18>
 800b52e:	f1a0 0114 	sub.w	r1, r0, #20
 800b532:	291e      	cmp	r1, #30
 800b534:	bfda      	itte	le
 800b536:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b53a:	fa20 f101 	lsrle.w	r1, r0, r1
 800b53e:	2101      	movgt	r1, #1
 800b540:	460a      	mov	r2, r1
 800b542:	e7e1      	b.n	800b508 <__ulp+0x18>
 800b544:	7ff00000 	.word	0x7ff00000

0800b548 <__b2d>:
 800b548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b54a:	6905      	ldr	r5, [r0, #16]
 800b54c:	f100 0714 	add.w	r7, r0, #20
 800b550:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b554:	1f2e      	subs	r6, r5, #4
 800b556:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b55a:	4620      	mov	r0, r4
 800b55c:	f7ff fd48 	bl	800aff0 <__hi0bits>
 800b560:	f1c0 0320 	rsb	r3, r0, #32
 800b564:	280a      	cmp	r0, #10
 800b566:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b5e4 <__b2d+0x9c>
 800b56a:	600b      	str	r3, [r1, #0]
 800b56c:	dc14      	bgt.n	800b598 <__b2d+0x50>
 800b56e:	f1c0 0e0b 	rsb	lr, r0, #11
 800b572:	fa24 f10e 	lsr.w	r1, r4, lr
 800b576:	42b7      	cmp	r7, r6
 800b578:	ea41 030c 	orr.w	r3, r1, ip
 800b57c:	bf34      	ite	cc
 800b57e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b582:	2100      	movcs	r1, #0
 800b584:	3015      	adds	r0, #21
 800b586:	fa04 f000 	lsl.w	r0, r4, r0
 800b58a:	fa21 f10e 	lsr.w	r1, r1, lr
 800b58e:	ea40 0201 	orr.w	r2, r0, r1
 800b592:	ec43 2b10 	vmov	d0, r2, r3
 800b596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b598:	42b7      	cmp	r7, r6
 800b59a:	bf3a      	itte	cc
 800b59c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b5a0:	f1a5 0608 	subcc.w	r6, r5, #8
 800b5a4:	2100      	movcs	r1, #0
 800b5a6:	380b      	subs	r0, #11
 800b5a8:	d017      	beq.n	800b5da <__b2d+0x92>
 800b5aa:	f1c0 0c20 	rsb	ip, r0, #32
 800b5ae:	fa04 f500 	lsl.w	r5, r4, r0
 800b5b2:	42be      	cmp	r6, r7
 800b5b4:	fa21 f40c 	lsr.w	r4, r1, ip
 800b5b8:	ea45 0504 	orr.w	r5, r5, r4
 800b5bc:	bf8c      	ite	hi
 800b5be:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b5c2:	2400      	movls	r4, #0
 800b5c4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b5c8:	fa01 f000 	lsl.w	r0, r1, r0
 800b5cc:	fa24 f40c 	lsr.w	r4, r4, ip
 800b5d0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b5d4:	ea40 0204 	orr.w	r2, r0, r4
 800b5d8:	e7db      	b.n	800b592 <__b2d+0x4a>
 800b5da:	ea44 030c 	orr.w	r3, r4, ip
 800b5de:	460a      	mov	r2, r1
 800b5e0:	e7d7      	b.n	800b592 <__b2d+0x4a>
 800b5e2:	bf00      	nop
 800b5e4:	3ff00000 	.word	0x3ff00000

0800b5e8 <__d2b>:
 800b5e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b5ec:	4689      	mov	r9, r1
 800b5ee:	2101      	movs	r1, #1
 800b5f0:	ec57 6b10 	vmov	r6, r7, d0
 800b5f4:	4690      	mov	r8, r2
 800b5f6:	f7ff fc09 	bl	800ae0c <_Balloc>
 800b5fa:	4604      	mov	r4, r0
 800b5fc:	b930      	cbnz	r0, 800b60c <__d2b+0x24>
 800b5fe:	4602      	mov	r2, r0
 800b600:	4b25      	ldr	r3, [pc, #148]	; (800b698 <__d2b+0xb0>)
 800b602:	4826      	ldr	r0, [pc, #152]	; (800b69c <__d2b+0xb4>)
 800b604:	f240 310a 	movw	r1, #778	; 0x30a
 800b608:	f000 fb50 	bl	800bcac <__assert_func>
 800b60c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b610:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b614:	bb35      	cbnz	r5, 800b664 <__d2b+0x7c>
 800b616:	2e00      	cmp	r6, #0
 800b618:	9301      	str	r3, [sp, #4]
 800b61a:	d028      	beq.n	800b66e <__d2b+0x86>
 800b61c:	4668      	mov	r0, sp
 800b61e:	9600      	str	r6, [sp, #0]
 800b620:	f7ff fd06 	bl	800b030 <__lo0bits>
 800b624:	9900      	ldr	r1, [sp, #0]
 800b626:	b300      	cbz	r0, 800b66a <__d2b+0x82>
 800b628:	9a01      	ldr	r2, [sp, #4]
 800b62a:	f1c0 0320 	rsb	r3, r0, #32
 800b62e:	fa02 f303 	lsl.w	r3, r2, r3
 800b632:	430b      	orrs	r3, r1
 800b634:	40c2      	lsrs	r2, r0
 800b636:	6163      	str	r3, [r4, #20]
 800b638:	9201      	str	r2, [sp, #4]
 800b63a:	9b01      	ldr	r3, [sp, #4]
 800b63c:	61a3      	str	r3, [r4, #24]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	bf14      	ite	ne
 800b642:	2202      	movne	r2, #2
 800b644:	2201      	moveq	r2, #1
 800b646:	6122      	str	r2, [r4, #16]
 800b648:	b1d5      	cbz	r5, 800b680 <__d2b+0x98>
 800b64a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b64e:	4405      	add	r5, r0
 800b650:	f8c9 5000 	str.w	r5, [r9]
 800b654:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b658:	f8c8 0000 	str.w	r0, [r8]
 800b65c:	4620      	mov	r0, r4
 800b65e:	b003      	add	sp, #12
 800b660:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b668:	e7d5      	b.n	800b616 <__d2b+0x2e>
 800b66a:	6161      	str	r1, [r4, #20]
 800b66c:	e7e5      	b.n	800b63a <__d2b+0x52>
 800b66e:	a801      	add	r0, sp, #4
 800b670:	f7ff fcde 	bl	800b030 <__lo0bits>
 800b674:	9b01      	ldr	r3, [sp, #4]
 800b676:	6163      	str	r3, [r4, #20]
 800b678:	2201      	movs	r2, #1
 800b67a:	6122      	str	r2, [r4, #16]
 800b67c:	3020      	adds	r0, #32
 800b67e:	e7e3      	b.n	800b648 <__d2b+0x60>
 800b680:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b684:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b688:	f8c9 0000 	str.w	r0, [r9]
 800b68c:	6918      	ldr	r0, [r3, #16]
 800b68e:	f7ff fcaf 	bl	800aff0 <__hi0bits>
 800b692:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b696:	e7df      	b.n	800b658 <__d2b+0x70>
 800b698:	0800ce88 	.word	0x0800ce88
 800b69c:	0800cf14 	.word	0x0800cf14

0800b6a0 <__ratio>:
 800b6a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6a4:	4688      	mov	r8, r1
 800b6a6:	4669      	mov	r1, sp
 800b6a8:	4681      	mov	r9, r0
 800b6aa:	f7ff ff4d 	bl	800b548 <__b2d>
 800b6ae:	a901      	add	r1, sp, #4
 800b6b0:	4640      	mov	r0, r8
 800b6b2:	ec55 4b10 	vmov	r4, r5, d0
 800b6b6:	f7ff ff47 	bl	800b548 <__b2d>
 800b6ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b6be:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b6c2:	eba3 0c02 	sub.w	ip, r3, r2
 800b6c6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b6ca:	1a9b      	subs	r3, r3, r2
 800b6cc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b6d0:	ec51 0b10 	vmov	r0, r1, d0
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	bfd6      	itet	le
 800b6d8:	460a      	movle	r2, r1
 800b6da:	462a      	movgt	r2, r5
 800b6dc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b6e0:	468b      	mov	fp, r1
 800b6e2:	462f      	mov	r7, r5
 800b6e4:	bfd4      	ite	le
 800b6e6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b6ea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b6ee:	4620      	mov	r0, r4
 800b6f0:	ee10 2a10 	vmov	r2, s0
 800b6f4:	465b      	mov	r3, fp
 800b6f6:	4639      	mov	r1, r7
 800b6f8:	f7f5 f8a8 	bl	800084c <__aeabi_ddiv>
 800b6fc:	ec41 0b10 	vmov	d0, r0, r1
 800b700:	b003      	add	sp, #12
 800b702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b706 <__copybits>:
 800b706:	3901      	subs	r1, #1
 800b708:	b570      	push	{r4, r5, r6, lr}
 800b70a:	1149      	asrs	r1, r1, #5
 800b70c:	6914      	ldr	r4, [r2, #16]
 800b70e:	3101      	adds	r1, #1
 800b710:	f102 0314 	add.w	r3, r2, #20
 800b714:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b718:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b71c:	1f05      	subs	r5, r0, #4
 800b71e:	42a3      	cmp	r3, r4
 800b720:	d30c      	bcc.n	800b73c <__copybits+0x36>
 800b722:	1aa3      	subs	r3, r4, r2
 800b724:	3b11      	subs	r3, #17
 800b726:	f023 0303 	bic.w	r3, r3, #3
 800b72a:	3211      	adds	r2, #17
 800b72c:	42a2      	cmp	r2, r4
 800b72e:	bf88      	it	hi
 800b730:	2300      	movhi	r3, #0
 800b732:	4418      	add	r0, r3
 800b734:	2300      	movs	r3, #0
 800b736:	4288      	cmp	r0, r1
 800b738:	d305      	bcc.n	800b746 <__copybits+0x40>
 800b73a:	bd70      	pop	{r4, r5, r6, pc}
 800b73c:	f853 6b04 	ldr.w	r6, [r3], #4
 800b740:	f845 6f04 	str.w	r6, [r5, #4]!
 800b744:	e7eb      	b.n	800b71e <__copybits+0x18>
 800b746:	f840 3b04 	str.w	r3, [r0], #4
 800b74a:	e7f4      	b.n	800b736 <__copybits+0x30>

0800b74c <__any_on>:
 800b74c:	f100 0214 	add.w	r2, r0, #20
 800b750:	6900      	ldr	r0, [r0, #16]
 800b752:	114b      	asrs	r3, r1, #5
 800b754:	4298      	cmp	r0, r3
 800b756:	b510      	push	{r4, lr}
 800b758:	db11      	blt.n	800b77e <__any_on+0x32>
 800b75a:	dd0a      	ble.n	800b772 <__any_on+0x26>
 800b75c:	f011 011f 	ands.w	r1, r1, #31
 800b760:	d007      	beq.n	800b772 <__any_on+0x26>
 800b762:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b766:	fa24 f001 	lsr.w	r0, r4, r1
 800b76a:	fa00 f101 	lsl.w	r1, r0, r1
 800b76e:	428c      	cmp	r4, r1
 800b770:	d10b      	bne.n	800b78a <__any_on+0x3e>
 800b772:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b776:	4293      	cmp	r3, r2
 800b778:	d803      	bhi.n	800b782 <__any_on+0x36>
 800b77a:	2000      	movs	r0, #0
 800b77c:	bd10      	pop	{r4, pc}
 800b77e:	4603      	mov	r3, r0
 800b780:	e7f7      	b.n	800b772 <__any_on+0x26>
 800b782:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b786:	2900      	cmp	r1, #0
 800b788:	d0f5      	beq.n	800b776 <__any_on+0x2a>
 800b78a:	2001      	movs	r0, #1
 800b78c:	e7f6      	b.n	800b77c <__any_on+0x30>

0800b78e <_calloc_r>:
 800b78e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b790:	fba1 2402 	umull	r2, r4, r1, r2
 800b794:	b94c      	cbnz	r4, 800b7aa <_calloc_r+0x1c>
 800b796:	4611      	mov	r1, r2
 800b798:	9201      	str	r2, [sp, #4]
 800b79a:	f000 f87b 	bl	800b894 <_malloc_r>
 800b79e:	9a01      	ldr	r2, [sp, #4]
 800b7a0:	4605      	mov	r5, r0
 800b7a2:	b930      	cbnz	r0, 800b7b2 <_calloc_r+0x24>
 800b7a4:	4628      	mov	r0, r5
 800b7a6:	b003      	add	sp, #12
 800b7a8:	bd30      	pop	{r4, r5, pc}
 800b7aa:	220c      	movs	r2, #12
 800b7ac:	6002      	str	r2, [r0, #0]
 800b7ae:	2500      	movs	r5, #0
 800b7b0:	e7f8      	b.n	800b7a4 <_calloc_r+0x16>
 800b7b2:	4621      	mov	r1, r4
 800b7b4:	f7fc fbc0 	bl	8007f38 <memset>
 800b7b8:	e7f4      	b.n	800b7a4 <_calloc_r+0x16>
	...

0800b7bc <_free_r>:
 800b7bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b7be:	2900      	cmp	r1, #0
 800b7c0:	d044      	beq.n	800b84c <_free_r+0x90>
 800b7c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7c6:	9001      	str	r0, [sp, #4]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	f1a1 0404 	sub.w	r4, r1, #4
 800b7ce:	bfb8      	it	lt
 800b7d0:	18e4      	addlt	r4, r4, r3
 800b7d2:	f000 fab5 	bl	800bd40 <__malloc_lock>
 800b7d6:	4a1e      	ldr	r2, [pc, #120]	; (800b850 <_free_r+0x94>)
 800b7d8:	9801      	ldr	r0, [sp, #4]
 800b7da:	6813      	ldr	r3, [r2, #0]
 800b7dc:	b933      	cbnz	r3, 800b7ec <_free_r+0x30>
 800b7de:	6063      	str	r3, [r4, #4]
 800b7e0:	6014      	str	r4, [r2, #0]
 800b7e2:	b003      	add	sp, #12
 800b7e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b7e8:	f000 bab0 	b.w	800bd4c <__malloc_unlock>
 800b7ec:	42a3      	cmp	r3, r4
 800b7ee:	d908      	bls.n	800b802 <_free_r+0x46>
 800b7f0:	6825      	ldr	r5, [r4, #0]
 800b7f2:	1961      	adds	r1, r4, r5
 800b7f4:	428b      	cmp	r3, r1
 800b7f6:	bf01      	itttt	eq
 800b7f8:	6819      	ldreq	r1, [r3, #0]
 800b7fa:	685b      	ldreq	r3, [r3, #4]
 800b7fc:	1949      	addeq	r1, r1, r5
 800b7fe:	6021      	streq	r1, [r4, #0]
 800b800:	e7ed      	b.n	800b7de <_free_r+0x22>
 800b802:	461a      	mov	r2, r3
 800b804:	685b      	ldr	r3, [r3, #4]
 800b806:	b10b      	cbz	r3, 800b80c <_free_r+0x50>
 800b808:	42a3      	cmp	r3, r4
 800b80a:	d9fa      	bls.n	800b802 <_free_r+0x46>
 800b80c:	6811      	ldr	r1, [r2, #0]
 800b80e:	1855      	adds	r5, r2, r1
 800b810:	42a5      	cmp	r5, r4
 800b812:	d10b      	bne.n	800b82c <_free_r+0x70>
 800b814:	6824      	ldr	r4, [r4, #0]
 800b816:	4421      	add	r1, r4
 800b818:	1854      	adds	r4, r2, r1
 800b81a:	42a3      	cmp	r3, r4
 800b81c:	6011      	str	r1, [r2, #0]
 800b81e:	d1e0      	bne.n	800b7e2 <_free_r+0x26>
 800b820:	681c      	ldr	r4, [r3, #0]
 800b822:	685b      	ldr	r3, [r3, #4]
 800b824:	6053      	str	r3, [r2, #4]
 800b826:	4421      	add	r1, r4
 800b828:	6011      	str	r1, [r2, #0]
 800b82a:	e7da      	b.n	800b7e2 <_free_r+0x26>
 800b82c:	d902      	bls.n	800b834 <_free_r+0x78>
 800b82e:	230c      	movs	r3, #12
 800b830:	6003      	str	r3, [r0, #0]
 800b832:	e7d6      	b.n	800b7e2 <_free_r+0x26>
 800b834:	6825      	ldr	r5, [r4, #0]
 800b836:	1961      	adds	r1, r4, r5
 800b838:	428b      	cmp	r3, r1
 800b83a:	bf04      	itt	eq
 800b83c:	6819      	ldreq	r1, [r3, #0]
 800b83e:	685b      	ldreq	r3, [r3, #4]
 800b840:	6063      	str	r3, [r4, #4]
 800b842:	bf04      	itt	eq
 800b844:	1949      	addeq	r1, r1, r5
 800b846:	6021      	streq	r1, [r4, #0]
 800b848:	6054      	str	r4, [r2, #4]
 800b84a:	e7ca      	b.n	800b7e2 <_free_r+0x26>
 800b84c:	b003      	add	sp, #12
 800b84e:	bd30      	pop	{r4, r5, pc}
 800b850:	20000440 	.word	0x20000440

0800b854 <sbrk_aligned>:
 800b854:	b570      	push	{r4, r5, r6, lr}
 800b856:	4e0e      	ldr	r6, [pc, #56]	; (800b890 <sbrk_aligned+0x3c>)
 800b858:	460c      	mov	r4, r1
 800b85a:	6831      	ldr	r1, [r6, #0]
 800b85c:	4605      	mov	r5, r0
 800b85e:	b911      	cbnz	r1, 800b866 <sbrk_aligned+0x12>
 800b860:	f000 f9f2 	bl	800bc48 <_sbrk_r>
 800b864:	6030      	str	r0, [r6, #0]
 800b866:	4621      	mov	r1, r4
 800b868:	4628      	mov	r0, r5
 800b86a:	f000 f9ed 	bl	800bc48 <_sbrk_r>
 800b86e:	1c43      	adds	r3, r0, #1
 800b870:	d00a      	beq.n	800b888 <sbrk_aligned+0x34>
 800b872:	1cc4      	adds	r4, r0, #3
 800b874:	f024 0403 	bic.w	r4, r4, #3
 800b878:	42a0      	cmp	r0, r4
 800b87a:	d007      	beq.n	800b88c <sbrk_aligned+0x38>
 800b87c:	1a21      	subs	r1, r4, r0
 800b87e:	4628      	mov	r0, r5
 800b880:	f000 f9e2 	bl	800bc48 <_sbrk_r>
 800b884:	3001      	adds	r0, #1
 800b886:	d101      	bne.n	800b88c <sbrk_aligned+0x38>
 800b888:	f04f 34ff 	mov.w	r4, #4294967295
 800b88c:	4620      	mov	r0, r4
 800b88e:	bd70      	pop	{r4, r5, r6, pc}
 800b890:	20000444 	.word	0x20000444

0800b894 <_malloc_r>:
 800b894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b898:	1ccd      	adds	r5, r1, #3
 800b89a:	f025 0503 	bic.w	r5, r5, #3
 800b89e:	3508      	adds	r5, #8
 800b8a0:	2d0c      	cmp	r5, #12
 800b8a2:	bf38      	it	cc
 800b8a4:	250c      	movcc	r5, #12
 800b8a6:	2d00      	cmp	r5, #0
 800b8a8:	4607      	mov	r7, r0
 800b8aa:	db01      	blt.n	800b8b0 <_malloc_r+0x1c>
 800b8ac:	42a9      	cmp	r1, r5
 800b8ae:	d905      	bls.n	800b8bc <_malloc_r+0x28>
 800b8b0:	230c      	movs	r3, #12
 800b8b2:	603b      	str	r3, [r7, #0]
 800b8b4:	2600      	movs	r6, #0
 800b8b6:	4630      	mov	r0, r6
 800b8b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8bc:	4e2e      	ldr	r6, [pc, #184]	; (800b978 <_malloc_r+0xe4>)
 800b8be:	f000 fa3f 	bl	800bd40 <__malloc_lock>
 800b8c2:	6833      	ldr	r3, [r6, #0]
 800b8c4:	461c      	mov	r4, r3
 800b8c6:	bb34      	cbnz	r4, 800b916 <_malloc_r+0x82>
 800b8c8:	4629      	mov	r1, r5
 800b8ca:	4638      	mov	r0, r7
 800b8cc:	f7ff ffc2 	bl	800b854 <sbrk_aligned>
 800b8d0:	1c43      	adds	r3, r0, #1
 800b8d2:	4604      	mov	r4, r0
 800b8d4:	d14d      	bne.n	800b972 <_malloc_r+0xde>
 800b8d6:	6834      	ldr	r4, [r6, #0]
 800b8d8:	4626      	mov	r6, r4
 800b8da:	2e00      	cmp	r6, #0
 800b8dc:	d140      	bne.n	800b960 <_malloc_r+0xcc>
 800b8de:	6823      	ldr	r3, [r4, #0]
 800b8e0:	4631      	mov	r1, r6
 800b8e2:	4638      	mov	r0, r7
 800b8e4:	eb04 0803 	add.w	r8, r4, r3
 800b8e8:	f000 f9ae 	bl	800bc48 <_sbrk_r>
 800b8ec:	4580      	cmp	r8, r0
 800b8ee:	d13a      	bne.n	800b966 <_malloc_r+0xd2>
 800b8f0:	6821      	ldr	r1, [r4, #0]
 800b8f2:	3503      	adds	r5, #3
 800b8f4:	1a6d      	subs	r5, r5, r1
 800b8f6:	f025 0503 	bic.w	r5, r5, #3
 800b8fa:	3508      	adds	r5, #8
 800b8fc:	2d0c      	cmp	r5, #12
 800b8fe:	bf38      	it	cc
 800b900:	250c      	movcc	r5, #12
 800b902:	4629      	mov	r1, r5
 800b904:	4638      	mov	r0, r7
 800b906:	f7ff ffa5 	bl	800b854 <sbrk_aligned>
 800b90a:	3001      	adds	r0, #1
 800b90c:	d02b      	beq.n	800b966 <_malloc_r+0xd2>
 800b90e:	6823      	ldr	r3, [r4, #0]
 800b910:	442b      	add	r3, r5
 800b912:	6023      	str	r3, [r4, #0]
 800b914:	e00e      	b.n	800b934 <_malloc_r+0xa0>
 800b916:	6822      	ldr	r2, [r4, #0]
 800b918:	1b52      	subs	r2, r2, r5
 800b91a:	d41e      	bmi.n	800b95a <_malloc_r+0xc6>
 800b91c:	2a0b      	cmp	r2, #11
 800b91e:	d916      	bls.n	800b94e <_malloc_r+0xba>
 800b920:	1961      	adds	r1, r4, r5
 800b922:	42a3      	cmp	r3, r4
 800b924:	6025      	str	r5, [r4, #0]
 800b926:	bf18      	it	ne
 800b928:	6059      	strne	r1, [r3, #4]
 800b92a:	6863      	ldr	r3, [r4, #4]
 800b92c:	bf08      	it	eq
 800b92e:	6031      	streq	r1, [r6, #0]
 800b930:	5162      	str	r2, [r4, r5]
 800b932:	604b      	str	r3, [r1, #4]
 800b934:	4638      	mov	r0, r7
 800b936:	f104 060b 	add.w	r6, r4, #11
 800b93a:	f000 fa07 	bl	800bd4c <__malloc_unlock>
 800b93e:	f026 0607 	bic.w	r6, r6, #7
 800b942:	1d23      	adds	r3, r4, #4
 800b944:	1af2      	subs	r2, r6, r3
 800b946:	d0b6      	beq.n	800b8b6 <_malloc_r+0x22>
 800b948:	1b9b      	subs	r3, r3, r6
 800b94a:	50a3      	str	r3, [r4, r2]
 800b94c:	e7b3      	b.n	800b8b6 <_malloc_r+0x22>
 800b94e:	6862      	ldr	r2, [r4, #4]
 800b950:	42a3      	cmp	r3, r4
 800b952:	bf0c      	ite	eq
 800b954:	6032      	streq	r2, [r6, #0]
 800b956:	605a      	strne	r2, [r3, #4]
 800b958:	e7ec      	b.n	800b934 <_malloc_r+0xa0>
 800b95a:	4623      	mov	r3, r4
 800b95c:	6864      	ldr	r4, [r4, #4]
 800b95e:	e7b2      	b.n	800b8c6 <_malloc_r+0x32>
 800b960:	4634      	mov	r4, r6
 800b962:	6876      	ldr	r6, [r6, #4]
 800b964:	e7b9      	b.n	800b8da <_malloc_r+0x46>
 800b966:	230c      	movs	r3, #12
 800b968:	603b      	str	r3, [r7, #0]
 800b96a:	4638      	mov	r0, r7
 800b96c:	f000 f9ee 	bl	800bd4c <__malloc_unlock>
 800b970:	e7a1      	b.n	800b8b6 <_malloc_r+0x22>
 800b972:	6025      	str	r5, [r4, #0]
 800b974:	e7de      	b.n	800b934 <_malloc_r+0xa0>
 800b976:	bf00      	nop
 800b978:	20000440 	.word	0x20000440

0800b97c <__ssputs_r>:
 800b97c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b980:	688e      	ldr	r6, [r1, #8]
 800b982:	429e      	cmp	r6, r3
 800b984:	4682      	mov	sl, r0
 800b986:	460c      	mov	r4, r1
 800b988:	4690      	mov	r8, r2
 800b98a:	461f      	mov	r7, r3
 800b98c:	d838      	bhi.n	800ba00 <__ssputs_r+0x84>
 800b98e:	898a      	ldrh	r2, [r1, #12]
 800b990:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b994:	d032      	beq.n	800b9fc <__ssputs_r+0x80>
 800b996:	6825      	ldr	r5, [r4, #0]
 800b998:	6909      	ldr	r1, [r1, #16]
 800b99a:	eba5 0901 	sub.w	r9, r5, r1
 800b99e:	6965      	ldr	r5, [r4, #20]
 800b9a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b9a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b9a8:	3301      	adds	r3, #1
 800b9aa:	444b      	add	r3, r9
 800b9ac:	106d      	asrs	r5, r5, #1
 800b9ae:	429d      	cmp	r5, r3
 800b9b0:	bf38      	it	cc
 800b9b2:	461d      	movcc	r5, r3
 800b9b4:	0553      	lsls	r3, r2, #21
 800b9b6:	d531      	bpl.n	800ba1c <__ssputs_r+0xa0>
 800b9b8:	4629      	mov	r1, r5
 800b9ba:	f7ff ff6b 	bl	800b894 <_malloc_r>
 800b9be:	4606      	mov	r6, r0
 800b9c0:	b950      	cbnz	r0, 800b9d8 <__ssputs_r+0x5c>
 800b9c2:	230c      	movs	r3, #12
 800b9c4:	f8ca 3000 	str.w	r3, [sl]
 800b9c8:	89a3      	ldrh	r3, [r4, #12]
 800b9ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9ce:	81a3      	strh	r3, [r4, #12]
 800b9d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9d8:	6921      	ldr	r1, [r4, #16]
 800b9da:	464a      	mov	r2, r9
 800b9dc:	f7ff fa08 	bl	800adf0 <memcpy>
 800b9e0:	89a3      	ldrh	r3, [r4, #12]
 800b9e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b9e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9ea:	81a3      	strh	r3, [r4, #12]
 800b9ec:	6126      	str	r6, [r4, #16]
 800b9ee:	6165      	str	r5, [r4, #20]
 800b9f0:	444e      	add	r6, r9
 800b9f2:	eba5 0509 	sub.w	r5, r5, r9
 800b9f6:	6026      	str	r6, [r4, #0]
 800b9f8:	60a5      	str	r5, [r4, #8]
 800b9fa:	463e      	mov	r6, r7
 800b9fc:	42be      	cmp	r6, r7
 800b9fe:	d900      	bls.n	800ba02 <__ssputs_r+0x86>
 800ba00:	463e      	mov	r6, r7
 800ba02:	6820      	ldr	r0, [r4, #0]
 800ba04:	4632      	mov	r2, r6
 800ba06:	4641      	mov	r1, r8
 800ba08:	f000 f980 	bl	800bd0c <memmove>
 800ba0c:	68a3      	ldr	r3, [r4, #8]
 800ba0e:	1b9b      	subs	r3, r3, r6
 800ba10:	60a3      	str	r3, [r4, #8]
 800ba12:	6823      	ldr	r3, [r4, #0]
 800ba14:	4433      	add	r3, r6
 800ba16:	6023      	str	r3, [r4, #0]
 800ba18:	2000      	movs	r0, #0
 800ba1a:	e7db      	b.n	800b9d4 <__ssputs_r+0x58>
 800ba1c:	462a      	mov	r2, r5
 800ba1e:	f000 f99b 	bl	800bd58 <_realloc_r>
 800ba22:	4606      	mov	r6, r0
 800ba24:	2800      	cmp	r0, #0
 800ba26:	d1e1      	bne.n	800b9ec <__ssputs_r+0x70>
 800ba28:	6921      	ldr	r1, [r4, #16]
 800ba2a:	4650      	mov	r0, sl
 800ba2c:	f7ff fec6 	bl	800b7bc <_free_r>
 800ba30:	e7c7      	b.n	800b9c2 <__ssputs_r+0x46>
	...

0800ba34 <_svfiprintf_r>:
 800ba34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba38:	4698      	mov	r8, r3
 800ba3a:	898b      	ldrh	r3, [r1, #12]
 800ba3c:	061b      	lsls	r3, r3, #24
 800ba3e:	b09d      	sub	sp, #116	; 0x74
 800ba40:	4607      	mov	r7, r0
 800ba42:	460d      	mov	r5, r1
 800ba44:	4614      	mov	r4, r2
 800ba46:	d50e      	bpl.n	800ba66 <_svfiprintf_r+0x32>
 800ba48:	690b      	ldr	r3, [r1, #16]
 800ba4a:	b963      	cbnz	r3, 800ba66 <_svfiprintf_r+0x32>
 800ba4c:	2140      	movs	r1, #64	; 0x40
 800ba4e:	f7ff ff21 	bl	800b894 <_malloc_r>
 800ba52:	6028      	str	r0, [r5, #0]
 800ba54:	6128      	str	r0, [r5, #16]
 800ba56:	b920      	cbnz	r0, 800ba62 <_svfiprintf_r+0x2e>
 800ba58:	230c      	movs	r3, #12
 800ba5a:	603b      	str	r3, [r7, #0]
 800ba5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba60:	e0d1      	b.n	800bc06 <_svfiprintf_r+0x1d2>
 800ba62:	2340      	movs	r3, #64	; 0x40
 800ba64:	616b      	str	r3, [r5, #20]
 800ba66:	2300      	movs	r3, #0
 800ba68:	9309      	str	r3, [sp, #36]	; 0x24
 800ba6a:	2320      	movs	r3, #32
 800ba6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba70:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba74:	2330      	movs	r3, #48	; 0x30
 800ba76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bc20 <_svfiprintf_r+0x1ec>
 800ba7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba7e:	f04f 0901 	mov.w	r9, #1
 800ba82:	4623      	mov	r3, r4
 800ba84:	469a      	mov	sl, r3
 800ba86:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba8a:	b10a      	cbz	r2, 800ba90 <_svfiprintf_r+0x5c>
 800ba8c:	2a25      	cmp	r2, #37	; 0x25
 800ba8e:	d1f9      	bne.n	800ba84 <_svfiprintf_r+0x50>
 800ba90:	ebba 0b04 	subs.w	fp, sl, r4
 800ba94:	d00b      	beq.n	800baae <_svfiprintf_r+0x7a>
 800ba96:	465b      	mov	r3, fp
 800ba98:	4622      	mov	r2, r4
 800ba9a:	4629      	mov	r1, r5
 800ba9c:	4638      	mov	r0, r7
 800ba9e:	f7ff ff6d 	bl	800b97c <__ssputs_r>
 800baa2:	3001      	adds	r0, #1
 800baa4:	f000 80aa 	beq.w	800bbfc <_svfiprintf_r+0x1c8>
 800baa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800baaa:	445a      	add	r2, fp
 800baac:	9209      	str	r2, [sp, #36]	; 0x24
 800baae:	f89a 3000 	ldrb.w	r3, [sl]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	f000 80a2 	beq.w	800bbfc <_svfiprintf_r+0x1c8>
 800bab8:	2300      	movs	r3, #0
 800baba:	f04f 32ff 	mov.w	r2, #4294967295
 800babe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bac2:	f10a 0a01 	add.w	sl, sl, #1
 800bac6:	9304      	str	r3, [sp, #16]
 800bac8:	9307      	str	r3, [sp, #28]
 800baca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bace:	931a      	str	r3, [sp, #104]	; 0x68
 800bad0:	4654      	mov	r4, sl
 800bad2:	2205      	movs	r2, #5
 800bad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bad8:	4851      	ldr	r0, [pc, #324]	; (800bc20 <_svfiprintf_r+0x1ec>)
 800bada:	f7f4 fb81 	bl	80001e0 <memchr>
 800bade:	9a04      	ldr	r2, [sp, #16]
 800bae0:	b9d8      	cbnz	r0, 800bb1a <_svfiprintf_r+0xe6>
 800bae2:	06d0      	lsls	r0, r2, #27
 800bae4:	bf44      	itt	mi
 800bae6:	2320      	movmi	r3, #32
 800bae8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800baec:	0711      	lsls	r1, r2, #28
 800baee:	bf44      	itt	mi
 800baf0:	232b      	movmi	r3, #43	; 0x2b
 800baf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800baf6:	f89a 3000 	ldrb.w	r3, [sl]
 800bafa:	2b2a      	cmp	r3, #42	; 0x2a
 800bafc:	d015      	beq.n	800bb2a <_svfiprintf_r+0xf6>
 800bafe:	9a07      	ldr	r2, [sp, #28]
 800bb00:	4654      	mov	r4, sl
 800bb02:	2000      	movs	r0, #0
 800bb04:	f04f 0c0a 	mov.w	ip, #10
 800bb08:	4621      	mov	r1, r4
 800bb0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb0e:	3b30      	subs	r3, #48	; 0x30
 800bb10:	2b09      	cmp	r3, #9
 800bb12:	d94e      	bls.n	800bbb2 <_svfiprintf_r+0x17e>
 800bb14:	b1b0      	cbz	r0, 800bb44 <_svfiprintf_r+0x110>
 800bb16:	9207      	str	r2, [sp, #28]
 800bb18:	e014      	b.n	800bb44 <_svfiprintf_r+0x110>
 800bb1a:	eba0 0308 	sub.w	r3, r0, r8
 800bb1e:	fa09 f303 	lsl.w	r3, r9, r3
 800bb22:	4313      	orrs	r3, r2
 800bb24:	9304      	str	r3, [sp, #16]
 800bb26:	46a2      	mov	sl, r4
 800bb28:	e7d2      	b.n	800bad0 <_svfiprintf_r+0x9c>
 800bb2a:	9b03      	ldr	r3, [sp, #12]
 800bb2c:	1d19      	adds	r1, r3, #4
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	9103      	str	r1, [sp, #12]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	bfbb      	ittet	lt
 800bb36:	425b      	neglt	r3, r3
 800bb38:	f042 0202 	orrlt.w	r2, r2, #2
 800bb3c:	9307      	strge	r3, [sp, #28]
 800bb3e:	9307      	strlt	r3, [sp, #28]
 800bb40:	bfb8      	it	lt
 800bb42:	9204      	strlt	r2, [sp, #16]
 800bb44:	7823      	ldrb	r3, [r4, #0]
 800bb46:	2b2e      	cmp	r3, #46	; 0x2e
 800bb48:	d10c      	bne.n	800bb64 <_svfiprintf_r+0x130>
 800bb4a:	7863      	ldrb	r3, [r4, #1]
 800bb4c:	2b2a      	cmp	r3, #42	; 0x2a
 800bb4e:	d135      	bne.n	800bbbc <_svfiprintf_r+0x188>
 800bb50:	9b03      	ldr	r3, [sp, #12]
 800bb52:	1d1a      	adds	r2, r3, #4
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	9203      	str	r2, [sp, #12]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	bfb8      	it	lt
 800bb5c:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb60:	3402      	adds	r4, #2
 800bb62:	9305      	str	r3, [sp, #20]
 800bb64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bc30 <_svfiprintf_r+0x1fc>
 800bb68:	7821      	ldrb	r1, [r4, #0]
 800bb6a:	2203      	movs	r2, #3
 800bb6c:	4650      	mov	r0, sl
 800bb6e:	f7f4 fb37 	bl	80001e0 <memchr>
 800bb72:	b140      	cbz	r0, 800bb86 <_svfiprintf_r+0x152>
 800bb74:	2340      	movs	r3, #64	; 0x40
 800bb76:	eba0 000a 	sub.w	r0, r0, sl
 800bb7a:	fa03 f000 	lsl.w	r0, r3, r0
 800bb7e:	9b04      	ldr	r3, [sp, #16]
 800bb80:	4303      	orrs	r3, r0
 800bb82:	3401      	adds	r4, #1
 800bb84:	9304      	str	r3, [sp, #16]
 800bb86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb8a:	4826      	ldr	r0, [pc, #152]	; (800bc24 <_svfiprintf_r+0x1f0>)
 800bb8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb90:	2206      	movs	r2, #6
 800bb92:	f7f4 fb25 	bl	80001e0 <memchr>
 800bb96:	2800      	cmp	r0, #0
 800bb98:	d038      	beq.n	800bc0c <_svfiprintf_r+0x1d8>
 800bb9a:	4b23      	ldr	r3, [pc, #140]	; (800bc28 <_svfiprintf_r+0x1f4>)
 800bb9c:	bb1b      	cbnz	r3, 800bbe6 <_svfiprintf_r+0x1b2>
 800bb9e:	9b03      	ldr	r3, [sp, #12]
 800bba0:	3307      	adds	r3, #7
 800bba2:	f023 0307 	bic.w	r3, r3, #7
 800bba6:	3308      	adds	r3, #8
 800bba8:	9303      	str	r3, [sp, #12]
 800bbaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbac:	4433      	add	r3, r6
 800bbae:	9309      	str	r3, [sp, #36]	; 0x24
 800bbb0:	e767      	b.n	800ba82 <_svfiprintf_r+0x4e>
 800bbb2:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbb6:	460c      	mov	r4, r1
 800bbb8:	2001      	movs	r0, #1
 800bbba:	e7a5      	b.n	800bb08 <_svfiprintf_r+0xd4>
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	3401      	adds	r4, #1
 800bbc0:	9305      	str	r3, [sp, #20]
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	f04f 0c0a 	mov.w	ip, #10
 800bbc8:	4620      	mov	r0, r4
 800bbca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbce:	3a30      	subs	r2, #48	; 0x30
 800bbd0:	2a09      	cmp	r2, #9
 800bbd2:	d903      	bls.n	800bbdc <_svfiprintf_r+0x1a8>
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d0c5      	beq.n	800bb64 <_svfiprintf_r+0x130>
 800bbd8:	9105      	str	r1, [sp, #20]
 800bbda:	e7c3      	b.n	800bb64 <_svfiprintf_r+0x130>
 800bbdc:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbe0:	4604      	mov	r4, r0
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	e7f0      	b.n	800bbc8 <_svfiprintf_r+0x194>
 800bbe6:	ab03      	add	r3, sp, #12
 800bbe8:	9300      	str	r3, [sp, #0]
 800bbea:	462a      	mov	r2, r5
 800bbec:	4b0f      	ldr	r3, [pc, #60]	; (800bc2c <_svfiprintf_r+0x1f8>)
 800bbee:	a904      	add	r1, sp, #16
 800bbf0:	4638      	mov	r0, r7
 800bbf2:	f7fc fa49 	bl	8008088 <_printf_float>
 800bbf6:	1c42      	adds	r2, r0, #1
 800bbf8:	4606      	mov	r6, r0
 800bbfa:	d1d6      	bne.n	800bbaa <_svfiprintf_r+0x176>
 800bbfc:	89ab      	ldrh	r3, [r5, #12]
 800bbfe:	065b      	lsls	r3, r3, #25
 800bc00:	f53f af2c 	bmi.w	800ba5c <_svfiprintf_r+0x28>
 800bc04:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc06:	b01d      	add	sp, #116	; 0x74
 800bc08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc0c:	ab03      	add	r3, sp, #12
 800bc0e:	9300      	str	r3, [sp, #0]
 800bc10:	462a      	mov	r2, r5
 800bc12:	4b06      	ldr	r3, [pc, #24]	; (800bc2c <_svfiprintf_r+0x1f8>)
 800bc14:	a904      	add	r1, sp, #16
 800bc16:	4638      	mov	r0, r7
 800bc18:	f7fc fcda 	bl	80085d0 <_printf_i>
 800bc1c:	e7eb      	b.n	800bbf6 <_svfiprintf_r+0x1c2>
 800bc1e:	bf00      	nop
 800bc20:	0800d06c 	.word	0x0800d06c
 800bc24:	0800d076 	.word	0x0800d076
 800bc28:	08008089 	.word	0x08008089
 800bc2c:	0800b97d 	.word	0x0800b97d
 800bc30:	0800d072 	.word	0x0800d072
 800bc34:	00000000 	.word	0x00000000

0800bc38 <nan>:
 800bc38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bc40 <nan+0x8>
 800bc3c:	4770      	bx	lr
 800bc3e:	bf00      	nop
 800bc40:	00000000 	.word	0x00000000
 800bc44:	7ff80000 	.word	0x7ff80000

0800bc48 <_sbrk_r>:
 800bc48:	b538      	push	{r3, r4, r5, lr}
 800bc4a:	4d06      	ldr	r5, [pc, #24]	; (800bc64 <_sbrk_r+0x1c>)
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	4604      	mov	r4, r0
 800bc50:	4608      	mov	r0, r1
 800bc52:	602b      	str	r3, [r5, #0]
 800bc54:	f7f7 f8ea 	bl	8002e2c <_sbrk>
 800bc58:	1c43      	adds	r3, r0, #1
 800bc5a:	d102      	bne.n	800bc62 <_sbrk_r+0x1a>
 800bc5c:	682b      	ldr	r3, [r5, #0]
 800bc5e:	b103      	cbz	r3, 800bc62 <_sbrk_r+0x1a>
 800bc60:	6023      	str	r3, [r4, #0]
 800bc62:	bd38      	pop	{r3, r4, r5, pc}
 800bc64:	20000448 	.word	0x20000448

0800bc68 <strncmp>:
 800bc68:	b510      	push	{r4, lr}
 800bc6a:	b17a      	cbz	r2, 800bc8c <strncmp+0x24>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	3901      	subs	r1, #1
 800bc70:	1884      	adds	r4, r0, r2
 800bc72:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bc76:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bc7a:	4290      	cmp	r0, r2
 800bc7c:	d101      	bne.n	800bc82 <strncmp+0x1a>
 800bc7e:	42a3      	cmp	r3, r4
 800bc80:	d101      	bne.n	800bc86 <strncmp+0x1e>
 800bc82:	1a80      	subs	r0, r0, r2
 800bc84:	bd10      	pop	{r4, pc}
 800bc86:	2800      	cmp	r0, #0
 800bc88:	d1f3      	bne.n	800bc72 <strncmp+0xa>
 800bc8a:	e7fa      	b.n	800bc82 <strncmp+0x1a>
 800bc8c:	4610      	mov	r0, r2
 800bc8e:	e7f9      	b.n	800bc84 <strncmp+0x1c>

0800bc90 <__ascii_wctomb>:
 800bc90:	b149      	cbz	r1, 800bca6 <__ascii_wctomb+0x16>
 800bc92:	2aff      	cmp	r2, #255	; 0xff
 800bc94:	bf85      	ittet	hi
 800bc96:	238a      	movhi	r3, #138	; 0x8a
 800bc98:	6003      	strhi	r3, [r0, #0]
 800bc9a:	700a      	strbls	r2, [r1, #0]
 800bc9c:	f04f 30ff 	movhi.w	r0, #4294967295
 800bca0:	bf98      	it	ls
 800bca2:	2001      	movls	r0, #1
 800bca4:	4770      	bx	lr
 800bca6:	4608      	mov	r0, r1
 800bca8:	4770      	bx	lr
	...

0800bcac <__assert_func>:
 800bcac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bcae:	4614      	mov	r4, r2
 800bcb0:	461a      	mov	r2, r3
 800bcb2:	4b09      	ldr	r3, [pc, #36]	; (800bcd8 <__assert_func+0x2c>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	4605      	mov	r5, r0
 800bcb8:	68d8      	ldr	r0, [r3, #12]
 800bcba:	b14c      	cbz	r4, 800bcd0 <__assert_func+0x24>
 800bcbc:	4b07      	ldr	r3, [pc, #28]	; (800bcdc <__assert_func+0x30>)
 800bcbe:	9100      	str	r1, [sp, #0]
 800bcc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bcc4:	4906      	ldr	r1, [pc, #24]	; (800bce0 <__assert_func+0x34>)
 800bcc6:	462b      	mov	r3, r5
 800bcc8:	f000 f80e 	bl	800bce8 <fiprintf>
 800bccc:	f000 fa8c 	bl	800c1e8 <abort>
 800bcd0:	4b04      	ldr	r3, [pc, #16]	; (800bce4 <__assert_func+0x38>)
 800bcd2:	461c      	mov	r4, r3
 800bcd4:	e7f3      	b.n	800bcbe <__assert_func+0x12>
 800bcd6:	bf00      	nop
 800bcd8:	20000018 	.word	0x20000018
 800bcdc:	0800d07d 	.word	0x0800d07d
 800bce0:	0800d08a 	.word	0x0800d08a
 800bce4:	0800d0b8 	.word	0x0800d0b8

0800bce8 <fiprintf>:
 800bce8:	b40e      	push	{r1, r2, r3}
 800bcea:	b503      	push	{r0, r1, lr}
 800bcec:	4601      	mov	r1, r0
 800bcee:	ab03      	add	r3, sp, #12
 800bcf0:	4805      	ldr	r0, [pc, #20]	; (800bd08 <fiprintf+0x20>)
 800bcf2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcf6:	6800      	ldr	r0, [r0, #0]
 800bcf8:	9301      	str	r3, [sp, #4]
 800bcfa:	f000 f885 	bl	800be08 <_vfiprintf_r>
 800bcfe:	b002      	add	sp, #8
 800bd00:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd04:	b003      	add	sp, #12
 800bd06:	4770      	bx	lr
 800bd08:	20000018 	.word	0x20000018

0800bd0c <memmove>:
 800bd0c:	4288      	cmp	r0, r1
 800bd0e:	b510      	push	{r4, lr}
 800bd10:	eb01 0402 	add.w	r4, r1, r2
 800bd14:	d902      	bls.n	800bd1c <memmove+0x10>
 800bd16:	4284      	cmp	r4, r0
 800bd18:	4623      	mov	r3, r4
 800bd1a:	d807      	bhi.n	800bd2c <memmove+0x20>
 800bd1c:	1e43      	subs	r3, r0, #1
 800bd1e:	42a1      	cmp	r1, r4
 800bd20:	d008      	beq.n	800bd34 <memmove+0x28>
 800bd22:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd26:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd2a:	e7f8      	b.n	800bd1e <memmove+0x12>
 800bd2c:	4402      	add	r2, r0
 800bd2e:	4601      	mov	r1, r0
 800bd30:	428a      	cmp	r2, r1
 800bd32:	d100      	bne.n	800bd36 <memmove+0x2a>
 800bd34:	bd10      	pop	{r4, pc}
 800bd36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd3e:	e7f7      	b.n	800bd30 <memmove+0x24>

0800bd40 <__malloc_lock>:
 800bd40:	4801      	ldr	r0, [pc, #4]	; (800bd48 <__malloc_lock+0x8>)
 800bd42:	f000 bc11 	b.w	800c568 <__retarget_lock_acquire_recursive>
 800bd46:	bf00      	nop
 800bd48:	2000044c 	.word	0x2000044c

0800bd4c <__malloc_unlock>:
 800bd4c:	4801      	ldr	r0, [pc, #4]	; (800bd54 <__malloc_unlock+0x8>)
 800bd4e:	f000 bc0c 	b.w	800c56a <__retarget_lock_release_recursive>
 800bd52:	bf00      	nop
 800bd54:	2000044c 	.word	0x2000044c

0800bd58 <_realloc_r>:
 800bd58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd5c:	4680      	mov	r8, r0
 800bd5e:	4614      	mov	r4, r2
 800bd60:	460e      	mov	r6, r1
 800bd62:	b921      	cbnz	r1, 800bd6e <_realloc_r+0x16>
 800bd64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd68:	4611      	mov	r1, r2
 800bd6a:	f7ff bd93 	b.w	800b894 <_malloc_r>
 800bd6e:	b92a      	cbnz	r2, 800bd7c <_realloc_r+0x24>
 800bd70:	f7ff fd24 	bl	800b7bc <_free_r>
 800bd74:	4625      	mov	r5, r4
 800bd76:	4628      	mov	r0, r5
 800bd78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd7c:	f000 fc5c 	bl	800c638 <_malloc_usable_size_r>
 800bd80:	4284      	cmp	r4, r0
 800bd82:	4607      	mov	r7, r0
 800bd84:	d802      	bhi.n	800bd8c <_realloc_r+0x34>
 800bd86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bd8a:	d812      	bhi.n	800bdb2 <_realloc_r+0x5a>
 800bd8c:	4621      	mov	r1, r4
 800bd8e:	4640      	mov	r0, r8
 800bd90:	f7ff fd80 	bl	800b894 <_malloc_r>
 800bd94:	4605      	mov	r5, r0
 800bd96:	2800      	cmp	r0, #0
 800bd98:	d0ed      	beq.n	800bd76 <_realloc_r+0x1e>
 800bd9a:	42bc      	cmp	r4, r7
 800bd9c:	4622      	mov	r2, r4
 800bd9e:	4631      	mov	r1, r6
 800bda0:	bf28      	it	cs
 800bda2:	463a      	movcs	r2, r7
 800bda4:	f7ff f824 	bl	800adf0 <memcpy>
 800bda8:	4631      	mov	r1, r6
 800bdaa:	4640      	mov	r0, r8
 800bdac:	f7ff fd06 	bl	800b7bc <_free_r>
 800bdb0:	e7e1      	b.n	800bd76 <_realloc_r+0x1e>
 800bdb2:	4635      	mov	r5, r6
 800bdb4:	e7df      	b.n	800bd76 <_realloc_r+0x1e>

0800bdb6 <__sfputc_r>:
 800bdb6:	6893      	ldr	r3, [r2, #8]
 800bdb8:	3b01      	subs	r3, #1
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	b410      	push	{r4}
 800bdbe:	6093      	str	r3, [r2, #8]
 800bdc0:	da08      	bge.n	800bdd4 <__sfputc_r+0x1e>
 800bdc2:	6994      	ldr	r4, [r2, #24]
 800bdc4:	42a3      	cmp	r3, r4
 800bdc6:	db01      	blt.n	800bdcc <__sfputc_r+0x16>
 800bdc8:	290a      	cmp	r1, #10
 800bdca:	d103      	bne.n	800bdd4 <__sfputc_r+0x1e>
 800bdcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bdd0:	f000 b94a 	b.w	800c068 <__swbuf_r>
 800bdd4:	6813      	ldr	r3, [r2, #0]
 800bdd6:	1c58      	adds	r0, r3, #1
 800bdd8:	6010      	str	r0, [r2, #0]
 800bdda:	7019      	strb	r1, [r3, #0]
 800bddc:	4608      	mov	r0, r1
 800bdde:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bde2:	4770      	bx	lr

0800bde4 <__sfputs_r>:
 800bde4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bde6:	4606      	mov	r6, r0
 800bde8:	460f      	mov	r7, r1
 800bdea:	4614      	mov	r4, r2
 800bdec:	18d5      	adds	r5, r2, r3
 800bdee:	42ac      	cmp	r4, r5
 800bdf0:	d101      	bne.n	800bdf6 <__sfputs_r+0x12>
 800bdf2:	2000      	movs	r0, #0
 800bdf4:	e007      	b.n	800be06 <__sfputs_r+0x22>
 800bdf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdfa:	463a      	mov	r2, r7
 800bdfc:	4630      	mov	r0, r6
 800bdfe:	f7ff ffda 	bl	800bdb6 <__sfputc_r>
 800be02:	1c43      	adds	r3, r0, #1
 800be04:	d1f3      	bne.n	800bdee <__sfputs_r+0xa>
 800be06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800be08 <_vfiprintf_r>:
 800be08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be0c:	460d      	mov	r5, r1
 800be0e:	b09d      	sub	sp, #116	; 0x74
 800be10:	4614      	mov	r4, r2
 800be12:	4698      	mov	r8, r3
 800be14:	4606      	mov	r6, r0
 800be16:	b118      	cbz	r0, 800be20 <_vfiprintf_r+0x18>
 800be18:	6983      	ldr	r3, [r0, #24]
 800be1a:	b90b      	cbnz	r3, 800be20 <_vfiprintf_r+0x18>
 800be1c:	f000 fb06 	bl	800c42c <__sinit>
 800be20:	4b89      	ldr	r3, [pc, #548]	; (800c048 <_vfiprintf_r+0x240>)
 800be22:	429d      	cmp	r5, r3
 800be24:	d11b      	bne.n	800be5e <_vfiprintf_r+0x56>
 800be26:	6875      	ldr	r5, [r6, #4]
 800be28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be2a:	07d9      	lsls	r1, r3, #31
 800be2c:	d405      	bmi.n	800be3a <_vfiprintf_r+0x32>
 800be2e:	89ab      	ldrh	r3, [r5, #12]
 800be30:	059a      	lsls	r2, r3, #22
 800be32:	d402      	bmi.n	800be3a <_vfiprintf_r+0x32>
 800be34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be36:	f000 fb97 	bl	800c568 <__retarget_lock_acquire_recursive>
 800be3a:	89ab      	ldrh	r3, [r5, #12]
 800be3c:	071b      	lsls	r3, r3, #28
 800be3e:	d501      	bpl.n	800be44 <_vfiprintf_r+0x3c>
 800be40:	692b      	ldr	r3, [r5, #16]
 800be42:	b9eb      	cbnz	r3, 800be80 <_vfiprintf_r+0x78>
 800be44:	4629      	mov	r1, r5
 800be46:	4630      	mov	r0, r6
 800be48:	f000 f960 	bl	800c10c <__swsetup_r>
 800be4c:	b1c0      	cbz	r0, 800be80 <_vfiprintf_r+0x78>
 800be4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be50:	07dc      	lsls	r4, r3, #31
 800be52:	d50e      	bpl.n	800be72 <_vfiprintf_r+0x6a>
 800be54:	f04f 30ff 	mov.w	r0, #4294967295
 800be58:	b01d      	add	sp, #116	; 0x74
 800be5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be5e:	4b7b      	ldr	r3, [pc, #492]	; (800c04c <_vfiprintf_r+0x244>)
 800be60:	429d      	cmp	r5, r3
 800be62:	d101      	bne.n	800be68 <_vfiprintf_r+0x60>
 800be64:	68b5      	ldr	r5, [r6, #8]
 800be66:	e7df      	b.n	800be28 <_vfiprintf_r+0x20>
 800be68:	4b79      	ldr	r3, [pc, #484]	; (800c050 <_vfiprintf_r+0x248>)
 800be6a:	429d      	cmp	r5, r3
 800be6c:	bf08      	it	eq
 800be6e:	68f5      	ldreq	r5, [r6, #12]
 800be70:	e7da      	b.n	800be28 <_vfiprintf_r+0x20>
 800be72:	89ab      	ldrh	r3, [r5, #12]
 800be74:	0598      	lsls	r0, r3, #22
 800be76:	d4ed      	bmi.n	800be54 <_vfiprintf_r+0x4c>
 800be78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be7a:	f000 fb76 	bl	800c56a <__retarget_lock_release_recursive>
 800be7e:	e7e9      	b.n	800be54 <_vfiprintf_r+0x4c>
 800be80:	2300      	movs	r3, #0
 800be82:	9309      	str	r3, [sp, #36]	; 0x24
 800be84:	2320      	movs	r3, #32
 800be86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be8a:	f8cd 800c 	str.w	r8, [sp, #12]
 800be8e:	2330      	movs	r3, #48	; 0x30
 800be90:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c054 <_vfiprintf_r+0x24c>
 800be94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be98:	f04f 0901 	mov.w	r9, #1
 800be9c:	4623      	mov	r3, r4
 800be9e:	469a      	mov	sl, r3
 800bea0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bea4:	b10a      	cbz	r2, 800beaa <_vfiprintf_r+0xa2>
 800bea6:	2a25      	cmp	r2, #37	; 0x25
 800bea8:	d1f9      	bne.n	800be9e <_vfiprintf_r+0x96>
 800beaa:	ebba 0b04 	subs.w	fp, sl, r4
 800beae:	d00b      	beq.n	800bec8 <_vfiprintf_r+0xc0>
 800beb0:	465b      	mov	r3, fp
 800beb2:	4622      	mov	r2, r4
 800beb4:	4629      	mov	r1, r5
 800beb6:	4630      	mov	r0, r6
 800beb8:	f7ff ff94 	bl	800bde4 <__sfputs_r>
 800bebc:	3001      	adds	r0, #1
 800bebe:	f000 80aa 	beq.w	800c016 <_vfiprintf_r+0x20e>
 800bec2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bec4:	445a      	add	r2, fp
 800bec6:	9209      	str	r2, [sp, #36]	; 0x24
 800bec8:	f89a 3000 	ldrb.w	r3, [sl]
 800becc:	2b00      	cmp	r3, #0
 800bece:	f000 80a2 	beq.w	800c016 <_vfiprintf_r+0x20e>
 800bed2:	2300      	movs	r3, #0
 800bed4:	f04f 32ff 	mov.w	r2, #4294967295
 800bed8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bedc:	f10a 0a01 	add.w	sl, sl, #1
 800bee0:	9304      	str	r3, [sp, #16]
 800bee2:	9307      	str	r3, [sp, #28]
 800bee4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bee8:	931a      	str	r3, [sp, #104]	; 0x68
 800beea:	4654      	mov	r4, sl
 800beec:	2205      	movs	r2, #5
 800beee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bef2:	4858      	ldr	r0, [pc, #352]	; (800c054 <_vfiprintf_r+0x24c>)
 800bef4:	f7f4 f974 	bl	80001e0 <memchr>
 800bef8:	9a04      	ldr	r2, [sp, #16]
 800befa:	b9d8      	cbnz	r0, 800bf34 <_vfiprintf_r+0x12c>
 800befc:	06d1      	lsls	r1, r2, #27
 800befe:	bf44      	itt	mi
 800bf00:	2320      	movmi	r3, #32
 800bf02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf06:	0713      	lsls	r3, r2, #28
 800bf08:	bf44      	itt	mi
 800bf0a:	232b      	movmi	r3, #43	; 0x2b
 800bf0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf10:	f89a 3000 	ldrb.w	r3, [sl]
 800bf14:	2b2a      	cmp	r3, #42	; 0x2a
 800bf16:	d015      	beq.n	800bf44 <_vfiprintf_r+0x13c>
 800bf18:	9a07      	ldr	r2, [sp, #28]
 800bf1a:	4654      	mov	r4, sl
 800bf1c:	2000      	movs	r0, #0
 800bf1e:	f04f 0c0a 	mov.w	ip, #10
 800bf22:	4621      	mov	r1, r4
 800bf24:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf28:	3b30      	subs	r3, #48	; 0x30
 800bf2a:	2b09      	cmp	r3, #9
 800bf2c:	d94e      	bls.n	800bfcc <_vfiprintf_r+0x1c4>
 800bf2e:	b1b0      	cbz	r0, 800bf5e <_vfiprintf_r+0x156>
 800bf30:	9207      	str	r2, [sp, #28]
 800bf32:	e014      	b.n	800bf5e <_vfiprintf_r+0x156>
 800bf34:	eba0 0308 	sub.w	r3, r0, r8
 800bf38:	fa09 f303 	lsl.w	r3, r9, r3
 800bf3c:	4313      	orrs	r3, r2
 800bf3e:	9304      	str	r3, [sp, #16]
 800bf40:	46a2      	mov	sl, r4
 800bf42:	e7d2      	b.n	800beea <_vfiprintf_r+0xe2>
 800bf44:	9b03      	ldr	r3, [sp, #12]
 800bf46:	1d19      	adds	r1, r3, #4
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	9103      	str	r1, [sp, #12]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	bfbb      	ittet	lt
 800bf50:	425b      	neglt	r3, r3
 800bf52:	f042 0202 	orrlt.w	r2, r2, #2
 800bf56:	9307      	strge	r3, [sp, #28]
 800bf58:	9307      	strlt	r3, [sp, #28]
 800bf5a:	bfb8      	it	lt
 800bf5c:	9204      	strlt	r2, [sp, #16]
 800bf5e:	7823      	ldrb	r3, [r4, #0]
 800bf60:	2b2e      	cmp	r3, #46	; 0x2e
 800bf62:	d10c      	bne.n	800bf7e <_vfiprintf_r+0x176>
 800bf64:	7863      	ldrb	r3, [r4, #1]
 800bf66:	2b2a      	cmp	r3, #42	; 0x2a
 800bf68:	d135      	bne.n	800bfd6 <_vfiprintf_r+0x1ce>
 800bf6a:	9b03      	ldr	r3, [sp, #12]
 800bf6c:	1d1a      	adds	r2, r3, #4
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	9203      	str	r2, [sp, #12]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	bfb8      	it	lt
 800bf76:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf7a:	3402      	adds	r4, #2
 800bf7c:	9305      	str	r3, [sp, #20]
 800bf7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c064 <_vfiprintf_r+0x25c>
 800bf82:	7821      	ldrb	r1, [r4, #0]
 800bf84:	2203      	movs	r2, #3
 800bf86:	4650      	mov	r0, sl
 800bf88:	f7f4 f92a 	bl	80001e0 <memchr>
 800bf8c:	b140      	cbz	r0, 800bfa0 <_vfiprintf_r+0x198>
 800bf8e:	2340      	movs	r3, #64	; 0x40
 800bf90:	eba0 000a 	sub.w	r0, r0, sl
 800bf94:	fa03 f000 	lsl.w	r0, r3, r0
 800bf98:	9b04      	ldr	r3, [sp, #16]
 800bf9a:	4303      	orrs	r3, r0
 800bf9c:	3401      	adds	r4, #1
 800bf9e:	9304      	str	r3, [sp, #16]
 800bfa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfa4:	482c      	ldr	r0, [pc, #176]	; (800c058 <_vfiprintf_r+0x250>)
 800bfa6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bfaa:	2206      	movs	r2, #6
 800bfac:	f7f4 f918 	bl	80001e0 <memchr>
 800bfb0:	2800      	cmp	r0, #0
 800bfb2:	d03f      	beq.n	800c034 <_vfiprintf_r+0x22c>
 800bfb4:	4b29      	ldr	r3, [pc, #164]	; (800c05c <_vfiprintf_r+0x254>)
 800bfb6:	bb1b      	cbnz	r3, 800c000 <_vfiprintf_r+0x1f8>
 800bfb8:	9b03      	ldr	r3, [sp, #12]
 800bfba:	3307      	adds	r3, #7
 800bfbc:	f023 0307 	bic.w	r3, r3, #7
 800bfc0:	3308      	adds	r3, #8
 800bfc2:	9303      	str	r3, [sp, #12]
 800bfc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfc6:	443b      	add	r3, r7
 800bfc8:	9309      	str	r3, [sp, #36]	; 0x24
 800bfca:	e767      	b.n	800be9c <_vfiprintf_r+0x94>
 800bfcc:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfd0:	460c      	mov	r4, r1
 800bfd2:	2001      	movs	r0, #1
 800bfd4:	e7a5      	b.n	800bf22 <_vfiprintf_r+0x11a>
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	3401      	adds	r4, #1
 800bfda:	9305      	str	r3, [sp, #20]
 800bfdc:	4619      	mov	r1, r3
 800bfde:	f04f 0c0a 	mov.w	ip, #10
 800bfe2:	4620      	mov	r0, r4
 800bfe4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfe8:	3a30      	subs	r2, #48	; 0x30
 800bfea:	2a09      	cmp	r2, #9
 800bfec:	d903      	bls.n	800bff6 <_vfiprintf_r+0x1ee>
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d0c5      	beq.n	800bf7e <_vfiprintf_r+0x176>
 800bff2:	9105      	str	r1, [sp, #20]
 800bff4:	e7c3      	b.n	800bf7e <_vfiprintf_r+0x176>
 800bff6:	fb0c 2101 	mla	r1, ip, r1, r2
 800bffa:	4604      	mov	r4, r0
 800bffc:	2301      	movs	r3, #1
 800bffe:	e7f0      	b.n	800bfe2 <_vfiprintf_r+0x1da>
 800c000:	ab03      	add	r3, sp, #12
 800c002:	9300      	str	r3, [sp, #0]
 800c004:	462a      	mov	r2, r5
 800c006:	4b16      	ldr	r3, [pc, #88]	; (800c060 <_vfiprintf_r+0x258>)
 800c008:	a904      	add	r1, sp, #16
 800c00a:	4630      	mov	r0, r6
 800c00c:	f7fc f83c 	bl	8008088 <_printf_float>
 800c010:	4607      	mov	r7, r0
 800c012:	1c78      	adds	r0, r7, #1
 800c014:	d1d6      	bne.n	800bfc4 <_vfiprintf_r+0x1bc>
 800c016:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c018:	07d9      	lsls	r1, r3, #31
 800c01a:	d405      	bmi.n	800c028 <_vfiprintf_r+0x220>
 800c01c:	89ab      	ldrh	r3, [r5, #12]
 800c01e:	059a      	lsls	r2, r3, #22
 800c020:	d402      	bmi.n	800c028 <_vfiprintf_r+0x220>
 800c022:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c024:	f000 faa1 	bl	800c56a <__retarget_lock_release_recursive>
 800c028:	89ab      	ldrh	r3, [r5, #12]
 800c02a:	065b      	lsls	r3, r3, #25
 800c02c:	f53f af12 	bmi.w	800be54 <_vfiprintf_r+0x4c>
 800c030:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c032:	e711      	b.n	800be58 <_vfiprintf_r+0x50>
 800c034:	ab03      	add	r3, sp, #12
 800c036:	9300      	str	r3, [sp, #0]
 800c038:	462a      	mov	r2, r5
 800c03a:	4b09      	ldr	r3, [pc, #36]	; (800c060 <_vfiprintf_r+0x258>)
 800c03c:	a904      	add	r1, sp, #16
 800c03e:	4630      	mov	r0, r6
 800c040:	f7fc fac6 	bl	80085d0 <_printf_i>
 800c044:	e7e4      	b.n	800c010 <_vfiprintf_r+0x208>
 800c046:	bf00      	nop
 800c048:	0800d0dc 	.word	0x0800d0dc
 800c04c:	0800d0fc 	.word	0x0800d0fc
 800c050:	0800d0bc 	.word	0x0800d0bc
 800c054:	0800d06c 	.word	0x0800d06c
 800c058:	0800d076 	.word	0x0800d076
 800c05c:	08008089 	.word	0x08008089
 800c060:	0800bde5 	.word	0x0800bde5
 800c064:	0800d072 	.word	0x0800d072

0800c068 <__swbuf_r>:
 800c068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c06a:	460e      	mov	r6, r1
 800c06c:	4614      	mov	r4, r2
 800c06e:	4605      	mov	r5, r0
 800c070:	b118      	cbz	r0, 800c07a <__swbuf_r+0x12>
 800c072:	6983      	ldr	r3, [r0, #24]
 800c074:	b90b      	cbnz	r3, 800c07a <__swbuf_r+0x12>
 800c076:	f000 f9d9 	bl	800c42c <__sinit>
 800c07a:	4b21      	ldr	r3, [pc, #132]	; (800c100 <__swbuf_r+0x98>)
 800c07c:	429c      	cmp	r4, r3
 800c07e:	d12b      	bne.n	800c0d8 <__swbuf_r+0x70>
 800c080:	686c      	ldr	r4, [r5, #4]
 800c082:	69a3      	ldr	r3, [r4, #24]
 800c084:	60a3      	str	r3, [r4, #8]
 800c086:	89a3      	ldrh	r3, [r4, #12]
 800c088:	071a      	lsls	r2, r3, #28
 800c08a:	d52f      	bpl.n	800c0ec <__swbuf_r+0x84>
 800c08c:	6923      	ldr	r3, [r4, #16]
 800c08e:	b36b      	cbz	r3, 800c0ec <__swbuf_r+0x84>
 800c090:	6923      	ldr	r3, [r4, #16]
 800c092:	6820      	ldr	r0, [r4, #0]
 800c094:	1ac0      	subs	r0, r0, r3
 800c096:	6963      	ldr	r3, [r4, #20]
 800c098:	b2f6      	uxtb	r6, r6
 800c09a:	4283      	cmp	r3, r0
 800c09c:	4637      	mov	r7, r6
 800c09e:	dc04      	bgt.n	800c0aa <__swbuf_r+0x42>
 800c0a0:	4621      	mov	r1, r4
 800c0a2:	4628      	mov	r0, r5
 800c0a4:	f000 f92e 	bl	800c304 <_fflush_r>
 800c0a8:	bb30      	cbnz	r0, 800c0f8 <__swbuf_r+0x90>
 800c0aa:	68a3      	ldr	r3, [r4, #8]
 800c0ac:	3b01      	subs	r3, #1
 800c0ae:	60a3      	str	r3, [r4, #8]
 800c0b0:	6823      	ldr	r3, [r4, #0]
 800c0b2:	1c5a      	adds	r2, r3, #1
 800c0b4:	6022      	str	r2, [r4, #0]
 800c0b6:	701e      	strb	r6, [r3, #0]
 800c0b8:	6963      	ldr	r3, [r4, #20]
 800c0ba:	3001      	adds	r0, #1
 800c0bc:	4283      	cmp	r3, r0
 800c0be:	d004      	beq.n	800c0ca <__swbuf_r+0x62>
 800c0c0:	89a3      	ldrh	r3, [r4, #12]
 800c0c2:	07db      	lsls	r3, r3, #31
 800c0c4:	d506      	bpl.n	800c0d4 <__swbuf_r+0x6c>
 800c0c6:	2e0a      	cmp	r6, #10
 800c0c8:	d104      	bne.n	800c0d4 <__swbuf_r+0x6c>
 800c0ca:	4621      	mov	r1, r4
 800c0cc:	4628      	mov	r0, r5
 800c0ce:	f000 f919 	bl	800c304 <_fflush_r>
 800c0d2:	b988      	cbnz	r0, 800c0f8 <__swbuf_r+0x90>
 800c0d4:	4638      	mov	r0, r7
 800c0d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0d8:	4b0a      	ldr	r3, [pc, #40]	; (800c104 <__swbuf_r+0x9c>)
 800c0da:	429c      	cmp	r4, r3
 800c0dc:	d101      	bne.n	800c0e2 <__swbuf_r+0x7a>
 800c0de:	68ac      	ldr	r4, [r5, #8]
 800c0e0:	e7cf      	b.n	800c082 <__swbuf_r+0x1a>
 800c0e2:	4b09      	ldr	r3, [pc, #36]	; (800c108 <__swbuf_r+0xa0>)
 800c0e4:	429c      	cmp	r4, r3
 800c0e6:	bf08      	it	eq
 800c0e8:	68ec      	ldreq	r4, [r5, #12]
 800c0ea:	e7ca      	b.n	800c082 <__swbuf_r+0x1a>
 800c0ec:	4621      	mov	r1, r4
 800c0ee:	4628      	mov	r0, r5
 800c0f0:	f000 f80c 	bl	800c10c <__swsetup_r>
 800c0f4:	2800      	cmp	r0, #0
 800c0f6:	d0cb      	beq.n	800c090 <__swbuf_r+0x28>
 800c0f8:	f04f 37ff 	mov.w	r7, #4294967295
 800c0fc:	e7ea      	b.n	800c0d4 <__swbuf_r+0x6c>
 800c0fe:	bf00      	nop
 800c100:	0800d0dc 	.word	0x0800d0dc
 800c104:	0800d0fc 	.word	0x0800d0fc
 800c108:	0800d0bc 	.word	0x0800d0bc

0800c10c <__swsetup_r>:
 800c10c:	4b32      	ldr	r3, [pc, #200]	; (800c1d8 <__swsetup_r+0xcc>)
 800c10e:	b570      	push	{r4, r5, r6, lr}
 800c110:	681d      	ldr	r5, [r3, #0]
 800c112:	4606      	mov	r6, r0
 800c114:	460c      	mov	r4, r1
 800c116:	b125      	cbz	r5, 800c122 <__swsetup_r+0x16>
 800c118:	69ab      	ldr	r3, [r5, #24]
 800c11a:	b913      	cbnz	r3, 800c122 <__swsetup_r+0x16>
 800c11c:	4628      	mov	r0, r5
 800c11e:	f000 f985 	bl	800c42c <__sinit>
 800c122:	4b2e      	ldr	r3, [pc, #184]	; (800c1dc <__swsetup_r+0xd0>)
 800c124:	429c      	cmp	r4, r3
 800c126:	d10f      	bne.n	800c148 <__swsetup_r+0x3c>
 800c128:	686c      	ldr	r4, [r5, #4]
 800c12a:	89a3      	ldrh	r3, [r4, #12]
 800c12c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c130:	0719      	lsls	r1, r3, #28
 800c132:	d42c      	bmi.n	800c18e <__swsetup_r+0x82>
 800c134:	06dd      	lsls	r5, r3, #27
 800c136:	d411      	bmi.n	800c15c <__swsetup_r+0x50>
 800c138:	2309      	movs	r3, #9
 800c13a:	6033      	str	r3, [r6, #0]
 800c13c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c140:	81a3      	strh	r3, [r4, #12]
 800c142:	f04f 30ff 	mov.w	r0, #4294967295
 800c146:	e03e      	b.n	800c1c6 <__swsetup_r+0xba>
 800c148:	4b25      	ldr	r3, [pc, #148]	; (800c1e0 <__swsetup_r+0xd4>)
 800c14a:	429c      	cmp	r4, r3
 800c14c:	d101      	bne.n	800c152 <__swsetup_r+0x46>
 800c14e:	68ac      	ldr	r4, [r5, #8]
 800c150:	e7eb      	b.n	800c12a <__swsetup_r+0x1e>
 800c152:	4b24      	ldr	r3, [pc, #144]	; (800c1e4 <__swsetup_r+0xd8>)
 800c154:	429c      	cmp	r4, r3
 800c156:	bf08      	it	eq
 800c158:	68ec      	ldreq	r4, [r5, #12]
 800c15a:	e7e6      	b.n	800c12a <__swsetup_r+0x1e>
 800c15c:	0758      	lsls	r0, r3, #29
 800c15e:	d512      	bpl.n	800c186 <__swsetup_r+0x7a>
 800c160:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c162:	b141      	cbz	r1, 800c176 <__swsetup_r+0x6a>
 800c164:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c168:	4299      	cmp	r1, r3
 800c16a:	d002      	beq.n	800c172 <__swsetup_r+0x66>
 800c16c:	4630      	mov	r0, r6
 800c16e:	f7ff fb25 	bl	800b7bc <_free_r>
 800c172:	2300      	movs	r3, #0
 800c174:	6363      	str	r3, [r4, #52]	; 0x34
 800c176:	89a3      	ldrh	r3, [r4, #12]
 800c178:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c17c:	81a3      	strh	r3, [r4, #12]
 800c17e:	2300      	movs	r3, #0
 800c180:	6063      	str	r3, [r4, #4]
 800c182:	6923      	ldr	r3, [r4, #16]
 800c184:	6023      	str	r3, [r4, #0]
 800c186:	89a3      	ldrh	r3, [r4, #12]
 800c188:	f043 0308 	orr.w	r3, r3, #8
 800c18c:	81a3      	strh	r3, [r4, #12]
 800c18e:	6923      	ldr	r3, [r4, #16]
 800c190:	b94b      	cbnz	r3, 800c1a6 <__swsetup_r+0x9a>
 800c192:	89a3      	ldrh	r3, [r4, #12]
 800c194:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c19c:	d003      	beq.n	800c1a6 <__swsetup_r+0x9a>
 800c19e:	4621      	mov	r1, r4
 800c1a0:	4630      	mov	r0, r6
 800c1a2:	f000 fa09 	bl	800c5b8 <__smakebuf_r>
 800c1a6:	89a0      	ldrh	r0, [r4, #12]
 800c1a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c1ac:	f010 0301 	ands.w	r3, r0, #1
 800c1b0:	d00a      	beq.n	800c1c8 <__swsetup_r+0xbc>
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	60a3      	str	r3, [r4, #8]
 800c1b6:	6963      	ldr	r3, [r4, #20]
 800c1b8:	425b      	negs	r3, r3
 800c1ba:	61a3      	str	r3, [r4, #24]
 800c1bc:	6923      	ldr	r3, [r4, #16]
 800c1be:	b943      	cbnz	r3, 800c1d2 <__swsetup_r+0xc6>
 800c1c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c1c4:	d1ba      	bne.n	800c13c <__swsetup_r+0x30>
 800c1c6:	bd70      	pop	{r4, r5, r6, pc}
 800c1c8:	0781      	lsls	r1, r0, #30
 800c1ca:	bf58      	it	pl
 800c1cc:	6963      	ldrpl	r3, [r4, #20]
 800c1ce:	60a3      	str	r3, [r4, #8]
 800c1d0:	e7f4      	b.n	800c1bc <__swsetup_r+0xb0>
 800c1d2:	2000      	movs	r0, #0
 800c1d4:	e7f7      	b.n	800c1c6 <__swsetup_r+0xba>
 800c1d6:	bf00      	nop
 800c1d8:	20000018 	.word	0x20000018
 800c1dc:	0800d0dc 	.word	0x0800d0dc
 800c1e0:	0800d0fc 	.word	0x0800d0fc
 800c1e4:	0800d0bc 	.word	0x0800d0bc

0800c1e8 <abort>:
 800c1e8:	b508      	push	{r3, lr}
 800c1ea:	2006      	movs	r0, #6
 800c1ec:	f000 fa54 	bl	800c698 <raise>
 800c1f0:	2001      	movs	r0, #1
 800c1f2:	f7f6 fda3 	bl	8002d3c <_exit>
	...

0800c1f8 <__sflush_r>:
 800c1f8:	898a      	ldrh	r2, [r1, #12]
 800c1fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1fe:	4605      	mov	r5, r0
 800c200:	0710      	lsls	r0, r2, #28
 800c202:	460c      	mov	r4, r1
 800c204:	d458      	bmi.n	800c2b8 <__sflush_r+0xc0>
 800c206:	684b      	ldr	r3, [r1, #4]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	dc05      	bgt.n	800c218 <__sflush_r+0x20>
 800c20c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c20e:	2b00      	cmp	r3, #0
 800c210:	dc02      	bgt.n	800c218 <__sflush_r+0x20>
 800c212:	2000      	movs	r0, #0
 800c214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c218:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c21a:	2e00      	cmp	r6, #0
 800c21c:	d0f9      	beq.n	800c212 <__sflush_r+0x1a>
 800c21e:	2300      	movs	r3, #0
 800c220:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c224:	682f      	ldr	r7, [r5, #0]
 800c226:	602b      	str	r3, [r5, #0]
 800c228:	d032      	beq.n	800c290 <__sflush_r+0x98>
 800c22a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c22c:	89a3      	ldrh	r3, [r4, #12]
 800c22e:	075a      	lsls	r2, r3, #29
 800c230:	d505      	bpl.n	800c23e <__sflush_r+0x46>
 800c232:	6863      	ldr	r3, [r4, #4]
 800c234:	1ac0      	subs	r0, r0, r3
 800c236:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c238:	b10b      	cbz	r3, 800c23e <__sflush_r+0x46>
 800c23a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c23c:	1ac0      	subs	r0, r0, r3
 800c23e:	2300      	movs	r3, #0
 800c240:	4602      	mov	r2, r0
 800c242:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c244:	6a21      	ldr	r1, [r4, #32]
 800c246:	4628      	mov	r0, r5
 800c248:	47b0      	blx	r6
 800c24a:	1c43      	adds	r3, r0, #1
 800c24c:	89a3      	ldrh	r3, [r4, #12]
 800c24e:	d106      	bne.n	800c25e <__sflush_r+0x66>
 800c250:	6829      	ldr	r1, [r5, #0]
 800c252:	291d      	cmp	r1, #29
 800c254:	d82c      	bhi.n	800c2b0 <__sflush_r+0xb8>
 800c256:	4a2a      	ldr	r2, [pc, #168]	; (800c300 <__sflush_r+0x108>)
 800c258:	40ca      	lsrs	r2, r1
 800c25a:	07d6      	lsls	r6, r2, #31
 800c25c:	d528      	bpl.n	800c2b0 <__sflush_r+0xb8>
 800c25e:	2200      	movs	r2, #0
 800c260:	6062      	str	r2, [r4, #4]
 800c262:	04d9      	lsls	r1, r3, #19
 800c264:	6922      	ldr	r2, [r4, #16]
 800c266:	6022      	str	r2, [r4, #0]
 800c268:	d504      	bpl.n	800c274 <__sflush_r+0x7c>
 800c26a:	1c42      	adds	r2, r0, #1
 800c26c:	d101      	bne.n	800c272 <__sflush_r+0x7a>
 800c26e:	682b      	ldr	r3, [r5, #0]
 800c270:	b903      	cbnz	r3, 800c274 <__sflush_r+0x7c>
 800c272:	6560      	str	r0, [r4, #84]	; 0x54
 800c274:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c276:	602f      	str	r7, [r5, #0]
 800c278:	2900      	cmp	r1, #0
 800c27a:	d0ca      	beq.n	800c212 <__sflush_r+0x1a>
 800c27c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c280:	4299      	cmp	r1, r3
 800c282:	d002      	beq.n	800c28a <__sflush_r+0x92>
 800c284:	4628      	mov	r0, r5
 800c286:	f7ff fa99 	bl	800b7bc <_free_r>
 800c28a:	2000      	movs	r0, #0
 800c28c:	6360      	str	r0, [r4, #52]	; 0x34
 800c28e:	e7c1      	b.n	800c214 <__sflush_r+0x1c>
 800c290:	6a21      	ldr	r1, [r4, #32]
 800c292:	2301      	movs	r3, #1
 800c294:	4628      	mov	r0, r5
 800c296:	47b0      	blx	r6
 800c298:	1c41      	adds	r1, r0, #1
 800c29a:	d1c7      	bne.n	800c22c <__sflush_r+0x34>
 800c29c:	682b      	ldr	r3, [r5, #0]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d0c4      	beq.n	800c22c <__sflush_r+0x34>
 800c2a2:	2b1d      	cmp	r3, #29
 800c2a4:	d001      	beq.n	800c2aa <__sflush_r+0xb2>
 800c2a6:	2b16      	cmp	r3, #22
 800c2a8:	d101      	bne.n	800c2ae <__sflush_r+0xb6>
 800c2aa:	602f      	str	r7, [r5, #0]
 800c2ac:	e7b1      	b.n	800c212 <__sflush_r+0x1a>
 800c2ae:	89a3      	ldrh	r3, [r4, #12]
 800c2b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2b4:	81a3      	strh	r3, [r4, #12]
 800c2b6:	e7ad      	b.n	800c214 <__sflush_r+0x1c>
 800c2b8:	690f      	ldr	r7, [r1, #16]
 800c2ba:	2f00      	cmp	r7, #0
 800c2bc:	d0a9      	beq.n	800c212 <__sflush_r+0x1a>
 800c2be:	0793      	lsls	r3, r2, #30
 800c2c0:	680e      	ldr	r6, [r1, #0]
 800c2c2:	bf08      	it	eq
 800c2c4:	694b      	ldreq	r3, [r1, #20]
 800c2c6:	600f      	str	r7, [r1, #0]
 800c2c8:	bf18      	it	ne
 800c2ca:	2300      	movne	r3, #0
 800c2cc:	eba6 0807 	sub.w	r8, r6, r7
 800c2d0:	608b      	str	r3, [r1, #8]
 800c2d2:	f1b8 0f00 	cmp.w	r8, #0
 800c2d6:	dd9c      	ble.n	800c212 <__sflush_r+0x1a>
 800c2d8:	6a21      	ldr	r1, [r4, #32]
 800c2da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c2dc:	4643      	mov	r3, r8
 800c2de:	463a      	mov	r2, r7
 800c2e0:	4628      	mov	r0, r5
 800c2e2:	47b0      	blx	r6
 800c2e4:	2800      	cmp	r0, #0
 800c2e6:	dc06      	bgt.n	800c2f6 <__sflush_r+0xfe>
 800c2e8:	89a3      	ldrh	r3, [r4, #12]
 800c2ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2ee:	81a3      	strh	r3, [r4, #12]
 800c2f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2f4:	e78e      	b.n	800c214 <__sflush_r+0x1c>
 800c2f6:	4407      	add	r7, r0
 800c2f8:	eba8 0800 	sub.w	r8, r8, r0
 800c2fc:	e7e9      	b.n	800c2d2 <__sflush_r+0xda>
 800c2fe:	bf00      	nop
 800c300:	20400001 	.word	0x20400001

0800c304 <_fflush_r>:
 800c304:	b538      	push	{r3, r4, r5, lr}
 800c306:	690b      	ldr	r3, [r1, #16]
 800c308:	4605      	mov	r5, r0
 800c30a:	460c      	mov	r4, r1
 800c30c:	b913      	cbnz	r3, 800c314 <_fflush_r+0x10>
 800c30e:	2500      	movs	r5, #0
 800c310:	4628      	mov	r0, r5
 800c312:	bd38      	pop	{r3, r4, r5, pc}
 800c314:	b118      	cbz	r0, 800c31e <_fflush_r+0x1a>
 800c316:	6983      	ldr	r3, [r0, #24]
 800c318:	b90b      	cbnz	r3, 800c31e <_fflush_r+0x1a>
 800c31a:	f000 f887 	bl	800c42c <__sinit>
 800c31e:	4b14      	ldr	r3, [pc, #80]	; (800c370 <_fflush_r+0x6c>)
 800c320:	429c      	cmp	r4, r3
 800c322:	d11b      	bne.n	800c35c <_fflush_r+0x58>
 800c324:	686c      	ldr	r4, [r5, #4]
 800c326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d0ef      	beq.n	800c30e <_fflush_r+0xa>
 800c32e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c330:	07d0      	lsls	r0, r2, #31
 800c332:	d404      	bmi.n	800c33e <_fflush_r+0x3a>
 800c334:	0599      	lsls	r1, r3, #22
 800c336:	d402      	bmi.n	800c33e <_fflush_r+0x3a>
 800c338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c33a:	f000 f915 	bl	800c568 <__retarget_lock_acquire_recursive>
 800c33e:	4628      	mov	r0, r5
 800c340:	4621      	mov	r1, r4
 800c342:	f7ff ff59 	bl	800c1f8 <__sflush_r>
 800c346:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c348:	07da      	lsls	r2, r3, #31
 800c34a:	4605      	mov	r5, r0
 800c34c:	d4e0      	bmi.n	800c310 <_fflush_r+0xc>
 800c34e:	89a3      	ldrh	r3, [r4, #12]
 800c350:	059b      	lsls	r3, r3, #22
 800c352:	d4dd      	bmi.n	800c310 <_fflush_r+0xc>
 800c354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c356:	f000 f908 	bl	800c56a <__retarget_lock_release_recursive>
 800c35a:	e7d9      	b.n	800c310 <_fflush_r+0xc>
 800c35c:	4b05      	ldr	r3, [pc, #20]	; (800c374 <_fflush_r+0x70>)
 800c35e:	429c      	cmp	r4, r3
 800c360:	d101      	bne.n	800c366 <_fflush_r+0x62>
 800c362:	68ac      	ldr	r4, [r5, #8]
 800c364:	e7df      	b.n	800c326 <_fflush_r+0x22>
 800c366:	4b04      	ldr	r3, [pc, #16]	; (800c378 <_fflush_r+0x74>)
 800c368:	429c      	cmp	r4, r3
 800c36a:	bf08      	it	eq
 800c36c:	68ec      	ldreq	r4, [r5, #12]
 800c36e:	e7da      	b.n	800c326 <_fflush_r+0x22>
 800c370:	0800d0dc 	.word	0x0800d0dc
 800c374:	0800d0fc 	.word	0x0800d0fc
 800c378:	0800d0bc 	.word	0x0800d0bc

0800c37c <std>:
 800c37c:	2300      	movs	r3, #0
 800c37e:	b510      	push	{r4, lr}
 800c380:	4604      	mov	r4, r0
 800c382:	e9c0 3300 	strd	r3, r3, [r0]
 800c386:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c38a:	6083      	str	r3, [r0, #8]
 800c38c:	8181      	strh	r1, [r0, #12]
 800c38e:	6643      	str	r3, [r0, #100]	; 0x64
 800c390:	81c2      	strh	r2, [r0, #14]
 800c392:	6183      	str	r3, [r0, #24]
 800c394:	4619      	mov	r1, r3
 800c396:	2208      	movs	r2, #8
 800c398:	305c      	adds	r0, #92	; 0x5c
 800c39a:	f7fb fdcd 	bl	8007f38 <memset>
 800c39e:	4b05      	ldr	r3, [pc, #20]	; (800c3b4 <std+0x38>)
 800c3a0:	6263      	str	r3, [r4, #36]	; 0x24
 800c3a2:	4b05      	ldr	r3, [pc, #20]	; (800c3b8 <std+0x3c>)
 800c3a4:	62a3      	str	r3, [r4, #40]	; 0x28
 800c3a6:	4b05      	ldr	r3, [pc, #20]	; (800c3bc <std+0x40>)
 800c3a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c3aa:	4b05      	ldr	r3, [pc, #20]	; (800c3c0 <std+0x44>)
 800c3ac:	6224      	str	r4, [r4, #32]
 800c3ae:	6323      	str	r3, [r4, #48]	; 0x30
 800c3b0:	bd10      	pop	{r4, pc}
 800c3b2:	bf00      	nop
 800c3b4:	0800c6d1 	.word	0x0800c6d1
 800c3b8:	0800c6f3 	.word	0x0800c6f3
 800c3bc:	0800c72b 	.word	0x0800c72b
 800c3c0:	0800c74f 	.word	0x0800c74f

0800c3c4 <_cleanup_r>:
 800c3c4:	4901      	ldr	r1, [pc, #4]	; (800c3cc <_cleanup_r+0x8>)
 800c3c6:	f000 b8af 	b.w	800c528 <_fwalk_reent>
 800c3ca:	bf00      	nop
 800c3cc:	0800c305 	.word	0x0800c305

0800c3d0 <__sfmoreglue>:
 800c3d0:	b570      	push	{r4, r5, r6, lr}
 800c3d2:	2268      	movs	r2, #104	; 0x68
 800c3d4:	1e4d      	subs	r5, r1, #1
 800c3d6:	4355      	muls	r5, r2
 800c3d8:	460e      	mov	r6, r1
 800c3da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c3de:	f7ff fa59 	bl	800b894 <_malloc_r>
 800c3e2:	4604      	mov	r4, r0
 800c3e4:	b140      	cbz	r0, 800c3f8 <__sfmoreglue+0x28>
 800c3e6:	2100      	movs	r1, #0
 800c3e8:	e9c0 1600 	strd	r1, r6, [r0]
 800c3ec:	300c      	adds	r0, #12
 800c3ee:	60a0      	str	r0, [r4, #8]
 800c3f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c3f4:	f7fb fda0 	bl	8007f38 <memset>
 800c3f8:	4620      	mov	r0, r4
 800c3fa:	bd70      	pop	{r4, r5, r6, pc}

0800c3fc <__sfp_lock_acquire>:
 800c3fc:	4801      	ldr	r0, [pc, #4]	; (800c404 <__sfp_lock_acquire+0x8>)
 800c3fe:	f000 b8b3 	b.w	800c568 <__retarget_lock_acquire_recursive>
 800c402:	bf00      	nop
 800c404:	2000044d 	.word	0x2000044d

0800c408 <__sfp_lock_release>:
 800c408:	4801      	ldr	r0, [pc, #4]	; (800c410 <__sfp_lock_release+0x8>)
 800c40a:	f000 b8ae 	b.w	800c56a <__retarget_lock_release_recursive>
 800c40e:	bf00      	nop
 800c410:	2000044d 	.word	0x2000044d

0800c414 <__sinit_lock_acquire>:
 800c414:	4801      	ldr	r0, [pc, #4]	; (800c41c <__sinit_lock_acquire+0x8>)
 800c416:	f000 b8a7 	b.w	800c568 <__retarget_lock_acquire_recursive>
 800c41a:	bf00      	nop
 800c41c:	2000044e 	.word	0x2000044e

0800c420 <__sinit_lock_release>:
 800c420:	4801      	ldr	r0, [pc, #4]	; (800c428 <__sinit_lock_release+0x8>)
 800c422:	f000 b8a2 	b.w	800c56a <__retarget_lock_release_recursive>
 800c426:	bf00      	nop
 800c428:	2000044e 	.word	0x2000044e

0800c42c <__sinit>:
 800c42c:	b510      	push	{r4, lr}
 800c42e:	4604      	mov	r4, r0
 800c430:	f7ff fff0 	bl	800c414 <__sinit_lock_acquire>
 800c434:	69a3      	ldr	r3, [r4, #24]
 800c436:	b11b      	cbz	r3, 800c440 <__sinit+0x14>
 800c438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c43c:	f7ff bff0 	b.w	800c420 <__sinit_lock_release>
 800c440:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c444:	6523      	str	r3, [r4, #80]	; 0x50
 800c446:	4b13      	ldr	r3, [pc, #76]	; (800c494 <__sinit+0x68>)
 800c448:	4a13      	ldr	r2, [pc, #76]	; (800c498 <__sinit+0x6c>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c44e:	42a3      	cmp	r3, r4
 800c450:	bf04      	itt	eq
 800c452:	2301      	moveq	r3, #1
 800c454:	61a3      	streq	r3, [r4, #24]
 800c456:	4620      	mov	r0, r4
 800c458:	f000 f820 	bl	800c49c <__sfp>
 800c45c:	6060      	str	r0, [r4, #4]
 800c45e:	4620      	mov	r0, r4
 800c460:	f000 f81c 	bl	800c49c <__sfp>
 800c464:	60a0      	str	r0, [r4, #8]
 800c466:	4620      	mov	r0, r4
 800c468:	f000 f818 	bl	800c49c <__sfp>
 800c46c:	2200      	movs	r2, #0
 800c46e:	60e0      	str	r0, [r4, #12]
 800c470:	2104      	movs	r1, #4
 800c472:	6860      	ldr	r0, [r4, #4]
 800c474:	f7ff ff82 	bl	800c37c <std>
 800c478:	68a0      	ldr	r0, [r4, #8]
 800c47a:	2201      	movs	r2, #1
 800c47c:	2109      	movs	r1, #9
 800c47e:	f7ff ff7d 	bl	800c37c <std>
 800c482:	68e0      	ldr	r0, [r4, #12]
 800c484:	2202      	movs	r2, #2
 800c486:	2112      	movs	r1, #18
 800c488:	f7ff ff78 	bl	800c37c <std>
 800c48c:	2301      	movs	r3, #1
 800c48e:	61a3      	str	r3, [r4, #24]
 800c490:	e7d2      	b.n	800c438 <__sinit+0xc>
 800c492:	bf00      	nop
 800c494:	0800cc78 	.word	0x0800cc78
 800c498:	0800c3c5 	.word	0x0800c3c5

0800c49c <__sfp>:
 800c49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c49e:	4607      	mov	r7, r0
 800c4a0:	f7ff ffac 	bl	800c3fc <__sfp_lock_acquire>
 800c4a4:	4b1e      	ldr	r3, [pc, #120]	; (800c520 <__sfp+0x84>)
 800c4a6:	681e      	ldr	r6, [r3, #0]
 800c4a8:	69b3      	ldr	r3, [r6, #24]
 800c4aa:	b913      	cbnz	r3, 800c4b2 <__sfp+0x16>
 800c4ac:	4630      	mov	r0, r6
 800c4ae:	f7ff ffbd 	bl	800c42c <__sinit>
 800c4b2:	3648      	adds	r6, #72	; 0x48
 800c4b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c4b8:	3b01      	subs	r3, #1
 800c4ba:	d503      	bpl.n	800c4c4 <__sfp+0x28>
 800c4bc:	6833      	ldr	r3, [r6, #0]
 800c4be:	b30b      	cbz	r3, 800c504 <__sfp+0x68>
 800c4c0:	6836      	ldr	r6, [r6, #0]
 800c4c2:	e7f7      	b.n	800c4b4 <__sfp+0x18>
 800c4c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c4c8:	b9d5      	cbnz	r5, 800c500 <__sfp+0x64>
 800c4ca:	4b16      	ldr	r3, [pc, #88]	; (800c524 <__sfp+0x88>)
 800c4cc:	60e3      	str	r3, [r4, #12]
 800c4ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c4d2:	6665      	str	r5, [r4, #100]	; 0x64
 800c4d4:	f000 f847 	bl	800c566 <__retarget_lock_init_recursive>
 800c4d8:	f7ff ff96 	bl	800c408 <__sfp_lock_release>
 800c4dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c4e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c4e4:	6025      	str	r5, [r4, #0]
 800c4e6:	61a5      	str	r5, [r4, #24]
 800c4e8:	2208      	movs	r2, #8
 800c4ea:	4629      	mov	r1, r5
 800c4ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c4f0:	f7fb fd22 	bl	8007f38 <memset>
 800c4f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c4f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c4fc:	4620      	mov	r0, r4
 800c4fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c500:	3468      	adds	r4, #104	; 0x68
 800c502:	e7d9      	b.n	800c4b8 <__sfp+0x1c>
 800c504:	2104      	movs	r1, #4
 800c506:	4638      	mov	r0, r7
 800c508:	f7ff ff62 	bl	800c3d0 <__sfmoreglue>
 800c50c:	4604      	mov	r4, r0
 800c50e:	6030      	str	r0, [r6, #0]
 800c510:	2800      	cmp	r0, #0
 800c512:	d1d5      	bne.n	800c4c0 <__sfp+0x24>
 800c514:	f7ff ff78 	bl	800c408 <__sfp_lock_release>
 800c518:	230c      	movs	r3, #12
 800c51a:	603b      	str	r3, [r7, #0]
 800c51c:	e7ee      	b.n	800c4fc <__sfp+0x60>
 800c51e:	bf00      	nop
 800c520:	0800cc78 	.word	0x0800cc78
 800c524:	ffff0001 	.word	0xffff0001

0800c528 <_fwalk_reent>:
 800c528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c52c:	4606      	mov	r6, r0
 800c52e:	4688      	mov	r8, r1
 800c530:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c534:	2700      	movs	r7, #0
 800c536:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c53a:	f1b9 0901 	subs.w	r9, r9, #1
 800c53e:	d505      	bpl.n	800c54c <_fwalk_reent+0x24>
 800c540:	6824      	ldr	r4, [r4, #0]
 800c542:	2c00      	cmp	r4, #0
 800c544:	d1f7      	bne.n	800c536 <_fwalk_reent+0xe>
 800c546:	4638      	mov	r0, r7
 800c548:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c54c:	89ab      	ldrh	r3, [r5, #12]
 800c54e:	2b01      	cmp	r3, #1
 800c550:	d907      	bls.n	800c562 <_fwalk_reent+0x3a>
 800c552:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c556:	3301      	adds	r3, #1
 800c558:	d003      	beq.n	800c562 <_fwalk_reent+0x3a>
 800c55a:	4629      	mov	r1, r5
 800c55c:	4630      	mov	r0, r6
 800c55e:	47c0      	blx	r8
 800c560:	4307      	orrs	r7, r0
 800c562:	3568      	adds	r5, #104	; 0x68
 800c564:	e7e9      	b.n	800c53a <_fwalk_reent+0x12>

0800c566 <__retarget_lock_init_recursive>:
 800c566:	4770      	bx	lr

0800c568 <__retarget_lock_acquire_recursive>:
 800c568:	4770      	bx	lr

0800c56a <__retarget_lock_release_recursive>:
 800c56a:	4770      	bx	lr

0800c56c <__swhatbuf_r>:
 800c56c:	b570      	push	{r4, r5, r6, lr}
 800c56e:	460e      	mov	r6, r1
 800c570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c574:	2900      	cmp	r1, #0
 800c576:	b096      	sub	sp, #88	; 0x58
 800c578:	4614      	mov	r4, r2
 800c57a:	461d      	mov	r5, r3
 800c57c:	da08      	bge.n	800c590 <__swhatbuf_r+0x24>
 800c57e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c582:	2200      	movs	r2, #0
 800c584:	602a      	str	r2, [r5, #0]
 800c586:	061a      	lsls	r2, r3, #24
 800c588:	d410      	bmi.n	800c5ac <__swhatbuf_r+0x40>
 800c58a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c58e:	e00e      	b.n	800c5ae <__swhatbuf_r+0x42>
 800c590:	466a      	mov	r2, sp
 800c592:	f000 f903 	bl	800c79c <_fstat_r>
 800c596:	2800      	cmp	r0, #0
 800c598:	dbf1      	blt.n	800c57e <__swhatbuf_r+0x12>
 800c59a:	9a01      	ldr	r2, [sp, #4]
 800c59c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c5a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c5a4:	425a      	negs	r2, r3
 800c5a6:	415a      	adcs	r2, r3
 800c5a8:	602a      	str	r2, [r5, #0]
 800c5aa:	e7ee      	b.n	800c58a <__swhatbuf_r+0x1e>
 800c5ac:	2340      	movs	r3, #64	; 0x40
 800c5ae:	2000      	movs	r0, #0
 800c5b0:	6023      	str	r3, [r4, #0]
 800c5b2:	b016      	add	sp, #88	; 0x58
 800c5b4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c5b8 <__smakebuf_r>:
 800c5b8:	898b      	ldrh	r3, [r1, #12]
 800c5ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c5bc:	079d      	lsls	r5, r3, #30
 800c5be:	4606      	mov	r6, r0
 800c5c0:	460c      	mov	r4, r1
 800c5c2:	d507      	bpl.n	800c5d4 <__smakebuf_r+0x1c>
 800c5c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c5c8:	6023      	str	r3, [r4, #0]
 800c5ca:	6123      	str	r3, [r4, #16]
 800c5cc:	2301      	movs	r3, #1
 800c5ce:	6163      	str	r3, [r4, #20]
 800c5d0:	b002      	add	sp, #8
 800c5d2:	bd70      	pop	{r4, r5, r6, pc}
 800c5d4:	ab01      	add	r3, sp, #4
 800c5d6:	466a      	mov	r2, sp
 800c5d8:	f7ff ffc8 	bl	800c56c <__swhatbuf_r>
 800c5dc:	9900      	ldr	r1, [sp, #0]
 800c5de:	4605      	mov	r5, r0
 800c5e0:	4630      	mov	r0, r6
 800c5e2:	f7ff f957 	bl	800b894 <_malloc_r>
 800c5e6:	b948      	cbnz	r0, 800c5fc <__smakebuf_r+0x44>
 800c5e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5ec:	059a      	lsls	r2, r3, #22
 800c5ee:	d4ef      	bmi.n	800c5d0 <__smakebuf_r+0x18>
 800c5f0:	f023 0303 	bic.w	r3, r3, #3
 800c5f4:	f043 0302 	orr.w	r3, r3, #2
 800c5f8:	81a3      	strh	r3, [r4, #12]
 800c5fa:	e7e3      	b.n	800c5c4 <__smakebuf_r+0xc>
 800c5fc:	4b0d      	ldr	r3, [pc, #52]	; (800c634 <__smakebuf_r+0x7c>)
 800c5fe:	62b3      	str	r3, [r6, #40]	; 0x28
 800c600:	89a3      	ldrh	r3, [r4, #12]
 800c602:	6020      	str	r0, [r4, #0]
 800c604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c608:	81a3      	strh	r3, [r4, #12]
 800c60a:	9b00      	ldr	r3, [sp, #0]
 800c60c:	6163      	str	r3, [r4, #20]
 800c60e:	9b01      	ldr	r3, [sp, #4]
 800c610:	6120      	str	r0, [r4, #16]
 800c612:	b15b      	cbz	r3, 800c62c <__smakebuf_r+0x74>
 800c614:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c618:	4630      	mov	r0, r6
 800c61a:	f000 f8d1 	bl	800c7c0 <_isatty_r>
 800c61e:	b128      	cbz	r0, 800c62c <__smakebuf_r+0x74>
 800c620:	89a3      	ldrh	r3, [r4, #12]
 800c622:	f023 0303 	bic.w	r3, r3, #3
 800c626:	f043 0301 	orr.w	r3, r3, #1
 800c62a:	81a3      	strh	r3, [r4, #12]
 800c62c:	89a0      	ldrh	r0, [r4, #12]
 800c62e:	4305      	orrs	r5, r0
 800c630:	81a5      	strh	r5, [r4, #12]
 800c632:	e7cd      	b.n	800c5d0 <__smakebuf_r+0x18>
 800c634:	0800c3c5 	.word	0x0800c3c5

0800c638 <_malloc_usable_size_r>:
 800c638:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c63c:	1f18      	subs	r0, r3, #4
 800c63e:	2b00      	cmp	r3, #0
 800c640:	bfbc      	itt	lt
 800c642:	580b      	ldrlt	r3, [r1, r0]
 800c644:	18c0      	addlt	r0, r0, r3
 800c646:	4770      	bx	lr

0800c648 <_raise_r>:
 800c648:	291f      	cmp	r1, #31
 800c64a:	b538      	push	{r3, r4, r5, lr}
 800c64c:	4604      	mov	r4, r0
 800c64e:	460d      	mov	r5, r1
 800c650:	d904      	bls.n	800c65c <_raise_r+0x14>
 800c652:	2316      	movs	r3, #22
 800c654:	6003      	str	r3, [r0, #0]
 800c656:	f04f 30ff 	mov.w	r0, #4294967295
 800c65a:	bd38      	pop	{r3, r4, r5, pc}
 800c65c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c65e:	b112      	cbz	r2, 800c666 <_raise_r+0x1e>
 800c660:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c664:	b94b      	cbnz	r3, 800c67a <_raise_r+0x32>
 800c666:	4620      	mov	r0, r4
 800c668:	f000 f830 	bl	800c6cc <_getpid_r>
 800c66c:	462a      	mov	r2, r5
 800c66e:	4601      	mov	r1, r0
 800c670:	4620      	mov	r0, r4
 800c672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c676:	f000 b817 	b.w	800c6a8 <_kill_r>
 800c67a:	2b01      	cmp	r3, #1
 800c67c:	d00a      	beq.n	800c694 <_raise_r+0x4c>
 800c67e:	1c59      	adds	r1, r3, #1
 800c680:	d103      	bne.n	800c68a <_raise_r+0x42>
 800c682:	2316      	movs	r3, #22
 800c684:	6003      	str	r3, [r0, #0]
 800c686:	2001      	movs	r0, #1
 800c688:	e7e7      	b.n	800c65a <_raise_r+0x12>
 800c68a:	2400      	movs	r4, #0
 800c68c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c690:	4628      	mov	r0, r5
 800c692:	4798      	blx	r3
 800c694:	2000      	movs	r0, #0
 800c696:	e7e0      	b.n	800c65a <_raise_r+0x12>

0800c698 <raise>:
 800c698:	4b02      	ldr	r3, [pc, #8]	; (800c6a4 <raise+0xc>)
 800c69a:	4601      	mov	r1, r0
 800c69c:	6818      	ldr	r0, [r3, #0]
 800c69e:	f7ff bfd3 	b.w	800c648 <_raise_r>
 800c6a2:	bf00      	nop
 800c6a4:	20000018 	.word	0x20000018

0800c6a8 <_kill_r>:
 800c6a8:	b538      	push	{r3, r4, r5, lr}
 800c6aa:	4d07      	ldr	r5, [pc, #28]	; (800c6c8 <_kill_r+0x20>)
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	4604      	mov	r4, r0
 800c6b0:	4608      	mov	r0, r1
 800c6b2:	4611      	mov	r1, r2
 800c6b4:	602b      	str	r3, [r5, #0]
 800c6b6:	f7f6 fb31 	bl	8002d1c <_kill>
 800c6ba:	1c43      	adds	r3, r0, #1
 800c6bc:	d102      	bne.n	800c6c4 <_kill_r+0x1c>
 800c6be:	682b      	ldr	r3, [r5, #0]
 800c6c0:	b103      	cbz	r3, 800c6c4 <_kill_r+0x1c>
 800c6c2:	6023      	str	r3, [r4, #0]
 800c6c4:	bd38      	pop	{r3, r4, r5, pc}
 800c6c6:	bf00      	nop
 800c6c8:	20000448 	.word	0x20000448

0800c6cc <_getpid_r>:
 800c6cc:	f7f6 bb1e 	b.w	8002d0c <_getpid>

0800c6d0 <__sread>:
 800c6d0:	b510      	push	{r4, lr}
 800c6d2:	460c      	mov	r4, r1
 800c6d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6d8:	f000 f894 	bl	800c804 <_read_r>
 800c6dc:	2800      	cmp	r0, #0
 800c6de:	bfab      	itete	ge
 800c6e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c6e2:	89a3      	ldrhlt	r3, [r4, #12]
 800c6e4:	181b      	addge	r3, r3, r0
 800c6e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c6ea:	bfac      	ite	ge
 800c6ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800c6ee:	81a3      	strhlt	r3, [r4, #12]
 800c6f0:	bd10      	pop	{r4, pc}

0800c6f2 <__swrite>:
 800c6f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6f6:	461f      	mov	r7, r3
 800c6f8:	898b      	ldrh	r3, [r1, #12]
 800c6fa:	05db      	lsls	r3, r3, #23
 800c6fc:	4605      	mov	r5, r0
 800c6fe:	460c      	mov	r4, r1
 800c700:	4616      	mov	r6, r2
 800c702:	d505      	bpl.n	800c710 <__swrite+0x1e>
 800c704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c708:	2302      	movs	r3, #2
 800c70a:	2200      	movs	r2, #0
 800c70c:	f000 f868 	bl	800c7e0 <_lseek_r>
 800c710:	89a3      	ldrh	r3, [r4, #12]
 800c712:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c716:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c71a:	81a3      	strh	r3, [r4, #12]
 800c71c:	4632      	mov	r2, r6
 800c71e:	463b      	mov	r3, r7
 800c720:	4628      	mov	r0, r5
 800c722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c726:	f000 b817 	b.w	800c758 <_write_r>

0800c72a <__sseek>:
 800c72a:	b510      	push	{r4, lr}
 800c72c:	460c      	mov	r4, r1
 800c72e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c732:	f000 f855 	bl	800c7e0 <_lseek_r>
 800c736:	1c43      	adds	r3, r0, #1
 800c738:	89a3      	ldrh	r3, [r4, #12]
 800c73a:	bf15      	itete	ne
 800c73c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c73e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c742:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c746:	81a3      	strheq	r3, [r4, #12]
 800c748:	bf18      	it	ne
 800c74a:	81a3      	strhne	r3, [r4, #12]
 800c74c:	bd10      	pop	{r4, pc}

0800c74e <__sclose>:
 800c74e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c752:	f000 b813 	b.w	800c77c <_close_r>
	...

0800c758 <_write_r>:
 800c758:	b538      	push	{r3, r4, r5, lr}
 800c75a:	4d07      	ldr	r5, [pc, #28]	; (800c778 <_write_r+0x20>)
 800c75c:	4604      	mov	r4, r0
 800c75e:	4608      	mov	r0, r1
 800c760:	4611      	mov	r1, r2
 800c762:	2200      	movs	r2, #0
 800c764:	602a      	str	r2, [r5, #0]
 800c766:	461a      	mov	r2, r3
 800c768:	f7f6 fb0f 	bl	8002d8a <_write>
 800c76c:	1c43      	adds	r3, r0, #1
 800c76e:	d102      	bne.n	800c776 <_write_r+0x1e>
 800c770:	682b      	ldr	r3, [r5, #0]
 800c772:	b103      	cbz	r3, 800c776 <_write_r+0x1e>
 800c774:	6023      	str	r3, [r4, #0]
 800c776:	bd38      	pop	{r3, r4, r5, pc}
 800c778:	20000448 	.word	0x20000448

0800c77c <_close_r>:
 800c77c:	b538      	push	{r3, r4, r5, lr}
 800c77e:	4d06      	ldr	r5, [pc, #24]	; (800c798 <_close_r+0x1c>)
 800c780:	2300      	movs	r3, #0
 800c782:	4604      	mov	r4, r0
 800c784:	4608      	mov	r0, r1
 800c786:	602b      	str	r3, [r5, #0]
 800c788:	f7f6 fb1b 	bl	8002dc2 <_close>
 800c78c:	1c43      	adds	r3, r0, #1
 800c78e:	d102      	bne.n	800c796 <_close_r+0x1a>
 800c790:	682b      	ldr	r3, [r5, #0]
 800c792:	b103      	cbz	r3, 800c796 <_close_r+0x1a>
 800c794:	6023      	str	r3, [r4, #0]
 800c796:	bd38      	pop	{r3, r4, r5, pc}
 800c798:	20000448 	.word	0x20000448

0800c79c <_fstat_r>:
 800c79c:	b538      	push	{r3, r4, r5, lr}
 800c79e:	4d07      	ldr	r5, [pc, #28]	; (800c7bc <_fstat_r+0x20>)
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	4604      	mov	r4, r0
 800c7a4:	4608      	mov	r0, r1
 800c7a6:	4611      	mov	r1, r2
 800c7a8:	602b      	str	r3, [r5, #0]
 800c7aa:	f7f6 fb16 	bl	8002dda <_fstat>
 800c7ae:	1c43      	adds	r3, r0, #1
 800c7b0:	d102      	bne.n	800c7b8 <_fstat_r+0x1c>
 800c7b2:	682b      	ldr	r3, [r5, #0]
 800c7b4:	b103      	cbz	r3, 800c7b8 <_fstat_r+0x1c>
 800c7b6:	6023      	str	r3, [r4, #0]
 800c7b8:	bd38      	pop	{r3, r4, r5, pc}
 800c7ba:	bf00      	nop
 800c7bc:	20000448 	.word	0x20000448

0800c7c0 <_isatty_r>:
 800c7c0:	b538      	push	{r3, r4, r5, lr}
 800c7c2:	4d06      	ldr	r5, [pc, #24]	; (800c7dc <_isatty_r+0x1c>)
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	4604      	mov	r4, r0
 800c7c8:	4608      	mov	r0, r1
 800c7ca:	602b      	str	r3, [r5, #0]
 800c7cc:	f7f6 fb15 	bl	8002dfa <_isatty>
 800c7d0:	1c43      	adds	r3, r0, #1
 800c7d2:	d102      	bne.n	800c7da <_isatty_r+0x1a>
 800c7d4:	682b      	ldr	r3, [r5, #0]
 800c7d6:	b103      	cbz	r3, 800c7da <_isatty_r+0x1a>
 800c7d8:	6023      	str	r3, [r4, #0]
 800c7da:	bd38      	pop	{r3, r4, r5, pc}
 800c7dc:	20000448 	.word	0x20000448

0800c7e0 <_lseek_r>:
 800c7e0:	b538      	push	{r3, r4, r5, lr}
 800c7e2:	4d07      	ldr	r5, [pc, #28]	; (800c800 <_lseek_r+0x20>)
 800c7e4:	4604      	mov	r4, r0
 800c7e6:	4608      	mov	r0, r1
 800c7e8:	4611      	mov	r1, r2
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	602a      	str	r2, [r5, #0]
 800c7ee:	461a      	mov	r2, r3
 800c7f0:	f7f6 fb0e 	bl	8002e10 <_lseek>
 800c7f4:	1c43      	adds	r3, r0, #1
 800c7f6:	d102      	bne.n	800c7fe <_lseek_r+0x1e>
 800c7f8:	682b      	ldr	r3, [r5, #0]
 800c7fa:	b103      	cbz	r3, 800c7fe <_lseek_r+0x1e>
 800c7fc:	6023      	str	r3, [r4, #0]
 800c7fe:	bd38      	pop	{r3, r4, r5, pc}
 800c800:	20000448 	.word	0x20000448

0800c804 <_read_r>:
 800c804:	b538      	push	{r3, r4, r5, lr}
 800c806:	4d07      	ldr	r5, [pc, #28]	; (800c824 <_read_r+0x20>)
 800c808:	4604      	mov	r4, r0
 800c80a:	4608      	mov	r0, r1
 800c80c:	4611      	mov	r1, r2
 800c80e:	2200      	movs	r2, #0
 800c810:	602a      	str	r2, [r5, #0]
 800c812:	461a      	mov	r2, r3
 800c814:	f7f6 fa9c 	bl	8002d50 <_read>
 800c818:	1c43      	adds	r3, r0, #1
 800c81a:	d102      	bne.n	800c822 <_read_r+0x1e>
 800c81c:	682b      	ldr	r3, [r5, #0]
 800c81e:	b103      	cbz	r3, 800c822 <_read_r+0x1e>
 800c820:	6023      	str	r3, [r4, #0]
 800c822:	bd38      	pop	{r3, r4, r5, pc}
 800c824:	20000448 	.word	0x20000448

0800c828 <log>:
 800c828:	b538      	push	{r3, r4, r5, lr}
 800c82a:	ed2d 8b02 	vpush	{d8}
 800c82e:	ec55 4b10 	vmov	r4, r5, d0
 800c832:	f000 f839 	bl	800c8a8 <__ieee754_log>
 800c836:	4622      	mov	r2, r4
 800c838:	462b      	mov	r3, r5
 800c83a:	4620      	mov	r0, r4
 800c83c:	4629      	mov	r1, r5
 800c83e:	eeb0 8a40 	vmov.f32	s16, s0
 800c842:	eef0 8a60 	vmov.f32	s17, s1
 800c846:	f7f4 f971 	bl	8000b2c <__aeabi_dcmpun>
 800c84a:	b998      	cbnz	r0, 800c874 <log+0x4c>
 800c84c:	2200      	movs	r2, #0
 800c84e:	2300      	movs	r3, #0
 800c850:	4620      	mov	r0, r4
 800c852:	4629      	mov	r1, r5
 800c854:	f7f4 f960 	bl	8000b18 <__aeabi_dcmpgt>
 800c858:	b960      	cbnz	r0, 800c874 <log+0x4c>
 800c85a:	2200      	movs	r2, #0
 800c85c:	2300      	movs	r3, #0
 800c85e:	4620      	mov	r0, r4
 800c860:	4629      	mov	r1, r5
 800c862:	f7f4 f931 	bl	8000ac8 <__aeabi_dcmpeq>
 800c866:	b160      	cbz	r0, 800c882 <log+0x5a>
 800c868:	f7fb fb3c 	bl	8007ee4 <__errno>
 800c86c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800c898 <log+0x70>
 800c870:	2322      	movs	r3, #34	; 0x22
 800c872:	6003      	str	r3, [r0, #0]
 800c874:	eeb0 0a48 	vmov.f32	s0, s16
 800c878:	eef0 0a68 	vmov.f32	s1, s17
 800c87c:	ecbd 8b02 	vpop	{d8}
 800c880:	bd38      	pop	{r3, r4, r5, pc}
 800c882:	f7fb fb2f 	bl	8007ee4 <__errno>
 800c886:	ecbd 8b02 	vpop	{d8}
 800c88a:	2321      	movs	r3, #33	; 0x21
 800c88c:	6003      	str	r3, [r0, #0]
 800c88e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c892:	4803      	ldr	r0, [pc, #12]	; (800c8a0 <log+0x78>)
 800c894:	f7ff b9d0 	b.w	800bc38 <nan>
 800c898:	00000000 	.word	0x00000000
 800c89c:	fff00000 	.word	0xfff00000
 800c8a0:	0800d0b8 	.word	0x0800d0b8
 800c8a4:	00000000 	.word	0x00000000

0800c8a8 <__ieee754_log>:
 800c8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8ac:	ec51 0b10 	vmov	r0, r1, d0
 800c8b0:	ed2d 8b04 	vpush	{d8-d9}
 800c8b4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c8b8:	b083      	sub	sp, #12
 800c8ba:	460d      	mov	r5, r1
 800c8bc:	da29      	bge.n	800c912 <__ieee754_log+0x6a>
 800c8be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c8c2:	4303      	orrs	r3, r0
 800c8c4:	ee10 2a10 	vmov	r2, s0
 800c8c8:	d10c      	bne.n	800c8e4 <__ieee754_log+0x3c>
 800c8ca:	49cf      	ldr	r1, [pc, #828]	; (800cc08 <__ieee754_log+0x360>)
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	2000      	movs	r0, #0
 800c8d2:	f7f3 ffbb 	bl	800084c <__aeabi_ddiv>
 800c8d6:	ec41 0b10 	vmov	d0, r0, r1
 800c8da:	b003      	add	sp, #12
 800c8dc:	ecbd 8b04 	vpop	{d8-d9}
 800c8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8e4:	2900      	cmp	r1, #0
 800c8e6:	da05      	bge.n	800c8f4 <__ieee754_log+0x4c>
 800c8e8:	460b      	mov	r3, r1
 800c8ea:	f7f3 fccd 	bl	8000288 <__aeabi_dsub>
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	e7ee      	b.n	800c8d2 <__ieee754_log+0x2a>
 800c8f4:	4bc5      	ldr	r3, [pc, #788]	; (800cc0c <__ieee754_log+0x364>)
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	f7f3 fe7e 	bl	80005f8 <__aeabi_dmul>
 800c8fc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800c900:	460d      	mov	r5, r1
 800c902:	4ac3      	ldr	r2, [pc, #780]	; (800cc10 <__ieee754_log+0x368>)
 800c904:	4295      	cmp	r5, r2
 800c906:	dd06      	ble.n	800c916 <__ieee754_log+0x6e>
 800c908:	4602      	mov	r2, r0
 800c90a:	460b      	mov	r3, r1
 800c90c:	f7f3 fcbe 	bl	800028c <__adddf3>
 800c910:	e7e1      	b.n	800c8d6 <__ieee754_log+0x2e>
 800c912:	2300      	movs	r3, #0
 800c914:	e7f5      	b.n	800c902 <__ieee754_log+0x5a>
 800c916:	152c      	asrs	r4, r5, #20
 800c918:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800c91c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800c920:	441c      	add	r4, r3
 800c922:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800c926:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800c92a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c92e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800c932:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800c936:	ea42 0105 	orr.w	r1, r2, r5
 800c93a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800c93e:	2200      	movs	r2, #0
 800c940:	4bb4      	ldr	r3, [pc, #720]	; (800cc14 <__ieee754_log+0x36c>)
 800c942:	f7f3 fca1 	bl	8000288 <__aeabi_dsub>
 800c946:	1cab      	adds	r3, r5, #2
 800c948:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c94c:	2b02      	cmp	r3, #2
 800c94e:	4682      	mov	sl, r0
 800c950:	468b      	mov	fp, r1
 800c952:	f04f 0200 	mov.w	r2, #0
 800c956:	dc53      	bgt.n	800ca00 <__ieee754_log+0x158>
 800c958:	2300      	movs	r3, #0
 800c95a:	f7f4 f8b5 	bl	8000ac8 <__aeabi_dcmpeq>
 800c95e:	b1d0      	cbz	r0, 800c996 <__ieee754_log+0xee>
 800c960:	2c00      	cmp	r4, #0
 800c962:	f000 8122 	beq.w	800cbaa <__ieee754_log+0x302>
 800c966:	4620      	mov	r0, r4
 800c968:	f7f3 fddc 	bl	8000524 <__aeabi_i2d>
 800c96c:	a390      	add	r3, pc, #576	; (adr r3, 800cbb0 <__ieee754_log+0x308>)
 800c96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c972:	4606      	mov	r6, r0
 800c974:	460f      	mov	r7, r1
 800c976:	f7f3 fe3f 	bl	80005f8 <__aeabi_dmul>
 800c97a:	a38f      	add	r3, pc, #572	; (adr r3, 800cbb8 <__ieee754_log+0x310>)
 800c97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c980:	4604      	mov	r4, r0
 800c982:	460d      	mov	r5, r1
 800c984:	4630      	mov	r0, r6
 800c986:	4639      	mov	r1, r7
 800c988:	f7f3 fe36 	bl	80005f8 <__aeabi_dmul>
 800c98c:	4602      	mov	r2, r0
 800c98e:	460b      	mov	r3, r1
 800c990:	4620      	mov	r0, r4
 800c992:	4629      	mov	r1, r5
 800c994:	e7ba      	b.n	800c90c <__ieee754_log+0x64>
 800c996:	a38a      	add	r3, pc, #552	; (adr r3, 800cbc0 <__ieee754_log+0x318>)
 800c998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c99c:	4650      	mov	r0, sl
 800c99e:	4659      	mov	r1, fp
 800c9a0:	f7f3 fe2a 	bl	80005f8 <__aeabi_dmul>
 800c9a4:	4602      	mov	r2, r0
 800c9a6:	460b      	mov	r3, r1
 800c9a8:	2000      	movs	r0, #0
 800c9aa:	499b      	ldr	r1, [pc, #620]	; (800cc18 <__ieee754_log+0x370>)
 800c9ac:	f7f3 fc6c 	bl	8000288 <__aeabi_dsub>
 800c9b0:	4652      	mov	r2, sl
 800c9b2:	4606      	mov	r6, r0
 800c9b4:	460f      	mov	r7, r1
 800c9b6:	465b      	mov	r3, fp
 800c9b8:	4650      	mov	r0, sl
 800c9ba:	4659      	mov	r1, fp
 800c9bc:	f7f3 fe1c 	bl	80005f8 <__aeabi_dmul>
 800c9c0:	4602      	mov	r2, r0
 800c9c2:	460b      	mov	r3, r1
 800c9c4:	4630      	mov	r0, r6
 800c9c6:	4639      	mov	r1, r7
 800c9c8:	f7f3 fe16 	bl	80005f8 <__aeabi_dmul>
 800c9cc:	4606      	mov	r6, r0
 800c9ce:	460f      	mov	r7, r1
 800c9d0:	b914      	cbnz	r4, 800c9d8 <__ieee754_log+0x130>
 800c9d2:	4632      	mov	r2, r6
 800c9d4:	463b      	mov	r3, r7
 800c9d6:	e0a2      	b.n	800cb1e <__ieee754_log+0x276>
 800c9d8:	4620      	mov	r0, r4
 800c9da:	f7f3 fda3 	bl	8000524 <__aeabi_i2d>
 800c9de:	a374      	add	r3, pc, #464	; (adr r3, 800cbb0 <__ieee754_log+0x308>)
 800c9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e4:	4680      	mov	r8, r0
 800c9e6:	4689      	mov	r9, r1
 800c9e8:	f7f3 fe06 	bl	80005f8 <__aeabi_dmul>
 800c9ec:	a372      	add	r3, pc, #456	; (adr r3, 800cbb8 <__ieee754_log+0x310>)
 800c9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f2:	4604      	mov	r4, r0
 800c9f4:	460d      	mov	r5, r1
 800c9f6:	4640      	mov	r0, r8
 800c9f8:	4649      	mov	r1, r9
 800c9fa:	f7f3 fdfd 	bl	80005f8 <__aeabi_dmul>
 800c9fe:	e0a7      	b.n	800cb50 <__ieee754_log+0x2a8>
 800ca00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ca04:	f7f3 fc42 	bl	800028c <__adddf3>
 800ca08:	4602      	mov	r2, r0
 800ca0a:	460b      	mov	r3, r1
 800ca0c:	4650      	mov	r0, sl
 800ca0e:	4659      	mov	r1, fp
 800ca10:	f7f3 ff1c 	bl	800084c <__aeabi_ddiv>
 800ca14:	ec41 0b18 	vmov	d8, r0, r1
 800ca18:	4620      	mov	r0, r4
 800ca1a:	f7f3 fd83 	bl	8000524 <__aeabi_i2d>
 800ca1e:	ec53 2b18 	vmov	r2, r3, d8
 800ca22:	ec41 0b19 	vmov	d9, r0, r1
 800ca26:	ec51 0b18 	vmov	r0, r1, d8
 800ca2a:	f7f3 fde5 	bl	80005f8 <__aeabi_dmul>
 800ca2e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800ca32:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800ca36:	9301      	str	r3, [sp, #4]
 800ca38:	4602      	mov	r2, r0
 800ca3a:	460b      	mov	r3, r1
 800ca3c:	4680      	mov	r8, r0
 800ca3e:	4689      	mov	r9, r1
 800ca40:	f7f3 fdda 	bl	80005f8 <__aeabi_dmul>
 800ca44:	a360      	add	r3, pc, #384	; (adr r3, 800cbc8 <__ieee754_log+0x320>)
 800ca46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca4a:	4606      	mov	r6, r0
 800ca4c:	460f      	mov	r7, r1
 800ca4e:	f7f3 fdd3 	bl	80005f8 <__aeabi_dmul>
 800ca52:	a35f      	add	r3, pc, #380	; (adr r3, 800cbd0 <__ieee754_log+0x328>)
 800ca54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca58:	f7f3 fc18 	bl	800028c <__adddf3>
 800ca5c:	4632      	mov	r2, r6
 800ca5e:	463b      	mov	r3, r7
 800ca60:	f7f3 fdca 	bl	80005f8 <__aeabi_dmul>
 800ca64:	a35c      	add	r3, pc, #368	; (adr r3, 800cbd8 <__ieee754_log+0x330>)
 800ca66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca6a:	f7f3 fc0f 	bl	800028c <__adddf3>
 800ca6e:	4632      	mov	r2, r6
 800ca70:	463b      	mov	r3, r7
 800ca72:	f7f3 fdc1 	bl	80005f8 <__aeabi_dmul>
 800ca76:	a35a      	add	r3, pc, #360	; (adr r3, 800cbe0 <__ieee754_log+0x338>)
 800ca78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca7c:	f7f3 fc06 	bl	800028c <__adddf3>
 800ca80:	4642      	mov	r2, r8
 800ca82:	464b      	mov	r3, r9
 800ca84:	f7f3 fdb8 	bl	80005f8 <__aeabi_dmul>
 800ca88:	a357      	add	r3, pc, #348	; (adr r3, 800cbe8 <__ieee754_log+0x340>)
 800ca8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca8e:	4680      	mov	r8, r0
 800ca90:	4689      	mov	r9, r1
 800ca92:	4630      	mov	r0, r6
 800ca94:	4639      	mov	r1, r7
 800ca96:	f7f3 fdaf 	bl	80005f8 <__aeabi_dmul>
 800ca9a:	a355      	add	r3, pc, #340	; (adr r3, 800cbf0 <__ieee754_log+0x348>)
 800ca9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa0:	f7f3 fbf4 	bl	800028c <__adddf3>
 800caa4:	4632      	mov	r2, r6
 800caa6:	463b      	mov	r3, r7
 800caa8:	f7f3 fda6 	bl	80005f8 <__aeabi_dmul>
 800caac:	a352      	add	r3, pc, #328	; (adr r3, 800cbf8 <__ieee754_log+0x350>)
 800caae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab2:	f7f3 fbeb 	bl	800028c <__adddf3>
 800cab6:	4632      	mov	r2, r6
 800cab8:	463b      	mov	r3, r7
 800caba:	f7f3 fd9d 	bl	80005f8 <__aeabi_dmul>
 800cabe:	460b      	mov	r3, r1
 800cac0:	4602      	mov	r2, r0
 800cac2:	4649      	mov	r1, r9
 800cac4:	4640      	mov	r0, r8
 800cac6:	f7f3 fbe1 	bl	800028c <__adddf3>
 800caca:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800cace:	9b01      	ldr	r3, [sp, #4]
 800cad0:	3551      	adds	r5, #81	; 0x51
 800cad2:	431d      	orrs	r5, r3
 800cad4:	2d00      	cmp	r5, #0
 800cad6:	4680      	mov	r8, r0
 800cad8:	4689      	mov	r9, r1
 800cada:	dd48      	ble.n	800cb6e <__ieee754_log+0x2c6>
 800cadc:	4b4e      	ldr	r3, [pc, #312]	; (800cc18 <__ieee754_log+0x370>)
 800cade:	2200      	movs	r2, #0
 800cae0:	4650      	mov	r0, sl
 800cae2:	4659      	mov	r1, fp
 800cae4:	f7f3 fd88 	bl	80005f8 <__aeabi_dmul>
 800cae8:	4652      	mov	r2, sl
 800caea:	465b      	mov	r3, fp
 800caec:	f7f3 fd84 	bl	80005f8 <__aeabi_dmul>
 800caf0:	4602      	mov	r2, r0
 800caf2:	460b      	mov	r3, r1
 800caf4:	4606      	mov	r6, r0
 800caf6:	460f      	mov	r7, r1
 800caf8:	4640      	mov	r0, r8
 800cafa:	4649      	mov	r1, r9
 800cafc:	f7f3 fbc6 	bl	800028c <__adddf3>
 800cb00:	ec53 2b18 	vmov	r2, r3, d8
 800cb04:	f7f3 fd78 	bl	80005f8 <__aeabi_dmul>
 800cb08:	4680      	mov	r8, r0
 800cb0a:	4689      	mov	r9, r1
 800cb0c:	b964      	cbnz	r4, 800cb28 <__ieee754_log+0x280>
 800cb0e:	4602      	mov	r2, r0
 800cb10:	460b      	mov	r3, r1
 800cb12:	4630      	mov	r0, r6
 800cb14:	4639      	mov	r1, r7
 800cb16:	f7f3 fbb7 	bl	8000288 <__aeabi_dsub>
 800cb1a:	4602      	mov	r2, r0
 800cb1c:	460b      	mov	r3, r1
 800cb1e:	4650      	mov	r0, sl
 800cb20:	4659      	mov	r1, fp
 800cb22:	f7f3 fbb1 	bl	8000288 <__aeabi_dsub>
 800cb26:	e6d6      	b.n	800c8d6 <__ieee754_log+0x2e>
 800cb28:	a321      	add	r3, pc, #132	; (adr r3, 800cbb0 <__ieee754_log+0x308>)
 800cb2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb2e:	ec51 0b19 	vmov	r0, r1, d9
 800cb32:	f7f3 fd61 	bl	80005f8 <__aeabi_dmul>
 800cb36:	a320      	add	r3, pc, #128	; (adr r3, 800cbb8 <__ieee754_log+0x310>)
 800cb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb3c:	4604      	mov	r4, r0
 800cb3e:	460d      	mov	r5, r1
 800cb40:	ec51 0b19 	vmov	r0, r1, d9
 800cb44:	f7f3 fd58 	bl	80005f8 <__aeabi_dmul>
 800cb48:	4642      	mov	r2, r8
 800cb4a:	464b      	mov	r3, r9
 800cb4c:	f7f3 fb9e 	bl	800028c <__adddf3>
 800cb50:	4602      	mov	r2, r0
 800cb52:	460b      	mov	r3, r1
 800cb54:	4630      	mov	r0, r6
 800cb56:	4639      	mov	r1, r7
 800cb58:	f7f3 fb96 	bl	8000288 <__aeabi_dsub>
 800cb5c:	4652      	mov	r2, sl
 800cb5e:	465b      	mov	r3, fp
 800cb60:	f7f3 fb92 	bl	8000288 <__aeabi_dsub>
 800cb64:	4602      	mov	r2, r0
 800cb66:	460b      	mov	r3, r1
 800cb68:	4620      	mov	r0, r4
 800cb6a:	4629      	mov	r1, r5
 800cb6c:	e7d9      	b.n	800cb22 <__ieee754_log+0x27a>
 800cb6e:	4602      	mov	r2, r0
 800cb70:	460b      	mov	r3, r1
 800cb72:	4650      	mov	r0, sl
 800cb74:	4659      	mov	r1, fp
 800cb76:	f7f3 fb87 	bl	8000288 <__aeabi_dsub>
 800cb7a:	ec53 2b18 	vmov	r2, r3, d8
 800cb7e:	f7f3 fd3b 	bl	80005f8 <__aeabi_dmul>
 800cb82:	4606      	mov	r6, r0
 800cb84:	460f      	mov	r7, r1
 800cb86:	2c00      	cmp	r4, #0
 800cb88:	f43f af23 	beq.w	800c9d2 <__ieee754_log+0x12a>
 800cb8c:	a308      	add	r3, pc, #32	; (adr r3, 800cbb0 <__ieee754_log+0x308>)
 800cb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb92:	ec51 0b19 	vmov	r0, r1, d9
 800cb96:	f7f3 fd2f 	bl	80005f8 <__aeabi_dmul>
 800cb9a:	a307      	add	r3, pc, #28	; (adr r3, 800cbb8 <__ieee754_log+0x310>)
 800cb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba0:	4604      	mov	r4, r0
 800cba2:	460d      	mov	r5, r1
 800cba4:	ec51 0b19 	vmov	r0, r1, d9
 800cba8:	e727      	b.n	800c9fa <__ieee754_log+0x152>
 800cbaa:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800cc00 <__ieee754_log+0x358>
 800cbae:	e694      	b.n	800c8da <__ieee754_log+0x32>
 800cbb0:	fee00000 	.word	0xfee00000
 800cbb4:	3fe62e42 	.word	0x3fe62e42
 800cbb8:	35793c76 	.word	0x35793c76
 800cbbc:	3dea39ef 	.word	0x3dea39ef
 800cbc0:	55555555 	.word	0x55555555
 800cbc4:	3fd55555 	.word	0x3fd55555
 800cbc8:	df3e5244 	.word	0xdf3e5244
 800cbcc:	3fc2f112 	.word	0x3fc2f112
 800cbd0:	96cb03de 	.word	0x96cb03de
 800cbd4:	3fc74664 	.word	0x3fc74664
 800cbd8:	94229359 	.word	0x94229359
 800cbdc:	3fd24924 	.word	0x3fd24924
 800cbe0:	55555593 	.word	0x55555593
 800cbe4:	3fe55555 	.word	0x3fe55555
 800cbe8:	d078c69f 	.word	0xd078c69f
 800cbec:	3fc39a09 	.word	0x3fc39a09
 800cbf0:	1d8e78af 	.word	0x1d8e78af
 800cbf4:	3fcc71c5 	.word	0x3fcc71c5
 800cbf8:	9997fa04 	.word	0x9997fa04
 800cbfc:	3fd99999 	.word	0x3fd99999
	...
 800cc08:	c3500000 	.word	0xc3500000
 800cc0c:	43500000 	.word	0x43500000
 800cc10:	7fefffff 	.word	0x7fefffff
 800cc14:	3ff00000 	.word	0x3ff00000
 800cc18:	3fe00000 	.word	0x3fe00000

0800cc1c <_init>:
 800cc1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc1e:	bf00      	nop
 800cc20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc22:	bc08      	pop	{r3}
 800cc24:	469e      	mov	lr, r3
 800cc26:	4770      	bx	lr

0800cc28 <_fini>:
 800cc28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc2a:	bf00      	nop
 800cc2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc2e:	bc08      	pop	{r3}
 800cc30:	469e      	mov	lr, r3
 800cc32:	4770      	bx	lr
