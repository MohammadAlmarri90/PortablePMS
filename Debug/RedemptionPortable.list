
RedemptionPortable.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007390  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08007520  08007520  00017520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007564  08007564  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007564  08007564  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007564  08007564  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007564  08007564  00017564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007568  08007568  00017568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800756c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000074  080075e0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  080075e0  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c4c  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029ea  00000000  00000000  00034cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a0  00000000  00000000  000376e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001268  00000000  00000000  00038a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000238c3  00000000  00000000  00039ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f59  00000000  00000000  0005d5ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dcf84  00000000  00000000  00073504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00150488  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005678  00000000  00000000  001504d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007508 	.word	0x08007508

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007508 	.word	0x08007508

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2f>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab0:	bf24      	itt	cs
 8000ab2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ab6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aba:	d90d      	bls.n	8000ad8 <__aeabi_d2f+0x30>
 8000abc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000acc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad0:	bf08      	it	eq
 8000ad2:	f020 0001 	biceq.w	r0, r0, #1
 8000ad6:	4770      	bx	lr
 8000ad8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000adc:	d121      	bne.n	8000b22 <__aeabi_d2f+0x7a>
 8000ade:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ae2:	bfbc      	itt	lt
 8000ae4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	4770      	bxlt	lr
 8000aea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000af2:	f1c2 0218 	rsb	r2, r2, #24
 8000af6:	f1c2 0c20 	rsb	ip, r2, #32
 8000afa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000afe:	fa20 f002 	lsr.w	r0, r0, r2
 8000b02:	bf18      	it	ne
 8000b04:	f040 0001 	orrne.w	r0, r0, #1
 8000b08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b14:	ea40 000c 	orr.w	r0, r0, ip
 8000b18:	fa23 f302 	lsr.w	r3, r3, r2
 8000b1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b20:	e7cc      	b.n	8000abc <__aeabi_d2f+0x14>
 8000b22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b26:	d107      	bne.n	8000b38 <__aeabi_d2f+0x90>
 8000b28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b2c:	bf1e      	ittt	ne
 8000b2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b36:	4770      	bxne	lr
 8000b38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <BQ_Write>:
};




void BQ_Write(uint8_t reg, uint8_t data) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af04      	add	r7, sp, #16
 8000b4e:	4603      	mov	r3, r0
 8000b50:	460a      	mov	r2, r1
 8000b52:	71fb      	strb	r3, [r7, #7]
 8000b54:	4613      	mov	r3, r2
 8000b56:	71bb      	strb	r3, [r7, #6]

	if ( HAL_I2C_Mem_Write( &hi2c1, BQ_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 10 ) != HAL_OK)
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	b29a      	uxth	r2, r3
 8000b5c:	230a      	movs	r3, #10
 8000b5e:	9302      	str	r3, [sp, #8]
 8000b60:	2301      	movs	r3, #1
 8000b62:	9301      	str	r3, [sp, #4]
 8000b64:	1dbb      	adds	r3, r7, #6
 8000b66:	9300      	str	r3, [sp, #0]
 8000b68:	2301      	movs	r3, #1
 8000b6a:	21d6      	movs	r1, #214	; 0xd6
 8000b6c:	4806      	ldr	r0, [pc, #24]	; (8000b88 <BQ_Write+0x40>)
 8000b6e:	f003 f9dd 	bl	8003f2c <HAL_I2C_Mem_Write>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d002      	beq.n	8000b7e <BQ_Write+0x36>
	{
		GLOBAL_errors = I2CErrorWrite;
 8000b78:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <BQ_Write+0x44>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	701a      	strb	r2, [r3, #0]
	}

}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000130 	.word	0x20000130
 8000b8c:	20000268 	.word	0x20000268

08000b90 <BQ_Read>:

uint8_t BQ_Read(uint8_t reg) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b088      	sub	sp, #32
 8000b94:	af04      	add	r7, sp, #16
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

	if ( HAL_I2C_Mem_Read( &hi2c1, BQ_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 10 ) != HAL_OK)
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	230a      	movs	r3, #10
 8000ba0:	9302      	str	r3, [sp, #8]
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	9301      	str	r3, [sp, #4]
 8000ba6:	f107 030f 	add.w	r3, r7, #15
 8000baa:	9300      	str	r3, [sp, #0]
 8000bac:	2301      	movs	r3, #1
 8000bae:	21d6      	movs	r1, #214	; 0xd6
 8000bb0:	4806      	ldr	r0, [pc, #24]	; (8000bcc <BQ_Read+0x3c>)
 8000bb2:	f003 facf 	bl	8004154 <HAL_I2C_Mem_Read>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d002      	beq.n	8000bc2 <BQ_Read+0x32>
	{
		GLOBAL_errors = I2CErrorRead;
 8000bbc:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <BQ_Read+0x40>)
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	701a      	strb	r2, [r3, #0]
	}

    return data;
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]

}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000130 	.word	0x20000130
 8000bd0:	20000268 	.word	0x20000268

08000bd4 <BQ_Init>:

bool BQ_Init()
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
	struct BQ_Register_fields BQ;

	//REG00
	BQ.REG00.IINLIM = 0b111;	//3A input
 8000bda:	783b      	ldrb	r3, [r7, #0]
 8000bdc:	f043 0307 	orr.w	r3, r3, #7
 8000be0:	703b      	strb	r3, [r7, #0]
	BQ.REG00.VINDPM = 0b1011;	//4.76V
 8000be2:	783b      	ldrb	r3, [r7, #0]
 8000be4:	220b      	movs	r2, #11
 8000be6:	f362 03c6 	bfi	r3, r2, #3, #4
 8000bea:	703b      	strb	r3, [r7, #0]
	BQ.REG00.EN_HIZ = 1;
 8000bec:	783b      	ldrb	r3, [r7, #0]
 8000bee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf2:	703b      	strb	r3, [r7, #0]

	//REG01
	BQ.REG01.SYS_MIN = 0b011;	//3.3V minimum voltage cutoff
 8000bf4:	787b      	ldrb	r3, [r7, #1]
 8000bf6:	2203      	movs	r2, #3
 8000bf8:	f362 0343 	bfi	r3, r2, #1, #3
 8000bfc:	707b      	strb	r3, [r7, #1]
	BQ.REG01.CHG_CONFIG = 1;	//enable charge
 8000bfe:	787b      	ldrb	r3, [r7, #1]
 8000c00:	f043 0310 	orr.w	r3, r3, #16
 8000c04:	707b      	strb	r3, [r7, #1]
	BQ.REG01.OTG_CONFIG = 0;
 8000c06:	787b      	ldrb	r3, [r7, #1]
 8000c08:	f36f 1345 	bfc	r3, #5, #1
 8000c0c:	707b      	strb	r3, [r7, #1]
	BQ.REG01.I2CWDTIMER = 0;	//disable WD
 8000c0e:	787b      	ldrb	r3, [r7, #1]
 8000c10:	f36f 1386 	bfc	r3, #6, #1
 8000c14:	707b      	strb	r3, [r7, #1]
	BQ.REG01.RegisterReset = 0;
 8000c16:	787b      	ldrb	r3, [r7, #1]
 8000c18:	f36f 13c7 	bfc	r3, #7, #1
 8000c1c:	707b      	strb	r3, [r7, #1]

	//REG02
	BQ.REG02.FORCE_20PCT = 0;
 8000c1e:	78bb      	ldrb	r3, [r7, #2]
 8000c20:	f36f 0300 	bfc	r3, #0, #1
 8000c24:	70bb      	strb	r3, [r7, #2]
	BQ.REG02.BCOLD = 0;
 8000c26:	78bb      	ldrb	r3, [r7, #2]
 8000c28:	f36f 0341 	bfc	r3, #1, #1
 8000c2c:	70bb      	strb	r3, [r7, #2]
	BQ.REG02.ICHG = 0b101111;	//Fast Charging current is 3008mAh
 8000c2e:	78bb      	ldrb	r3, [r7, #2]
 8000c30:	222f      	movs	r2, #47	; 0x2f
 8000c32:	f362 0387 	bfi	r3, r2, #2, #6
 8000c36:	70bb      	strb	r3, [r7, #2]

	//REG03
	BQ.REG03.ITERM = 0b0011;	//Termination current is 384mAh
 8000c38:	78fb      	ldrb	r3, [r7, #3]
 8000c3a:	2203      	movs	r2, #3
 8000c3c:	f362 0303 	bfi	r3, r2, #0, #4
 8000c40:	70fb      	strb	r3, [r7, #3]
	BQ.REG03.IPRECHG = 0b0001;	//Precharge current is 128mAh
 8000c42:	78fb      	ldrb	r3, [r7, #3]
 8000c44:	2201      	movs	r2, #1
 8000c46:	f362 1307 	bfi	r3, r2, #4, #4
 8000c4a:	70fb      	strb	r3, [r7, #3]

	//REG04
	BQ.REG04.VRECHG = 0;
 8000c4c:	793b      	ldrb	r3, [r7, #4]
 8000c4e:	f36f 0300 	bfc	r3, #0, #1
 8000c52:	713b      	strb	r3, [r7, #4]
	BQ.REG04.BATLOWV = 1;		//Battery is precharged until 3.0v then changed to fast charge
 8000c54:	793b      	ldrb	r3, [r7, #4]
 8000c56:	f043 0302 	orr.w	r3, r3, #2
 8000c5a:	713b      	strb	r3, [r7, #4]
	BQ.REG04.VREG = 0b101100;	//Battery is full at 4.208v
 8000c5c:	793b      	ldrb	r3, [r7, #4]
 8000c5e:	222c      	movs	r2, #44	; 0x2c
 8000c60:	f362 0387 	bfi	r3, r2, #2, #6
 8000c64:	713b      	strb	r3, [r7, #4]

	//REG05
	BQ.REG05.CHG_TIMER = 0b01;	//If enabled, it will charge for 8 hours
 8000c66:	797b      	ldrb	r3, [r7, #5]
 8000c68:	2201      	movs	r2, #1
 8000c6a:	f362 0342 	bfi	r3, r2, #1, #2
 8000c6e:	717b      	strb	r3, [r7, #5]
	BQ.REG05.EN_TIMER = 0;		//disable charging safety timer
 8000c70:	797b      	ldrb	r3, [r7, #5]
 8000c72:	f36f 03c3 	bfc	r3, #3, #1
 8000c76:	717b      	strb	r3, [r7, #5]
	BQ.REG05.WATCHDOG = 0b00;	//disable watchdog
 8000c78:	797b      	ldrb	r3, [r7, #5]
 8000c7a:	f36f 1305 	bfc	r3, #4, #2
 8000c7e:	717b      	strb	r3, [r7, #5]
	BQ.REG05.EN_TERM = 1;
 8000c80:	797b      	ldrb	r3, [r7, #5]
 8000c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c86:	717b      	strb	r3, [r7, #5]

	//REG06
	BQ.REG06.TREG = 0b00;		//Thermal reg at 60C degrees
 8000c88:	79bb      	ldrb	r3, [r7, #6]
 8000c8a:	f36f 0301 	bfc	r3, #0, #2
 8000c8e:	71bb      	strb	r3, [r7, #6]
	BQ.REG06.BHOT = 0b00;
 8000c90:	79bb      	ldrb	r3, [r7, #6]
 8000c92:	f36f 0383 	bfc	r3, #2, #2
 8000c96:	71bb      	strb	r3, [r7, #6]
	BQ.REG06.BOOSTV= 0b1001;	//not needed
 8000c98:	79bb      	ldrb	r3, [r7, #6]
 8000c9a:	2209      	movs	r2, #9
 8000c9c:	f362 1307 	bfi	r3, r2, #4, #4
 8000ca0:	71bb      	strb	r3, [r7, #6]

	//REG07
	BQ.REG07.INT_MASK = 0b11;	//Enable pin Inturrupts
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	f043 0303 	orr.w	r3, r3, #3
 8000ca8:	71fb      	strb	r3, [r7, #7]
	BQ.REG07.BATFET_Disable = 0;//to Force BATFET off, turn this ON
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	f36f 1345 	bfc	r3, #5, #1
 8000cb0:	71fb      	strb	r3, [r7, #7]
	BQ.REG07.TMR2X_EN = 1;
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cb8:	71fb      	strb	r3, [r7, #7]
	BQ.REG07.DPDM_EN = 0;
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	f36f 13c7 	bfc	r3, #7, #1
 8000cc0:	71fb      	strb	r3, [r7, #7]

	if(!BQ_IsPresent())
 8000cc2:	f000 f845 	bl	8000d50 <BQ_IsPresent>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	f083 0301 	eor.w	r3, r3, #1
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <BQ_Init+0x102>
	{
		return false;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e037      	b.n	8000d46 <BQ_Init+0x172>
	}
	BQ_Write((uint8_t *)InputSourceControlReg, *(uint8_t *)&BQ.REG00);
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	4619      	mov	r1, r3
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f7ff ff33 	bl	8000b48 <BQ_Write>
	BQ_Write((uint8_t *)PowerOnConfigReg, *(uint8_t *)&BQ.REG01);
 8000ce2:	463b      	mov	r3, r7
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	4619      	mov	r1, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	f7ff ff2c 	bl	8000b48 <BQ_Write>
	BQ_Write((uint8_t *)ChargeCurrentControlReg, *(uint8_t *)&BQ.REG02);
 8000cf0:	463b      	mov	r3, r7
 8000cf2:	3302      	adds	r3, #2
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	2002      	movs	r0, #2
 8000cfa:	f7ff ff25 	bl	8000b48 <BQ_Write>
	BQ_Write((uint8_t *)PrechargeTerminationCurrentControlReg, *(uint8_t *)&BQ.REG03);
 8000cfe:	463b      	mov	r3, r7
 8000d00:	3303      	adds	r3, #3
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	4619      	mov	r1, r3
 8000d06:	2003      	movs	r0, #3
 8000d08:	f7ff ff1e 	bl	8000b48 <BQ_Write>
	BQ_Write((uint8_t *)ChargeVoltageControlReg, *(uint8_t *)&BQ.REG04);
 8000d0c:	463b      	mov	r3, r7
 8000d0e:	3304      	adds	r3, #4
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	4619      	mov	r1, r3
 8000d14:	2004      	movs	r0, #4
 8000d16:	f7ff ff17 	bl	8000b48 <BQ_Write>
	BQ_Write((uint8_t *)ChargeTerminationTimerControlReg, *(uint8_t *)&BQ.REG05);
 8000d1a:	463b      	mov	r3, r7
 8000d1c:	3305      	adds	r3, #5
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	4619      	mov	r1, r3
 8000d22:	2005      	movs	r0, #5
 8000d24:	f7ff ff10 	bl	8000b48 <BQ_Write>
	BQ_Write((uint8_t *)BoostVoltageThermalRegulationControlReg, *(uint8_t *)&BQ.REG06);
 8000d28:	463b      	mov	r3, r7
 8000d2a:	3306      	adds	r3, #6
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	4619      	mov	r1, r3
 8000d30:	2006      	movs	r0, #6
 8000d32:	f7ff ff09 	bl	8000b48 <BQ_Write>
	BQ_Write((uint8_t *)MiscOperationControlReg, *(uint8_t *)&BQ.REG07);
 8000d36:	463b      	mov	r3, r7
 8000d38:	3307      	adds	r3, #7
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	2007      	movs	r0, #7
 8000d40:	f7ff ff02 	bl	8000b48 <BQ_Write>

	return true;
 8000d44:	2301      	movs	r3, #1
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <BQ_IsPresent>:

bool BQ_IsPresent()
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
	if(GLOBAL_errors != 0)
 8000d56:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <BQ_IsPresent+0x44>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <BQ_IsPresent+0x12>
	{
		return false;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	e013      	b.n	8000d8a <BQ_IsPresent+0x3a>
	}

	uint8_t reg = BQ_Read(PartStatusReg);
 8000d62:	200a      	movs	r0, #10
 8000d64:	f7ff ff14 	bl	8000b90 <BQ_Read>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	71fb      	strb	r3, [r7, #7]

	reg = (reg >>5);
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	095b      	lsrs	r3, r3, #5
 8000d70:	71fb      	strb	r3, [r7, #7]

	if(BQ_Read(PartStatusReg) == 0b110)
 8000d72:	200a      	movs	r0, #10
 8000d74:	f7ff ff0c 	bl	8000b90 <BQ_Read>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b06      	cmp	r3, #6
 8000d7c:	d101      	bne.n	8000d82 <BQ_IsPresent+0x32>
	{
		return true;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e003      	b.n	8000d8a <BQ_IsPresent+0x3a>
	}else
	{
		GLOBAL_errors = BQNotPresentOrNotCorrectPart;
 8000d82:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <BQ_IsPresent+0x44>)
 8000d84:	2202      	movs	r2, #2
 8000d86:	701a      	strb	r2, [r3, #0]
		return false;
 8000d88:	2300      	movs	r3, #0
	}
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000268 	.word	0x20000268

08000d98 <PIDController_Init>:
#include "PID.h"

void PIDController_Init(PIDController *pid) {
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0.0f;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f04f 0200 	mov.w	r2, #0
 8000da6:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevError  = 0.0f;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f04f 0200 	mov.w	r2, #0
 8000dae:	629a      	str	r2, [r3, #40]	; 0x28

	pid->differentiator  = 0.0f;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f04f 0200 	mov.w	r2, #0
 8000db6:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->prevMeasurement = 0.0f;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f04f 0200 	mov.w	r2, #0
 8000dbe:	631a      	str	r2, [r3, #48]	; 0x30

	pid->out = 0.0f;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f04f 0200 	mov.w	r2, #0
 8000dc6:	635a      	str	r2, [r3, #52]	; 0x34

}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <WakeUpFromSleepMode>:
#if (ENABLESLEEPMODE)
	void EnterSleepModeWakeOnInturrupt() {
		HAL_SuspendTick();
		HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
	}
	void WakeUpFromSleepMode(){
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
		HAL_ResumeTick();
 8000dd8:	f001 fbac 	bl	8002534 <HAL_ResumeTick>
	}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <HAL_GPIO_EXTI_Callback>:



/*		INURRUPT CODE		*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BQ_INT_Pin) // BQ INT pin wake up
 8000dea:	88fb      	ldrh	r3, [r7, #6]
 8000dec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000df0:	d104      	bne.n	8000dfc <HAL_GPIO_EXTI_Callback+0x1c>
	{
		WakeUpFromSleepMode();
 8000df2:	f7ff ffef 	bl	8000dd4 <WakeUpFromSleepMode>
		BQ_FLAG = true;
 8000df6:	4b4c      	ldr	r3, [pc, #304]	; (8000f28 <HAL_GPIO_EXTI_Callback+0x148>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == MAX_ALRT_Pin)
 8000dfc:	88fb      	ldrh	r3, [r7, #6]
 8000dfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e02:	d104      	bne.n	8000e0e <HAL_GPIO_EXTI_Callback+0x2e>
	{
		WakeUpFromSleepMode();
 8000e04:	f7ff ffe6 	bl	8000dd4 <WakeUpFromSleepMode>
		MAX_FLAG = true;
 8000e08:	4b48      	ldr	r3, [pc, #288]	; (8000f2c <HAL_GPIO_EXTI_Callback+0x14c>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	701a      	strb	r2, [r3, #0]

	}
	if(GPIO_Pin == Power_Button_Pin)
 8000e0e:	88fb      	ldrh	r3, [r7, #6]
 8000e10:	2b80      	cmp	r3, #128	; 0x80
 8000e12:	f040 8084 	bne.w	8000f1e <HAL_GPIO_EXTI_Callback+0x13e>
	{
		if(HAL_GPIO_ReadPin(Power_Button_GPIO_Port, Power_Button_Pin) == GPIO_PIN_RESET
 8000e16:	2180      	movs	r1, #128	; 0x80
 8000e18:	4845      	ldr	r0, [pc, #276]	; (8000f30 <HAL_GPIO_EXTI_Callback+0x150>)
 8000e1a:	f002 ffaf 	bl	8003d7c <HAL_GPIO_ReadPin>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d110      	bne.n	8000e46 <HAL_GPIO_EXTI_Callback+0x66>
				&& PowerButtonDebounced && !IsPressPeriodStart)
 8000e24:	4b43      	ldr	r3, [pc, #268]	; (8000f34 <HAL_GPIO_EXTI_Callback+0x154>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d00c      	beq.n	8000e46 <HAL_GPIO_EXTI_Callback+0x66>
 8000e2c:	4b42      	ldr	r3, [pc, #264]	; (8000f38 <HAL_GPIO_EXTI_Callback+0x158>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	f083 0301 	eor.w	r3, r3, #1
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d005      	beq.n	8000e46 <HAL_GPIO_EXTI_Callback+0x66>
		{
			HAL_TIM_Base_Start_IT(&htim15);	//Start Debounce
 8000e3a:	4840      	ldr	r0, [pc, #256]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x15c>)
 8000e3c:	f004 ffa8 	bl	8005d90 <HAL_TIM_Base_Start_IT>
			PowerButtonDebounced = false;
 8000e40:	4b3c      	ldr	r3, [pc, #240]	; (8000f34 <HAL_GPIO_EXTI_Callback+0x154>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(Power_Button_GPIO_Port, Power_Button_Pin) == GPIO_PIN_SET &&
 8000e46:	2180      	movs	r1, #128	; 0x80
 8000e48:	4839      	ldr	r0, [pc, #228]	; (8000f30 <HAL_GPIO_EXTI_Callback+0x150>)
 8000e4a:	f002 ff97 	bl	8003d7c <HAL_GPIO_ReadPin>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d130      	bne.n	8000eb6 <HAL_GPIO_EXTI_Callback+0xd6>
 8000e54:	4b37      	ldr	r3, [pc, #220]	; (8000f34 <HAL_GPIO_EXTI_Callback+0x154>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d02c      	beq.n	8000eb6 <HAL_GPIO_EXTI_Callback+0xd6>
				PowerButtonDebounced && IsPressPeriodStart && PowerButtonShortPress &&
 8000e5c:	4b36      	ldr	r3, [pc, #216]	; (8000f38 <HAL_GPIO_EXTI_Callback+0x158>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d028      	beq.n	8000eb6 <HAL_GPIO_EXTI_Callback+0xd6>
 8000e64:	4b36      	ldr	r3, [pc, #216]	; (8000f40 <HAL_GPIO_EXTI_Callback+0x160>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d024      	beq.n	8000eb6 <HAL_GPIO_EXTI_Callback+0xd6>
 8000e6c:	4b35      	ldr	r3, [pc, #212]	; (8000f44 <HAL_GPIO_EXTI_Callback+0x164>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d020      	beq.n	8000eb6 <HAL_GPIO_EXTI_Callback+0xd6>
				PowerButtonLongPress && !SystemPowerState)
 8000e74:	4b34      	ldr	r3, [pc, #208]	; (8000f48 <HAL_GPIO_EXTI_Callback+0x168>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	f083 0301 	eor.w	r3, r3, #1
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d019      	beq.n	8000eb6 <HAL_GPIO_EXTI_Callback+0xd6>
		{
			//All conditions met turn ON system and clear for next button
			HAL_TIM_Base_Stop_IT(&htim15);
 8000e82:	482e      	ldr	r0, [pc, #184]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x15c>)
 8000e84:	f004 ffd8 	bl	8005e38 <HAL_TIM_Base_Stop_IT>
			__HAL_TIM_SET_AUTORELOAD(&htim15, BUTTON_DEBOUNCE_MS);	//Reset power button debounce period
 8000e88:	4b2c      	ldr	r3, [pc, #176]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x15c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2264      	movs	r2, #100	; 0x64
 8000e8e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e90:	4b2a      	ldr	r3, [pc, #168]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x15c>)
 8000e92:	2264      	movs	r2, #100	; 0x64
 8000e94:	60da      	str	r2, [r3, #12]
			SystemPowerState = true;
 8000e96:	4b2c      	ldr	r3, [pc, #176]	; (8000f48 <HAL_GPIO_EXTI_Callback+0x168>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	701a      	strb	r2, [r3, #0]
			PowerButtonDebounced = true;
 8000e9c:	4b25      	ldr	r3, [pc, #148]	; (8000f34 <HAL_GPIO_EXTI_Callback+0x154>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	701a      	strb	r2, [r3, #0]
			IsPressPeriodStart = false;
 8000ea2:	4b25      	ldr	r3, [pc, #148]	; (8000f38 <HAL_GPIO_EXTI_Callback+0x158>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]
			PowerButtonShortPress = false;
 8000ea8:	4b25      	ldr	r3, [pc, #148]	; (8000f40 <HAL_GPIO_EXTI_Callback+0x160>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	701a      	strb	r2, [r3, #0]
			PowerButtonLongPress = false;
 8000eae:	4b25      	ldr	r3, [pc, #148]	; (8000f44 <HAL_GPIO_EXTI_Callback+0x164>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	701a      	strb	r2, [r3, #0]
		}


	}

}
 8000eb4:	e033      	b.n	8000f1e <HAL_GPIO_EXTI_Callback+0x13e>
		else if(HAL_GPIO_ReadPin(Power_Button_GPIO_Port, Power_Button_Pin) == GPIO_PIN_SET &&
 8000eb6:	2180      	movs	r1, #128	; 0x80
 8000eb8:	481d      	ldr	r0, [pc, #116]	; (8000f30 <HAL_GPIO_EXTI_Callback+0x150>)
 8000eba:	f002 ff5f 	bl	8003d7c <HAL_GPIO_ReadPin>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d12c      	bne.n	8000f1e <HAL_GPIO_EXTI_Callback+0x13e>
 8000ec4:	4b1b      	ldr	r3, [pc, #108]	; (8000f34 <HAL_GPIO_EXTI_Callback+0x154>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d028      	beq.n	8000f1e <HAL_GPIO_EXTI_Callback+0x13e>
				PowerButtonDebounced && IsPressPeriodStart && PowerButtonShortPress &&
 8000ecc:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <HAL_GPIO_EXTI_Callback+0x158>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d024      	beq.n	8000f1e <HAL_GPIO_EXTI_Callback+0x13e>
 8000ed4:	4b1a      	ldr	r3, [pc, #104]	; (8000f40 <HAL_GPIO_EXTI_Callback+0x160>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d020      	beq.n	8000f1e <HAL_GPIO_EXTI_Callback+0x13e>
 8000edc:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <HAL_GPIO_EXTI_Callback+0x164>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d01c      	beq.n	8000f1e <HAL_GPIO_EXTI_Callback+0x13e>
				PowerButtonLongPress && SystemPowerState)
 8000ee4:	4b18      	ldr	r3, [pc, #96]	; (8000f48 <HAL_GPIO_EXTI_Callback+0x168>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d018      	beq.n	8000f1e <HAL_GPIO_EXTI_Callback+0x13e>
			HAL_TIM_Base_Stop_IT(&htim15);
 8000eec:	4813      	ldr	r0, [pc, #76]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x15c>)
 8000eee:	f004 ffa3 	bl	8005e38 <HAL_TIM_Base_Stop_IT>
			__HAL_TIM_SET_AUTORELOAD(&htim15, BUTTON_DEBOUNCE_MS);	//Reset power button debounce period
 8000ef2:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x15c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2264      	movs	r2, #100	; 0x64
 8000ef8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000efa:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x15c>)
 8000efc:	2264      	movs	r2, #100	; 0x64
 8000efe:	60da      	str	r2, [r3, #12]
			SystemPowerState = false;
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <HAL_GPIO_EXTI_Callback+0x168>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
			PowerButtonDebounced = true;
 8000f06:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <HAL_GPIO_EXTI_Callback+0x154>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	701a      	strb	r2, [r3, #0]
			IsPressPeriodStart = false;
 8000f0c:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <HAL_GPIO_EXTI_Callback+0x158>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
			PowerButtonShortPress = false;
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <HAL_GPIO_EXTI_Callback+0x160>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	701a      	strb	r2, [r3, #0]
			PowerButtonLongPress = false;
 8000f18:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <HAL_GPIO_EXTI_Callback+0x164>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	701a      	strb	r2, [r3, #0]
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000269 	.word	0x20000269
 8000f2c:	2000026a 	.word	0x2000026a
 8000f30:	48000800 	.word	0x48000800
 8000f34:	20000000 	.word	0x20000000
 8000f38:	2000026b 	.word	0x2000026b
 8000f3c:	2000021c 	.word	0x2000021c
 8000f40:	2000026c 	.word	0x2000026c
 8000f44:	2000026d 	.word	0x2000026d
 8000f48:	2000026f 	.word	0x2000026f

08000f4c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
	if(HAL_GPIO_ReadPin(Power_Button_GPIO_Port, Power_Button_Pin) == GPIO_PIN_RESET && !PowerButtonDebounced){
 8000f54:	2180      	movs	r1, #128	; 0x80
 8000f56:	4864      	ldr	r0, [pc, #400]	; (80010e8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000f58:	f002 ff10 	bl	8003d7c <HAL_GPIO_ReadPin>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d10c      	bne.n	8000f7c <HAL_TIM_PeriodElapsedCallback+0x30>
 8000f62:	4b62      	ldr	r3, [pc, #392]	; (80010ec <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	f083 0301 	eor.w	r3, r3, #1
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d005      	beq.n	8000f7c <HAL_TIM_PeriodElapsedCallback+0x30>
		HAL_TIM_Base_Stop_IT(&htim15);
 8000f70:	485f      	ldr	r0, [pc, #380]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000f72:	f004 ff61 	bl	8005e38 <HAL_TIM_Base_Stop_IT>
		PowerButtonDebounced = true;
 8000f76:	4b5d      	ldr	r3, [pc, #372]	; (80010ec <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	701a      	strb	r2, [r3, #0]

	}
	if(HAL_GPIO_ReadPin(Power_Button_GPIO_Port, Power_Button_Pin) == GPIO_PIN_RESET && !IsPressPeriodStart){
 8000f7c:	2180      	movs	r1, #128	; 0x80
 8000f7e:	485a      	ldr	r0, [pc, #360]	; (80010e8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000f80:	f002 fefc 	bl	8003d7c <HAL_GPIO_ReadPin>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d119      	bne.n	8000fbe <HAL_TIM_PeriodElapsedCallback+0x72>
 8000f8a:	4b5a      	ldr	r3, [pc, #360]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	f083 0301 	eor.w	r3, r3, #1
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d012      	beq.n	8000fbe <HAL_TIM_PeriodElapsedCallback+0x72>

		__HAL_TIM_SET_AUTORELOAD(&htim15, BUTTON_SHORTPRESS_PERIOD);
 8000f98:	4b55      	ldr	r3, [pc, #340]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fa0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fa2:	4b53      	ldr	r3, [pc, #332]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000fa4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fa8:	60da      	str	r2, [r3, #12]
		HAL_TIM_Base_Start_IT(&htim15);
 8000faa:	4851      	ldr	r0, [pc, #324]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000fac:	f004 fef0 	bl	8005d90 <HAL_TIM_Base_Start_IT>
		IsPressPeriodStart = true;
 8000fb0:	4b50      	ldr	r3, [pc, #320]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	701a      	strb	r2, [r3, #0]
		PowerButtonShortPress = false;
 8000fb6:	4b50      	ldr	r3, [pc, #320]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
 8000fbc:	e06b      	b.n	8001096 <HAL_TIM_PeriodElapsedCallback+0x14a>
	}
	else if(HAL_GPIO_ReadPin(Power_Button_GPIO_Port, Power_Button_Pin) == GPIO_PIN_RESET && !PowerButtonShortPress){
 8000fbe:	2180      	movs	r1, #128	; 0x80
 8000fc0:	4849      	ldr	r0, [pc, #292]	; (80010e8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000fc2:	f002 fedb 	bl	8003d7c <HAL_GPIO_ReadPin>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d11c      	bne.n	8001006 <HAL_TIM_PeriodElapsedCallback+0xba>
 8000fcc:	4b4a      	ldr	r3, [pc, #296]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	f083 0301 	eor.w	r3, r3, #1
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d015      	beq.n	8001006 <HAL_TIM_PeriodElapsedCallback+0xba>
		HAL_TIM_Base_Stop_IT(&htim15);
 8000fda:	4845      	ldr	r0, [pc, #276]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000fdc:	f004 ff2c 	bl	8005e38 <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_SET_AUTORELOAD(&htim15, BUTTON_LONGPRESS_PERIOD);
 8000fe0:	4b43      	ldr	r3, [pc, #268]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fe8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fea:	4b41      	ldr	r3, [pc, #260]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000fec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ff0:	60da      	str	r2, [r3, #12]
		HAL_TIM_Base_Start_IT(&htim15);
 8000ff2:	483f      	ldr	r0, [pc, #252]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000ff4:	f004 fecc 	bl	8005d90 <HAL_TIM_Base_Start_IT>
		PowerButtonShortPress = true;
 8000ff8:	4b3f      	ldr	r3, [pc, #252]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	701a      	strb	r2, [r3, #0]
		PowerButtonLongPress = false;
 8000ffe:	4b3f      	ldr	r3, [pc, #252]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
 8001004:	e047      	b.n	8001096 <HAL_TIM_PeriodElapsedCallback+0x14a>
	}
	else if(HAL_GPIO_ReadPin(Power_Button_GPIO_Port, Power_Button_Pin) == GPIO_PIN_RESET && !PowerButtonLongPress){
 8001006:	2180      	movs	r1, #128	; 0x80
 8001008:	4837      	ldr	r0, [pc, #220]	; (80010e8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800100a:	f002 feb7 	bl	8003d7c <HAL_GPIO_ReadPin>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d11c      	bne.n	800104e <HAL_TIM_PeriodElapsedCallback+0x102>
 8001014:	4b39      	ldr	r3, [pc, #228]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	f083 0301 	eor.w	r3, r3, #1
 800101c:	b2db      	uxtb	r3, r3
 800101e:	2b00      	cmp	r3, #0
 8001020:	d015      	beq.n	800104e <HAL_TIM_PeriodElapsedCallback+0x102>
		HAL_TIM_Base_Stop_IT(&htim15);
 8001022:	4833      	ldr	r0, [pc, #204]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001024:	f004 ff08 	bl	8005e38 <HAL_TIM_Base_Stop_IT>
		PowerButtonLongPress = true;
 8001028:	4b34      	ldr	r3, [pc, #208]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800102a:	2201      	movs	r2, #1
 800102c:	701a      	strb	r2, [r3, #0]
		PowerButtonUnintentionalPress = false;
 800102e:	4b34      	ldr	r3, [pc, #208]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001030:	2200      	movs	r2, #0
 8001032:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_AUTORELOAD(&htim15, BUTTON_UNINTENTIONAL_PERIOD);
 8001034:	4b2e      	ldr	r3, [pc, #184]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800103c:	62da      	str	r2, [r3, #44]	; 0x2c
 800103e:	4b2c      	ldr	r3, [pc, #176]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001040:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001044:	60da      	str	r2, [r3, #12]
		HAL_TIM_Base_Start_IT(&htim15);
 8001046:	482a      	ldr	r0, [pc, #168]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001048:	f004 fea2 	bl	8005d90 <HAL_TIM_Base_Start_IT>
 800104c:	e023      	b.n	8001096 <HAL_TIM_PeriodElapsedCallback+0x14a>
	}
	else if(HAL_GPIO_ReadPin(Power_Button_GPIO_Port, Power_Button_Pin) == GPIO_PIN_RESET && !PowerButtonUnintentionalPress)
 800104e:	2180      	movs	r1, #128	; 0x80
 8001050:	4825      	ldr	r0, [pc, #148]	; (80010e8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001052:	f002 fe93 	bl	8003d7c <HAL_GPIO_ReadPin>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d11c      	bne.n	8001096 <HAL_TIM_PeriodElapsedCallback+0x14a>
 800105c:	4b28      	ldr	r3, [pc, #160]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	f083 0301 	eor.w	r3, r3, #1
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b00      	cmp	r3, #0
 8001068:	d015      	beq.n	8001096 <HAL_TIM_PeriodElapsedCallback+0x14a>
	{
		//unintentional button press so clear everything for next press
		HAL_TIM_Base_Stop_IT(&htim15);
 800106a:	4821      	ldr	r0, [pc, #132]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800106c:	f004 fee4 	bl	8005e38 <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_SET_AUTORELOAD(&htim15, BUTTON_DEBOUNCE_MS);	//Reset power button debounce period
 8001070:	4b1f      	ldr	r3, [pc, #124]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2264      	movs	r2, #100	; 0x64
 8001076:	62da      	str	r2, [r3, #44]	; 0x2c
 8001078:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800107a:	2264      	movs	r2, #100	; 0x64
 800107c:	60da      	str	r2, [r3, #12]
		PowerButtonDebounced = true;
 800107e:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001080:	2201      	movs	r2, #1
 8001082:	701a      	strb	r2, [r3, #0]
		IsPressPeriodStart = false;
 8001084:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]
		PowerButtonShortPress = false;
 800108a:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
		PowerButtonLongPress = false;
 8001090:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]
	}

	if(HAL_GPIO_ReadPin(Power_Button_GPIO_Port, Power_Button_Pin) == GPIO_PIN_SET && IsPressPeriodStart)
 8001096:	2180      	movs	r1, #128	; 0x80
 8001098:	4813      	ldr	r0, [pc, #76]	; (80010e8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800109a:	f002 fe6f 	bl	8003d7c <HAL_GPIO_ReadPin>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d11c      	bne.n	80010de <HAL_TIM_PeriodElapsedCallback+0x192>
 80010a4:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d018      	beq.n	80010de <HAL_TIM_PeriodElapsedCallback+0x192>
	{
		//Cancelled press so clear everything for next press
		HAL_TIM_Base_Stop_IT(&htim15);
 80010ac:	4810      	ldr	r0, [pc, #64]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80010ae:	f004 fec3 	bl	8005e38 <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_SET_AUTORELOAD(&htim15, BUTTON_DEBOUNCE_MS);	//Reset power button debounce period
 80010b2:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2264      	movs	r2, #100	; 0x64
 80010b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80010ba:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80010bc:	2264      	movs	r2, #100	; 0x64
 80010be:	60da      	str	r2, [r3, #12]
		PowerButtonDebounced = true;
 80010c0:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	701a      	strb	r2, [r3, #0]
		IsPressPeriodStart = false;
 80010c6:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
		PowerButtonShortPress = false;
 80010cc:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
		PowerButtonLongPress = false;
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	701a      	strb	r2, [r3, #0]
		PowerButtonUnintentionalPress = false;
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
	}




}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	48000800 	.word	0x48000800
 80010ec:	20000000 	.word	0x20000000
 80010f0:	2000021c 	.word	0x2000021c
 80010f4:	2000026b 	.word	0x2000026b
 80010f8:	2000026c 	.word	0x2000026c
 80010fc:	2000026d 	.word	0x2000026d
 8001100:	2000026e 	.word	0x2000026e

08001104 <MAX17048_Init>:
#if (USINGMAX17048)

uint8_t CurrentBatteryPercentage;

	bool MAX17048_Init()
	{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
		bool ok = true;
 800110a:	2301      	movs	r3, #1
 800110c:	71fb      	strb	r3, [r7, #7]
		if (ok) ok = max17048_is_present(&hi2c1);
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d004      	beq.n	800111e <MAX17048_Init+0x1a>
 8001114:	4825      	ldr	r0, [pc, #148]	; (80011ac <MAX17048_Init+0xa8>)
 8001116:	f000 fe5c 	bl	8001dd2 <max17048_is_present>
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
		if (ok) ok = max17048_set_undervolted_voltage(&hi2c1, Battery_UnderVoltage);
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d006      	beq.n	8001132 <MAX17048_Init+0x2e>
 8001124:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8001128:	4820      	ldr	r0, [pc, #128]	; (80011ac <MAX17048_Init+0xa8>)
 800112a:	f000 feb7 	bl	8001e9c <max17048_set_undervolted_voltage>
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
		if (ok) ok = max17048_set_overvolted_voltage(&hi2c1, Battery_OverVoltage);
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d006      	beq.n	8001146 <MAX17048_Init+0x42>
 8001138:	f241 0168 	movw	r1, #4200	; 0x1068
 800113c:	481b      	ldr	r0, [pc, #108]	; (80011ac <MAX17048_Init+0xa8>)
 800113e:	f000 fecd 	bl	8001edc <max17048_set_overvolted_voltage>
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
		if (ok) ok = max17048_set_reset_voltage(&hi2c1, Battery_ResetVoltage);
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d006      	beq.n	800115a <MAX17048_Init+0x56>
 800114c:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8001150:	4816      	ldr	r0, [pc, #88]	; (80011ac <MAX17048_Init+0xa8>)
 8001152:	f000 fedf 	bl	8001f14 <max17048_set_reset_voltage>
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
		if (ok) ok = max17048_set_bat_low_soc(&hi2c1, Battery_LowSOCAlert);
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d005      	beq.n	800116c <MAX17048_Init+0x68>
 8001160:	211e      	movs	r1, #30
 8001162:	4812      	ldr	r0, [pc, #72]	; (80011ac <MAX17048_Init+0xa8>)
 8001164:	f000 fe75 	bl	8001e52 <max17048_set_bat_low_soc>
 8001168:	4603      	mov	r3, r0
 800116a:	71fb      	strb	r3, [r7, #7]
		if (ok) ok = max17048_set_voltage_reset_alert(&hi2c1, false);
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d005      	beq.n	800117e <MAX17048_Init+0x7a>
 8001172:	2100      	movs	r1, #0
 8001174:	480d      	ldr	r0, [pc, #52]	; (80011ac <MAX17048_Init+0xa8>)
 8001176:	f000 ff06 	bl	8001f86 <max17048_set_voltage_reset_alert>
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
		if (ok) ok = max17048_set_soc_change_alert(&hi2c1, false);
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d005      	beq.n	8001190 <MAX17048_Init+0x8c>
 8001184:	2100      	movs	r1, #0
 8001186:	4809      	ldr	r0, [pc, #36]	; (80011ac <MAX17048_Init+0xa8>)
 8001188:	f000 fee6 	bl	8001f58 <max17048_set_soc_change_alert>
 800118c:	4603      	mov	r3, r0
 800118e:	71fb      	strb	r3, [r7, #7]
		if (ok) ok = max17048_clear_alerts(&hi2c1);
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d004      	beq.n	80011a0 <MAX17048_Init+0x9c>
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <MAX17048_Init+0xa8>)
 8001198:	f000 ff0d 	bl	8001fb6 <max17048_clear_alerts>
 800119c:	4603      	mov	r3, r0
 800119e:	71fb      	strb	r3, [r7, #7]
		return ok;
 80011a0:	79fb      	ldrb	r3, [r7, #7]
	}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000130 	.word	0x20000130

080011b0 <Remap>:
#endif

static int Remap (float value, float from1, float to1, float from2, float to2) {
 80011b0:	b480      	push	{r7}
 80011b2:	b087      	sub	sp, #28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	ed87 0a05 	vstr	s0, [r7, #20]
 80011ba:	edc7 0a04 	vstr	s1, [r7, #16]
 80011be:	ed87 1a03 	vstr	s2, [r7, #12]
 80011c2:	edc7 1a02 	vstr	s3, [r7, #8]
 80011c6:	ed87 2a01 	vstr	s4, [r7, #4]
	return ((value - from1) / (to1 - from1) * (to2 - from2)) + from2;
 80011ca:	ed97 7a05 	vldr	s14, [r7, #20]
 80011ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80011d2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80011d6:	ed97 7a03 	vldr	s14, [r7, #12]
 80011da:	edd7 7a04 	vldr	s15, [r7, #16]
 80011de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80011e6:	edd7 6a01 	vldr	s13, [r7, #4]
 80011ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80011ee:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80011f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80011fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001202:	ee17 3a90 	vmov	r3, s15
}
 8001206:	4618      	mov	r0, r3
 8001208:	371c      	adds	r7, #28
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
	...

08001214 <Set_RGB>:

void Set_RGB(uint8_t Red,uint8_t Green,uint8_t Blue) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
 800121e:	460b      	mov	r3, r1
 8001220:	71bb      	strb	r3, [r7, #6]
 8001222:	4613      	mov	r3, r2
 8001224:	717b      	strb	r3, [r7, #5]
	//invert 0-100 -> 100-0 in case LED is common Anode and grounded to STM's GPIO's
	Red = Remap(Red, 0, 100, 100, 0);
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	ee07 3a90 	vmov	s15, r3
 800122c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001230:	ed9f 2a21 	vldr	s4, [pc, #132]	; 80012b8 <Set_RGB+0xa4>
 8001234:	eddf 1a21 	vldr	s3, [pc, #132]	; 80012bc <Set_RGB+0xa8>
 8001238:	ed9f 1a20 	vldr	s2, [pc, #128]	; 80012bc <Set_RGB+0xa8>
 800123c:	eddf 0a1e 	vldr	s1, [pc, #120]	; 80012b8 <Set_RGB+0xa4>
 8001240:	eeb0 0a67 	vmov.f32	s0, s15
 8001244:	f7ff ffb4 	bl	80011b0 <Remap>
 8001248:	4603      	mov	r3, r0
 800124a:	71fb      	strb	r3, [r7, #7]
	Green = Remap(Green, 0, 100, 100, 0);
 800124c:	79bb      	ldrb	r3, [r7, #6]
 800124e:	ee07 3a90 	vmov	s15, r3
 8001252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001256:	ed9f 2a18 	vldr	s4, [pc, #96]	; 80012b8 <Set_RGB+0xa4>
 800125a:	eddf 1a18 	vldr	s3, [pc, #96]	; 80012bc <Set_RGB+0xa8>
 800125e:	ed9f 1a17 	vldr	s2, [pc, #92]	; 80012bc <Set_RGB+0xa8>
 8001262:	eddf 0a15 	vldr	s1, [pc, #84]	; 80012b8 <Set_RGB+0xa4>
 8001266:	eeb0 0a67 	vmov.f32	s0, s15
 800126a:	f7ff ffa1 	bl	80011b0 <Remap>
 800126e:	4603      	mov	r3, r0
 8001270:	71bb      	strb	r3, [r7, #6]
	Blue = Remap(Blue, 0, 100, 100, 0);
 8001272:	797b      	ldrb	r3, [r7, #5]
 8001274:	ee07 3a90 	vmov	s15, r3
 8001278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800127c:	ed9f 2a0e 	vldr	s4, [pc, #56]	; 80012b8 <Set_RGB+0xa4>
 8001280:	eddf 1a0e 	vldr	s3, [pc, #56]	; 80012bc <Set_RGB+0xa8>
 8001284:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 80012bc <Set_RGB+0xa8>
 8001288:	eddf 0a0b 	vldr	s1, [pc, #44]	; 80012b8 <Set_RGB+0xa4>
 800128c:	eeb0 0a67 	vmov.f32	s0, s15
 8001290:	f7ff ff8e 	bl	80011b0 <Remap>
 8001294:	4603      	mov	r3, r0
 8001296:	717b      	strb	r3, [r7, #5]
	TIM2->CCR1 = Red;
 8001298:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	6353      	str	r3, [r2, #52]	; 0x34
	TIM2->CCR2 = Green;
 80012a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012a4:	79bb      	ldrb	r3, [r7, #6]
 80012a6:	6393      	str	r3, [r2, #56]	; 0x38
	TIM2->CCR3 = Blue;
 80012a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012ac:	797b      	ldrb	r3, [r7, #5]
 80012ae:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	00000000 	.word	0x00000000
 80012bc:	42c80000 	.word	0x42c80000

080012c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012c6:	f001 f89c 	bl	8002402 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ca:	f000 f9d3 	bl	8001674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ce:	f000 fc41 	bl	8001b54 <MX_GPIO_Init>
  MX_I2C1_Init();
 80012d2:	f000 fa79 	bl	80017c8 <MX_I2C1_Init>
  MX_TIM2_Init();
 80012d6:	f000 fb5f 	bl	8001998 <MX_TIM2_Init>
  MX_TIM15_Init();
 80012da:	f000 fbe9 	bl	8001ab0 <MX_TIM15_Init>
  MX_ADC1_Init();
 80012de:	f000 fa0f 	bl	8001700 <MX_ADC1_Init>
  MX_TIM1_Init();
 80012e2:	f000 faaf 	bl	8001844 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  __HAL_TIM_SET_AUTORELOAD(&htim15, BUTTON_DEBOUNCE_MS);	//Set power button debounce period
 80012e6:	4bc4      	ldr	r3, [pc, #784]	; (80015f8 <main+0x338>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2264      	movs	r2, #100	; 0x64
 80012ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80012ee:	4bc2      	ldr	r3, [pc, #776]	; (80015f8 <main+0x338>)
 80012f0:	2264      	movs	r2, #100	; 0x64
 80012f2:	60da      	str	r2, [r3, #12]
  PIDController_Init(&pid);
 80012f4:	48c1      	ldr	r0, [pc, #772]	; (80015fc <main+0x33c>)
 80012f6:	f7ff fd4f 	bl	8000d98 <PIDController_Init>
  HAL_Delay(70);	// For stability
 80012fa:	2046      	movs	r0, #70	; 0x46
 80012fc:	f001 f8f6 	bl	80024ec <HAL_Delay>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);	//Calibrate ADC for better temperature reading
 8001300:	217f      	movs	r1, #127	; 0x7f
 8001302:	48bf      	ldr	r0, [pc, #764]	; (8001600 <main+0x340>)
 8001304:	f002 fa4e 	bl	80037a4 <HAL_ADCEx_Calibration_Start>

#if (USINGMAX17048)
  MAX17048_Init();
 8001308:	f7ff fefc 	bl	8001104 <MAX17048_Init>
#endif

  if(!BQ_Init())
 800130c:	f7ff fc62 	bl	8000bd4 <BQ_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	f083 0301 	eor.w	r3, r3, #1
 8001316:	b2db      	uxtb	r3, r3
 8001318:	2b00      	cmp	r3, #0
 800131a:	d01c      	beq.n	8001356 <main+0x96>
  {
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800131c:	2100      	movs	r1, #0
 800131e:	48b9      	ldr	r0, [pc, #740]	; (8001604 <main+0x344>)
 8001320:	f004 fe1a 	bl	8005f58 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001324:	2104      	movs	r1, #4
 8001326:	48b7      	ldr	r0, [pc, #732]	; (8001604 <main+0x344>)
 8001328:	f004 fe16 	bl	8005f58 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800132c:	2108      	movs	r1, #8
 800132e:	48b5      	ldr	r0, [pc, #724]	; (8001604 <main+0x344>)
 8001330:	f004 fe12 	bl	8005f58 <HAL_TIM_PWM_Start>

	  while(1)		//if BQ not present, then warn using that it's not finding it by flashing red
	  {
		  Set_RGB(100, 0, 0);
 8001334:	2200      	movs	r2, #0
 8001336:	2100      	movs	r1, #0
 8001338:	2064      	movs	r0, #100	; 0x64
 800133a:	f7ff ff6b 	bl	8001214 <Set_RGB>
		  HAL_Delay(250);
 800133e:	20fa      	movs	r0, #250	; 0xfa
 8001340:	f001 f8d4 	bl	80024ec <HAL_Delay>
		  Set_RGB(0, 0, 0);
 8001344:	2200      	movs	r2, #0
 8001346:	2100      	movs	r1, #0
 8001348:	2000      	movs	r0, #0
 800134a:	f7ff ff63 	bl	8001214 <Set_RGB>
		  HAL_Delay(250);
 800134e:	20fa      	movs	r0, #250	; 0xfa
 8001350:	f001 f8cc 	bl	80024ec <HAL_Delay>
		  Set_RGB(100, 0, 0);
 8001354:	e7ee      	b.n	8001334 <main+0x74>
	  }

  }
  HAL_Delay(70);	// For stability
 8001356:	2046      	movs	r0, #70	; 0x46
 8001358:	f001 f8c8 	bl	80024ec <HAL_Delay>

  max17048_get_soc(&hi2c1, &CurrentBatteryPercentage);	//Get current Battery Percentage
 800135c:	49aa      	ldr	r1, [pc, #680]	; (8001608 <main+0x348>)
 800135e:	48ab      	ldr	r0, [pc, #684]	; (800160c <main+0x34c>)
 8001360:	f000 fd58 	bl	8001e14 <max17048_get_soc>
  Set_RGB( 100, 100, 100 );
 8001364:	2264      	movs	r2, #100	; 0x64
 8001366:	2164      	movs	r1, #100	; 0x64
 8001368:	2064      	movs	r0, #100	; 0x64
 800136a:	f7ff ff53 	bl	8001214 <Set_RGB>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(BQ_FLAG)
 800136e:	4ba8      	ldr	r3, [pc, #672]	; (8001610 <main+0x350>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d002      	beq.n	800137c <main+0xbc>
	  {
		  BQ_FLAG = false;	//clear flag
 8001376:	4ba6      	ldr	r3, [pc, #664]	; (8001610 <main+0x350>)
 8001378:	2200      	movs	r2, #0
 800137a:	701a      	strb	r2, [r3, #0]
		   * something with the BQ INT
		   */
	  }

#if (USINGMAX17048)
	  if(MAX_FLAG)
 800137c:	4ba5      	ldr	r3, [pc, #660]	; (8001614 <main+0x354>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d002      	beq.n	800138a <main+0xca>
	  {
		  MAX_FLAG = false;	//clear flag
 8001384:	4ba3      	ldr	r3, [pc, #652]	; (8001614 <main+0x354>)
 8001386:	2200      	movs	r2, #0
 8001388:	701a      	strb	r2, [r3, #0]
	  }

#endif

	  if(SystemPowerState)
 800138a:	4ba3      	ldr	r3, [pc, #652]	; (8001618 <main+0x358>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	f000 80e1 	beq.w	8001556 <main+0x296>
	  {
		  /*
		   * While system is running,the code below will always run
		   */

		  if(!InitialSystemBoot)	//Start a boot sequence once
 8001394:	4ba1      	ldr	r3, [pc, #644]	; (800161c <main+0x35c>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	f083 0301 	eor.w	r3, r3, #1
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d02b      	beq.n	80013fa <main+0x13a>
		  {
			  InitialSystemBoot = true;	//Do it once
 80013a2:	4b9e      	ldr	r3, [pc, #632]	; (800161c <main+0x35c>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	701a      	strb	r2, [r3, #0]
			  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80013a8:	2100      	movs	r1, #0
 80013aa:	4896      	ldr	r0, [pc, #600]	; (8001604 <main+0x344>)
 80013ac:	f004 fdd4 	bl	8005f58 <HAL_TIM_PWM_Start>
			  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80013b0:	2104      	movs	r1, #4
 80013b2:	4894      	ldr	r0, [pc, #592]	; (8001604 <main+0x344>)
 80013b4:	f004 fdd0 	bl	8005f58 <HAL_TIM_PWM_Start>
			  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80013b8:	2108      	movs	r1, #8
 80013ba:	4892      	ldr	r0, [pc, #584]	; (8001604 <main+0x344>)
 80013bc:	f004 fdcc 	bl	8005f58 <HAL_TIM_PWM_Start>
			  Set_RGB( 100, 0, 0 );
 80013c0:	2200      	movs	r2, #0
 80013c2:	2100      	movs	r1, #0
 80013c4:	2064      	movs	r0, #100	; 0x64
 80013c6:	f7ff ff25 	bl	8001214 <Set_RGB>
			  HAL_Delay(100);
 80013ca:	2064      	movs	r0, #100	; 0x64
 80013cc:	f001 f88e 	bl	80024ec <HAL_Delay>
			  Set_RGB(0, 100, 0);
 80013d0:	2200      	movs	r2, #0
 80013d2:	2164      	movs	r1, #100	; 0x64
 80013d4:	2000      	movs	r0, #0
 80013d6:	f7ff ff1d 	bl	8001214 <Set_RGB>
			  HAL_Delay(100);
 80013da:	2064      	movs	r0, #100	; 0x64
 80013dc:	f001 f886 	bl	80024ec <HAL_Delay>
			  Set_RGB(0, 0, 100);
 80013e0:	2264      	movs	r2, #100	; 0x64
 80013e2:	2100      	movs	r1, #0
 80013e4:	2000      	movs	r0, #0
 80013e6:	f7ff ff15 	bl	8001214 <Set_RGB>
			  HAL_Delay(200);
 80013ea:	20c8      	movs	r0, #200	; 0xc8
 80013ec:	f001 f87e 	bl	80024ec <HAL_Delay>
			  HAL_GPIO_WritePin(En_Regulators_GPIO_Port, En_Regulators_Pin, GPIO_PIN_SET);	//Turn on Regulators
 80013f0:	2201      	movs	r2, #1
 80013f2:	2140      	movs	r1, #64	; 0x40
 80013f4:	488a      	ldr	r0, [pc, #552]	; (8001620 <main+0x360>)
 80013f6:	f002 fcd9 	bl	8003dac <HAL_GPIO_WritePin>
		  }


		  if(IsSystemCharging)
 80013fa:	4b8a      	ldr	r3, [pc, #552]	; (8001624 <main+0x364>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d021      	beq.n	8001446 <main+0x186>
		  {
			  max17048_get_soc(&hi2c1, &CurrentBatteryPercentage);	//Get current Battery Percentage
 8001402:	4981      	ldr	r1, [pc, #516]	; (8001608 <main+0x348>)
 8001404:	4881      	ldr	r0, [pc, #516]	; (800160c <main+0x34c>)
 8001406:	f000 fd05 	bl	8001e14 <max17048_get_soc>
			  if(CurrentBatteryPercentage < 75)
 800140a:	4b7f      	ldr	r3, [pc, #508]	; (8001608 <main+0x348>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b4a      	cmp	r3, #74	; 0x4a
 8001410:	d805      	bhi.n	800141e <main+0x15e>
			  {
				  Set_RGB(100, 64, 0);
 8001412:	2200      	movs	r2, #0
 8001414:	2140      	movs	r1, #64	; 0x40
 8001416:	2064      	movs	r0, #100	; 0x64
 8001418:	f7ff fefc 	bl	8001214 <Set_RGB>
 800141c:	e040      	b.n	80014a0 <main+0x1e0>
			  }
			  else if(CurrentBatteryPercentage >= 75 && CurrentBatteryPercentage < 90)
 800141e:	4b7a      	ldr	r3, [pc, #488]	; (8001608 <main+0x348>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b4a      	cmp	r3, #74	; 0x4a
 8001424:	d909      	bls.n	800143a <main+0x17a>
 8001426:	4b78      	ldr	r3, [pc, #480]	; (8001608 <main+0x348>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b59      	cmp	r3, #89	; 0x59
 800142c:	d805      	bhi.n	800143a <main+0x17a>
			  {
				  Set_RGB(0, 100, 0);
 800142e:	2200      	movs	r2, #0
 8001430:	2164      	movs	r1, #100	; 0x64
 8001432:	2000      	movs	r0, #0
 8001434:	f7ff feee 	bl	8001214 <Set_RGB>
 8001438:	e032      	b.n	80014a0 <main+0x1e0>
			  }else
			  {
				  Set_RGB(0, 0, 100);
 800143a:	2264      	movs	r2, #100	; 0x64
 800143c:	2100      	movs	r1, #0
 800143e:	2000      	movs	r0, #0
 8001440:	f7ff fee8 	bl	8001214 <Set_RGB>
 8001444:	e02c      	b.n	80014a0 <main+0x1e0>
			  }
		  }
		  else
		  {
			  Set_RGB(Remap(CurrentBatteryPercentage, 0, 100, 100, 0), 0, Remap(CurrentBatteryPercentage, 0, 100, 40, 100));
 8001446:	4b70      	ldr	r3, [pc, #448]	; (8001608 <main+0x348>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	ee07 3a90 	vmov	s15, r3
 800144e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001452:	ed9f 2a75 	vldr	s4, [pc, #468]	; 8001628 <main+0x368>
 8001456:	eddf 1a75 	vldr	s3, [pc, #468]	; 800162c <main+0x36c>
 800145a:	ed9f 1a74 	vldr	s2, [pc, #464]	; 800162c <main+0x36c>
 800145e:	eddf 0a72 	vldr	s1, [pc, #456]	; 8001628 <main+0x368>
 8001462:	eeb0 0a67 	vmov.f32	s0, s15
 8001466:	f7ff fea3 	bl	80011b0 <Remap>
 800146a:	4603      	mov	r3, r0
 800146c:	b2dc      	uxtb	r4, r3
 800146e:	4b66      	ldr	r3, [pc, #408]	; (8001608 <main+0x348>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	ee07 3a90 	vmov	s15, r3
 8001476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800147a:	ed9f 2a6c 	vldr	s4, [pc, #432]	; 800162c <main+0x36c>
 800147e:	eddf 1a6c 	vldr	s3, [pc, #432]	; 8001630 <main+0x370>
 8001482:	ed9f 1a6a 	vldr	s2, [pc, #424]	; 800162c <main+0x36c>
 8001486:	eddf 0a68 	vldr	s1, [pc, #416]	; 8001628 <main+0x368>
 800148a:	eeb0 0a67 	vmov.f32	s0, s15
 800148e:	f7ff fe8f 	bl	80011b0 <Remap>
 8001492:	4603      	mov	r3, r0
 8001494:	b2db      	uxtb	r3, r3
 8001496:	461a      	mov	r2, r3
 8001498:	2100      	movs	r1, #0
 800149a:	4620      	mov	r0, r4
 800149c:	f7ff feba 	bl	8001214 <Set_RGB>
		  /*
		   * TODO:
		   * READ TEMPERATURE AND ADJUST FAN USING PID
		   */

		  HAL_ADC_Start(&hadc1);
 80014a0:	4857      	ldr	r0, [pc, #348]	; (8001600 <main+0x340>)
 80014a2:	f001 fb8d 	bl	8002bc0 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 10);
 80014a6:	210a      	movs	r1, #10
 80014a8:	4855      	ldr	r0, [pc, #340]	; (8001600 <main+0x340>)
 80014aa:	f001 fbec 	bl	8002c86 <HAL_ADC_PollForConversion>
		  NTC_RawValue = HAL_ADC_GetValue(&hadc1);
 80014ae:	4854      	ldr	r0, [pc, #336]	; (8001600 <main+0x340>)
 80014b0:	f001 fc78 	bl	8002da4 <HAL_ADC_GetValue>
 80014b4:	ee07 0a90 	vmov	s15, r0
 80014b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014bc:	4b5d      	ldr	r3, [pc, #372]	; (8001634 <main+0x374>)
 80014be:	edc3 7a00 	vstr	s15, [r3]

			/* temp */
			float Ntc_Ln = log(NTC_RawValue);
 80014c2:	4b5c      	ldr	r3, [pc, #368]	; (8001634 <main+0x374>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7fe ffe6 	bl	8000498 <__aeabi_f2d>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	ec43 2b10 	vmov	d0, r2, r3
 80014d4:	f005 fe14 	bl	8007100 <log>
 80014d8:	ec53 2b10 	vmov	r2, r3, d0
 80014dc:	4610      	mov	r0, r2
 80014de:	4619      	mov	r1, r3
 80014e0:	f7ff fae2 	bl	8000aa8 <__aeabi_d2f>
 80014e4:	4603      	mov	r3, r0
 80014e6:	607b      	str	r3, [r7, #4]
			/* calc. temperature */
			float Ntc_Tmp = (1.0/(A + B*Ntc_Ln + C*Ntc_Ln*Ntc_Ln*Ntc_Ln)) - 273.15;
 80014e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ec:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8001638 <main+0x378>
 80014f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014f4:	ed9f 7a51 	vldr	s14, [pc, #324]	; 800163c <main+0x37c>
 80014f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80014fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001500:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8001640 <main+0x380>
 8001504:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001508:	edd7 7a01 	vldr	s15, [r7, #4]
 800150c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001510:	edd7 7a01 	vldr	s15, [r7, #4]
 8001514:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001518:	ee77 7a27 	vadd.f32	s15, s14, s15
 800151c:	ee17 0a90 	vmov	r0, s15
 8001520:	f7fe ffba 	bl	8000498 <__aeabi_f2d>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	f04f 0000 	mov.w	r0, #0
 800152c:	4945      	ldr	r1, [pc, #276]	; (8001644 <main+0x384>)
 800152e:	f7ff f935 	bl	800079c <__aeabi_ddiv>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4610      	mov	r0, r2
 8001538:	4619      	mov	r1, r3
 800153a:	a32d      	add	r3, pc, #180	; (adr r3, 80015f0 <main+0x330>)
 800153c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001540:	f7fe fe4a 	bl	80001d8 <__aeabi_dsub>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4610      	mov	r0, r2
 800154a:	4619      	mov	r1, r3
 800154c:	f7ff faac 	bl	8000aa8 <__aeabi_d2f>
 8001550:	4603      	mov	r3, r0
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	e70b      	b.n	800136e <main+0xae>

	  }else if(!SystemPowerState)
 8001556:	4b30      	ldr	r3, [pc, #192]	; (8001618 <main+0x358>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	f083 0301 	eor.w	r3, r3, #1
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2b00      	cmp	r3, #0
 8001562:	f43f af04 	beq.w	800136e <main+0xae>
	  {
		  /*
		   * While system is Down,the code below will always run
		   */

		 if(InitialSystemBoot)	//Start shutdown sequence
 8001566:	4b2d      	ldr	r3, [pc, #180]	; (800161c <main+0x35c>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d02c      	beq.n	80015c8 <main+0x308>
		 {
			 InitialSystemBoot = false;
 800156e:	4b2b      	ldr	r3, [pc, #172]	; (800161c <main+0x35c>)
 8001570:	2200      	movs	r2, #0
 8001572:	701a      	strb	r2, [r3, #0]
			  Set_RGB( 0, 100, 0 );
 8001574:	2200      	movs	r2, #0
 8001576:	2164      	movs	r1, #100	; 0x64
 8001578:	2000      	movs	r0, #0
 800157a:	f7ff fe4b 	bl	8001214 <Set_RGB>
			  HAL_Delay(200);
 800157e:	20c8      	movs	r0, #200	; 0xc8
 8001580:	f000 ffb4 	bl	80024ec <HAL_Delay>
			  Set_RGB(0, 0, 100);
 8001584:	2264      	movs	r2, #100	; 0x64
 8001586:	2100      	movs	r1, #0
 8001588:	2000      	movs	r0, #0
 800158a:	f7ff fe43 	bl	8001214 <Set_RGB>
			  HAL_Delay(200);
 800158e:	20c8      	movs	r0, #200	; 0xc8
 8001590:	f000 ffac 	bl	80024ec <HAL_Delay>
			  Set_RGB( 0, 100, 0 );
 8001594:	2200      	movs	r2, #0
 8001596:	2164      	movs	r1, #100	; 0x64
 8001598:	2000      	movs	r0, #0
 800159a:	f7ff fe3b 	bl	8001214 <Set_RGB>
			  HAL_Delay(200);
 800159e:	20c8      	movs	r0, #200	; 0xc8
 80015a0:	f000 ffa4 	bl	80024ec <HAL_Delay>
			  Set_RGB(0, 0, 100);
 80015a4:	2264      	movs	r2, #100	; 0x64
 80015a6:	2100      	movs	r1, #0
 80015a8:	2000      	movs	r0, #0
 80015aa:	f7ff fe33 	bl	8001214 <Set_RGB>
			  HAL_Delay(200);
 80015ae:	20c8      	movs	r0, #200	; 0xc8
 80015b0:	f000 ff9c 	bl	80024ec <HAL_Delay>
			  Set_RGB(0, 0, 0);
 80015b4:	2200      	movs	r2, #0
 80015b6:	2100      	movs	r1, #0
 80015b8:	2000      	movs	r0, #0
 80015ba:	f7ff fe2b 	bl	8001214 <Set_RGB>
			  HAL_GPIO_WritePin(En_Regulators_GPIO_Port, En_Regulators_Pin, GPIO_PIN_RESET);	//Turn off Regulators
 80015be:	2200      	movs	r2, #0
 80015c0:	2140      	movs	r1, #64	; 0x40
 80015c2:	4817      	ldr	r0, [pc, #92]	; (8001620 <main+0x360>)
 80015c4:	f002 fbf2 	bl	8003dac <HAL_GPIO_WritePin>
		 }

		 if(IsSystemCharging)
 80015c8:	4b16      	ldr	r3, [pc, #88]	; (8001624 <main+0x364>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f43f aece 	beq.w	800136e <main+0xae>
		 {
			max17048_get_soc(&hi2c1, &CurrentBatteryPercentage);	//Get current Battery Percentage
 80015d2:	490d      	ldr	r1, [pc, #52]	; (8001608 <main+0x348>)
 80015d4:	480d      	ldr	r0, [pc, #52]	; (800160c <main+0x34c>)
 80015d6:	f000 fc1d 	bl	8001e14 <max17048_get_soc>
			if(CurrentBatteryPercentage < 75)
 80015da:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <main+0x348>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b4a      	cmp	r3, #74	; 0x4a
 80015e0:	d832      	bhi.n	8001648 <main+0x388>
			{
				Set_RGB(100, 64, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2140      	movs	r1, #64	; 0x40
 80015e6:	2064      	movs	r0, #100	; 0x64
 80015e8:	f7ff fe14 	bl	8001214 <Set_RGB>
 80015ec:	e6bf      	b.n	800136e <main+0xae>
 80015ee:	bf00      	nop
 80015f0:	66666666 	.word	0x66666666
 80015f4:	40711266 	.word	0x40711266
 80015f8:	2000021c 	.word	0x2000021c
 80015fc:	20000090 	.word	0x20000090
 8001600:	200000cc 	.word	0x200000cc
 8001604:	200001d0 	.word	0x200001d0
 8001608:	20000272 	.word	0x20000272
 800160c:	20000130 	.word	0x20000130
 8001610:	20000269 	.word	0x20000269
 8001614:	2000026a 	.word	0x2000026a
 8001618:	2000026f 	.word	0x2000026f
 800161c:	20000270 	.word	0x20000270
 8001620:	48000800 	.word	0x48000800
 8001624:	20000271 	.word	0x20000271
 8001628:	00000000 	.word	0x00000000
 800162c:	42c80000 	.word	0x42c80000
 8001630:	42200000 	.word	0x42200000
 8001634:	200000c8 	.word	0x200000c8
 8001638:	39851cf1 	.word	0x39851cf1
 800163c:	3a6505d9 	.word	0x3a6505d9
 8001640:	3442fdd4 	.word	0x3442fdd4
 8001644:	3ff00000 	.word	0x3ff00000
			}
			else if(CurrentBatteryPercentage >= 75 && CurrentBatteryPercentage < 90)
 8001648:	4b09      	ldr	r3, [pc, #36]	; (8001670 <main+0x3b0>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b4a      	cmp	r3, #74	; 0x4a
 800164e:	d909      	bls.n	8001664 <main+0x3a4>
 8001650:	4b07      	ldr	r3, [pc, #28]	; (8001670 <main+0x3b0>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b59      	cmp	r3, #89	; 0x59
 8001656:	d805      	bhi.n	8001664 <main+0x3a4>
			{
				Set_RGB(0, 100, 0);
 8001658:	2200      	movs	r2, #0
 800165a:	2164      	movs	r1, #100	; 0x64
 800165c:	2000      	movs	r0, #0
 800165e:	f7ff fdd9 	bl	8001214 <Set_RGB>
 8001662:	e004      	b.n	800166e <main+0x3ae>
			}else
			{
				Set_RGB(0, 0, 100);
 8001664:	2264      	movs	r2, #100	; 0x64
 8001666:	2100      	movs	r1, #0
 8001668:	2000      	movs	r0, #0
 800166a:	f7ff fdd3 	bl	8001214 <Set_RGB>
	  if(BQ_FLAG)
 800166e:	e67e      	b.n	800136e <main+0xae>
 8001670:	20000272 	.word	0x20000272

08001674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b096      	sub	sp, #88	; 0x58
 8001678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	2244      	movs	r2, #68	; 0x44
 8001680:	2100      	movs	r1, #0
 8001682:	4618      	mov	r0, r3
 8001684:	f005 fd34 	bl	80070f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001688:	463b      	mov	r3, r7
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]
 8001694:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001696:	f44f 7000 	mov.w	r0, #512	; 0x200
 800169a:	f003 f9c1 	bl	8004a20 <HAL_PWREx_ControlVoltageScaling>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80016a4:	f000 fad2 	bl	8001c4c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80016a8:	2310      	movs	r3, #16
 80016aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80016ac:	2301      	movs	r3, #1
 80016ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80016b4:	2360      	movs	r3, #96	; 0x60
 80016b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016b8:	2300      	movs	r3, #0
 80016ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	4618      	mov	r0, r3
 80016c2:	f003 fa03 	bl	8004acc <HAL_RCC_OscConfig>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80016cc:	f000 fabe 	bl	8001c4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016d0:	230f      	movs	r3, #15
 80016d2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80016d4:	2300      	movs	r3, #0
 80016d6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d8:	2300      	movs	r3, #0
 80016da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016e0:	2300      	movs	r3, #0
 80016e2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016e4:	463b      	mov	r3, r7
 80016e6:	2100      	movs	r1, #0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f003 fe03 	bl	80052f4 <HAL_RCC_ClockConfig>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80016f4:	f000 faaa 	bl	8001c4c <Error_Handler>
  }
}
 80016f8:	bf00      	nop
 80016fa:	3758      	adds	r7, #88	; 0x58
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001706:	463b      	mov	r3, r7
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
 8001714:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001716:	4b29      	ldr	r3, [pc, #164]	; (80017bc <MX_ADC1_Init+0xbc>)
 8001718:	4a29      	ldr	r2, [pc, #164]	; (80017c0 <MX_ADC1_Init+0xc0>)
 800171a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800171c:	4b27      	ldr	r3, [pc, #156]	; (80017bc <MX_ADC1_Init+0xbc>)
 800171e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001722:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001724:	4b25      	ldr	r3, [pc, #148]	; (80017bc <MX_ADC1_Init+0xbc>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800172a:	4b24      	ldr	r3, [pc, #144]	; (80017bc <MX_ADC1_Init+0xbc>)
 800172c:	2200      	movs	r2, #0
 800172e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001730:	4b22      	ldr	r3, [pc, #136]	; (80017bc <MX_ADC1_Init+0xbc>)
 8001732:	2200      	movs	r2, #0
 8001734:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001736:	4b21      	ldr	r3, [pc, #132]	; (80017bc <MX_ADC1_Init+0xbc>)
 8001738:	2204      	movs	r2, #4
 800173a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800173c:	4b1f      	ldr	r3, [pc, #124]	; (80017bc <MX_ADC1_Init+0xbc>)
 800173e:	2200      	movs	r2, #0
 8001740:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001742:	4b1e      	ldr	r3, [pc, #120]	; (80017bc <MX_ADC1_Init+0xbc>)
 8001744:	2200      	movs	r2, #0
 8001746:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001748:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <MX_ADC1_Init+0xbc>)
 800174a:	2201      	movs	r2, #1
 800174c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800174e:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <MX_ADC1_Init+0xbc>)
 8001750:	2200      	movs	r2, #0
 8001752:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001756:	4b19      	ldr	r3, [pc, #100]	; (80017bc <MX_ADC1_Init+0xbc>)
 8001758:	2200      	movs	r2, #0
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800175c:	4b17      	ldr	r3, [pc, #92]	; (80017bc <MX_ADC1_Init+0xbc>)
 800175e:	2200      	movs	r2, #0
 8001760:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001762:	4b16      	ldr	r3, [pc, #88]	; (80017bc <MX_ADC1_Init+0xbc>)
 8001764:	2200      	movs	r2, #0
 8001766:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800176a:	4b14      	ldr	r3, [pc, #80]	; (80017bc <MX_ADC1_Init+0xbc>)
 800176c:	2200      	movs	r2, #0
 800176e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <MX_ADC1_Init+0xbc>)
 8001772:	2200      	movs	r2, #0
 8001774:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001778:	4810      	ldr	r0, [pc, #64]	; (80017bc <MX_ADC1_Init+0xbc>)
 800177a:	f001 f8d9 	bl	8002930 <HAL_ADC_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8001784:	f000 fa62 	bl	8001c4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001788:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <MX_ADC1_Init+0xc4>)
 800178a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800178c:	2306      	movs	r3, #6
 800178e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8001790:	2305      	movs	r3, #5
 8001792:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001794:	237f      	movs	r3, #127	; 0x7f
 8001796:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001798:	2304      	movs	r3, #4
 800179a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017a0:	463b      	mov	r3, r7
 80017a2:	4619      	mov	r1, r3
 80017a4:	4805      	ldr	r0, [pc, #20]	; (80017bc <MX_ADC1_Init+0xbc>)
 80017a6:	f001 fb0b 	bl	8002dc0 <HAL_ADC_ConfigChannel>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80017b0:	f000 fa4c 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017b4:	bf00      	nop
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	200000cc 	.word	0x200000cc
 80017c0:	50040000 	.word	0x50040000
 80017c4:	25b00200 	.word	0x25b00200

080017c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017cc:	4b1b      	ldr	r3, [pc, #108]	; (800183c <MX_I2C1_Init+0x74>)
 80017ce:	4a1c      	ldr	r2, [pc, #112]	; (8001840 <MX_I2C1_Init+0x78>)
 80017d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000004;
 80017d2:	4b1a      	ldr	r3, [pc, #104]	; (800183c <MX_I2C1_Init+0x74>)
 80017d4:	2204      	movs	r2, #4
 80017d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80017d8:	4b18      	ldr	r3, [pc, #96]	; (800183c <MX_I2C1_Init+0x74>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017de:	4b17      	ldr	r3, [pc, #92]	; (800183c <MX_I2C1_Init+0x74>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017e4:	4b15      	ldr	r3, [pc, #84]	; (800183c <MX_I2C1_Init+0x74>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017ea:	4b14      	ldr	r3, [pc, #80]	; (800183c <MX_I2C1_Init+0x74>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017f0:	4b12      	ldr	r3, [pc, #72]	; (800183c <MX_I2C1_Init+0x74>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <MX_I2C1_Init+0x74>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017fc:	4b0f      	ldr	r3, [pc, #60]	; (800183c <MX_I2C1_Init+0x74>)
 80017fe:	2200      	movs	r2, #0
 8001800:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001802:	480e      	ldr	r0, [pc, #56]	; (800183c <MX_I2C1_Init+0x74>)
 8001804:	f002 fb02 	bl	8003e0c <HAL_I2C_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800180e:	f000 fa1d 	bl	8001c4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001812:	2100      	movs	r1, #0
 8001814:	4809      	ldr	r0, [pc, #36]	; (800183c <MX_I2C1_Init+0x74>)
 8001816:	f003 f85d 	bl	80048d4 <HAL_I2CEx_ConfigAnalogFilter>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001820:	f000 fa14 	bl	8001c4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001824:	2100      	movs	r1, #0
 8001826:	4805      	ldr	r0, [pc, #20]	; (800183c <MX_I2C1_Init+0x74>)
 8001828:	f003 f89f 	bl	800496a <HAL_I2CEx_ConfigDigitalFilter>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001832:	f000 fa0b 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000130 	.word	0x20000130
 8001840:	40005400 	.word	0x40005400

08001844 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b09a      	sub	sp, #104	; 0x68
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800184a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001858:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001864:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
 8001874:	615a      	str	r2, [r3, #20]
 8001876:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	222c      	movs	r2, #44	; 0x2c
 800187c:	2100      	movs	r1, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f005 fc36 	bl	80070f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001884:	4b42      	ldr	r3, [pc, #264]	; (8001990 <MX_TIM1_Init+0x14c>)
 8001886:	4a43      	ldr	r2, [pc, #268]	; (8001994 <MX_TIM1_Init+0x150>)
 8001888:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800188a:	4b41      	ldr	r3, [pc, #260]	; (8001990 <MX_TIM1_Init+0x14c>)
 800188c:	2200      	movs	r2, #0
 800188e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001890:	4b3f      	ldr	r3, [pc, #252]	; (8001990 <MX_TIM1_Init+0x14c>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001896:	4b3e      	ldr	r3, [pc, #248]	; (8001990 <MX_TIM1_Init+0x14c>)
 8001898:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800189c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800189e:	4b3c      	ldr	r3, [pc, #240]	; (8001990 <MX_TIM1_Init+0x14c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018a4:	4b3a      	ldr	r3, [pc, #232]	; (8001990 <MX_TIM1_Init+0x14c>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018aa:	4b39      	ldr	r3, [pc, #228]	; (8001990 <MX_TIM1_Init+0x14c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018b0:	4837      	ldr	r0, [pc, #220]	; (8001990 <MX_TIM1_Init+0x14c>)
 80018b2:	f004 fa15 	bl	8005ce0 <HAL_TIM_Base_Init>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80018bc:	f000 f9c6 	bl	8001c4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018c4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018ca:	4619      	mov	r1, r3
 80018cc:	4830      	ldr	r0, [pc, #192]	; (8001990 <MX_TIM1_Init+0x14c>)
 80018ce:	f004 fe55 	bl	800657c <HAL_TIM_ConfigClockSource>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80018d8:	f000 f9b8 	bl	8001c4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018dc:	482c      	ldr	r0, [pc, #176]	; (8001990 <MX_TIM1_Init+0x14c>)
 80018de:	f004 fada 	bl	8005e96 <HAL_TIM_PWM_Init>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80018e8:	f000 f9b0 	bl	8001c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ec:	2300      	movs	r3, #0
 80018ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018f0:	2300      	movs	r3, #0
 80018f2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f4:	2300      	movs	r3, #0
 80018f6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018fc:	4619      	mov	r1, r3
 80018fe:	4824      	ldr	r0, [pc, #144]	; (8001990 <MX_TIM1_Init+0x14c>)
 8001900:	f005 fad0 	bl	8006ea4 <HAL_TIMEx_MasterConfigSynchronization>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800190a:	f000 f99f 	bl	8001c4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800190e:	2360      	movs	r3, #96	; 0x60
 8001910:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001916:	2300      	movs	r3, #0
 8001918:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800191a:	2300      	movs	r3, #0
 800191c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800191e:	2300      	movs	r3, #0
 8001920:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001922:	2300      	movs	r3, #0
 8001924:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001926:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800192a:	220c      	movs	r2, #12
 800192c:	4619      	mov	r1, r3
 800192e:	4818      	ldr	r0, [pc, #96]	; (8001990 <MX_TIM1_Init+0x14c>)
 8001930:	f004 fd10 	bl	8006354 <HAL_TIM_PWM_ConfigChannel>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800193a:	f000 f987 	bl	8001c4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800193e:	2300      	movs	r3, #0
 8001940:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001942:	2300      	movs	r3, #0
 8001944:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001952:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001956:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800195c:	2300      	movs	r3, #0
 800195e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001960:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800196a:	2300      	movs	r3, #0
 800196c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800196e:	1d3b      	adds	r3, r7, #4
 8001970:	4619      	mov	r1, r3
 8001972:	4807      	ldr	r0, [pc, #28]	; (8001990 <MX_TIM1_Init+0x14c>)
 8001974:	f005 fafc 	bl	8006f70 <HAL_TIMEx_ConfigBreakDeadTime>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 800197e:	f000 f965 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001982:	4803      	ldr	r0, [pc, #12]	; (8001990 <MX_TIM1_Init+0x14c>)
 8001984:	f000 fc60 	bl	8002248 <HAL_TIM_MspPostInit>

}
 8001988:	bf00      	nop
 800198a:	3768      	adds	r7, #104	; 0x68
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000184 	.word	0x20000184
 8001994:	40012c00 	.word	0x40012c00

08001998 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08e      	sub	sp, #56	; 0x38
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800199e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ac:	f107 031c 	add.w	r3, r7, #28
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019b8:	463b      	mov	r3, r7
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]
 80019c0:	609a      	str	r2, [r3, #8]
 80019c2:	60da      	str	r2, [r3, #12]
 80019c4:	611a      	str	r2, [r3, #16]
 80019c6:	615a      	str	r2, [r3, #20]
 80019c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019ca:	4b38      	ldr	r3, [pc, #224]	; (8001aac <MX_TIM2_Init+0x114>)
 80019cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4-1;
 80019d2:	4b36      	ldr	r3, [pc, #216]	; (8001aac <MX_TIM2_Init+0x114>)
 80019d4:	2203      	movs	r2, #3
 80019d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d8:	4b34      	ldr	r3, [pc, #208]	; (8001aac <MX_TIM2_Init+0x114>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80019de:	4b33      	ldr	r3, [pc, #204]	; (8001aac <MX_TIM2_Init+0x114>)
 80019e0:	2263      	movs	r2, #99	; 0x63
 80019e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e4:	4b31      	ldr	r3, [pc, #196]	; (8001aac <MX_TIM2_Init+0x114>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ea:	4b30      	ldr	r3, [pc, #192]	; (8001aac <MX_TIM2_Init+0x114>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019f0:	482e      	ldr	r0, [pc, #184]	; (8001aac <MX_TIM2_Init+0x114>)
 80019f2:	f004 f975 	bl	8005ce0 <HAL_TIM_Base_Init>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80019fc:	f000 f926 	bl	8001c4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a04:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4827      	ldr	r0, [pc, #156]	; (8001aac <MX_TIM2_Init+0x114>)
 8001a0e:	f004 fdb5 	bl	800657c <HAL_TIM_ConfigClockSource>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001a18:	f000 f918 	bl	8001c4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a1c:	4823      	ldr	r0, [pc, #140]	; (8001aac <MX_TIM2_Init+0x114>)
 8001a1e:	f004 fa3a 	bl	8005e96 <HAL_TIM_PWM_Init>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001a28:	f000 f910 	bl	8001c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a30:	2300      	movs	r3, #0
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a34:	f107 031c 	add.w	r3, r7, #28
 8001a38:	4619      	mov	r1, r3
 8001a3a:	481c      	ldr	r0, [pc, #112]	; (8001aac <MX_TIM2_Init+0x114>)
 8001a3c:	f005 fa32 	bl	8006ea4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001a46:	f000 f901 	bl	8001c4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a4a:	2360      	movs	r3, #96	; 0x60
 8001a4c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a52:	2300      	movs	r3, #0
 8001a54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a5a:	463b      	mov	r3, r7
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4812      	ldr	r0, [pc, #72]	; (8001aac <MX_TIM2_Init+0x114>)
 8001a62:	f004 fc77 	bl	8006354 <HAL_TIM_PWM_ConfigChannel>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001a6c:	f000 f8ee 	bl	8001c4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a70:	463b      	mov	r3, r7
 8001a72:	2204      	movs	r2, #4
 8001a74:	4619      	mov	r1, r3
 8001a76:	480d      	ldr	r0, [pc, #52]	; (8001aac <MX_TIM2_Init+0x114>)
 8001a78:	f004 fc6c 	bl	8006354 <HAL_TIM_PWM_ConfigChannel>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001a82:	f000 f8e3 	bl	8001c4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a86:	463b      	mov	r3, r7
 8001a88:	2208      	movs	r2, #8
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4807      	ldr	r0, [pc, #28]	; (8001aac <MX_TIM2_Init+0x114>)
 8001a8e:	f004 fc61 	bl	8006354 <HAL_TIM_PWM_ConfigChannel>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001a98:	f000 f8d8 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a9c:	4803      	ldr	r0, [pc, #12]	; (8001aac <MX_TIM2_Init+0x114>)
 8001a9e:	f000 fbd3 	bl	8002248 <HAL_TIM_MspPostInit>

}
 8001aa2:	bf00      	nop
 8001aa4:	3738      	adds	r7, #56	; 0x38
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	200001d0 	.word	0x200001d0

08001ab0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b088      	sub	sp, #32
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ab6:	f107 0310 	add.w	r3, r7, #16
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
 8001ac2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac4:	1d3b      	adds	r3, r7, #4
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001ace:	4b1f      	ldr	r3, [pc, #124]	; (8001b4c <MX_TIM15_Init+0x9c>)
 8001ad0:	4a1f      	ldr	r2, [pc, #124]	; (8001b50 <MX_TIM15_Init+0xa0>)
 8001ad2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 4000;
 8001ad4:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <MX_TIM15_Init+0x9c>)
 8001ad6:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001ada:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001adc:	4b1b      	ldr	r3, [pc, #108]	; (8001b4c <MX_TIM15_Init+0x9c>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 50;
 8001ae2:	4b1a      	ldr	r3, [pc, #104]	; (8001b4c <MX_TIM15_Init+0x9c>)
 8001ae4:	2232      	movs	r2, #50	; 0x32
 8001ae6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae8:	4b18      	ldr	r3, [pc, #96]	; (8001b4c <MX_TIM15_Init+0x9c>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001aee:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <MX_TIM15_Init+0x9c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af4:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <MX_TIM15_Init+0x9c>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001afa:	4814      	ldr	r0, [pc, #80]	; (8001b4c <MX_TIM15_Init+0x9c>)
 8001afc:	f004 f8f0 	bl	8005ce0 <HAL_TIM_Base_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8001b06:	f000 f8a1 	bl	8001c4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001b10:	f107 0310 	add.w	r3, r7, #16
 8001b14:	4619      	mov	r1, r3
 8001b16:	480d      	ldr	r0, [pc, #52]	; (8001b4c <MX_TIM15_Init+0x9c>)
 8001b18:	f004 fd30 	bl	800657c <HAL_TIM_ConfigClockSource>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8001b22:	f000 f893 	bl	8001c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b26:	2300      	movs	r3, #0
 8001b28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001b2e:	1d3b      	adds	r3, r7, #4
 8001b30:	4619      	mov	r1, r3
 8001b32:	4806      	ldr	r0, [pc, #24]	; (8001b4c <MX_TIM15_Init+0x9c>)
 8001b34:	f005 f9b6 	bl	8006ea4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8001b3e:	f000 f885 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001b42:	bf00      	nop
 8001b44:	3720      	adds	r7, #32
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	2000021c 	.word	0x2000021c
 8001b50:	40014000 	.word	0x40014000

08001b54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b088      	sub	sp, #32
 8001b58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5a:	f107 030c 	add.w	r3, r7, #12
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	609a      	str	r2, [r3, #8]
 8001b66:	60da      	str	r2, [r3, #12]
 8001b68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6a:	4b36      	ldr	r3, [pc, #216]	; (8001c44 <MX_GPIO_Init+0xf0>)
 8001b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6e:	4a35      	ldr	r2, [pc, #212]	; (8001c44 <MX_GPIO_Init+0xf0>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b76:	4b33      	ldr	r3, [pc, #204]	; (8001c44 <MX_GPIO_Init+0xf0>)
 8001b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b82:	4b30      	ldr	r3, [pc, #192]	; (8001c44 <MX_GPIO_Init+0xf0>)
 8001b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b86:	4a2f      	ldr	r2, [pc, #188]	; (8001c44 <MX_GPIO_Init+0xf0>)
 8001b88:	f043 0304 	orr.w	r3, r3, #4
 8001b8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b8e:	4b2d      	ldr	r3, [pc, #180]	; (8001c44 <MX_GPIO_Init+0xf0>)
 8001b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b92:	f003 0304 	and.w	r3, r3, #4
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9a:	4b2a      	ldr	r3, [pc, #168]	; (8001c44 <MX_GPIO_Init+0xf0>)
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9e:	4a29      	ldr	r2, [pc, #164]	; (8001c44 <MX_GPIO_Init+0xf0>)
 8001ba0:	f043 0302 	orr.w	r3, r3, #2
 8001ba4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ba6:	4b27      	ldr	r3, [pc, #156]	; (8001c44 <MX_GPIO_Init+0xf0>)
 8001ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(En_Regulators_GPIO_Port, En_Regulators_Pin, GPIO_PIN_RESET);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2140      	movs	r1, #64	; 0x40
 8001bb6:	4824      	ldr	r0, [pc, #144]	; (8001c48 <MX_GPIO_Init+0xf4>)
 8001bb8:	f002 f8f8 	bl	8003dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : En_Regulators_Pin */
  GPIO_InitStruct.Pin = En_Regulators_Pin;
 8001bbc:	2340      	movs	r3, #64	; 0x40
 8001bbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(En_Regulators_GPIO_Port, &GPIO_InitStruct);
 8001bcc:	f107 030c 	add.w	r3, r7, #12
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	481d      	ldr	r0, [pc, #116]	; (8001c48 <MX_GPIO_Init+0xf4>)
 8001bd4:	f001 ff58 	bl	8003a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : Power_Button_Pin */
  GPIO_InitStruct.Pin = Power_Button_Pin;
 8001bd8:	2380      	movs	r3, #128	; 0x80
 8001bda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001bdc:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001be0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001be2:	2301      	movs	r3, #1
 8001be4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Power_Button_GPIO_Port, &GPIO_InitStruct);
 8001be6:	f107 030c 	add.w	r3, r7, #12
 8001bea:	4619      	mov	r1, r3
 8001bec:	4816      	ldr	r0, [pc, #88]	; (8001c48 <MX_GPIO_Init+0xf4>)
 8001bee:	f001 ff4b 	bl	8003a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : MAX_ALRT_Pin */
  GPIO_InitStruct.Pin = MAX_ALRT_Pin;
 8001bf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bf6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bf8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001bfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MAX_ALRT_GPIO_Port, &GPIO_InitStruct);
 8001c02:	f107 030c 	add.w	r3, r7, #12
 8001c06:	4619      	mov	r1, r3
 8001c08:	480f      	ldr	r0, [pc, #60]	; (8001c48 <MX_GPIO_Init+0xf4>)
 8001c0a:	f001 ff3d 	bl	8003a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : BQ_INT_Pin */
  GPIO_InitStruct.Pin = BQ_INT_Pin;
 8001c0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c14:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BQ_INT_GPIO_Port, &GPIO_InitStruct);
 8001c1e:	f107 030c 	add.w	r3, r7, #12
 8001c22:	4619      	mov	r1, r3
 8001c24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c28:	f001 ff2e 	bl	8003a88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	2100      	movs	r1, #0
 8001c30:	2017      	movs	r0, #23
 8001c32:	f001 fef2 	bl	8003a1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c36:	2017      	movs	r0, #23
 8001c38:	f001 ff0b 	bl	8003a52 <HAL_NVIC_EnableIRQ>

}
 8001c3c:	bf00      	nop
 8001c3e:	3720      	adds	r7, #32
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40021000 	.word	0x40021000
 8001c48:	48000800 	.word	0x48000800

08001c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c50:	b672      	cpsid	i
}
 8001c52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <Error_Handler+0x8>

08001c56 <i2c_master_read_u16>:
// MAX17048 uses big endian register layout
#define SWAP16(x) ((uint16_t)(((x) << 8) | ((x) >> 8)))


bool i2c_master_read_u16(I2C_HandleTypeDef *i2cHandle, uint8_t device, uint8_t reg, uint16_t *buf )
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b088      	sub	sp, #32
 8001c5a:	af04      	add	r7, sp, #16
 8001c5c:	60f8      	str	r0, [r7, #12]
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	72fb      	strb	r3, [r7, #11]
 8001c64:	4613      	mov	r3, r2
 8001c66:	72bb      	strb	r3, [r7, #10]
	if ( HAL_I2C_Mem_Read( i2cHandle, device, reg, I2C_MEMADD_SIZE_16BIT, buf, 2, 10 ) != HAL_OK)
 8001c68:	7afb      	ldrb	r3, [r7, #11]
 8001c6a:	b299      	uxth	r1, r3
 8001c6c:	7abb      	ldrb	r3, [r7, #10]
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	230a      	movs	r3, #10
 8001c72:	9302      	str	r3, [sp, #8]
 8001c74:	2302      	movs	r3, #2
 8001c76:	9301      	str	r3, [sp, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f002 fa68 	bl	8004154 <HAL_I2C_Mem_Read>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <i2c_master_read_u16+0x38>
	{
		return 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	e000      	b.n	8001c90 <i2c_master_read_u16+0x3a>
	}

	return 1;
 8001c8e:	2301      	movs	r3, #1
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <i2c_master_write_u16>:

bool i2c_master_write_u16(I2C_HandleTypeDef *i2cHandle, uint8_t device, uint8_t reg, uint16_t *buf )
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b088      	sub	sp, #32
 8001c9c:	af04      	add	r7, sp, #16
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	72fb      	strb	r3, [r7, #11]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	72bb      	strb	r3, [r7, #10]
	if ( HAL_I2C_Mem_Write( i2cHandle, device, reg, I2C_MEMADD_SIZE_16BIT, buf, 2, 10 ) != HAL_OK)
 8001caa:	7afb      	ldrb	r3, [r7, #11]
 8001cac:	b299      	uxth	r1, r3
 8001cae:	7abb      	ldrb	r3, [r7, #10]
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	230a      	movs	r3, #10
 8001cb4:	9302      	str	r3, [sp, #8]
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	9301      	str	r3, [sp, #4]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	f002 f933 	bl	8003f2c <HAL_I2C_Mem_Write>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <i2c_master_write_u16+0x38>
	{
		return 0;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	e000      	b.n	8001cd2 <i2c_master_write_u16+0x3a>
	}

	return 1;
 8001cd0:	2301      	movs	r3, #1
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <read_reg>:


static inline bool read_reg(I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint16_t* out) {
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b084      	sub	sp, #16
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	60f8      	str	r0, [r7, #12]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	607a      	str	r2, [r7, #4]
 8001ce6:	72fb      	strb	r3, [r7, #11]
    if (!i2c_master_read_u16(i2cHandle, MAX_ADDR, reg, out)) {
 8001ce8:	7afa      	ldrb	r2, [r7, #11]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2136      	movs	r1, #54	; 0x36
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f7ff ffb1 	bl	8001c56 <i2c_master_read_u16>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	f083 0301 	eor.w	r3, r3, #1
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <read_reg+0x2a>
        return false;
 8001d00:	2300      	movs	r3, #0
 8001d02:	e00e      	b.n	8001d22 <read_reg+0x48>
    }

    *out = SWAP16(*out);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	b21a      	sxth	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	0a1b      	lsrs	r3, r3, #8
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	b21b      	sxth	r3, r3
 8001d16:	4313      	orrs	r3, r2
 8001d18:	b21b      	sxth	r3, r3
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	801a      	strh	r2, [r3, #0]
    return true;
 8001d20:	2301      	movs	r3, #1
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <write_reg>:

static inline bool write_reg(I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint16_t data) {
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b082      	sub	sp, #8
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
 8001d32:	460b      	mov	r3, r1
 8001d34:	70fb      	strb	r3, [r7, #3]
 8001d36:	4613      	mov	r3, r2
 8001d38:	803b      	strh	r3, [r7, #0]
    return i2c_master_write_u16(i2cHandle, MAX_ADDR, reg, SWAP16(data));
 8001d3a:	883b      	ldrh	r3, [r7, #0]
 8001d3c:	021b      	lsls	r3, r3, #8
 8001d3e:	b21a      	sxth	r2, r3
 8001d40:	883b      	ldrh	r3, [r7, #0]
 8001d42:	0a1b      	lsrs	r3, r3, #8
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	b21b      	sxth	r3, r3
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	b21b      	sxth	r3, r3
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	78fa      	ldrb	r2, [r7, #3]
 8001d50:	2136      	movs	r1, #54	; 0x36
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff ffa0 	bl	8001c98 <i2c_master_write_u16>
 8001d58:	4603      	mov	r3, r0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <modify_reg>:

static inline bool modify_reg(I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint16_t data, uint16_t mask) {
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b086      	sub	sp, #24
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	60f8      	str	r0, [r7, #12]
 8001d6a:	4608      	mov	r0, r1
 8001d6c:	4611      	mov	r1, r2
 8001d6e:	461a      	mov	r2, r3
 8001d70:	4603      	mov	r3, r0
 8001d72:	72fb      	strb	r3, [r7, #11]
 8001d74:	460b      	mov	r3, r1
 8001d76:	813b      	strh	r3, [r7, #8]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	80fb      	strh	r3, [r7, #6]
    uint16_t buf;
    if (!read_reg(i2cHandle, reg, &buf)) {
 8001d7c:	f107 0216 	add.w	r2, r7, #22
 8001d80:	7afb      	ldrb	r3, [r7, #11]
 8001d82:	4619      	mov	r1, r3
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f7ff ffa8 	bl	8001cda <read_reg>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	f083 0301 	eor.w	r3, r3, #1
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <modify_reg+0x38>
        return false;
 8001d96:	2300      	movs	r3, #0
 8001d98:	e017      	b.n	8001dca <modify_reg+0x68>
    }

    buf = (buf & ~mask) | (data & mask);
 8001d9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	b21a      	sxth	r2, r3
 8001da2:	8afb      	ldrh	r3, [r7, #22]
 8001da4:	b21b      	sxth	r3, r3
 8001da6:	4013      	ands	r3, r2
 8001da8:	b21a      	sxth	r2, r3
 8001daa:	8939      	ldrh	r1, [r7, #8]
 8001dac:	88fb      	ldrh	r3, [r7, #6]
 8001dae:	400b      	ands	r3, r1
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	b21b      	sxth	r3, r3
 8001db4:	4313      	orrs	r3, r2
 8001db6:	b21b      	sxth	r3, r3
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	82fb      	strh	r3, [r7, #22]
    return write_reg(i2cHandle, reg, buf);
 8001dbc:	8afa      	ldrh	r2, [r7, #22]
 8001dbe:	7afb      	ldrb	r3, [r7, #11]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	68f8      	ldr	r0, [r7, #12]
 8001dc4:	f7ff ffb1 	bl	8001d2a <write_reg>
 8001dc8:	4603      	mov	r3, r0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <max17048_is_present>:

bool max17048_is_present(I2C_HandleTypeDef *i2cHandle) {
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b084      	sub	sp, #16
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
    uint16_t data;
    if (!read_reg(i2cHandle, VERSION, &data)) {
 8001dda:	f107 030e 	add.w	r3, r7, #14
 8001dde:	461a      	mov	r2, r3
 8001de0:	2108      	movs	r1, #8
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff ff79 	bl	8001cda <read_reg>
 8001de8:	4603      	mov	r3, r0
 8001dea:	f083 0301 	eor.w	r3, r3, #1
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <max17048_is_present+0x26>
        return false;
 8001df4:	2300      	movs	r3, #0
 8001df6:	e009      	b.n	8001e0c <max17048_is_present+0x3a>
    }

    return ((data & VERSION_MSK) == PART_NUMBER);
 8001df8:	89fb      	ldrh	r3, [r7, #14]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8001e00:	4013      	ands	r3, r2
 8001e02:	2b10      	cmp	r3, #16
 8001e04:	bf0c      	ite	eq
 8001e06:	2301      	moveq	r3, #1
 8001e08:	2300      	movne	r3, #0
 8001e0a:	b2db      	uxtb	r3, r3
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <max17048_get_soc>:

    *mv = (max17048_voltage_t)(VCELL_TO_MV(data));
    return true;
}

bool max17048_get_soc(I2C_HandleTypeDef *i2cHandle, max17048_soc_t* percent) {
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
    uint16_t data;
    if (!read_reg(i2cHandle, SOC, &data)) {
 8001e1e:	f107 030e 	add.w	r3, r7, #14
 8001e22:	461a      	mov	r2, r3
 8001e24:	2104      	movs	r1, #4
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff ff57 	bl	8001cda <read_reg>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	f083 0301 	eor.w	r3, r3, #1
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <max17048_get_soc+0x28>
        return false;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	e006      	b.n	8001e4a <max17048_get_soc+0x36>
    }

    *percent = (max17048_soc_t)(data >> 8);
 8001e3c:	89fb      	ldrh	r3, [r7, #14]
 8001e3e:	0a1b      	lsrs	r3, r3, #8
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	701a      	strb	r2, [r3, #0]
    return true;
 8001e48:	2301      	movs	r3, #1
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <max17048_set_bat_low_soc>:

bool max17048_set_bat_low_soc(I2C_HandleTypeDef *i2cHandle, max17048_soc_t percent) {
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b084      	sub	sp, #16
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	70fb      	strb	r3, [r7, #3]
    if (percent < BAT_LOW_MIN || percent > BAT_LOW_MAX) {
 8001e5e:	78fb      	ldrb	r3, [r7, #3]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d002      	beq.n	8001e6a <max17048_set_bat_low_soc+0x18>
 8001e64:	78fb      	ldrb	r3, [r7, #3]
 8001e66:	2b20      	cmp	r3, #32
 8001e68:	d901      	bls.n	8001e6e <max17048_set_bat_low_soc+0x1c>
        return false;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	e011      	b.n	8001e92 <max17048_set_bat_low_soc+0x40>
    }
    uint16_t data = (uint16_t)((BAT_LOW_MAX - (percent % BAT_LOW_MAX)) & BAT_LOW_MSK);
 8001e6e:	78fb      	ldrb	r3, [r7, #3]
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	f003 031f 	and.w	r3, r3, #31
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	f1c3 0320 	rsb	r3, r3, #32
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	f003 031f 	and.w	r3, r3, #31
 8001e82:	81fb      	strh	r3, [r7, #14]

    return modify_reg(i2cHandle, CONFIG, data, BAT_LOW_MSK);
 8001e84:	89fa      	ldrh	r2, [r7, #14]
 8001e86:	231f      	movs	r3, #31
 8001e88:	210c      	movs	r1, #12
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff ff69 	bl	8001d62 <modify_reg>
 8001e90:	4603      	mov	r3, r0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <max17048_set_undervolted_voltage>:

bool max17048_set_undervolted_voltage(I2C_HandleTypeDef *i2cHandle, max17048_voltage_t mv) {
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	807b      	strh	r3, [r7, #2]
    uint16_t data = (uint16_t)(((mv / VALRT_RESOLUTION) << VALRT_MIN_POS) & VALRT_MIN_MSK);
 8001ea8:	887b      	ldrh	r3, [r7, #2]
 8001eaa:	4a0b      	ldr	r2, [pc, #44]	; (8001ed8 <max17048_set_undervolted_voltage+0x3c>)
 8001eac:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb0:	091b      	lsrs	r3, r3, #4
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	021b      	lsls	r3, r3, #8
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ebc:	81fb      	strh	r3, [r7, #14]

    return modify_reg(i2cHandle, VALRT, data, VALRT_MIN_MSK);
 8001ebe:	89fa      	ldrh	r2, [r7, #14]
 8001ec0:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001ec4:	2114      	movs	r1, #20
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff ff4b 	bl	8001d62 <modify_reg>
 8001ecc:	4603      	mov	r3, r0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	cccccccd 	.word	0xcccccccd

08001edc <max17048_set_overvolted_voltage>:

bool max17048_set_overvolted_voltage(I2C_HandleTypeDef *i2cHandle, max17048_voltage_t mv) {
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	807b      	strh	r3, [r7, #2]
    uint16_t data = (uint16_t)(((mv / VALRT_RESOLUTION) << VALRT_MAX_POS) & VALRT_MAX_MSK);
 8001ee8:	887b      	ldrh	r3, [r7, #2]
 8001eea:	4a09      	ldr	r2, [pc, #36]	; (8001f10 <max17048_set_overvolted_voltage+0x34>)
 8001eec:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef0:	091b      	lsrs	r3, r3, #4
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	81fb      	strh	r3, [r7, #14]

    return modify_reg(i2cHandle, VALRT, data, VALRT_MAX_MSK);
 8001ef8:	89fa      	ldrh	r2, [r7, #14]
 8001efa:	23ff      	movs	r3, #255	; 0xff
 8001efc:	2114      	movs	r1, #20
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff ff2f 	bl	8001d62 <modify_reg>
 8001f04:	4603      	mov	r3, r0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	cccccccd 	.word	0xcccccccd

08001f14 <max17048_set_reset_voltage>:

bool max17048_set_reset_voltage(I2C_HandleTypeDef *i2cHandle, max17048_voltage_t mv) {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	807b      	strh	r3, [r7, #2]
    uint16_t data = (uint16_t)(((mv / VRESET_RESOLUTION) << VRESET_POS) & VRESET_MSK);
 8001f20:	887b      	ldrh	r3, [r7, #2]
 8001f22:	4a0c      	ldr	r2, [pc, #48]	; (8001f54 <max17048_set_reset_voltage+0x40>)
 8001f24:	fba2 2303 	umull	r2, r3, r2, r3
 8001f28:	095b      	lsrs	r3, r3, #5
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	025b      	lsls	r3, r3, #9
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001f34:	f023 0301 	bic.w	r3, r3, #1
 8001f38:	81fb      	strh	r3, [r7, #14]

    return modify_reg(i2cHandle, VRESET_ID, data, VRESET_MSK);
 8001f3a:	89fa      	ldrh	r2, [r7, #14]
 8001f3c:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 8001f40:	2118      	movs	r1, #24
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff ff0d 	bl	8001d62 <modify_reg>
 8001f48:	4603      	mov	r3, r0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	cccccccd 	.word	0xcccccccd

08001f58 <max17048_set_soc_change_alert>:

bool max17048_set_soc_change_alert(I2C_HandleTypeDef *i2cHandle, bool enable) {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	460b      	mov	r3, r1
 8001f62:	70fb      	strb	r3, [r7, #3]
    uint16_t data = (uint16_t)((enable << ALSC_BIT_POS) & ALSC_BIT_MSK);
 8001f64:	78fb      	ldrb	r3, [r7, #3]
 8001f66:	019b      	lsls	r3, r3, #6
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f6e:	81fb      	strh	r3, [r7, #14]

    return modify_reg(i2cHandle, CONFIG, data, ALSC_BIT_MSK);
 8001f70:	89fa      	ldrh	r2, [r7, #14]
 8001f72:	2340      	movs	r3, #64	; 0x40
 8001f74:	210c      	movs	r1, #12
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7ff fef3 	bl	8001d62 <modify_reg>
 8001f7c:	4603      	mov	r3, r0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <max17048_set_voltage_reset_alert>:

bool max17048_set_voltage_reset_alert(I2C_HandleTypeDef *i2cHandle, bool enable) {
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b084      	sub	sp, #16
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	70fb      	strb	r3, [r7, #3]
    uint16_t data = (uint16_t)((enable << ENVR_BIT_POS) & ENVR_BIT_MSK);
 8001f92:	78fb      	ldrb	r3, [r7, #3]
 8001f94:	039b      	lsls	r3, r3, #14
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f9c:	81fb      	strh	r3, [r7, #14]

    return modify_reg(i2cHandle, STATUS, data, ENVR_BIT_MSK);
 8001f9e:	89fa      	ldrh	r2, [r7, #14]
 8001fa0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fa4:	211a      	movs	r1, #26
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff fedb 	bl	8001d62 <modify_reg>
 8001fac:	4603      	mov	r3, r0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <max17048_clear_alerts>:

bool max17048_clear_alerts(I2C_HandleTypeDef *i2cHandle) {
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b084      	sub	sp, #16
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
    bool ok = true;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	73fb      	strb	r3, [r7, #15]

    if (ok) ok = modify_reg(i2cHandle, STATUS, 0, ALRT_STATUS_MSK);
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d008      	beq.n	8001fda <max17048_clear_alerts+0x24>
 8001fc8:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 8001fcc:	2200      	movs	r2, #0
 8001fce:	211a      	movs	r1, #26
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff fec6 	bl	8001d62 <modify_reg>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	73fb      	strb	r3, [r7, #15]
    if (ok) ok = modify_reg(i2cHandle, CONFIG, 0, ALRT_BIT_MSK);
 8001fda:	7bfb      	ldrb	r3, [r7, #15]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d007      	beq.n	8001ff0 <max17048_clear_alerts+0x3a>
 8001fe0:	2320      	movs	r3, #32
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	210c      	movs	r1, #12
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff febb 	bl	8001d62 <modify_reg>
 8001fec:	4603      	mov	r3, r0
 8001fee:	73fb      	strb	r3, [r7, #15]

    return ok;
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
	...

08001ffc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002002:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <HAL_MspInit+0x44>)
 8002004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002006:	4a0e      	ldr	r2, [pc, #56]	; (8002040 <HAL_MspInit+0x44>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	6613      	str	r3, [r2, #96]	; 0x60
 800200e:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <HAL_MspInit+0x44>)
 8002010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	607b      	str	r3, [r7, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800201a:	4b09      	ldr	r3, [pc, #36]	; (8002040 <HAL_MspInit+0x44>)
 800201c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201e:	4a08      	ldr	r2, [pc, #32]	; (8002040 <HAL_MspInit+0x44>)
 8002020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002024:	6593      	str	r3, [r2, #88]	; 0x58
 8002026:	4b06      	ldr	r3, [pc, #24]	; (8002040 <HAL_MspInit+0x44>)
 8002028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202e:	603b      	str	r3, [r7, #0]
 8002030:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	40021000 	.word	0x40021000

08002044 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b0a0      	sub	sp, #128	; 0x80
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800205c:	f107 0310 	add.w	r3, r7, #16
 8002060:	225c      	movs	r2, #92	; 0x5c
 8002062:	2100      	movs	r1, #0
 8002064:	4618      	mov	r0, r3
 8002066:	f005 f843 	bl	80070f0 <memset>
  if(hadc->Instance==ADC1)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a1e      	ldr	r2, [pc, #120]	; (80020e8 <HAL_ADC_MspInit+0xa4>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d134      	bne.n	80020de <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002074:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002078:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800207a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800207e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002080:	f107 0310 	add.w	r3, r7, #16
 8002084:	4618      	mov	r0, r3
 8002086:	f003 fb21 	bl	80056cc <HAL_RCCEx_PeriphCLKConfig>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002090:	f7ff fddc 	bl	8001c4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002094:	4b15      	ldr	r3, [pc, #84]	; (80020ec <HAL_ADC_MspInit+0xa8>)
 8002096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002098:	4a14      	ldr	r2, [pc, #80]	; (80020ec <HAL_ADC_MspInit+0xa8>)
 800209a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800209e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020a0:	4b12      	ldr	r3, [pc, #72]	; (80020ec <HAL_ADC_MspInit+0xa8>)
 80020a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ac:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <HAL_ADC_MspInit+0xa8>)
 80020ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b0:	4a0e      	ldr	r2, [pc, #56]	; (80020ec <HAL_ADC_MspInit+0xa8>)
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020b8:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <HAL_ADC_MspInit+0xa8>)
 80020ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = NTC_IN_Pin;
 80020c4:	2310      	movs	r3, #16
 80020c6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80020c8:	230b      	movs	r3, #11
 80020ca:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(NTC_IN_GPIO_Port, &GPIO_InitStruct);
 80020d0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80020d4:	4619      	mov	r1, r3
 80020d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020da:	f001 fcd5 	bl	8003a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020de:	bf00      	nop
 80020e0:	3780      	adds	r7, #128	; 0x80
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	50040000 	.word	0x50040000
 80020ec:	40021000 	.word	0x40021000

080020f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b0a0      	sub	sp, #128	; 0x80
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002108:	f107 0310 	add.w	r3, r7, #16
 800210c:	225c      	movs	r2, #92	; 0x5c
 800210e:	2100      	movs	r1, #0
 8002110:	4618      	mov	r0, r3
 8002112:	f004 ffed 	bl	80070f0 <memset>
  if(hi2c->Instance==I2C1)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a1f      	ldr	r2, [pc, #124]	; (8002198 <HAL_I2C_MspInit+0xa8>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d137      	bne.n	8002190 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002120:	2340      	movs	r3, #64	; 0x40
 8002122:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002124:	2300      	movs	r3, #0
 8002126:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002128:	f107 0310 	add.w	r3, r7, #16
 800212c:	4618      	mov	r0, r3
 800212e:	f003 facd 	bl	80056cc <HAL_RCCEx_PeriphCLKConfig>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002138:	f7ff fd88 	bl	8001c4c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800213c:	4b17      	ldr	r3, [pc, #92]	; (800219c <HAL_I2C_MspInit+0xac>)
 800213e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002140:	4a16      	ldr	r2, [pc, #88]	; (800219c <HAL_I2C_MspInit+0xac>)
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002148:	4b14      	ldr	r3, [pc, #80]	; (800219c <HAL_I2C_MspInit+0xac>)
 800214a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002154:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002158:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800215a:	2312      	movs	r3, #18
 800215c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215e:	2300      	movs	r3, #0
 8002160:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002162:	2303      	movs	r3, #3
 8002164:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002166:	2304      	movs	r3, #4
 8002168:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800216e:	4619      	mov	r1, r3
 8002170:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002174:	f001 fc88 	bl	8003a88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002178:	4b08      	ldr	r3, [pc, #32]	; (800219c <HAL_I2C_MspInit+0xac>)
 800217a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217c:	4a07      	ldr	r2, [pc, #28]	; (800219c <HAL_I2C_MspInit+0xac>)
 800217e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002182:	6593      	str	r3, [r2, #88]	; 0x58
 8002184:	4b05      	ldr	r3, [pc, #20]	; (800219c <HAL_I2C_MspInit+0xac>)
 8002186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002190:	bf00      	nop
 8002192:	3780      	adds	r7, #128	; 0x80
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40005400 	.word	0x40005400
 800219c:	40021000 	.word	0x40021000

080021a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a23      	ldr	r2, [pc, #140]	; (800223c <HAL_TIM_Base_MspInit+0x9c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d114      	bne.n	80021dc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021b2:	4b23      	ldr	r3, [pc, #140]	; (8002240 <HAL_TIM_Base_MspInit+0xa0>)
 80021b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021b6:	4a22      	ldr	r2, [pc, #136]	; (8002240 <HAL_TIM_Base_MspInit+0xa0>)
 80021b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021bc:	6613      	str	r3, [r2, #96]	; 0x60
 80021be:	4b20      	ldr	r3, [pc, #128]	; (8002240 <HAL_TIM_Base_MspInit+0xa0>)
 80021c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2100      	movs	r1, #0
 80021ce:	2018      	movs	r0, #24
 80021d0:	f001 fc23 	bl	8003a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80021d4:	2018      	movs	r0, #24
 80021d6:	f001 fc3c 	bl	8003a52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80021da:	e02a      	b.n	8002232 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM2)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e4:	d10c      	bne.n	8002200 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021e6:	4b16      	ldr	r3, [pc, #88]	; (8002240 <HAL_TIM_Base_MspInit+0xa0>)
 80021e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ea:	4a15      	ldr	r2, [pc, #84]	; (8002240 <HAL_TIM_Base_MspInit+0xa0>)
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	6593      	str	r3, [r2, #88]	; 0x58
 80021f2:	4b13      	ldr	r3, [pc, #76]	; (8002240 <HAL_TIM_Base_MspInit+0xa0>)
 80021f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	613b      	str	r3, [r7, #16]
 80021fc:	693b      	ldr	r3, [r7, #16]
}
 80021fe:	e018      	b.n	8002232 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM15)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a0f      	ldr	r2, [pc, #60]	; (8002244 <HAL_TIM_Base_MspInit+0xa4>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d113      	bne.n	8002232 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800220a:	4b0d      	ldr	r3, [pc, #52]	; (8002240 <HAL_TIM_Base_MspInit+0xa0>)
 800220c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800220e:	4a0c      	ldr	r2, [pc, #48]	; (8002240 <HAL_TIM_Base_MspInit+0xa0>)
 8002210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002214:	6613      	str	r3, [r2, #96]	; 0x60
 8002216:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <HAL_TIM_Base_MspInit+0xa0>)
 8002218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800221a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002222:	2200      	movs	r2, #0
 8002224:	2100      	movs	r1, #0
 8002226:	2018      	movs	r0, #24
 8002228:	f001 fbf7 	bl	8003a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800222c:	2018      	movs	r0, #24
 800222e:	f001 fc10 	bl	8003a52 <HAL_NVIC_EnableIRQ>
}
 8002232:	bf00      	nop
 8002234:	3718      	adds	r7, #24
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40012c00 	.word	0x40012c00
 8002240:	40021000 	.word	0x40021000
 8002244:	40014000 	.word	0x40014000

08002248 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08a      	sub	sp, #40	; 0x28
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
 800225e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a23      	ldr	r2, [pc, #140]	; (80022f4 <HAL_TIM_MspPostInit+0xac>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d11e      	bne.n	80022a8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800226a:	4b23      	ldr	r3, [pc, #140]	; (80022f8 <HAL_TIM_MspPostInit+0xb0>)
 800226c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800226e:	4a22      	ldr	r2, [pc, #136]	; (80022f8 <HAL_TIM_MspPostInit+0xb0>)
 8002270:	f043 0301 	orr.w	r3, r3, #1
 8002274:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002276:	4b20      	ldr	r3, [pc, #128]	; (80022f8 <HAL_TIM_MspPostInit+0xb0>)
 8002278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	613b      	str	r3, [r7, #16]
 8002280:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = FAN_PWM_Pin;
 8002282:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002288:	2302      	movs	r3, #2
 800228a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228c:	2300      	movs	r3, #0
 800228e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002290:	2300      	movs	r3, #0
 8002292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002294:	2301      	movs	r3, #1
 8002296:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 8002298:	f107 0314 	add.w	r3, r7, #20
 800229c:	4619      	mov	r1, r3
 800229e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022a2:	f001 fbf1 	bl	8003a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80022a6:	e021      	b.n	80022ec <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022b0:	d11c      	bne.n	80022ec <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b2:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <HAL_TIM_MspPostInit+0xb0>)
 80022b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b6:	4a10      	ldr	r2, [pc, #64]	; (80022f8 <HAL_TIM_MspPostInit+0xb0>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022be:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <HAL_TIM_MspPostInit+0xb0>)
 80022c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RGB_R_Pin|RGB_G_Pin|RGB_B_Pin;
 80022ca:	2307      	movs	r3, #7
 80022cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ce:	2302      	movs	r3, #2
 80022d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d6:	2300      	movs	r3, #0
 80022d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022da:	2301      	movs	r3, #1
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022de:	f107 0314 	add.w	r3, r7, #20
 80022e2:	4619      	mov	r1, r3
 80022e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022e8:	f001 fbce 	bl	8003a88 <HAL_GPIO_Init>
}
 80022ec:	bf00      	nop
 80022ee:	3728      	adds	r7, #40	; 0x28
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40012c00 	.word	0x40012c00
 80022f8:	40021000 	.word	0x40021000

080022fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002300:	e7fe      	b.n	8002300 <NMI_Handler+0x4>

08002302 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002302:	b480      	push	{r7}
 8002304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002306:	e7fe      	b.n	8002306 <HardFault_Handler+0x4>

08002308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800230c:	e7fe      	b.n	800230c <MemManage_Handler+0x4>

0800230e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800230e:	b480      	push	{r7}
 8002310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002312:	e7fe      	b.n	8002312 <BusFault_Handler+0x4>

08002314 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002318:	e7fe      	b.n	8002318 <UsageFault_Handler+0x4>

0800231a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800231a:	b480      	push	{r7}
 800231c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800232c:	bf00      	nop
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002336:	b480      	push	{r7}
 8002338:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800233a:	bf00      	nop
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002348:	f000 f8b0 	bl	80024ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800234c:	bf00      	nop
 800234e:	bd80      	pop	{r7, pc}

08002350 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Power_Button_Pin);
 8002354:	2080      	movs	r0, #128	; 0x80
 8002356:	f001 fd41 	bl	8003ddc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BQ_INT_Pin);
 800235a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800235e:	f001 fd3d 	bl	8003ddc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MAX_ALRT_Pin);
 8002362:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002366:	f001 fd39 	bl	8003ddc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
	...

08002370 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002374:	4803      	ldr	r0, [pc, #12]	; (8002384 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8002376:	f003 fecd 	bl	8006114 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 800237a:	4803      	ldr	r0, [pc, #12]	; (8002388 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 800237c:	f003 feca 	bl	8006114 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002380:	bf00      	nop
 8002382:	bd80      	pop	{r7, pc}
 8002384:	20000184 	.word	0x20000184
 8002388:	2000021c 	.word	0x2000021c

0800238c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002390:	4b06      	ldr	r3, [pc, #24]	; (80023ac <SystemInit+0x20>)
 8002392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002396:	4a05      	ldr	r2, [pc, #20]	; (80023ac <SystemInit+0x20>)
 8002398:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800239c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80023a0:	bf00      	nop
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80023b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023b4:	f7ff ffea 	bl	800238c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023b8:	480c      	ldr	r0, [pc, #48]	; (80023ec <LoopForever+0x6>)
  ldr r1, =_edata
 80023ba:	490d      	ldr	r1, [pc, #52]	; (80023f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023bc:	4a0d      	ldr	r2, [pc, #52]	; (80023f4 <LoopForever+0xe>)
  movs r3, #0
 80023be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023c0:	e002      	b.n	80023c8 <LoopCopyDataInit>

080023c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023c6:	3304      	adds	r3, #4

080023c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023cc:	d3f9      	bcc.n	80023c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ce:	4a0a      	ldr	r2, [pc, #40]	; (80023f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023d0:	4c0a      	ldr	r4, [pc, #40]	; (80023fc <LoopForever+0x16>)
  movs r3, #0
 80023d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023d4:	e001      	b.n	80023da <LoopFillZerobss>

080023d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023d8:	3204      	adds	r2, #4

080023da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023dc:	d3fb      	bcc.n	80023d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023de:	f004 fe63 	bl	80070a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023e2:	f7fe ff6d 	bl	80012c0 <main>

080023e6 <LoopForever>:

LoopForever:
    b LoopForever
 80023e6:	e7fe      	b.n	80023e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80023e8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80023ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023f0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80023f4:	0800756c 	.word	0x0800756c
  ldr r2, =_sbss
 80023f8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80023fc:	20000278 	.word	0x20000278

08002400 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002400:	e7fe      	b.n	8002400 <ADC1_IRQHandler>

08002402 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002408:	2300      	movs	r3, #0
 800240a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800240c:	2003      	movs	r0, #3
 800240e:	f001 faf9 	bl	8003a04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002412:	200f      	movs	r0, #15
 8002414:	f000 f80e 	bl	8002434 <HAL_InitTick>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d002      	beq.n	8002424 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	71fb      	strb	r3, [r7, #7]
 8002422:	e001      	b.n	8002428 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002424:	f7ff fdea 	bl	8001ffc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002428:	79fb      	ldrb	r3, [r7, #7]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800243c:	2300      	movs	r3, #0
 800243e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002440:	4b17      	ldr	r3, [pc, #92]	; (80024a0 <HAL_InitTick+0x6c>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d023      	beq.n	8002490 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002448:	4b16      	ldr	r3, [pc, #88]	; (80024a4 <HAL_InitTick+0x70>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	4b14      	ldr	r3, [pc, #80]	; (80024a0 <HAL_InitTick+0x6c>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	4619      	mov	r1, r3
 8002452:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002456:	fbb3 f3f1 	udiv	r3, r3, r1
 800245a:	fbb2 f3f3 	udiv	r3, r2, r3
 800245e:	4618      	mov	r0, r3
 8002460:	f001 fb05 	bl	8003a6e <HAL_SYSTICK_Config>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10f      	bne.n	800248a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b0f      	cmp	r3, #15
 800246e:	d809      	bhi.n	8002484 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002470:	2200      	movs	r2, #0
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	f04f 30ff 	mov.w	r0, #4294967295
 8002478:	f001 facf 	bl	8003a1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800247c:	4a0a      	ldr	r2, [pc, #40]	; (80024a8 <HAL_InitTick+0x74>)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	e007      	b.n	8002494 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	73fb      	strb	r3, [r7, #15]
 8002488:	e004      	b.n	8002494 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	73fb      	strb	r3, [r7, #15]
 800248e:	e001      	b.n	8002494 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002494:	7bfb      	ldrb	r3, [r7, #15]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	2000000c 	.word	0x2000000c
 80024a4:	20000004 	.word	0x20000004
 80024a8:	20000008 	.word	0x20000008

080024ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024b0:	4b06      	ldr	r3, [pc, #24]	; (80024cc <HAL_IncTick+0x20>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	461a      	mov	r2, r3
 80024b6:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <HAL_IncTick+0x24>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4413      	add	r3, r2
 80024bc:	4a04      	ldr	r2, [pc, #16]	; (80024d0 <HAL_IncTick+0x24>)
 80024be:	6013      	str	r3, [r2, #0]
}
 80024c0:	bf00      	nop
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	2000000c 	.word	0x2000000c
 80024d0:	20000274 	.word	0x20000274

080024d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  return uwTick;
 80024d8:	4b03      	ldr	r3, [pc, #12]	; (80024e8 <HAL_GetTick+0x14>)
 80024da:	681b      	ldr	r3, [r3, #0]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	20000274 	.word	0x20000274

080024ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024f4:	f7ff ffee 	bl	80024d4 <HAL_GetTick>
 80024f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002504:	d005      	beq.n	8002512 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002506:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <HAL_Delay+0x44>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	461a      	mov	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4413      	add	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002512:	bf00      	nop
 8002514:	f7ff ffde 	bl	80024d4 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	429a      	cmp	r2, r3
 8002522:	d8f7      	bhi.n	8002514 <HAL_Delay+0x28>
  {
  }
}
 8002524:	bf00      	nop
 8002526:	bf00      	nop
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	2000000c 	.word	0x2000000c

08002534 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002538:	4b05      	ldr	r3, [pc, #20]	; (8002550 <HAL_ResumeTick+0x1c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a04      	ldr	r2, [pc, #16]	; (8002550 <HAL_ResumeTick+0x1c>)
 800253e:	f043 0302 	orr.w	r3, r3, #2
 8002542:	6013      	str	r3, [r2, #0]
}
 8002544:	bf00      	nop
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	e000e010 	.word	0xe000e010

08002554 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	431a      	orrs	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	609a      	str	r2, [r3, #8]
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
 8002582:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	431a      	orrs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	609a      	str	r2, [r3, #8]
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80025bc:	b480      	push	{r7}
 80025be:	b087      	sub	sp, #28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
 80025c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	3360      	adds	r3, #96	; 0x60
 80025ce:	461a      	mov	r2, r3
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	4b08      	ldr	r3, [pc, #32]	; (8002600 <LL_ADC_SetOffset+0x44>)
 80025de:	4013      	ands	r3, r2
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80025f4:	bf00      	nop
 80025f6:	371c      	adds	r7, #28
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	03fff000 	.word	0x03fff000

08002604 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3360      	adds	r3, #96	; 0x60
 8002612:	461a      	mov	r2, r3
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002624:	4618      	mov	r0, r3
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002630:	b480      	push	{r7}
 8002632:	b087      	sub	sp, #28
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	3360      	adds	r3, #96	; 0x60
 8002640:	461a      	mov	r2, r3
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	431a      	orrs	r2, r3
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800265a:	bf00      	nop
 800265c:	371c      	adds	r7, #28
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800267a:	2301      	movs	r3, #1
 800267c:	e000      	b.n	8002680 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800268c:	b480      	push	{r7}
 800268e:	b087      	sub	sp, #28
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	3330      	adds	r3, #48	; 0x30
 800269c:	461a      	mov	r2, r3
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	0a1b      	lsrs	r3, r3, #8
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	f003 030c 	and.w	r3, r3, #12
 80026a8:	4413      	add	r3, r2
 80026aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	f003 031f 	and.w	r3, r3, #31
 80026b6:	211f      	movs	r1, #31
 80026b8:	fa01 f303 	lsl.w	r3, r1, r3
 80026bc:	43db      	mvns	r3, r3
 80026be:	401a      	ands	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	0e9b      	lsrs	r3, r3, #26
 80026c4:	f003 011f 	and.w	r1, r3, #31
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	f003 031f 	and.w	r3, r3, #31
 80026ce:	fa01 f303 	lsl.w	r3, r1, r3
 80026d2:	431a      	orrs	r2, r3
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80026d8:	bf00      	nop
 80026da:	371c      	adds	r7, #28
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b087      	sub	sp, #28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	3314      	adds	r3, #20
 80026f4:	461a      	mov	r2, r3
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	0e5b      	lsrs	r3, r3, #25
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	4413      	add	r3, r2
 8002702:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	0d1b      	lsrs	r3, r3, #20
 800270c:	f003 031f 	and.w	r3, r3, #31
 8002710:	2107      	movs	r1, #7
 8002712:	fa01 f303 	lsl.w	r3, r1, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	401a      	ands	r2, r3
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	0d1b      	lsrs	r3, r3, #20
 800271e:	f003 031f 	and.w	r3, r3, #31
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	fa01 f303 	lsl.w	r3, r1, r3
 8002728:	431a      	orrs	r2, r3
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800272e:	bf00      	nop
 8002730:	371c      	adds	r7, #28
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
	...

0800273c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002754:	43db      	mvns	r3, r3
 8002756:	401a      	ands	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f003 0318 	and.w	r3, r3, #24
 800275e:	4908      	ldr	r1, [pc, #32]	; (8002780 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002760:	40d9      	lsrs	r1, r3
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	400b      	ands	r3, r1
 8002766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800276a:	431a      	orrs	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002772:	bf00      	nop
 8002774:	3714      	adds	r7, #20
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	0007ffff 	.word	0x0007ffff

08002784 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002794:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6093      	str	r3, [r2, #8]
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027bc:	d101      	bne.n	80027c2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80027be:	2301      	movs	r3, #1
 80027c0:	e000      	b.n	80027c4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80027e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002808:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800280c:	d101      	bne.n	8002812 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002830:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002834:	f043 0201 	orr.w	r2, r3, #1
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002858:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800285c:	f043 0202 	orr.w	r2, r3, #2
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <LL_ADC_IsEnabled+0x18>
 8002884:	2301      	movs	r3, #1
 8002886:	e000      	b.n	800288a <LL_ADC_IsEnabled+0x1a>
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d101      	bne.n	80028ae <LL_ADC_IsDisableOngoing+0x18>
 80028aa:	2301      	movs	r3, #1
 80028ac:	e000      	b.n	80028b0 <LL_ADC_IsDisableOngoing+0x1a>
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028d0:	f043 0204 	orr.w	r2, r3, #4
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b04      	cmp	r3, #4
 80028f6:	d101      	bne.n	80028fc <LL_ADC_REG_IsConversionOngoing+0x18>
 80028f8:	2301      	movs	r3, #1
 80028fa:	e000      	b.n	80028fe <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b08      	cmp	r3, #8
 800291c:	d101      	bne.n	8002922 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b088      	sub	sp, #32
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002938:	2300      	movs	r3, #0
 800293a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800293c:	2300      	movs	r3, #0
 800293e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e12c      	b.n	8002ba4 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002954:	2b00      	cmp	r3, #0
 8002956:	d109      	bne.n	800296c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7ff fb73 	bl	8002044 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff ff19 	bl	80027a8 <LL_ADC_IsDeepPowerDownEnabled>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d004      	beq.n	8002986 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff feff 	bl	8002784 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff ff34 	bl	80027f8 <LL_ADC_IsInternalRegulatorEnabled>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d115      	bne.n	80029c2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff ff18 	bl	80027d0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029a0:	4b82      	ldr	r3, [pc, #520]	; (8002bac <HAL_ADC_Init+0x27c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	099b      	lsrs	r3, r3, #6
 80029a6:	4a82      	ldr	r2, [pc, #520]	; (8002bb0 <HAL_ADC_Init+0x280>)
 80029a8:	fba2 2303 	umull	r2, r3, r2, r3
 80029ac:	099b      	lsrs	r3, r3, #6
 80029ae:	3301      	adds	r3, #1
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80029b4:	e002      	b.n	80029bc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	3b01      	subs	r3, #1
 80029ba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f9      	bne.n	80029b6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff ff16 	bl	80027f8 <LL_ADC_IsInternalRegulatorEnabled>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10d      	bne.n	80029ee <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d6:	f043 0210 	orr.w	r2, r3, #16
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e2:	f043 0201 	orr.w	r2, r3, #1
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff ff76 	bl	80028e4 <LL_ADC_REG_IsConversionOngoing>
 80029f8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fe:	f003 0310 	and.w	r3, r3, #16
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f040 80c5 	bne.w	8002b92 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f040 80c1 	bne.w	8002b92 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a14:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002a18:	f043 0202 	orr.w	r2, r3, #2
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff ff23 	bl	8002870 <LL_ADC_IsEnabled>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10b      	bne.n	8002a48 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a30:	4860      	ldr	r0, [pc, #384]	; (8002bb4 <HAL_ADC_Init+0x284>)
 8002a32:	f7ff ff1d 	bl	8002870 <LL_ADC_IsEnabled>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d105      	bne.n	8002a48 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	4619      	mov	r1, r3
 8002a42:	485d      	ldr	r0, [pc, #372]	; (8002bb8 <HAL_ADC_Init+0x288>)
 8002a44:	f7ff fd86 	bl	8002554 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	7e5b      	ldrb	r3, [r3, #25]
 8002a4c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a52:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002a58:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002a5e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a66:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d106      	bne.n	8002a84 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	045b      	lsls	r3, r3, #17
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d009      	beq.n	8002aa0 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a90:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a98:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68da      	ldr	r2, [r3, #12]
 8002aa6:	4b45      	ldr	r3, [pc, #276]	; (8002bbc <HAL_ADC_Init+0x28c>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6812      	ldr	r2, [r2, #0]
 8002aae:	69b9      	ldr	r1, [r7, #24]
 8002ab0:	430b      	orrs	r3, r1
 8002ab2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff ff13 	bl	80028e4 <LL_ADC_REG_IsConversionOngoing>
 8002abe:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff ff20 	bl	800290a <LL_ADC_INJ_IsConversionOngoing>
 8002aca:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d13d      	bne.n	8002b4e <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d13a      	bne.n	8002b4e <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002adc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ae4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002af4:	f023 0302 	bic.w	r3, r3, #2
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6812      	ldr	r2, [r2, #0]
 8002afc:	69b9      	ldr	r1, [r7, #24]
 8002afe:	430b      	orrs	r3, r1
 8002b00:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d118      	bne.n	8002b3e <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002b16:	f023 0304 	bic.w	r3, r3, #4
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b22:	4311      	orrs	r1, r2
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002b28:	4311      	orrs	r1, r2
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	431a      	orrs	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 0201 	orr.w	r2, r2, #1
 8002b3a:	611a      	str	r2, [r3, #16]
 8002b3c:	e007      	b.n	8002b4e <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	691a      	ldr	r2, [r3, #16]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 0201 	bic.w	r2, r2, #1
 8002b4c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d10c      	bne.n	8002b70 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5c:	f023 010f 	bic.w	r1, r3, #15
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	69db      	ldr	r3, [r3, #28]
 8002b64:	1e5a      	subs	r2, r3, #1
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	631a      	str	r2, [r3, #48]	; 0x30
 8002b6e:	e007      	b.n	8002b80 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 020f 	bic.w	r2, r2, #15
 8002b7e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b84:	f023 0303 	bic.w	r3, r3, #3
 8002b88:	f043 0201 	orr.w	r2, r3, #1
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	655a      	str	r2, [r3, #84]	; 0x54
 8002b90:	e007      	b.n	8002ba2 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b96:	f043 0210 	orr.w	r2, r3, #16
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ba2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3720      	adds	r7, #32
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	20000004 	.word	0x20000004
 8002bb0:	053e2d63 	.word	0x053e2d63
 8002bb4:	50040000 	.word	0x50040000
 8002bb8:	50040300 	.word	0x50040300
 8002bbc:	fff0c007 	.word	0xfff0c007

08002bc0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff fe89 	bl	80028e4 <LL_ADC_REG_IsConversionOngoing>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d14f      	bne.n	8002c78 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d101      	bne.n	8002be6 <HAL_ADC_Start+0x26>
 8002be2:	2302      	movs	r3, #2
 8002be4:	e04b      	b.n	8002c7e <HAL_ADC_Start+0xbe>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 fcc6 	bl	8003580 <ADC_Enable>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d137      	bne.n	8002c6e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c02:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c06:	f023 0301 	bic.w	r3, r3, #1
 8002c0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c1e:	d106      	bne.n	8002c2e <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c24:	f023 0206 	bic.w	r2, r3, #6
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	659a      	str	r2, [r3, #88]	; 0x58
 8002c2c:	e002      	b.n	8002c34 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	221c      	movs	r2, #28
 8002c3a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d007      	beq.n	8002c62 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c56:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c5a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff fe28 	bl	80028bc <LL_ADC_REG_StartConversion>
 8002c6c:	e006      	b.n	8002c7c <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002c76:	e001      	b.n	8002c7c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c78:	2302      	movs	r3, #2
 8002c7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b086      	sub	sp, #24
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
 8002c8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	2b08      	cmp	r3, #8
 8002c96:	d102      	bne.n	8002c9e <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002c98:	2308      	movs	r3, #8
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	e010      	b.n	8002cc0 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d007      	beq.n	8002cbc <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb0:	f043 0220 	orr.w	r2, r3, #32
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e06f      	b.n	8002d9c <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002cbc:	2304      	movs	r3, #4
 8002cbe:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002cc0:	f7ff fc08 	bl	80024d4 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002cc6:	e021      	b.n	8002d0c <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cce:	d01d      	beq.n	8002d0c <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002cd0:	f7ff fc00 	bl	80024d4 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d302      	bcc.n	8002ce6 <HAL_ADC_PollForConversion+0x60>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d112      	bne.n	8002d0c <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10b      	bne.n	8002d0c <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf8:	f043 0204 	orr.w	r2, r3, #4
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e047      	b.n	8002d9c <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	4013      	ands	r3, r2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0d6      	beq.n	8002cc8 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff fc9b 	bl	8002666 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d01c      	beq.n	8002d70 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	7e5b      	ldrb	r3, [r3, #25]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d118      	bne.n	8002d70 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0308 	and.w	r3, r3, #8
 8002d48:	2b08      	cmp	r3, #8
 8002d4a:	d111      	bne.n	8002d70 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d105      	bne.n	8002d70 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d68:	f043 0201 	orr.w	r2, r3, #1
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	2b08      	cmp	r3, #8
 8002d7c:	d104      	bne.n	8002d88 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2208      	movs	r2, #8
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	e008      	b.n	8002d9a <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d103      	bne.n	8002d9a <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	220c      	movs	r2, #12
 8002d98:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3718      	adds	r7, #24
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
	...

08002dc0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b0b6      	sub	sp, #216	; 0xd8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d101      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x22>
 8002dde:	2302      	movs	r3, #2
 8002de0:	e3b9      	b.n	8003556 <HAL_ADC_ConfigChannel+0x796>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff fd78 	bl	80028e4 <LL_ADC_REG_IsConversionOngoing>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f040 839e 	bne.w	8003538 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2b05      	cmp	r3, #5
 8002e02:	d824      	bhi.n	8002e4e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	3b02      	subs	r3, #2
 8002e0a:	2b03      	cmp	r3, #3
 8002e0c:	d81b      	bhi.n	8002e46 <HAL_ADC_ConfigChannel+0x86>
 8002e0e:	a201      	add	r2, pc, #4	; (adr r2, 8002e14 <HAL_ADC_ConfigChannel+0x54>)
 8002e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e14:	08002e25 	.word	0x08002e25
 8002e18:	08002e2d 	.word	0x08002e2d
 8002e1c:	08002e35 	.word	0x08002e35
 8002e20:	08002e3d 	.word	0x08002e3d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	220c      	movs	r2, #12
 8002e28:	605a      	str	r2, [r3, #4]
          break;
 8002e2a:	e011      	b.n	8002e50 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	2212      	movs	r2, #18
 8002e30:	605a      	str	r2, [r3, #4]
          break;
 8002e32:	e00d      	b.n	8002e50 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	2218      	movs	r2, #24
 8002e38:	605a      	str	r2, [r3, #4]
          break;
 8002e3a:	e009      	b.n	8002e50 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e42:	605a      	str	r2, [r3, #4]
          break;
 8002e44:	e004      	b.n	8002e50 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2206      	movs	r2, #6
 8002e4a:	605a      	str	r2, [r3, #4]
          break;
 8002e4c:	e000      	b.n	8002e50 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002e4e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6818      	ldr	r0, [r3, #0]
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	6859      	ldr	r1, [r3, #4]
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	f7ff fc15 	bl	800268c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff fd3c 	bl	80028e4 <LL_ADC_REG_IsConversionOngoing>
 8002e6c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff fd48 	bl	800290a <LL_ADC_INJ_IsConversionOngoing>
 8002e7a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e7e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f040 81a6 	bne.w	80031d4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f040 81a1 	bne.w	80031d4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6818      	ldr	r0, [r3, #0]
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	6819      	ldr	r1, [r3, #0]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	f7ff fc20 	bl	80026e4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	695a      	ldr	r2, [r3, #20]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	08db      	lsrs	r3, r3, #3
 8002eb0:	f003 0303 	and.w	r3, r3, #3
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	d00a      	beq.n	8002edc <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6818      	ldr	r0, [r3, #0]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	6919      	ldr	r1, [r3, #16]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002ed6:	f7ff fb71 	bl	80025bc <LL_ADC_SetOffset>
 8002eda:	e17b      	b.n	80031d4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff fb8e 	bl	8002604 <LL_ADC_GetOffsetChannel>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10a      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x148>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff fb83 	bl	8002604 <LL_ADC_GetOffsetChannel>
 8002efe:	4603      	mov	r3, r0
 8002f00:	0e9b      	lsrs	r3, r3, #26
 8002f02:	f003 021f 	and.w	r2, r3, #31
 8002f06:	e01e      	b.n	8002f46 <HAL_ADC_ConfigChannel+0x186>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff fb78 	bl	8002604 <LL_ADC_GetOffsetChannel>
 8002f14:	4603      	mov	r3, r0
 8002f16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f1e:	fa93 f3a3 	rbit	r3, r3
 8002f22:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002f2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002f36:	2320      	movs	r3, #32
 8002f38:	e004      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002f3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f3e:	fab3 f383 	clz	r3, r3
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d105      	bne.n	8002f5e <HAL_ADC_ConfigChannel+0x19e>
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	0e9b      	lsrs	r3, r3, #26
 8002f58:	f003 031f 	and.w	r3, r3, #31
 8002f5c:	e018      	b.n	8002f90 <HAL_ADC_ConfigChannel+0x1d0>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f6a:	fa93 f3a3 	rbit	r3, r3
 8002f6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002f72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002f7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002f82:	2320      	movs	r3, #32
 8002f84:	e004      	b.n	8002f90 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002f86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f8a:	fab3 f383 	clz	r3, r3
 8002f8e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d106      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff fb47 	bl	8002630 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff fb2b 	bl	8002604 <LL_ADC_GetOffsetChannel>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10a      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x20e>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff fb20 	bl	8002604 <LL_ADC_GetOffsetChannel>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	0e9b      	lsrs	r3, r3, #26
 8002fc8:	f003 021f 	and.w	r2, r3, #31
 8002fcc:	e01e      	b.n	800300c <HAL_ADC_ConfigChannel+0x24c>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff fb15 	bl	8002604 <LL_ADC_GetOffsetChannel>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002fe4:	fa93 f3a3 	rbit	r3, r3
 8002fe8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002fec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ff0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002ff4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002ffc:	2320      	movs	r3, #32
 8002ffe:	e004      	b.n	800300a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003000:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003004:	fab3 f383 	clz	r3, r3
 8003008:	b2db      	uxtb	r3, r3
 800300a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003014:	2b00      	cmp	r3, #0
 8003016:	d105      	bne.n	8003024 <HAL_ADC_ConfigChannel+0x264>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	0e9b      	lsrs	r3, r3, #26
 800301e:	f003 031f 	and.w	r3, r3, #31
 8003022:	e018      	b.n	8003056 <HAL_ADC_ConfigChannel+0x296>
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003030:	fa93 f3a3 	rbit	r3, r3
 8003034:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003038:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800303c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003040:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003048:	2320      	movs	r3, #32
 800304a:	e004      	b.n	8003056 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800304c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003050:	fab3 f383 	clz	r3, r3
 8003054:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003056:	429a      	cmp	r2, r3
 8003058:	d106      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2200      	movs	r2, #0
 8003060:	2101      	movs	r1, #1
 8003062:	4618      	mov	r0, r3
 8003064:	f7ff fae4 	bl	8002630 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2102      	movs	r1, #2
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff fac8 	bl	8002604 <LL_ADC_GetOffsetChannel>
 8003074:	4603      	mov	r3, r0
 8003076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10a      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x2d4>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2102      	movs	r1, #2
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff fabd 	bl	8002604 <LL_ADC_GetOffsetChannel>
 800308a:	4603      	mov	r3, r0
 800308c:	0e9b      	lsrs	r3, r3, #26
 800308e:	f003 021f 	and.w	r2, r3, #31
 8003092:	e01e      	b.n	80030d2 <HAL_ADC_ConfigChannel+0x312>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2102      	movs	r1, #2
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff fab2 	bl	8002604 <LL_ADC_GetOffsetChannel>
 80030a0:	4603      	mov	r3, r0
 80030a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030aa:	fa93 f3a3 	rbit	r3, r3
 80030ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80030b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80030ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80030c2:	2320      	movs	r3, #32
 80030c4:	e004      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80030c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80030ca:	fab3 f383 	clz	r3, r3
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d105      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x32a>
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	0e9b      	lsrs	r3, r3, #26
 80030e4:	f003 031f 	and.w	r3, r3, #31
 80030e8:	e016      	b.n	8003118 <HAL_ADC_ConfigChannel+0x358>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030f6:	fa93 f3a3 	rbit	r3, r3
 80030fa:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80030fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003102:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800310a:	2320      	movs	r3, #32
 800310c:	e004      	b.n	8003118 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800310e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003112:	fab3 f383 	clz	r3, r3
 8003116:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003118:	429a      	cmp	r2, r3
 800311a:	d106      	bne.n	800312a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2200      	movs	r2, #0
 8003122:	2102      	movs	r1, #2
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff fa83 	bl	8002630 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2103      	movs	r1, #3
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff fa67 	bl	8002604 <LL_ADC_GetOffsetChannel>
 8003136:	4603      	mov	r3, r0
 8003138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10a      	bne.n	8003156 <HAL_ADC_ConfigChannel+0x396>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2103      	movs	r1, #3
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff fa5c 	bl	8002604 <LL_ADC_GetOffsetChannel>
 800314c:	4603      	mov	r3, r0
 800314e:	0e9b      	lsrs	r3, r3, #26
 8003150:	f003 021f 	and.w	r2, r3, #31
 8003154:	e017      	b.n	8003186 <HAL_ADC_ConfigChannel+0x3c6>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2103      	movs	r1, #3
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff fa51 	bl	8002604 <LL_ADC_GetOffsetChannel>
 8003162:	4603      	mov	r3, r0
 8003164:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003166:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003168:	fa93 f3a3 	rbit	r3, r3
 800316c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800316e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003170:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003172:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003174:	2b00      	cmp	r3, #0
 8003176:	d101      	bne.n	800317c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003178:	2320      	movs	r3, #32
 800317a:	e003      	b.n	8003184 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800317c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800317e:	fab3 f383 	clz	r3, r3
 8003182:	b2db      	uxtb	r3, r3
 8003184:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800318e:	2b00      	cmp	r3, #0
 8003190:	d105      	bne.n	800319e <HAL_ADC_ConfigChannel+0x3de>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	0e9b      	lsrs	r3, r3, #26
 8003198:	f003 031f 	and.w	r3, r3, #31
 800319c:	e011      	b.n	80031c2 <HAL_ADC_ConfigChannel+0x402>
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031a6:	fa93 f3a3 	rbit	r3, r3
 80031aa:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80031ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80031b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80031b6:	2320      	movs	r3, #32
 80031b8:	e003      	b.n	80031c2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80031ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031bc:	fab3 f383 	clz	r3, r3
 80031c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d106      	bne.n	80031d4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2200      	movs	r2, #0
 80031cc:	2103      	movs	r1, #3
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff fa2e 	bl	8002630 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff fb49 	bl	8002870 <LL_ADC_IsEnabled>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f040 813f 	bne.w	8003464 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6818      	ldr	r0, [r3, #0]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	6819      	ldr	r1, [r3, #0]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	461a      	mov	r2, r3
 80031f4:	f7ff faa2 	bl	800273c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	4a8e      	ldr	r2, [pc, #568]	; (8003438 <HAL_ADC_ConfigChannel+0x678>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	f040 8130 	bne.w	8003464 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10b      	bne.n	800322c <HAL_ADC_ConfigChannel+0x46c>
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	0e9b      	lsrs	r3, r3, #26
 800321a:	3301      	adds	r3, #1
 800321c:	f003 031f 	and.w	r3, r3, #31
 8003220:	2b09      	cmp	r3, #9
 8003222:	bf94      	ite	ls
 8003224:	2301      	movls	r3, #1
 8003226:	2300      	movhi	r3, #0
 8003228:	b2db      	uxtb	r3, r3
 800322a:	e019      	b.n	8003260 <HAL_ADC_ConfigChannel+0x4a0>
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003234:	fa93 f3a3 	rbit	r3, r3
 8003238:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800323a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800323c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800323e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003244:	2320      	movs	r3, #32
 8003246:	e003      	b.n	8003250 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003248:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800324a:	fab3 f383 	clz	r3, r3
 800324e:	b2db      	uxtb	r3, r3
 8003250:	3301      	adds	r3, #1
 8003252:	f003 031f 	and.w	r3, r3, #31
 8003256:	2b09      	cmp	r3, #9
 8003258:	bf94      	ite	ls
 800325a:	2301      	movls	r3, #1
 800325c:	2300      	movhi	r3, #0
 800325e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003260:	2b00      	cmp	r3, #0
 8003262:	d079      	beq.n	8003358 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800326c:	2b00      	cmp	r3, #0
 800326e:	d107      	bne.n	8003280 <HAL_ADC_ConfigChannel+0x4c0>
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	0e9b      	lsrs	r3, r3, #26
 8003276:	3301      	adds	r3, #1
 8003278:	069b      	lsls	r3, r3, #26
 800327a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800327e:	e015      	b.n	80032ac <HAL_ADC_ConfigChannel+0x4ec>
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003288:	fa93 f3a3 	rbit	r3, r3
 800328c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800328e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003290:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003292:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003298:	2320      	movs	r3, #32
 800329a:	e003      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800329c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800329e:	fab3 f383 	clz	r3, r3
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	3301      	adds	r3, #1
 80032a6:	069b      	lsls	r3, r3, #26
 80032a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d109      	bne.n	80032cc <HAL_ADC_ConfigChannel+0x50c>
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	0e9b      	lsrs	r3, r3, #26
 80032be:	3301      	adds	r3, #1
 80032c0:	f003 031f 	and.w	r3, r3, #31
 80032c4:	2101      	movs	r1, #1
 80032c6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ca:	e017      	b.n	80032fc <HAL_ADC_ConfigChannel+0x53c>
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032d4:	fa93 f3a3 	rbit	r3, r3
 80032d8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80032da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032dc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80032de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80032e4:	2320      	movs	r3, #32
 80032e6:	e003      	b.n	80032f0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80032e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ea:	fab3 f383 	clz	r3, r3
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	3301      	adds	r3, #1
 80032f2:	f003 031f 	and.w	r3, r3, #31
 80032f6:	2101      	movs	r1, #1
 80032f8:	fa01 f303 	lsl.w	r3, r1, r3
 80032fc:	ea42 0103 	orr.w	r1, r2, r3
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10a      	bne.n	8003322 <HAL_ADC_ConfigChannel+0x562>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	0e9b      	lsrs	r3, r3, #26
 8003312:	3301      	adds	r3, #1
 8003314:	f003 021f 	and.w	r2, r3, #31
 8003318:	4613      	mov	r3, r2
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	4413      	add	r3, r2
 800331e:	051b      	lsls	r3, r3, #20
 8003320:	e018      	b.n	8003354 <HAL_ADC_ConfigChannel+0x594>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800332a:	fa93 f3a3 	rbit	r3, r3
 800332e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003332:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800333a:	2320      	movs	r3, #32
 800333c:	e003      	b.n	8003346 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800333e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003340:	fab3 f383 	clz	r3, r3
 8003344:	b2db      	uxtb	r3, r3
 8003346:	3301      	adds	r3, #1
 8003348:	f003 021f 	and.w	r2, r3, #31
 800334c:	4613      	mov	r3, r2
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	4413      	add	r3, r2
 8003352:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003354:	430b      	orrs	r3, r1
 8003356:	e080      	b.n	800345a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003360:	2b00      	cmp	r3, #0
 8003362:	d107      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x5b4>
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	0e9b      	lsrs	r3, r3, #26
 800336a:	3301      	adds	r3, #1
 800336c:	069b      	lsls	r3, r3, #26
 800336e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003372:	e015      	b.n	80033a0 <HAL_ADC_ConfigChannel+0x5e0>
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337c:	fa93 f3a3 	rbit	r3, r3
 8003380:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003384:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 800338c:	2320      	movs	r3, #32
 800338e:	e003      	b.n	8003398 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003392:	fab3 f383 	clz	r3, r3
 8003396:	b2db      	uxtb	r3, r3
 8003398:	3301      	adds	r3, #1
 800339a:	069b      	lsls	r3, r3, #26
 800339c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d109      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x600>
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	0e9b      	lsrs	r3, r3, #26
 80033b2:	3301      	adds	r3, #1
 80033b4:	f003 031f 	and.w	r3, r3, #31
 80033b8:	2101      	movs	r1, #1
 80033ba:	fa01 f303 	lsl.w	r3, r1, r3
 80033be:	e017      	b.n	80033f0 <HAL_ADC_ConfigChannel+0x630>
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	fa93 f3a3 	rbit	r3, r3
 80033cc:	61fb      	str	r3, [r7, #28]
  return result;
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80033d8:	2320      	movs	r3, #32
 80033da:	e003      	b.n	80033e4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033de:	fab3 f383 	clz	r3, r3
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	3301      	adds	r3, #1
 80033e6:	f003 031f 	and.w	r3, r3, #31
 80033ea:	2101      	movs	r1, #1
 80033ec:	fa01 f303 	lsl.w	r3, r1, r3
 80033f0:	ea42 0103 	orr.w	r1, r2, r3
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10d      	bne.n	800341c <HAL_ADC_ConfigChannel+0x65c>
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	0e9b      	lsrs	r3, r3, #26
 8003406:	3301      	adds	r3, #1
 8003408:	f003 021f 	and.w	r2, r3, #31
 800340c:	4613      	mov	r3, r2
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	4413      	add	r3, r2
 8003412:	3b1e      	subs	r3, #30
 8003414:	051b      	lsls	r3, r3, #20
 8003416:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800341a:	e01d      	b.n	8003458 <HAL_ADC_ConfigChannel+0x698>
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	fa93 f3a3 	rbit	r3, r3
 8003428:	613b      	str	r3, [r7, #16]
  return result;
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d103      	bne.n	800343c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003434:	2320      	movs	r3, #32
 8003436:	e005      	b.n	8003444 <HAL_ADC_ConfigChannel+0x684>
 8003438:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	fab3 f383 	clz	r3, r3
 8003442:	b2db      	uxtb	r3, r3
 8003444:	3301      	adds	r3, #1
 8003446:	f003 021f 	and.w	r2, r3, #31
 800344a:	4613      	mov	r3, r2
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	4413      	add	r3, r2
 8003450:	3b1e      	subs	r3, #30
 8003452:	051b      	lsls	r3, r3, #20
 8003454:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003458:	430b      	orrs	r3, r1
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	6892      	ldr	r2, [r2, #8]
 800345e:	4619      	mov	r1, r3
 8003460:	f7ff f940 	bl	80026e4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	4b3d      	ldr	r3, [pc, #244]	; (8003560 <HAL_ADC_ConfigChannel+0x7a0>)
 800346a:	4013      	ands	r3, r2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d06c      	beq.n	800354a <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003470:	483c      	ldr	r0, [pc, #240]	; (8003564 <HAL_ADC_ConfigChannel+0x7a4>)
 8003472:	f7ff f895 	bl	80025a0 <LL_ADC_GetCommonPathInternalCh>
 8003476:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a3a      	ldr	r2, [pc, #232]	; (8003568 <HAL_ADC_ConfigChannel+0x7a8>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d127      	bne.n	80034d4 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003484:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003488:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d121      	bne.n	80034d4 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a35      	ldr	r2, [pc, #212]	; (800356c <HAL_ADC_ConfigChannel+0x7ac>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d157      	bne.n	800354a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800349a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800349e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034a2:	4619      	mov	r1, r3
 80034a4:	482f      	ldr	r0, [pc, #188]	; (8003564 <HAL_ADC_ConfigChannel+0x7a4>)
 80034a6:	f7ff f868 	bl	800257a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034aa:	4b31      	ldr	r3, [pc, #196]	; (8003570 <HAL_ADC_ConfigChannel+0x7b0>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	099b      	lsrs	r3, r3, #6
 80034b0:	4a30      	ldr	r2, [pc, #192]	; (8003574 <HAL_ADC_ConfigChannel+0x7b4>)
 80034b2:	fba2 2303 	umull	r2, r3, r2, r3
 80034b6:	099b      	lsrs	r3, r3, #6
 80034b8:	1c5a      	adds	r2, r3, #1
 80034ba:	4613      	mov	r3, r2
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	4413      	add	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80034c4:	e002      	b.n	80034cc <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	3b01      	subs	r3, #1
 80034ca:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1f9      	bne.n	80034c6 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034d2:	e03a      	b.n	800354a <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a27      	ldr	r2, [pc, #156]	; (8003578 <HAL_ADC_ConfigChannel+0x7b8>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d113      	bne.n	8003506 <HAL_ADC_ConfigChannel+0x746>
 80034de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10d      	bne.n	8003506 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a1f      	ldr	r2, [pc, #124]	; (800356c <HAL_ADC_ConfigChannel+0x7ac>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d12a      	bne.n	800354a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034fc:	4619      	mov	r1, r3
 80034fe:	4819      	ldr	r0, [pc, #100]	; (8003564 <HAL_ADC_ConfigChannel+0x7a4>)
 8003500:	f7ff f83b 	bl	800257a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003504:	e021      	b.n	800354a <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a1c      	ldr	r2, [pc, #112]	; (800357c <HAL_ADC_ConfigChannel+0x7bc>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d11c      	bne.n	800354a <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003510:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003514:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d116      	bne.n	800354a <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a12      	ldr	r2, [pc, #72]	; (800356c <HAL_ADC_ConfigChannel+0x7ac>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d111      	bne.n	800354a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003526:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800352a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800352e:	4619      	mov	r1, r3
 8003530:	480c      	ldr	r0, [pc, #48]	; (8003564 <HAL_ADC_ConfigChannel+0x7a4>)
 8003532:	f7ff f822 	bl	800257a <LL_ADC_SetCommonPathInternalCh>
 8003536:	e008      	b.n	800354a <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800353c:	f043 0220 	orr.w	r2, r3, #32
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003552:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003556:	4618      	mov	r0, r3
 8003558:	37d8      	adds	r7, #216	; 0xd8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	80080000 	.word	0x80080000
 8003564:	50040300 	.word	0x50040300
 8003568:	c7520000 	.word	0xc7520000
 800356c:	50040000 	.word	0x50040000
 8003570:	20000004 	.word	0x20000004
 8003574:	053e2d63 	.word	0x053e2d63
 8003578:	cb840000 	.word	0xcb840000
 800357c:	80000001 	.word	0x80000001

08003580 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003588:	2300      	movs	r3, #0
 800358a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff f96d 	bl	8002870 <LL_ADC_IsEnabled>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d169      	bne.n	8003670 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689a      	ldr	r2, [r3, #8]
 80035a2:	4b36      	ldr	r3, [pc, #216]	; (800367c <ADC_Enable+0xfc>)
 80035a4:	4013      	ands	r3, r2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00d      	beq.n	80035c6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ae:	f043 0210 	orr.w	r2, r3, #16
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ba:	f043 0201 	orr.w	r2, r3, #1
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e055      	b.n	8003672 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff f928 	bl	8002820 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80035d0:	482b      	ldr	r0, [pc, #172]	; (8003680 <ADC_Enable+0x100>)
 80035d2:	f7fe ffe5 	bl	80025a0 <LL_ADC_GetCommonPathInternalCh>
 80035d6:	4603      	mov	r3, r0
 80035d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d013      	beq.n	8003608 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035e0:	4b28      	ldr	r3, [pc, #160]	; (8003684 <ADC_Enable+0x104>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	099b      	lsrs	r3, r3, #6
 80035e6:	4a28      	ldr	r2, [pc, #160]	; (8003688 <ADC_Enable+0x108>)
 80035e8:	fba2 2303 	umull	r2, r3, r2, r3
 80035ec:	099b      	lsrs	r3, r3, #6
 80035ee:	1c5a      	adds	r2, r3, #1
 80035f0:	4613      	mov	r3, r2
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	4413      	add	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80035fa:	e002      	b.n	8003602 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	3b01      	subs	r3, #1
 8003600:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1f9      	bne.n	80035fc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003608:	f7fe ff64 	bl	80024d4 <HAL_GetTick>
 800360c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800360e:	e028      	b.n	8003662 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff f92b 	bl	8002870 <LL_ADC_IsEnabled>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d104      	bne.n	800362a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4618      	mov	r0, r3
 8003626:	f7ff f8fb 	bl	8002820 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800362a:	f7fe ff53 	bl	80024d4 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d914      	bls.n	8003662 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b01      	cmp	r3, #1
 8003644:	d00d      	beq.n	8003662 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364a:	f043 0210 	orr.w	r2, r3, #16
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003656:	f043 0201 	orr.w	r2, r3, #1
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e007      	b.n	8003672 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b01      	cmp	r3, #1
 800366e:	d1cf      	bne.n	8003610 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	8000003f 	.word	0x8000003f
 8003680:	50040300 	.word	0x50040300
 8003684:	20000004 	.word	0x20000004
 8003688:	053e2d63 	.word	0x053e2d63

0800368c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff f8fc 	bl	8002896 <LL_ADC_IsDisableOngoing>
 800369e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff f8e3 	bl	8002870 <LL_ADC_IsEnabled>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d047      	beq.n	8003740 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d144      	bne.n	8003740 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f003 030d 	and.w	r3, r3, #13
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d10c      	bne.n	80036de <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff f8bd 	bl	8002848 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2203      	movs	r2, #3
 80036d4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036d6:	f7fe fefd 	bl	80024d4 <HAL_GetTick>
 80036da:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036dc:	e029      	b.n	8003732 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e2:	f043 0210 	orr.w	r2, r3, #16
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ee:	f043 0201 	orr.w	r2, r3, #1
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e023      	b.n	8003742 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80036fa:	f7fe feeb 	bl	80024d4 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d914      	bls.n	8003732 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00d      	beq.n	8003732 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371a:	f043 0210 	orr.w	r2, r3, #16
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003726:	f043 0201 	orr.w	r2, r3, #1
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e007      	b.n	8003742 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1dc      	bne.n	80036fa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <LL_ADC_StartCalibration>:
{
 800374a:	b480      	push	{r7}
 800374c:	b083      	sub	sp, #12
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800375c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003766:	4313      	orrs	r3, r2
 8003768:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	609a      	str	r2, [r3, #8]
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <LL_ADC_IsCalibrationOnGoing>:
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800378c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003790:	d101      	bne.n	8003796 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003792:	2301      	movs	r3, #1
 8003794:	e000      	b.n	8003798 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80037ae:	2300      	movs	r3, #0
 80037b0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_ADCEx_Calibration_Start+0x1c>
 80037bc:	2302      	movs	r3, #2
 80037be:	e04d      	b.n	800385c <HAL_ADCEx_Calibration_Start+0xb8>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f7ff ff5f 	bl	800368c <ADC_Disable>
 80037ce:	4603      	mov	r3, r0
 80037d0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80037d2:	7bfb      	ldrb	r3, [r7, #15]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d136      	bne.n	8003846 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037dc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80037e0:	f023 0302 	bic.w	r3, r3, #2
 80037e4:	f043 0202 	orr.w	r2, r3, #2
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6839      	ldr	r1, [r7, #0]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff ffa9 	bl	800374a <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80037f8:	e014      	b.n	8003824 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	3301      	adds	r3, #1
 80037fe:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8003806:	d30d      	bcc.n	8003824 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380c:	f023 0312 	bic.w	r3, r3, #18
 8003810:	f043 0210 	orr.w	r2, r3, #16
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e01b      	b.n	800385c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4618      	mov	r0, r3
 800382a:	f7ff ffa7 	bl	800377c <LL_ADC_IsCalibrationOnGoing>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1e2      	bne.n	80037fa <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003838:	f023 0303 	bic.w	r3, r3, #3
 800383c:	f043 0201 	orr.w	r2, r3, #1
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	655a      	str	r2, [r3, #84]	; 0x54
 8003844:	e005      	b.n	8003852 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384a:	f043 0210 	orr.w	r2, r3, #16
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800385a:	7bfb      	ldrb	r3, [r7, #15]
}
 800385c:	4618      	mov	r0, r3
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f003 0307 	and.w	r3, r3, #7
 8003872:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003874:	4b0c      	ldr	r3, [pc, #48]	; (80038a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003880:	4013      	ands	r3, r2
 8003882:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800388c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003896:	4a04      	ldr	r2, [pc, #16]	; (80038a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	60d3      	str	r3, [r2, #12]
}
 800389c:	bf00      	nop
 800389e:	3714      	adds	r7, #20
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	e000ed00 	.word	0xe000ed00

080038ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038b0:	4b04      	ldr	r3, [pc, #16]	; (80038c4 <__NVIC_GetPriorityGrouping+0x18>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	0a1b      	lsrs	r3, r3, #8
 80038b6:	f003 0307 	and.w	r3, r3, #7
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	e000ed00 	.word	0xe000ed00

080038c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	4603      	mov	r3, r0
 80038d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	db0b      	blt.n	80038f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038da:	79fb      	ldrb	r3, [r7, #7]
 80038dc:	f003 021f 	and.w	r2, r3, #31
 80038e0:	4907      	ldr	r1, [pc, #28]	; (8003900 <__NVIC_EnableIRQ+0x38>)
 80038e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e6:	095b      	lsrs	r3, r3, #5
 80038e8:	2001      	movs	r0, #1
 80038ea:	fa00 f202 	lsl.w	r2, r0, r2
 80038ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038f2:	bf00      	nop
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	e000e100 	.word	0xe000e100

08003904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	6039      	str	r1, [r7, #0]
 800390e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003914:	2b00      	cmp	r3, #0
 8003916:	db0a      	blt.n	800392e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	b2da      	uxtb	r2, r3
 800391c:	490c      	ldr	r1, [pc, #48]	; (8003950 <__NVIC_SetPriority+0x4c>)
 800391e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003922:	0112      	lsls	r2, r2, #4
 8003924:	b2d2      	uxtb	r2, r2
 8003926:	440b      	add	r3, r1
 8003928:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800392c:	e00a      	b.n	8003944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	b2da      	uxtb	r2, r3
 8003932:	4908      	ldr	r1, [pc, #32]	; (8003954 <__NVIC_SetPriority+0x50>)
 8003934:	79fb      	ldrb	r3, [r7, #7]
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	3b04      	subs	r3, #4
 800393c:	0112      	lsls	r2, r2, #4
 800393e:	b2d2      	uxtb	r2, r2
 8003940:	440b      	add	r3, r1
 8003942:	761a      	strb	r2, [r3, #24]
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	e000e100 	.word	0xe000e100
 8003954:	e000ed00 	.word	0xe000ed00

08003958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003958:	b480      	push	{r7}
 800395a:	b089      	sub	sp, #36	; 0x24
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f1c3 0307 	rsb	r3, r3, #7
 8003972:	2b04      	cmp	r3, #4
 8003974:	bf28      	it	cs
 8003976:	2304      	movcs	r3, #4
 8003978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	3304      	adds	r3, #4
 800397e:	2b06      	cmp	r3, #6
 8003980:	d902      	bls.n	8003988 <NVIC_EncodePriority+0x30>
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	3b03      	subs	r3, #3
 8003986:	e000      	b.n	800398a <NVIC_EncodePriority+0x32>
 8003988:	2300      	movs	r3, #0
 800398a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800398c:	f04f 32ff 	mov.w	r2, #4294967295
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	43da      	mvns	r2, r3
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	401a      	ands	r2, r3
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039a0:	f04f 31ff 	mov.w	r1, #4294967295
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	fa01 f303 	lsl.w	r3, r1, r3
 80039aa:	43d9      	mvns	r1, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039b0:	4313      	orrs	r3, r2
         );
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3724      	adds	r7, #36	; 0x24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
	...

080039c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3b01      	subs	r3, #1
 80039cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039d0:	d301      	bcc.n	80039d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039d2:	2301      	movs	r3, #1
 80039d4:	e00f      	b.n	80039f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039d6:	4a0a      	ldr	r2, [pc, #40]	; (8003a00 <SysTick_Config+0x40>)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	3b01      	subs	r3, #1
 80039dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039de:	210f      	movs	r1, #15
 80039e0:	f04f 30ff 	mov.w	r0, #4294967295
 80039e4:	f7ff ff8e 	bl	8003904 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039e8:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <SysTick_Config+0x40>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039ee:	4b04      	ldr	r3, [pc, #16]	; (8003a00 <SysTick_Config+0x40>)
 80039f0:	2207      	movs	r2, #7
 80039f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	e000e010 	.word	0xe000e010

08003a04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f7ff ff29 	bl	8003864 <__NVIC_SetPriorityGrouping>
}
 8003a12:	bf00      	nop
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b086      	sub	sp, #24
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	4603      	mov	r3, r0
 8003a22:	60b9      	str	r1, [r7, #8]
 8003a24:	607a      	str	r2, [r7, #4]
 8003a26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a2c:	f7ff ff3e 	bl	80038ac <__NVIC_GetPriorityGrouping>
 8003a30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	68b9      	ldr	r1, [r7, #8]
 8003a36:	6978      	ldr	r0, [r7, #20]
 8003a38:	f7ff ff8e 	bl	8003958 <NVIC_EncodePriority>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a42:	4611      	mov	r1, r2
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff ff5d 	bl	8003904 <__NVIC_SetPriority>
}
 8003a4a:	bf00      	nop
 8003a4c:	3718      	adds	r7, #24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b082      	sub	sp, #8
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	4603      	mov	r3, r0
 8003a5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff ff31 	bl	80038c8 <__NVIC_EnableIRQ>
}
 8003a66:	bf00      	nop
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b082      	sub	sp, #8
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7ff ffa2 	bl	80039c0 <SysTick_Config>
 8003a7c:	4603      	mov	r3, r0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
	...

08003a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b087      	sub	sp, #28
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a92:	2300      	movs	r3, #0
 8003a94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a96:	e154      	b.n	8003d42 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 8146 	beq.w	8003d3c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f003 0303 	and.w	r3, r3, #3
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d005      	beq.n	8003ac8 <HAL_GPIO_Init+0x40>
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f003 0303 	and.w	r3, r3, #3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d130      	bne.n	8003b2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	2203      	movs	r2, #3
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	4013      	ands	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	68da      	ldr	r2, [r3, #12]
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003afe:	2201      	movs	r2, #1
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	43db      	mvns	r3, r3
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	091b      	lsrs	r3, r3, #4
 8003b14:	f003 0201 	and.w	r2, r3, #1
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f003 0303 	and.w	r3, r3, #3
 8003b32:	2b03      	cmp	r3, #3
 8003b34:	d017      	beq.n	8003b66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	2203      	movs	r2, #3
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	43db      	mvns	r3, r3
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	689a      	ldr	r2, [r3, #8]
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f003 0303 	and.w	r3, r3, #3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d123      	bne.n	8003bba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	08da      	lsrs	r2, r3, #3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	3208      	adds	r2, #8
 8003b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f003 0307 	and.w	r3, r3, #7
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	220f      	movs	r2, #15
 8003b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8e:	43db      	mvns	r3, r3
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	4013      	ands	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	691a      	ldr	r2, [r3, #16]
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	08da      	lsrs	r2, r3, #3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	3208      	adds	r2, #8
 8003bb4:	6939      	ldr	r1, [r7, #16]
 8003bb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	2203      	movs	r2, #3
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bca:	43db      	mvns	r3, r3
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f003 0203 	and.w	r2, r3, #3
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	fa02 f303 	lsl.w	r3, r2, r3
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f000 80a0 	beq.w	8003d3c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bfc:	4b58      	ldr	r3, [pc, #352]	; (8003d60 <HAL_GPIO_Init+0x2d8>)
 8003bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c00:	4a57      	ldr	r2, [pc, #348]	; (8003d60 <HAL_GPIO_Init+0x2d8>)
 8003c02:	f043 0301 	orr.w	r3, r3, #1
 8003c06:	6613      	str	r3, [r2, #96]	; 0x60
 8003c08:	4b55      	ldr	r3, [pc, #340]	; (8003d60 <HAL_GPIO_Init+0x2d8>)
 8003c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	60bb      	str	r3, [r7, #8]
 8003c12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003c14:	4a53      	ldr	r2, [pc, #332]	; (8003d64 <HAL_GPIO_Init+0x2dc>)
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	089b      	lsrs	r3, r3, #2
 8003c1a:	3302      	adds	r3, #2
 8003c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f003 0303 	and.w	r3, r3, #3
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	220f      	movs	r2, #15
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	43db      	mvns	r3, r3
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	4013      	ands	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003c3e:	d019      	beq.n	8003c74 <HAL_GPIO_Init+0x1ec>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a49      	ldr	r2, [pc, #292]	; (8003d68 <HAL_GPIO_Init+0x2e0>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d013      	beq.n	8003c70 <HAL_GPIO_Init+0x1e8>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a48      	ldr	r2, [pc, #288]	; (8003d6c <HAL_GPIO_Init+0x2e4>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d00d      	beq.n	8003c6c <HAL_GPIO_Init+0x1e4>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a47      	ldr	r2, [pc, #284]	; (8003d70 <HAL_GPIO_Init+0x2e8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d007      	beq.n	8003c68 <HAL_GPIO_Init+0x1e0>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a46      	ldr	r2, [pc, #280]	; (8003d74 <HAL_GPIO_Init+0x2ec>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d101      	bne.n	8003c64 <HAL_GPIO_Init+0x1dc>
 8003c60:	2304      	movs	r3, #4
 8003c62:	e008      	b.n	8003c76 <HAL_GPIO_Init+0x1ee>
 8003c64:	2307      	movs	r3, #7
 8003c66:	e006      	b.n	8003c76 <HAL_GPIO_Init+0x1ee>
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e004      	b.n	8003c76 <HAL_GPIO_Init+0x1ee>
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	e002      	b.n	8003c76 <HAL_GPIO_Init+0x1ee>
 8003c70:	2301      	movs	r3, #1
 8003c72:	e000      	b.n	8003c76 <HAL_GPIO_Init+0x1ee>
 8003c74:	2300      	movs	r3, #0
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	f002 0203 	and.w	r2, r2, #3
 8003c7c:	0092      	lsls	r2, r2, #2
 8003c7e:	4093      	lsls	r3, r2
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c86:	4937      	ldr	r1, [pc, #220]	; (8003d64 <HAL_GPIO_Init+0x2dc>)
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	089b      	lsrs	r3, r3, #2
 8003c8c:	3302      	adds	r3, #2
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c94:	4b38      	ldr	r3, [pc, #224]	; (8003d78 <HAL_GPIO_Init+0x2f0>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003cb8:	4a2f      	ldr	r2, [pc, #188]	; (8003d78 <HAL_GPIO_Init+0x2f0>)
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003cbe:	4b2e      	ldr	r3, [pc, #184]	; (8003d78 <HAL_GPIO_Init+0x2f0>)
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	43db      	mvns	r3, r3
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ce2:	4a25      	ldr	r2, [pc, #148]	; (8003d78 <HAL_GPIO_Init+0x2f0>)
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003ce8:	4b23      	ldr	r3, [pc, #140]	; (8003d78 <HAL_GPIO_Init+0x2f0>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	43db      	mvns	r3, r3
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d003      	beq.n	8003d0c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d0c:	4a1a      	ldr	r2, [pc, #104]	; (8003d78 <HAL_GPIO_Init+0x2f0>)
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003d12:	4b19      	ldr	r3, [pc, #100]	; (8003d78 <HAL_GPIO_Init+0x2f0>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	43db      	mvns	r3, r3
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d36:	4a10      	ldr	r2, [pc, #64]	; (8003d78 <HAL_GPIO_Init+0x2f0>)
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	fa22 f303 	lsr.w	r3, r2, r3
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f47f aea3 	bne.w	8003a98 <HAL_GPIO_Init+0x10>
  }
}
 8003d52:	bf00      	nop
 8003d54:	bf00      	nop
 8003d56:	371c      	adds	r7, #28
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	40021000 	.word	0x40021000
 8003d64:	40010000 	.word	0x40010000
 8003d68:	48000400 	.word	0x48000400
 8003d6c:	48000800 	.word	0x48000800
 8003d70:	48000c00 	.word	0x48000c00
 8003d74:	48001000 	.word	0x48001000
 8003d78:	40010400 	.word	0x40010400

08003d7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	460b      	mov	r3, r1
 8003d86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	691a      	ldr	r2, [r3, #16]
 8003d8c:	887b      	ldrh	r3, [r7, #2]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d002      	beq.n	8003d9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d94:	2301      	movs	r3, #1
 8003d96:	73fb      	strb	r3, [r7, #15]
 8003d98:	e001      	b.n	8003d9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	460b      	mov	r3, r1
 8003db6:	807b      	strh	r3, [r7, #2]
 8003db8:	4613      	mov	r3, r2
 8003dba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003dbc:	787b      	ldrb	r3, [r7, #1]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003dc2:	887a      	ldrh	r2, [r7, #2]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003dc8:	e002      	b.n	8003dd0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003dca:	887a      	ldrh	r2, [r7, #2]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	4603      	mov	r3, r0
 8003de4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003de6:	4b08      	ldr	r3, [pc, #32]	; (8003e08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003de8:	695a      	ldr	r2, [r3, #20]
 8003dea:	88fb      	ldrh	r3, [r7, #6]
 8003dec:	4013      	ands	r3, r2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d006      	beq.n	8003e00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003df2:	4a05      	ldr	r2, [pc, #20]	; (8003e08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003df4:	88fb      	ldrh	r3, [r7, #6]
 8003df6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003df8:	88fb      	ldrh	r3, [r7, #6]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7fc fff0 	bl	8000de0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003e00:	bf00      	nop
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40010400 	.word	0x40010400

08003e0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e081      	b.n	8003f22 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d106      	bne.n	8003e38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7fe f95c 	bl	80020f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2224      	movs	r2, #36	; 0x24
 8003e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0201 	bic.w	r2, r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e5c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e6c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d107      	bne.n	8003e86 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689a      	ldr	r2, [r3, #8]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e82:	609a      	str	r2, [r3, #8]
 8003e84:	e006      	b.n	8003e94 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689a      	ldr	r2, [r3, #8]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003e92:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d104      	bne.n	8003ea6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ea4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6812      	ldr	r2, [r2, #0]
 8003eb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003eb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eb8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68da      	ldr	r2, [r3, #12]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ec8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691a      	ldr	r2, [r3, #16]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	69d9      	ldr	r1, [r3, #28]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a1a      	ldr	r2, [r3, #32]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0201 	orr.w	r2, r2, #1
 8003f02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2220      	movs	r2, #32
 8003f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
	...

08003f2c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b088      	sub	sp, #32
 8003f30:	af02      	add	r7, sp, #8
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	4608      	mov	r0, r1
 8003f36:	4611      	mov	r1, r2
 8003f38:	461a      	mov	r2, r3
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	817b      	strh	r3, [r7, #10]
 8003f3e:	460b      	mov	r3, r1
 8003f40:	813b      	strh	r3, [r7, #8]
 8003f42:	4613      	mov	r3, r2
 8003f44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b20      	cmp	r3, #32
 8003f50:	f040 80f9 	bne.w	8004146 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f54:	6a3b      	ldr	r3, [r7, #32]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d002      	beq.n	8003f60 <HAL_I2C_Mem_Write+0x34>
 8003f5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d105      	bne.n	8003f6c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f66:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e0ed      	b.n	8004148 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d101      	bne.n	8003f7a <HAL_I2C_Mem_Write+0x4e>
 8003f76:	2302      	movs	r3, #2
 8003f78:	e0e6      	b.n	8004148 <HAL_I2C_Mem_Write+0x21c>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f82:	f7fe faa7 	bl	80024d4 <HAL_GetTick>
 8003f86:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	2319      	movs	r3, #25
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 fac3 	bl	8004520 <I2C_WaitOnFlagUntilTimeout>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e0d1      	b.n	8004148 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2221      	movs	r2, #33	; 0x21
 8003fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2240      	movs	r2, #64	; 0x40
 8003fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6a3a      	ldr	r2, [r7, #32]
 8003fbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003fc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fcc:	88f8      	ldrh	r0, [r7, #6]
 8003fce:	893a      	ldrh	r2, [r7, #8]
 8003fd0:	8979      	ldrh	r1, [r7, #10]
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	9301      	str	r3, [sp, #4]
 8003fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	4603      	mov	r3, r0
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 f9d3 	bl	8004388 <I2C_RequestMemoryWrite>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d005      	beq.n	8003ff4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e0a9      	b.n	8004148 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	2bff      	cmp	r3, #255	; 0xff
 8003ffc:	d90e      	bls.n	800401c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	22ff      	movs	r2, #255	; 0xff
 8004002:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004008:	b2da      	uxtb	r2, r3
 800400a:	8979      	ldrh	r1, [r7, #10]
 800400c:	2300      	movs	r3, #0
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f000 fc2b 	bl	8004870 <I2C_TransferConfig>
 800401a:	e00f      	b.n	800403c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004020:	b29a      	uxth	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402a:	b2da      	uxtb	r2, r3
 800402c:	8979      	ldrh	r1, [r7, #10]
 800402e:	2300      	movs	r3, #0
 8004030:	9300      	str	r3, [sp, #0]
 8004032:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 fc1a 	bl	8004870 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 faad 	bl	80045a0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e07b      	b.n	8004148 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004054:	781a      	ldrb	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	1c5a      	adds	r2, r3, #1
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406a:	b29b      	uxth	r3, r3
 800406c:	3b01      	subs	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004078:	3b01      	subs	r3, #1
 800407a:	b29a      	uxth	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004084:	b29b      	uxth	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d034      	beq.n	80040f4 <HAL_I2C_Mem_Write+0x1c8>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800408e:	2b00      	cmp	r3, #0
 8004090:	d130      	bne.n	80040f4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004098:	2200      	movs	r2, #0
 800409a:	2180      	movs	r1, #128	; 0x80
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 fa3f 	bl	8004520 <I2C_WaitOnFlagUntilTimeout>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e04d      	b.n	8004148 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	2bff      	cmp	r3, #255	; 0xff
 80040b4:	d90e      	bls.n	80040d4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	22ff      	movs	r2, #255	; 0xff
 80040ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	8979      	ldrh	r1, [r7, #10]
 80040c4:	2300      	movs	r3, #0
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 fbcf 	bl	8004870 <I2C_TransferConfig>
 80040d2:	e00f      	b.n	80040f4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d8:	b29a      	uxth	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e2:	b2da      	uxtb	r2, r3
 80040e4:	8979      	ldrh	r1, [r7, #10]
 80040e6:	2300      	movs	r3, #0
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f000 fbbe 	bl	8004870 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d19e      	bne.n	800403c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f000 fa8c 	bl	8004620 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e01a      	b.n	8004148 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2220      	movs	r2, #32
 8004118:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	6859      	ldr	r1, [r3, #4]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	4b0a      	ldr	r3, [pc, #40]	; (8004150 <HAL_I2C_Mem_Write+0x224>)
 8004126:	400b      	ands	r3, r1
 8004128:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2220      	movs	r2, #32
 800412e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004142:	2300      	movs	r3, #0
 8004144:	e000      	b.n	8004148 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004146:	2302      	movs	r3, #2
  }
}
 8004148:	4618      	mov	r0, r3
 800414a:	3718      	adds	r7, #24
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	fe00e800 	.word	0xfe00e800

08004154 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b088      	sub	sp, #32
 8004158:	af02      	add	r7, sp, #8
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	4608      	mov	r0, r1
 800415e:	4611      	mov	r1, r2
 8004160:	461a      	mov	r2, r3
 8004162:	4603      	mov	r3, r0
 8004164:	817b      	strh	r3, [r7, #10]
 8004166:	460b      	mov	r3, r1
 8004168:	813b      	strh	r3, [r7, #8]
 800416a:	4613      	mov	r3, r2
 800416c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b20      	cmp	r3, #32
 8004178:	f040 80fd 	bne.w	8004376 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800417c:	6a3b      	ldr	r3, [r7, #32]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d002      	beq.n	8004188 <HAL_I2C_Mem_Read+0x34>
 8004182:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004184:	2b00      	cmp	r3, #0
 8004186:	d105      	bne.n	8004194 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800418e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e0f1      	b.n	8004378 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800419a:	2b01      	cmp	r3, #1
 800419c:	d101      	bne.n	80041a2 <HAL_I2C_Mem_Read+0x4e>
 800419e:	2302      	movs	r3, #2
 80041a0:	e0ea      	b.n	8004378 <HAL_I2C_Mem_Read+0x224>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80041aa:	f7fe f993 	bl	80024d4 <HAL_GetTick>
 80041ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	2319      	movs	r3, #25
 80041b6:	2201      	movs	r2, #1
 80041b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f000 f9af 	bl	8004520 <I2C_WaitOnFlagUntilTimeout>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e0d5      	b.n	8004378 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2222      	movs	r2, #34	; 0x22
 80041d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2240      	movs	r2, #64	; 0x40
 80041d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a3a      	ldr	r2, [r7, #32]
 80041e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80041ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041f4:	88f8      	ldrh	r0, [r7, #6]
 80041f6:	893a      	ldrh	r2, [r7, #8]
 80041f8:	8979      	ldrh	r1, [r7, #10]
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	9301      	str	r3, [sp, #4]
 80041fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	4603      	mov	r3, r0
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 f913 	bl	8004430 <I2C_RequestMemoryRead>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d005      	beq.n	800421c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e0ad      	b.n	8004378 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004220:	b29b      	uxth	r3, r3
 8004222:	2bff      	cmp	r3, #255	; 0xff
 8004224:	d90e      	bls.n	8004244 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	22ff      	movs	r2, #255	; 0xff
 800422a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004230:	b2da      	uxtb	r2, r3
 8004232:	8979      	ldrh	r1, [r7, #10]
 8004234:	4b52      	ldr	r3, [pc, #328]	; (8004380 <HAL_I2C_Mem_Read+0x22c>)
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f000 fb17 	bl	8004870 <I2C_TransferConfig>
 8004242:	e00f      	b.n	8004264 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004248:	b29a      	uxth	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004252:	b2da      	uxtb	r2, r3
 8004254:	8979      	ldrh	r1, [r7, #10]
 8004256:	4b4a      	ldr	r3, [pc, #296]	; (8004380 <HAL_I2C_Mem_Read+0x22c>)
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f000 fb06 	bl	8004870 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426a:	2200      	movs	r2, #0
 800426c:	2104      	movs	r1, #4
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 f956 	bl	8004520 <I2C_WaitOnFlagUntilTimeout>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e07c      	b.n	8004378 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	b2d2      	uxtb	r2, r2
 800428a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	1c5a      	adds	r2, r3, #1
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800429a:	3b01      	subs	r3, #1
 800429c:	b29a      	uxth	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	3b01      	subs	r3, #1
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d034      	beq.n	8004324 <HAL_I2C_Mem_Read+0x1d0>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d130      	bne.n	8004324 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c8:	2200      	movs	r2, #0
 80042ca:	2180      	movs	r1, #128	; 0x80
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f000 f927 	bl	8004520 <I2C_WaitOnFlagUntilTimeout>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e04d      	b.n	8004378 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	2bff      	cmp	r3, #255	; 0xff
 80042e4:	d90e      	bls.n	8004304 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	22ff      	movs	r2, #255	; 0xff
 80042ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	8979      	ldrh	r1, [r7, #10]
 80042f4:	2300      	movs	r3, #0
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f000 fab7 	bl	8004870 <I2C_TransferConfig>
 8004302:	e00f      	b.n	8004324 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004308:	b29a      	uxth	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004312:	b2da      	uxtb	r2, r3
 8004314:	8979      	ldrh	r1, [r7, #10]
 8004316:	2300      	movs	r3, #0
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f000 faa6 	bl	8004870 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004328:	b29b      	uxth	r3, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d19a      	bne.n	8004264 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 f974 	bl	8004620 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e01a      	b.n	8004378 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2220      	movs	r2, #32
 8004348:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	6859      	ldr	r1, [r3, #4]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	4b0b      	ldr	r3, [pc, #44]	; (8004384 <HAL_I2C_Mem_Read+0x230>)
 8004356:	400b      	ands	r3, r1
 8004358:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2220      	movs	r2, #32
 800435e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004372:	2300      	movs	r3, #0
 8004374:	e000      	b.n	8004378 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004376:	2302      	movs	r3, #2
  }
}
 8004378:	4618      	mov	r0, r3
 800437a:	3718      	adds	r7, #24
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	80002400 	.word	0x80002400
 8004384:	fe00e800 	.word	0xfe00e800

08004388 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b086      	sub	sp, #24
 800438c:	af02      	add	r7, sp, #8
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	4608      	mov	r0, r1
 8004392:	4611      	mov	r1, r2
 8004394:	461a      	mov	r2, r3
 8004396:	4603      	mov	r3, r0
 8004398:	817b      	strh	r3, [r7, #10]
 800439a:	460b      	mov	r3, r1
 800439c:	813b      	strh	r3, [r7, #8]
 800439e:	4613      	mov	r3, r2
 80043a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80043a2:	88fb      	ldrh	r3, [r7, #6]
 80043a4:	b2da      	uxtb	r2, r3
 80043a6:	8979      	ldrh	r1, [r7, #10]
 80043a8:	4b20      	ldr	r3, [pc, #128]	; (800442c <I2C_RequestMemoryWrite+0xa4>)
 80043aa:	9300      	str	r3, [sp, #0]
 80043ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	f000 fa5d 	bl	8004870 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043b6:	69fa      	ldr	r2, [r7, #28]
 80043b8:	69b9      	ldr	r1, [r7, #24]
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 f8f0 	bl	80045a0 <I2C_WaitOnTXISFlagUntilTimeout>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e02c      	b.n	8004424 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043ca:	88fb      	ldrh	r3, [r7, #6]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d105      	bne.n	80043dc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043d0:	893b      	ldrh	r3, [r7, #8]
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	629a      	str	r2, [r3, #40]	; 0x28
 80043da:	e015      	b.n	8004408 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80043dc:	893b      	ldrh	r3, [r7, #8]
 80043de:	0a1b      	lsrs	r3, r3, #8
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	b2da      	uxtb	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ea:	69fa      	ldr	r2, [r7, #28]
 80043ec:	69b9      	ldr	r1, [r7, #24]
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 f8d6 	bl	80045a0 <I2C_WaitOnTXISFlagUntilTimeout>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e012      	b.n	8004424 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043fe:	893b      	ldrh	r3, [r7, #8]
 8004400:	b2da      	uxtb	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	2200      	movs	r2, #0
 8004410:	2180      	movs	r1, #128	; 0x80
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f000 f884 	bl	8004520 <I2C_WaitOnFlagUntilTimeout>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e000      	b.n	8004424 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	80002000 	.word	0x80002000

08004430 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af02      	add	r7, sp, #8
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	4608      	mov	r0, r1
 800443a:	4611      	mov	r1, r2
 800443c:	461a      	mov	r2, r3
 800443e:	4603      	mov	r3, r0
 8004440:	817b      	strh	r3, [r7, #10]
 8004442:	460b      	mov	r3, r1
 8004444:	813b      	strh	r3, [r7, #8]
 8004446:	4613      	mov	r3, r2
 8004448:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800444a:	88fb      	ldrh	r3, [r7, #6]
 800444c:	b2da      	uxtb	r2, r3
 800444e:	8979      	ldrh	r1, [r7, #10]
 8004450:	4b20      	ldr	r3, [pc, #128]	; (80044d4 <I2C_RequestMemoryRead+0xa4>)
 8004452:	9300      	str	r3, [sp, #0]
 8004454:	2300      	movs	r3, #0
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 fa0a 	bl	8004870 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800445c:	69fa      	ldr	r2, [r7, #28]
 800445e:	69b9      	ldr	r1, [r7, #24]
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f000 f89d 	bl	80045a0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d001      	beq.n	8004470 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e02c      	b.n	80044ca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004470:	88fb      	ldrh	r3, [r7, #6]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d105      	bne.n	8004482 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004476:	893b      	ldrh	r3, [r7, #8]
 8004478:	b2da      	uxtb	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	629a      	str	r2, [r3, #40]	; 0x28
 8004480:	e015      	b.n	80044ae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004482:	893b      	ldrh	r3, [r7, #8]
 8004484:	0a1b      	lsrs	r3, r3, #8
 8004486:	b29b      	uxth	r3, r3
 8004488:	b2da      	uxtb	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004490:	69fa      	ldr	r2, [r7, #28]
 8004492:	69b9      	ldr	r1, [r7, #24]
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 f883 	bl	80045a0 <I2C_WaitOnTXISFlagUntilTimeout>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e012      	b.n	80044ca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044a4:	893b      	ldrh	r3, [r7, #8]
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	2200      	movs	r2, #0
 80044b6:	2140      	movs	r1, #64	; 0x40
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f000 f831 	bl	8004520 <I2C_WaitOnFlagUntilTimeout>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e000      	b.n	80044ca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	80002000 	.word	0x80002000

080044d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d103      	bne.n	80044f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2200      	movs	r2, #0
 80044f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	2b01      	cmp	r3, #1
 8004502:	d007      	beq.n	8004514 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	699a      	ldr	r2, [r3, #24]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 0201 	orr.w	r2, r2, #1
 8004512:	619a      	str	r2, [r3, #24]
  }
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	603b      	str	r3, [r7, #0]
 800452c:	4613      	mov	r3, r2
 800452e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004530:	e022      	b.n	8004578 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004538:	d01e      	beq.n	8004578 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800453a:	f7fd ffcb 	bl	80024d4 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	429a      	cmp	r2, r3
 8004548:	d302      	bcc.n	8004550 <I2C_WaitOnFlagUntilTimeout+0x30>
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d113      	bne.n	8004578 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004554:	f043 0220 	orr.w	r2, r3, #32
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2220      	movs	r2, #32
 8004560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e00f      	b.n	8004598 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	699a      	ldr	r2, [r3, #24]
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	4013      	ands	r3, r2
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	429a      	cmp	r2, r3
 8004586:	bf0c      	ite	eq
 8004588:	2301      	moveq	r3, #1
 800458a:	2300      	movne	r3, #0
 800458c:	b2db      	uxtb	r3, r3
 800458e:	461a      	mov	r2, r3
 8004590:	79fb      	ldrb	r3, [r7, #7]
 8004592:	429a      	cmp	r2, r3
 8004594:	d0cd      	beq.n	8004532 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3710      	adds	r7, #16
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045ac:	e02c      	b.n	8004608 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	68b9      	ldr	r1, [r7, #8]
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f000 f870 	bl	8004698 <I2C_IsErrorOccurred>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e02a      	b.n	8004618 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c8:	d01e      	beq.n	8004608 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ca:	f7fd ff83 	bl	80024d4 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d302      	bcc.n	80045e0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d113      	bne.n	8004608 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e4:	f043 0220 	orr.w	r2, r3, #32
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2220      	movs	r2, #32
 80045f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e007      	b.n	8004618 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b02      	cmp	r3, #2
 8004614:	d1cb      	bne.n	80045ae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800462c:	e028      	b.n	8004680 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	68b9      	ldr	r1, [r7, #8]
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f000 f830 	bl	8004698 <I2C_IsErrorOccurred>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d001      	beq.n	8004642 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e026      	b.n	8004690 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004642:	f7fd ff47 	bl	80024d4 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	429a      	cmp	r2, r3
 8004650:	d302      	bcc.n	8004658 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d113      	bne.n	8004680 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800465c:	f043 0220 	orr.w	r2, r3, #32
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2220      	movs	r2, #32
 8004668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e007      	b.n	8004690 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	f003 0320 	and.w	r3, r3, #32
 800468a:	2b20      	cmp	r3, #32
 800468c:	d1cf      	bne.n	800462e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b08a      	sub	sp, #40	; 0x28
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046a4:	2300      	movs	r3, #0
 80046a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80046b2:	2300      	movs	r3, #0
 80046b4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	f003 0310 	and.w	r3, r3, #16
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d075      	beq.n	80047b0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2210      	movs	r2, #16
 80046ca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80046cc:	e056      	b.n	800477c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d4:	d052      	beq.n	800477c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80046d6:	f7fd fefd 	bl	80024d4 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d302      	bcc.n	80046ec <I2C_IsErrorOccurred+0x54>
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d147      	bne.n	800477c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046f6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80046fe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800470a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800470e:	d12e      	bne.n	800476e <I2C_IsErrorOccurred+0xd6>
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004716:	d02a      	beq.n	800476e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004718:	7cfb      	ldrb	r3, [r7, #19]
 800471a:	2b20      	cmp	r3, #32
 800471c:	d027      	beq.n	800476e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800472c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800472e:	f7fd fed1 	bl	80024d4 <HAL_GetTick>
 8004732:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004734:	e01b      	b.n	800476e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004736:	f7fd fecd 	bl	80024d4 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b19      	cmp	r3, #25
 8004742:	d914      	bls.n	800476e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004748:	f043 0220 	orr.w	r2, r3, #32
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2220      	movs	r2, #32
 8004754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	f003 0320 	and.w	r3, r3, #32
 8004778:	2b20      	cmp	r3, #32
 800477a:	d1dc      	bne.n	8004736 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	f003 0320 	and.w	r3, r3, #32
 8004786:	2b20      	cmp	r3, #32
 8004788:	d003      	beq.n	8004792 <I2C_IsErrorOccurred+0xfa>
 800478a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800478e:	2b00      	cmp	r3, #0
 8004790:	d09d      	beq.n	80046ce <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004792:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004796:	2b00      	cmp	r3, #0
 8004798:	d103      	bne.n	80047a2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2220      	movs	r2, #32
 80047a0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80047a2:	6a3b      	ldr	r3, [r7, #32]
 80047a4:	f043 0304 	orr.w	r3, r3, #4
 80047a8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00b      	beq.n	80047da <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80047c2:	6a3b      	ldr	r3, [r7, #32]
 80047c4:	f043 0301 	orr.w	r3, r3, #1
 80047c8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00b      	beq.n	80047fc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	f043 0308 	orr.w	r3, r3, #8
 80047ea:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00b      	beq.n	800481e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004806:	6a3b      	ldr	r3, [r7, #32]
 8004808:	f043 0302 	orr.w	r3, r3, #2
 800480c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004816:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800481e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004822:	2b00      	cmp	r3, #0
 8004824:	d01c      	beq.n	8004860 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f7ff fe56 	bl	80044d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6859      	ldr	r1, [r3, #4]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	4b0d      	ldr	r3, [pc, #52]	; (800486c <I2C_IsErrorOccurred+0x1d4>)
 8004838:	400b      	ands	r3, r1
 800483a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004840:	6a3b      	ldr	r3, [r7, #32]
 8004842:	431a      	orrs	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2220      	movs	r2, #32
 800484c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004864:	4618      	mov	r0, r3
 8004866:	3728      	adds	r7, #40	; 0x28
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	fe00e800 	.word	0xfe00e800

08004870 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004870:	b480      	push	{r7}
 8004872:	b087      	sub	sp, #28
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	607b      	str	r3, [r7, #4]
 800487a:	460b      	mov	r3, r1
 800487c:	817b      	strh	r3, [r7, #10]
 800487e:	4613      	mov	r3, r2
 8004880:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004882:	897b      	ldrh	r3, [r7, #10]
 8004884:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004888:	7a7b      	ldrb	r3, [r7, #9]
 800488a:	041b      	lsls	r3, r3, #16
 800488c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004890:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004896:	6a3b      	ldr	r3, [r7, #32]
 8004898:	4313      	orrs	r3, r2
 800489a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800489e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	6a3b      	ldr	r3, [r7, #32]
 80048a8:	0d5b      	lsrs	r3, r3, #21
 80048aa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80048ae:	4b08      	ldr	r3, [pc, #32]	; (80048d0 <I2C_TransferConfig+0x60>)
 80048b0:	430b      	orrs	r3, r1
 80048b2:	43db      	mvns	r3, r3
 80048b4:	ea02 0103 	and.w	r1, r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	430a      	orrs	r2, r1
 80048c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80048c2:	bf00      	nop
 80048c4:	371c      	adds	r7, #28
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	03ff63ff 	.word	0x03ff63ff

080048d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b20      	cmp	r3, #32
 80048e8:	d138      	bne.n	800495c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d101      	bne.n	80048f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80048f4:	2302      	movs	r3, #2
 80048f6:	e032      	b.n	800495e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2224      	movs	r2, #36	; 0x24
 8004904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 0201 	bic.w	r2, r2, #1
 8004916:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004926:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6819      	ldr	r1, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	430a      	orrs	r2, r1
 8004936:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f042 0201 	orr.w	r2, r2, #1
 8004946:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2220      	movs	r2, #32
 800494c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004958:	2300      	movs	r3, #0
 800495a:	e000      	b.n	800495e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800495c:	2302      	movs	r3, #2
  }
}
 800495e:	4618      	mov	r0, r3
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800496a:	b480      	push	{r7}
 800496c:	b085      	sub	sp, #20
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
 8004972:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b20      	cmp	r3, #32
 800497e:	d139      	bne.n	80049f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004986:	2b01      	cmp	r3, #1
 8004988:	d101      	bne.n	800498e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800498a:	2302      	movs	r3, #2
 800498c:	e033      	b.n	80049f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2224      	movs	r2, #36	; 0x24
 800499a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 0201 	bic.w	r2, r2, #1
 80049ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80049bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	021b      	lsls	r3, r3, #8
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f042 0201 	orr.w	r2, r2, #1
 80049de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2220      	movs	r2, #32
 80049e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80049f0:	2300      	movs	r3, #0
 80049f2:	e000      	b.n	80049f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80049f4:	2302      	movs	r3, #2
  }
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
	...

08004a04 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004a08:	4b04      	ldr	r3, [pc, #16]	; (8004a1c <HAL_PWREx_GetVoltageRange+0x18>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	40007000 	.word	0x40007000

08004a20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a2e:	d130      	bne.n	8004a92 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a30:	4b23      	ldr	r3, [pc, #140]	; (8004ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a3c:	d038      	beq.n	8004ab0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a3e:	4b20      	ldr	r3, [pc, #128]	; (8004ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a46:	4a1e      	ldr	r2, [pc, #120]	; (8004ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a4c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a4e:	4b1d      	ldr	r3, [pc, #116]	; (8004ac4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2232      	movs	r2, #50	; 0x32
 8004a54:	fb02 f303 	mul.w	r3, r2, r3
 8004a58:	4a1b      	ldr	r2, [pc, #108]	; (8004ac8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5e:	0c9b      	lsrs	r3, r3, #18
 8004a60:	3301      	adds	r3, #1
 8004a62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a64:	e002      	b.n	8004a6c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a6c:	4b14      	ldr	r3, [pc, #80]	; (8004ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a78:	d102      	bne.n	8004a80 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1f2      	bne.n	8004a66 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a80:	4b0f      	ldr	r3, [pc, #60]	; (8004ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a82:	695b      	ldr	r3, [r3, #20]
 8004a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a8c:	d110      	bne.n	8004ab0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e00f      	b.n	8004ab2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a92:	4b0b      	ldr	r3, [pc, #44]	; (8004ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a9e:	d007      	beq.n	8004ab0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004aa0:	4b07      	ldr	r3, [pc, #28]	; (8004ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004aa8:	4a05      	ldr	r2, [pc, #20]	; (8004ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004aaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004aae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	40007000 	.word	0x40007000
 8004ac4:	20000004 	.word	0x20000004
 8004ac8:	431bde83 	.word	0x431bde83

08004acc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b088      	sub	sp, #32
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d102      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	f000 bc02 	b.w	80052e4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ae0:	4b96      	ldr	r3, [pc, #600]	; (8004d3c <HAL_RCC_OscConfig+0x270>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f003 030c 	and.w	r3, r3, #12
 8004ae8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004aea:	4b94      	ldr	r3, [pc, #592]	; (8004d3c <HAL_RCC_OscConfig+0x270>)
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	f003 0303 	and.w	r3, r3, #3
 8004af2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0310 	and.w	r3, r3, #16
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f000 80e4 	beq.w	8004cca <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d007      	beq.n	8004b18 <HAL_RCC_OscConfig+0x4c>
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	2b0c      	cmp	r3, #12
 8004b0c:	f040 808b 	bne.w	8004c26 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	f040 8087 	bne.w	8004c26 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b18:	4b88      	ldr	r3, [pc, #544]	; (8004d3c <HAL_RCC_OscConfig+0x270>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d005      	beq.n	8004b30 <HAL_RCC_OscConfig+0x64>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e3d9      	b.n	80052e4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a1a      	ldr	r2, [r3, #32]
 8004b34:	4b81      	ldr	r3, [pc, #516]	; (8004d3c <HAL_RCC_OscConfig+0x270>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0308 	and.w	r3, r3, #8
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d004      	beq.n	8004b4a <HAL_RCC_OscConfig+0x7e>
 8004b40:	4b7e      	ldr	r3, [pc, #504]	; (8004d3c <HAL_RCC_OscConfig+0x270>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b48:	e005      	b.n	8004b56 <HAL_RCC_OscConfig+0x8a>
 8004b4a:	4b7c      	ldr	r3, [pc, #496]	; (8004d3c <HAL_RCC_OscConfig+0x270>)
 8004b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b50:	091b      	lsrs	r3, r3, #4
 8004b52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d223      	bcs.n	8004ba2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 fd54 	bl	800560c <RCC_SetFlashLatencyFromMSIRange>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e3ba      	b.n	80052e4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b6e:	4b73      	ldr	r3, [pc, #460]	; (8004d3c <HAL_RCC_OscConfig+0x270>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a72      	ldr	r2, [pc, #456]	; (8004d3c <HAL_RCC_OscConfig+0x270>)
 8004b74:	f043 0308 	orr.w	r3, r3, #8
 8004b78:	6013      	str	r3, [r2, #0]
 8004b7a:	4b70      	ldr	r3, [pc, #448]	; (8004d3c <HAL_RCC_OscConfig+0x270>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	496d      	ldr	r1, [pc, #436]	; (8004d3c <HAL_RCC_OscConfig+0x270>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b8c:	4b6b      	ldr	r3, [pc, #428]	; (8004d3c <HAL_RCC_OscConfig+0x270>)
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	69db      	ldr	r3, [r3, #28]
 8004b98:	021b      	lsls	r3, r3, #8
 8004b9a:	4968      	ldr	r1, [pc, #416]	; (8004d3c <HAL_RCC_OscConfig+0x270>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	604b      	str	r3, [r1, #4]
 8004ba0:	e025      	b.n	8004bee <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ba2:	4b66      	ldr	r3, [pc, #408]	; (8004d3c <HAL_RCC_OscConfig+0x270>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a65      	ldr	r2, [pc, #404]	; (8004d3c <HAL_RCC_OscConfig+0x270>)
 8004ba8:	f043 0308 	orr.w	r3, r3, #8
 8004bac:	6013      	str	r3, [r2, #0]
 8004bae:	4b63      	ldr	r3, [pc, #396]	; (8004d3c <HAL_RCC_OscConfig+0x270>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	4960      	ldr	r1, [pc, #384]	; (8004d3c <HAL_RCC_OscConfig+0x270>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bc0:	4b5e      	ldr	r3, [pc, #376]	; (8004d3c <HAL_RCC_OscConfig+0x270>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	021b      	lsls	r3, r3, #8
 8004bce:	495b      	ldr	r1, [pc, #364]	; (8004d3c <HAL_RCC_OscConfig+0x270>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d109      	bne.n	8004bee <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 fd14 	bl	800560c <RCC_SetFlashLatencyFromMSIRange>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e37a      	b.n	80052e4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004bee:	f000 fc81 	bl	80054f4 <HAL_RCC_GetSysClockFreq>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	4b51      	ldr	r3, [pc, #324]	; (8004d3c <HAL_RCC_OscConfig+0x270>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	091b      	lsrs	r3, r3, #4
 8004bfa:	f003 030f 	and.w	r3, r3, #15
 8004bfe:	4950      	ldr	r1, [pc, #320]	; (8004d40 <HAL_RCC_OscConfig+0x274>)
 8004c00:	5ccb      	ldrb	r3, [r1, r3]
 8004c02:	f003 031f 	and.w	r3, r3, #31
 8004c06:	fa22 f303 	lsr.w	r3, r2, r3
 8004c0a:	4a4e      	ldr	r2, [pc, #312]	; (8004d44 <HAL_RCC_OscConfig+0x278>)
 8004c0c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004c0e:	4b4e      	ldr	r3, [pc, #312]	; (8004d48 <HAL_RCC_OscConfig+0x27c>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7fd fc0e 	bl	8002434 <HAL_InitTick>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d052      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004c22:	7bfb      	ldrb	r3, [r7, #15]
 8004c24:	e35e      	b.n	80052e4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d032      	beq.n	8004c94 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c2e:	4b43      	ldr	r3, [pc, #268]	; (8004d3c <HAL_RCC_OscConfig+0x270>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a42      	ldr	r2, [pc, #264]	; (8004d3c <HAL_RCC_OscConfig+0x270>)
 8004c34:	f043 0301 	orr.w	r3, r3, #1
 8004c38:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c3a:	f7fd fc4b 	bl	80024d4 <HAL_GetTick>
 8004c3e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c40:	e008      	b.n	8004c54 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c42:	f7fd fc47 	bl	80024d4 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d901      	bls.n	8004c54 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e347      	b.n	80052e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c54:	4b39      	ldr	r3, [pc, #228]	; (8004d3c <HAL_RCC_OscConfig+0x270>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0302 	and.w	r3, r3, #2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d0f0      	beq.n	8004c42 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c60:	4b36      	ldr	r3, [pc, #216]	; (8004d3c <HAL_RCC_OscConfig+0x270>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a35      	ldr	r2, [pc, #212]	; (8004d3c <HAL_RCC_OscConfig+0x270>)
 8004c66:	f043 0308 	orr.w	r3, r3, #8
 8004c6a:	6013      	str	r3, [r2, #0]
 8004c6c:	4b33      	ldr	r3, [pc, #204]	; (8004d3c <HAL_RCC_OscConfig+0x270>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	4930      	ldr	r1, [pc, #192]	; (8004d3c <HAL_RCC_OscConfig+0x270>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c7e:	4b2f      	ldr	r3, [pc, #188]	; (8004d3c <HAL_RCC_OscConfig+0x270>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	021b      	lsls	r3, r3, #8
 8004c8c:	492b      	ldr	r1, [pc, #172]	; (8004d3c <HAL_RCC_OscConfig+0x270>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	604b      	str	r3, [r1, #4]
 8004c92:	e01a      	b.n	8004cca <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004c94:	4b29      	ldr	r3, [pc, #164]	; (8004d3c <HAL_RCC_OscConfig+0x270>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a28      	ldr	r2, [pc, #160]	; (8004d3c <HAL_RCC_OscConfig+0x270>)
 8004c9a:	f023 0301 	bic.w	r3, r3, #1
 8004c9e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ca0:	f7fd fc18 	bl	80024d4 <HAL_GetTick>
 8004ca4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ca6:	e008      	b.n	8004cba <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ca8:	f7fd fc14 	bl	80024d4 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e314      	b.n	80052e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004cba:	4b20      	ldr	r3, [pc, #128]	; (8004d3c <HAL_RCC_OscConfig+0x270>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1f0      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x1dc>
 8004cc6:	e000      	b.n	8004cca <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004cc8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d073      	beq.n	8004dbe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	2b08      	cmp	r3, #8
 8004cda:	d005      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x21c>
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	2b0c      	cmp	r3, #12
 8004ce0:	d10e      	bne.n	8004d00 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	2b03      	cmp	r3, #3
 8004ce6:	d10b      	bne.n	8004d00 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ce8:	4b14      	ldr	r3, [pc, #80]	; (8004d3c <HAL_RCC_OscConfig+0x270>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d063      	beq.n	8004dbc <HAL_RCC_OscConfig+0x2f0>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d15f      	bne.n	8004dbc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e2f1      	b.n	80052e4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d08:	d106      	bne.n	8004d18 <HAL_RCC_OscConfig+0x24c>
 8004d0a:	4b0c      	ldr	r3, [pc, #48]	; (8004d3c <HAL_RCC_OscConfig+0x270>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a0b      	ldr	r2, [pc, #44]	; (8004d3c <HAL_RCC_OscConfig+0x270>)
 8004d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d14:	6013      	str	r3, [r2, #0]
 8004d16:	e025      	b.n	8004d64 <HAL_RCC_OscConfig+0x298>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d20:	d114      	bne.n	8004d4c <HAL_RCC_OscConfig+0x280>
 8004d22:	4b06      	ldr	r3, [pc, #24]	; (8004d3c <HAL_RCC_OscConfig+0x270>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a05      	ldr	r2, [pc, #20]	; (8004d3c <HAL_RCC_OscConfig+0x270>)
 8004d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d2c:	6013      	str	r3, [r2, #0]
 8004d2e:	4b03      	ldr	r3, [pc, #12]	; (8004d3c <HAL_RCC_OscConfig+0x270>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a02      	ldr	r2, [pc, #8]	; (8004d3c <HAL_RCC_OscConfig+0x270>)
 8004d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d38:	6013      	str	r3, [r2, #0]
 8004d3a:	e013      	b.n	8004d64 <HAL_RCC_OscConfig+0x298>
 8004d3c:	40021000 	.word	0x40021000
 8004d40:	08007520 	.word	0x08007520
 8004d44:	20000004 	.word	0x20000004
 8004d48:	20000008 	.word	0x20000008
 8004d4c:	4ba0      	ldr	r3, [pc, #640]	; (8004fd0 <HAL_RCC_OscConfig+0x504>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a9f      	ldr	r2, [pc, #636]	; (8004fd0 <HAL_RCC_OscConfig+0x504>)
 8004d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d56:	6013      	str	r3, [r2, #0]
 8004d58:	4b9d      	ldr	r3, [pc, #628]	; (8004fd0 <HAL_RCC_OscConfig+0x504>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a9c      	ldr	r2, [pc, #624]	; (8004fd0 <HAL_RCC_OscConfig+0x504>)
 8004d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d013      	beq.n	8004d94 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d6c:	f7fd fbb2 	bl	80024d4 <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d74:	f7fd fbae 	bl	80024d4 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b64      	cmp	r3, #100	; 0x64
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e2ae      	b.n	80052e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d86:	4b92      	ldr	r3, [pc, #584]	; (8004fd0 <HAL_RCC_OscConfig+0x504>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d0f0      	beq.n	8004d74 <HAL_RCC_OscConfig+0x2a8>
 8004d92:	e014      	b.n	8004dbe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d94:	f7fd fb9e 	bl	80024d4 <HAL_GetTick>
 8004d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d9a:	e008      	b.n	8004dae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d9c:	f7fd fb9a 	bl	80024d4 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b64      	cmp	r3, #100	; 0x64
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e29a      	b.n	80052e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dae:	4b88      	ldr	r3, [pc, #544]	; (8004fd0 <HAL_RCC_OscConfig+0x504>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1f0      	bne.n	8004d9c <HAL_RCC_OscConfig+0x2d0>
 8004dba:	e000      	b.n	8004dbe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d060      	beq.n	8004e8c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	2b04      	cmp	r3, #4
 8004dce:	d005      	beq.n	8004ddc <HAL_RCC_OscConfig+0x310>
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	2b0c      	cmp	r3, #12
 8004dd4:	d119      	bne.n	8004e0a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d116      	bne.n	8004e0a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ddc:	4b7c      	ldr	r3, [pc, #496]	; (8004fd0 <HAL_RCC_OscConfig+0x504>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d005      	beq.n	8004df4 <HAL_RCC_OscConfig+0x328>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e277      	b.n	80052e4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004df4:	4b76      	ldr	r3, [pc, #472]	; (8004fd0 <HAL_RCC_OscConfig+0x504>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	061b      	lsls	r3, r3, #24
 8004e02:	4973      	ldr	r1, [pc, #460]	; (8004fd0 <HAL_RCC_OscConfig+0x504>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e08:	e040      	b.n	8004e8c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d023      	beq.n	8004e5a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e12:	4b6f      	ldr	r3, [pc, #444]	; (8004fd0 <HAL_RCC_OscConfig+0x504>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a6e      	ldr	r2, [pc, #440]	; (8004fd0 <HAL_RCC_OscConfig+0x504>)
 8004e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e1e:	f7fd fb59 	bl	80024d4 <HAL_GetTick>
 8004e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e24:	e008      	b.n	8004e38 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e26:	f7fd fb55 	bl	80024d4 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e255      	b.n	80052e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e38:	4b65      	ldr	r3, [pc, #404]	; (8004fd0 <HAL_RCC_OscConfig+0x504>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0f0      	beq.n	8004e26 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e44:	4b62      	ldr	r3, [pc, #392]	; (8004fd0 <HAL_RCC_OscConfig+0x504>)
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	061b      	lsls	r3, r3, #24
 8004e52:	495f      	ldr	r1, [pc, #380]	; (8004fd0 <HAL_RCC_OscConfig+0x504>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	604b      	str	r3, [r1, #4]
 8004e58:	e018      	b.n	8004e8c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e5a:	4b5d      	ldr	r3, [pc, #372]	; (8004fd0 <HAL_RCC_OscConfig+0x504>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a5c      	ldr	r2, [pc, #368]	; (8004fd0 <HAL_RCC_OscConfig+0x504>)
 8004e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e66:	f7fd fb35 	bl	80024d4 <HAL_GetTick>
 8004e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e6c:	e008      	b.n	8004e80 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e6e:	f7fd fb31 	bl	80024d4 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d901      	bls.n	8004e80 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e231      	b.n	80052e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e80:	4b53      	ldr	r3, [pc, #332]	; (8004fd0 <HAL_RCC_OscConfig+0x504>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1f0      	bne.n	8004e6e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0308 	and.w	r3, r3, #8
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d03c      	beq.n	8004f12 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d01c      	beq.n	8004eda <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ea0:	4b4b      	ldr	r3, [pc, #300]	; (8004fd0 <HAL_RCC_OscConfig+0x504>)
 8004ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ea6:	4a4a      	ldr	r2, [pc, #296]	; (8004fd0 <HAL_RCC_OscConfig+0x504>)
 8004ea8:	f043 0301 	orr.w	r3, r3, #1
 8004eac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb0:	f7fd fb10 	bl	80024d4 <HAL_GetTick>
 8004eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004eb6:	e008      	b.n	8004eca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004eb8:	f7fd fb0c 	bl	80024d4 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e20c      	b.n	80052e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004eca:	4b41      	ldr	r3, [pc, #260]	; (8004fd0 <HAL_RCC_OscConfig+0x504>)
 8004ecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d0ef      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x3ec>
 8004ed8:	e01b      	b.n	8004f12 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eda:	4b3d      	ldr	r3, [pc, #244]	; (8004fd0 <HAL_RCC_OscConfig+0x504>)
 8004edc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ee0:	4a3b      	ldr	r2, [pc, #236]	; (8004fd0 <HAL_RCC_OscConfig+0x504>)
 8004ee2:	f023 0301 	bic.w	r3, r3, #1
 8004ee6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eea:	f7fd faf3 	bl	80024d4 <HAL_GetTick>
 8004eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ef0:	e008      	b.n	8004f04 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ef2:	f7fd faef 	bl	80024d4 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d901      	bls.n	8004f04 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e1ef      	b.n	80052e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f04:	4b32      	ldr	r3, [pc, #200]	; (8004fd0 <HAL_RCC_OscConfig+0x504>)
 8004f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1ef      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0304 	and.w	r3, r3, #4
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f000 80a6 	beq.w	800506c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f20:	2300      	movs	r3, #0
 8004f22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004f24:	4b2a      	ldr	r3, [pc, #168]	; (8004fd0 <HAL_RCC_OscConfig+0x504>)
 8004f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10d      	bne.n	8004f4c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f30:	4b27      	ldr	r3, [pc, #156]	; (8004fd0 <HAL_RCC_OscConfig+0x504>)
 8004f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f34:	4a26      	ldr	r2, [pc, #152]	; (8004fd0 <HAL_RCC_OscConfig+0x504>)
 8004f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f3a:	6593      	str	r3, [r2, #88]	; 0x58
 8004f3c:	4b24      	ldr	r3, [pc, #144]	; (8004fd0 <HAL_RCC_OscConfig+0x504>)
 8004f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f44:	60bb      	str	r3, [r7, #8]
 8004f46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f4c:	4b21      	ldr	r3, [pc, #132]	; (8004fd4 <HAL_RCC_OscConfig+0x508>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d118      	bne.n	8004f8a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f58:	4b1e      	ldr	r3, [pc, #120]	; (8004fd4 <HAL_RCC_OscConfig+0x508>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a1d      	ldr	r2, [pc, #116]	; (8004fd4 <HAL_RCC_OscConfig+0x508>)
 8004f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f64:	f7fd fab6 	bl	80024d4 <HAL_GetTick>
 8004f68:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f6c:	f7fd fab2 	bl	80024d4 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e1b2      	b.n	80052e4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f7e:	4b15      	ldr	r3, [pc, #84]	; (8004fd4 <HAL_RCC_OscConfig+0x508>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d0f0      	beq.n	8004f6c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d108      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x4d8>
 8004f92:	4b0f      	ldr	r3, [pc, #60]	; (8004fd0 <HAL_RCC_OscConfig+0x504>)
 8004f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f98:	4a0d      	ldr	r2, [pc, #52]	; (8004fd0 <HAL_RCC_OscConfig+0x504>)
 8004f9a:	f043 0301 	orr.w	r3, r3, #1
 8004f9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fa2:	e029      	b.n	8004ff8 <HAL_RCC_OscConfig+0x52c>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	2b05      	cmp	r3, #5
 8004faa:	d115      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x50c>
 8004fac:	4b08      	ldr	r3, [pc, #32]	; (8004fd0 <HAL_RCC_OscConfig+0x504>)
 8004fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb2:	4a07      	ldr	r2, [pc, #28]	; (8004fd0 <HAL_RCC_OscConfig+0x504>)
 8004fb4:	f043 0304 	orr.w	r3, r3, #4
 8004fb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fbc:	4b04      	ldr	r3, [pc, #16]	; (8004fd0 <HAL_RCC_OscConfig+0x504>)
 8004fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc2:	4a03      	ldr	r2, [pc, #12]	; (8004fd0 <HAL_RCC_OscConfig+0x504>)
 8004fc4:	f043 0301 	orr.w	r3, r3, #1
 8004fc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fcc:	e014      	b.n	8004ff8 <HAL_RCC_OscConfig+0x52c>
 8004fce:	bf00      	nop
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	40007000 	.word	0x40007000
 8004fd8:	4b9a      	ldr	r3, [pc, #616]	; (8005244 <HAL_RCC_OscConfig+0x778>)
 8004fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fde:	4a99      	ldr	r2, [pc, #612]	; (8005244 <HAL_RCC_OscConfig+0x778>)
 8004fe0:	f023 0301 	bic.w	r3, r3, #1
 8004fe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fe8:	4b96      	ldr	r3, [pc, #600]	; (8005244 <HAL_RCC_OscConfig+0x778>)
 8004fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fee:	4a95      	ldr	r2, [pc, #596]	; (8005244 <HAL_RCC_OscConfig+0x778>)
 8004ff0:	f023 0304 	bic.w	r3, r3, #4
 8004ff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d016      	beq.n	800502e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005000:	f7fd fa68 	bl	80024d4 <HAL_GetTick>
 8005004:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005006:	e00a      	b.n	800501e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005008:	f7fd fa64 	bl	80024d4 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	f241 3288 	movw	r2, #5000	; 0x1388
 8005016:	4293      	cmp	r3, r2
 8005018:	d901      	bls.n	800501e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e162      	b.n	80052e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800501e:	4b89      	ldr	r3, [pc, #548]	; (8005244 <HAL_RCC_OscConfig+0x778>)
 8005020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d0ed      	beq.n	8005008 <HAL_RCC_OscConfig+0x53c>
 800502c:	e015      	b.n	800505a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800502e:	f7fd fa51 	bl	80024d4 <HAL_GetTick>
 8005032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005034:	e00a      	b.n	800504c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005036:	f7fd fa4d 	bl	80024d4 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	f241 3288 	movw	r2, #5000	; 0x1388
 8005044:	4293      	cmp	r3, r2
 8005046:	d901      	bls.n	800504c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e14b      	b.n	80052e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800504c:	4b7d      	ldr	r3, [pc, #500]	; (8005244 <HAL_RCC_OscConfig+0x778>)
 800504e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1ed      	bne.n	8005036 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800505a:	7ffb      	ldrb	r3, [r7, #31]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d105      	bne.n	800506c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005060:	4b78      	ldr	r3, [pc, #480]	; (8005244 <HAL_RCC_OscConfig+0x778>)
 8005062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005064:	4a77      	ldr	r2, [pc, #476]	; (8005244 <HAL_RCC_OscConfig+0x778>)
 8005066:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800506a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0320 	and.w	r3, r3, #32
 8005074:	2b00      	cmp	r3, #0
 8005076:	d03c      	beq.n	80050f2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	2b00      	cmp	r3, #0
 800507e:	d01c      	beq.n	80050ba <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005080:	4b70      	ldr	r3, [pc, #448]	; (8005244 <HAL_RCC_OscConfig+0x778>)
 8005082:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005086:	4a6f      	ldr	r2, [pc, #444]	; (8005244 <HAL_RCC_OscConfig+0x778>)
 8005088:	f043 0301 	orr.w	r3, r3, #1
 800508c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005090:	f7fd fa20 	bl	80024d4 <HAL_GetTick>
 8005094:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005096:	e008      	b.n	80050aa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005098:	f7fd fa1c 	bl	80024d4 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e11c      	b.n	80052e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80050aa:	4b66      	ldr	r3, [pc, #408]	; (8005244 <HAL_RCC_OscConfig+0x778>)
 80050ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d0ef      	beq.n	8005098 <HAL_RCC_OscConfig+0x5cc>
 80050b8:	e01b      	b.n	80050f2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80050ba:	4b62      	ldr	r3, [pc, #392]	; (8005244 <HAL_RCC_OscConfig+0x778>)
 80050bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050c0:	4a60      	ldr	r2, [pc, #384]	; (8005244 <HAL_RCC_OscConfig+0x778>)
 80050c2:	f023 0301 	bic.w	r3, r3, #1
 80050c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ca:	f7fd fa03 	bl	80024d4 <HAL_GetTick>
 80050ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80050d0:	e008      	b.n	80050e4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050d2:	f7fd f9ff 	bl	80024d4 <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d901      	bls.n	80050e4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e0ff      	b.n	80052e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80050e4:	4b57      	ldr	r3, [pc, #348]	; (8005244 <HAL_RCC_OscConfig+0x778>)
 80050e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1ef      	bne.n	80050d2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f000 80f3 	beq.w	80052e2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005100:	2b02      	cmp	r3, #2
 8005102:	f040 80c9 	bne.w	8005298 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005106:	4b4f      	ldr	r3, [pc, #316]	; (8005244 <HAL_RCC_OscConfig+0x778>)
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f003 0203 	and.w	r2, r3, #3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005116:	429a      	cmp	r2, r3
 8005118:	d12c      	bne.n	8005174 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005124:	3b01      	subs	r3, #1
 8005126:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005128:	429a      	cmp	r2, r3
 800512a:	d123      	bne.n	8005174 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005136:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005138:	429a      	cmp	r2, r3
 800513a:	d11b      	bne.n	8005174 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005146:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005148:	429a      	cmp	r2, r3
 800514a:	d113      	bne.n	8005174 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005156:	085b      	lsrs	r3, r3, #1
 8005158:	3b01      	subs	r3, #1
 800515a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800515c:	429a      	cmp	r2, r3
 800515e:	d109      	bne.n	8005174 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516a:	085b      	lsrs	r3, r3, #1
 800516c:	3b01      	subs	r3, #1
 800516e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005170:	429a      	cmp	r2, r3
 8005172:	d06b      	beq.n	800524c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	2b0c      	cmp	r3, #12
 8005178:	d062      	beq.n	8005240 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800517a:	4b32      	ldr	r3, [pc, #200]	; (8005244 <HAL_RCC_OscConfig+0x778>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d001      	beq.n	800518a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e0ac      	b.n	80052e4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800518a:	4b2e      	ldr	r3, [pc, #184]	; (8005244 <HAL_RCC_OscConfig+0x778>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a2d      	ldr	r2, [pc, #180]	; (8005244 <HAL_RCC_OscConfig+0x778>)
 8005190:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005194:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005196:	f7fd f99d 	bl	80024d4 <HAL_GetTick>
 800519a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800519c:	e008      	b.n	80051b0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800519e:	f7fd f999 	bl	80024d4 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d901      	bls.n	80051b0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e099      	b.n	80052e4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051b0:	4b24      	ldr	r3, [pc, #144]	; (8005244 <HAL_RCC_OscConfig+0x778>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1f0      	bne.n	800519e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051bc:	4b21      	ldr	r3, [pc, #132]	; (8005244 <HAL_RCC_OscConfig+0x778>)
 80051be:	68da      	ldr	r2, [r3, #12]
 80051c0:	4b21      	ldr	r3, [pc, #132]	; (8005248 <HAL_RCC_OscConfig+0x77c>)
 80051c2:	4013      	ands	r3, r2
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80051cc:	3a01      	subs	r2, #1
 80051ce:	0112      	lsls	r2, r2, #4
 80051d0:	4311      	orrs	r1, r2
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051d6:	0212      	lsls	r2, r2, #8
 80051d8:	4311      	orrs	r1, r2
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80051de:	0852      	lsrs	r2, r2, #1
 80051e0:	3a01      	subs	r2, #1
 80051e2:	0552      	lsls	r2, r2, #21
 80051e4:	4311      	orrs	r1, r2
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80051ea:	0852      	lsrs	r2, r2, #1
 80051ec:	3a01      	subs	r2, #1
 80051ee:	0652      	lsls	r2, r2, #25
 80051f0:	4311      	orrs	r1, r2
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051f6:	06d2      	lsls	r2, r2, #27
 80051f8:	430a      	orrs	r2, r1
 80051fa:	4912      	ldr	r1, [pc, #72]	; (8005244 <HAL_RCC_OscConfig+0x778>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005200:	4b10      	ldr	r3, [pc, #64]	; (8005244 <HAL_RCC_OscConfig+0x778>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a0f      	ldr	r2, [pc, #60]	; (8005244 <HAL_RCC_OscConfig+0x778>)
 8005206:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800520a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800520c:	4b0d      	ldr	r3, [pc, #52]	; (8005244 <HAL_RCC_OscConfig+0x778>)
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	4a0c      	ldr	r2, [pc, #48]	; (8005244 <HAL_RCC_OscConfig+0x778>)
 8005212:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005216:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005218:	f7fd f95c 	bl	80024d4 <HAL_GetTick>
 800521c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800521e:	e008      	b.n	8005232 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005220:	f7fd f958 	bl	80024d4 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b02      	cmp	r3, #2
 800522c:	d901      	bls.n	8005232 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e058      	b.n	80052e4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005232:	4b04      	ldr	r3, [pc, #16]	; (8005244 <HAL_RCC_OscConfig+0x778>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d0f0      	beq.n	8005220 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800523e:	e050      	b.n	80052e2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e04f      	b.n	80052e4 <HAL_RCC_OscConfig+0x818>
 8005244:	40021000 	.word	0x40021000
 8005248:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800524c:	4b27      	ldr	r3, [pc, #156]	; (80052ec <HAL_RCC_OscConfig+0x820>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d144      	bne.n	80052e2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005258:	4b24      	ldr	r3, [pc, #144]	; (80052ec <HAL_RCC_OscConfig+0x820>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a23      	ldr	r2, [pc, #140]	; (80052ec <HAL_RCC_OscConfig+0x820>)
 800525e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005262:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005264:	4b21      	ldr	r3, [pc, #132]	; (80052ec <HAL_RCC_OscConfig+0x820>)
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	4a20      	ldr	r2, [pc, #128]	; (80052ec <HAL_RCC_OscConfig+0x820>)
 800526a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800526e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005270:	f7fd f930 	bl	80024d4 <HAL_GetTick>
 8005274:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005276:	e008      	b.n	800528a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005278:	f7fd f92c 	bl	80024d4 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b02      	cmp	r3, #2
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e02c      	b.n	80052e4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800528a:	4b18      	ldr	r3, [pc, #96]	; (80052ec <HAL_RCC_OscConfig+0x820>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d0f0      	beq.n	8005278 <HAL_RCC_OscConfig+0x7ac>
 8005296:	e024      	b.n	80052e2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	2b0c      	cmp	r3, #12
 800529c:	d01f      	beq.n	80052de <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800529e:	4b13      	ldr	r3, [pc, #76]	; (80052ec <HAL_RCC_OscConfig+0x820>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a12      	ldr	r2, [pc, #72]	; (80052ec <HAL_RCC_OscConfig+0x820>)
 80052a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052aa:	f7fd f913 	bl	80024d4 <HAL_GetTick>
 80052ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052b0:	e008      	b.n	80052c4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052b2:	f7fd f90f 	bl	80024d4 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d901      	bls.n	80052c4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e00f      	b.n	80052e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052c4:	4b09      	ldr	r3, [pc, #36]	; (80052ec <HAL_RCC_OscConfig+0x820>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1f0      	bne.n	80052b2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80052d0:	4b06      	ldr	r3, [pc, #24]	; (80052ec <HAL_RCC_OscConfig+0x820>)
 80052d2:	68da      	ldr	r2, [r3, #12]
 80052d4:	4905      	ldr	r1, [pc, #20]	; (80052ec <HAL_RCC_OscConfig+0x820>)
 80052d6:	4b06      	ldr	r3, [pc, #24]	; (80052f0 <HAL_RCC_OscConfig+0x824>)
 80052d8:	4013      	ands	r3, r2
 80052da:	60cb      	str	r3, [r1, #12]
 80052dc:	e001      	b.n	80052e2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e000      	b.n	80052e4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3720      	adds	r7, #32
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	40021000 	.word	0x40021000
 80052f0:	feeefffc 	.word	0xfeeefffc

080052f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d101      	bne.n	8005308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e0e7      	b.n	80054d8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005308:	4b75      	ldr	r3, [pc, #468]	; (80054e0 <HAL_RCC_ClockConfig+0x1ec>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0307 	and.w	r3, r3, #7
 8005310:	683a      	ldr	r2, [r7, #0]
 8005312:	429a      	cmp	r2, r3
 8005314:	d910      	bls.n	8005338 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005316:	4b72      	ldr	r3, [pc, #456]	; (80054e0 <HAL_RCC_ClockConfig+0x1ec>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f023 0207 	bic.w	r2, r3, #7
 800531e:	4970      	ldr	r1, [pc, #448]	; (80054e0 <HAL_RCC_ClockConfig+0x1ec>)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	4313      	orrs	r3, r2
 8005324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005326:	4b6e      	ldr	r3, [pc, #440]	; (80054e0 <HAL_RCC_ClockConfig+0x1ec>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0307 	and.w	r3, r3, #7
 800532e:	683a      	ldr	r2, [r7, #0]
 8005330:	429a      	cmp	r2, r3
 8005332:	d001      	beq.n	8005338 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e0cf      	b.n	80054d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	2b00      	cmp	r3, #0
 8005342:	d010      	beq.n	8005366 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689a      	ldr	r2, [r3, #8]
 8005348:	4b66      	ldr	r3, [pc, #408]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005350:	429a      	cmp	r2, r3
 8005352:	d908      	bls.n	8005366 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005354:	4b63      	ldr	r3, [pc, #396]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	4960      	ldr	r1, [pc, #384]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 8005362:	4313      	orrs	r3, r2
 8005364:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d04c      	beq.n	800540c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	2b03      	cmp	r3, #3
 8005378:	d107      	bne.n	800538a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800537a:	4b5a      	ldr	r3, [pc, #360]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d121      	bne.n	80053ca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e0a6      	b.n	80054d8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	2b02      	cmp	r3, #2
 8005390:	d107      	bne.n	80053a2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005392:	4b54      	ldr	r3, [pc, #336]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d115      	bne.n	80053ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e09a      	b.n	80054d8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d107      	bne.n	80053ba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80053aa:	4b4e      	ldr	r3, [pc, #312]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d109      	bne.n	80053ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e08e      	b.n	80054d8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053ba:	4b4a      	ldr	r3, [pc, #296]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e086      	b.n	80054d8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053ca:	4b46      	ldr	r3, [pc, #280]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f023 0203 	bic.w	r2, r3, #3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	4943      	ldr	r1, [pc, #268]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053dc:	f7fd f87a 	bl	80024d4 <HAL_GetTick>
 80053e0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053e2:	e00a      	b.n	80053fa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053e4:	f7fd f876 	bl	80024d4 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e06e      	b.n	80054d8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053fa:	4b3a      	ldr	r3, [pc, #232]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f003 020c 	and.w	r2, r3, #12
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	429a      	cmp	r2, r3
 800540a:	d1eb      	bne.n	80053e4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0302 	and.w	r3, r3, #2
 8005414:	2b00      	cmp	r3, #0
 8005416:	d010      	beq.n	800543a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689a      	ldr	r2, [r3, #8]
 800541c:	4b31      	ldr	r3, [pc, #196]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005424:	429a      	cmp	r2, r3
 8005426:	d208      	bcs.n	800543a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005428:	4b2e      	ldr	r3, [pc, #184]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	492b      	ldr	r1, [pc, #172]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 8005436:	4313      	orrs	r3, r2
 8005438:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800543a:	4b29      	ldr	r3, [pc, #164]	; (80054e0 <HAL_RCC_ClockConfig+0x1ec>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0307 	and.w	r3, r3, #7
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	429a      	cmp	r2, r3
 8005446:	d210      	bcs.n	800546a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005448:	4b25      	ldr	r3, [pc, #148]	; (80054e0 <HAL_RCC_ClockConfig+0x1ec>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f023 0207 	bic.w	r2, r3, #7
 8005450:	4923      	ldr	r1, [pc, #140]	; (80054e0 <HAL_RCC_ClockConfig+0x1ec>)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	4313      	orrs	r3, r2
 8005456:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005458:	4b21      	ldr	r3, [pc, #132]	; (80054e0 <HAL_RCC_ClockConfig+0x1ec>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	683a      	ldr	r2, [r7, #0]
 8005462:	429a      	cmp	r2, r3
 8005464:	d001      	beq.n	800546a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e036      	b.n	80054d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0304 	and.w	r3, r3, #4
 8005472:	2b00      	cmp	r3, #0
 8005474:	d008      	beq.n	8005488 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005476:	4b1b      	ldr	r3, [pc, #108]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	4918      	ldr	r1, [pc, #96]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 8005484:	4313      	orrs	r3, r2
 8005486:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0308 	and.w	r3, r3, #8
 8005490:	2b00      	cmp	r3, #0
 8005492:	d009      	beq.n	80054a8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005494:	4b13      	ldr	r3, [pc, #76]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	00db      	lsls	r3, r3, #3
 80054a2:	4910      	ldr	r1, [pc, #64]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054a8:	f000 f824 	bl	80054f4 <HAL_RCC_GetSysClockFreq>
 80054ac:	4602      	mov	r2, r0
 80054ae:	4b0d      	ldr	r3, [pc, #52]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	091b      	lsrs	r3, r3, #4
 80054b4:	f003 030f 	and.w	r3, r3, #15
 80054b8:	490b      	ldr	r1, [pc, #44]	; (80054e8 <HAL_RCC_ClockConfig+0x1f4>)
 80054ba:	5ccb      	ldrb	r3, [r1, r3]
 80054bc:	f003 031f 	and.w	r3, r3, #31
 80054c0:	fa22 f303 	lsr.w	r3, r2, r3
 80054c4:	4a09      	ldr	r2, [pc, #36]	; (80054ec <HAL_RCC_ClockConfig+0x1f8>)
 80054c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80054c8:	4b09      	ldr	r3, [pc, #36]	; (80054f0 <HAL_RCC_ClockConfig+0x1fc>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7fc ffb1 	bl	8002434 <HAL_InitTick>
 80054d2:	4603      	mov	r3, r0
 80054d4:	72fb      	strb	r3, [r7, #11]

  return status;
 80054d6:	7afb      	ldrb	r3, [r7, #11]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3710      	adds	r7, #16
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	40022000 	.word	0x40022000
 80054e4:	40021000 	.word	0x40021000
 80054e8:	08007520 	.word	0x08007520
 80054ec:	20000004 	.word	0x20000004
 80054f0:	20000008 	.word	0x20000008

080054f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b089      	sub	sp, #36	; 0x24
 80054f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80054fa:	2300      	movs	r3, #0
 80054fc:	61fb      	str	r3, [r7, #28]
 80054fe:	2300      	movs	r3, #0
 8005500:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005502:	4b3e      	ldr	r3, [pc, #248]	; (80055fc <HAL_RCC_GetSysClockFreq+0x108>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f003 030c 	and.w	r3, r3, #12
 800550a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800550c:	4b3b      	ldr	r3, [pc, #236]	; (80055fc <HAL_RCC_GetSysClockFreq+0x108>)
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	f003 0303 	and.w	r3, r3, #3
 8005514:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d005      	beq.n	8005528 <HAL_RCC_GetSysClockFreq+0x34>
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	2b0c      	cmp	r3, #12
 8005520:	d121      	bne.n	8005566 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d11e      	bne.n	8005566 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005528:	4b34      	ldr	r3, [pc, #208]	; (80055fc <HAL_RCC_GetSysClockFreq+0x108>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0308 	and.w	r3, r3, #8
 8005530:	2b00      	cmp	r3, #0
 8005532:	d107      	bne.n	8005544 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005534:	4b31      	ldr	r3, [pc, #196]	; (80055fc <HAL_RCC_GetSysClockFreq+0x108>)
 8005536:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800553a:	0a1b      	lsrs	r3, r3, #8
 800553c:	f003 030f 	and.w	r3, r3, #15
 8005540:	61fb      	str	r3, [r7, #28]
 8005542:	e005      	b.n	8005550 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005544:	4b2d      	ldr	r3, [pc, #180]	; (80055fc <HAL_RCC_GetSysClockFreq+0x108>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	091b      	lsrs	r3, r3, #4
 800554a:	f003 030f 	and.w	r3, r3, #15
 800554e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005550:	4a2b      	ldr	r2, [pc, #172]	; (8005600 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005558:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d10d      	bne.n	800557c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005564:	e00a      	b.n	800557c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	2b04      	cmp	r3, #4
 800556a:	d102      	bne.n	8005572 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800556c:	4b25      	ldr	r3, [pc, #148]	; (8005604 <HAL_RCC_GetSysClockFreq+0x110>)
 800556e:	61bb      	str	r3, [r7, #24]
 8005570:	e004      	b.n	800557c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	2b08      	cmp	r3, #8
 8005576:	d101      	bne.n	800557c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005578:	4b23      	ldr	r3, [pc, #140]	; (8005608 <HAL_RCC_GetSysClockFreq+0x114>)
 800557a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	2b0c      	cmp	r3, #12
 8005580:	d134      	bne.n	80055ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005582:	4b1e      	ldr	r3, [pc, #120]	; (80055fc <HAL_RCC_GetSysClockFreq+0x108>)
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	f003 0303 	and.w	r3, r3, #3
 800558a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	2b02      	cmp	r3, #2
 8005590:	d003      	beq.n	800559a <HAL_RCC_GetSysClockFreq+0xa6>
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	2b03      	cmp	r3, #3
 8005596:	d003      	beq.n	80055a0 <HAL_RCC_GetSysClockFreq+0xac>
 8005598:	e005      	b.n	80055a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800559a:	4b1a      	ldr	r3, [pc, #104]	; (8005604 <HAL_RCC_GetSysClockFreq+0x110>)
 800559c:	617b      	str	r3, [r7, #20]
      break;
 800559e:	e005      	b.n	80055ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80055a0:	4b19      	ldr	r3, [pc, #100]	; (8005608 <HAL_RCC_GetSysClockFreq+0x114>)
 80055a2:	617b      	str	r3, [r7, #20]
      break;
 80055a4:	e002      	b.n	80055ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	617b      	str	r3, [r7, #20]
      break;
 80055aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055ac:	4b13      	ldr	r3, [pc, #76]	; (80055fc <HAL_RCC_GetSysClockFreq+0x108>)
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	091b      	lsrs	r3, r3, #4
 80055b2:	f003 0307 	and.w	r3, r3, #7
 80055b6:	3301      	adds	r3, #1
 80055b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80055ba:	4b10      	ldr	r3, [pc, #64]	; (80055fc <HAL_RCC_GetSysClockFreq+0x108>)
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	0a1b      	lsrs	r3, r3, #8
 80055c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	fb03 f202 	mul.w	r2, r3, r2
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055d2:	4b0a      	ldr	r3, [pc, #40]	; (80055fc <HAL_RCC_GetSysClockFreq+0x108>)
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	0e5b      	lsrs	r3, r3, #25
 80055d8:	f003 0303 	and.w	r3, r3, #3
 80055dc:	3301      	adds	r3, #1
 80055de:	005b      	lsls	r3, r3, #1
 80055e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80055ec:	69bb      	ldr	r3, [r7, #24]
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3724      	adds	r7, #36	; 0x24
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	40021000 	.word	0x40021000
 8005600:	08007530 	.word	0x08007530
 8005604:	00f42400 	.word	0x00f42400
 8005608:	007a1200 	.word	0x007a1200

0800560c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b086      	sub	sp, #24
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005614:	2300      	movs	r3, #0
 8005616:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005618:	4b2a      	ldr	r3, [pc, #168]	; (80056c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800561a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800561c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d003      	beq.n	800562c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005624:	f7ff f9ee 	bl	8004a04 <HAL_PWREx_GetVoltageRange>
 8005628:	6178      	str	r0, [r7, #20]
 800562a:	e014      	b.n	8005656 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800562c:	4b25      	ldr	r3, [pc, #148]	; (80056c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800562e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005630:	4a24      	ldr	r2, [pc, #144]	; (80056c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005636:	6593      	str	r3, [r2, #88]	; 0x58
 8005638:	4b22      	ldr	r3, [pc, #136]	; (80056c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800563a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800563c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005640:	60fb      	str	r3, [r7, #12]
 8005642:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005644:	f7ff f9de 	bl	8004a04 <HAL_PWREx_GetVoltageRange>
 8005648:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800564a:	4b1e      	ldr	r3, [pc, #120]	; (80056c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800564c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800564e:	4a1d      	ldr	r2, [pc, #116]	; (80056c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005650:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005654:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800565c:	d10b      	bne.n	8005676 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2b80      	cmp	r3, #128	; 0x80
 8005662:	d919      	bls.n	8005698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2ba0      	cmp	r3, #160	; 0xa0
 8005668:	d902      	bls.n	8005670 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800566a:	2302      	movs	r3, #2
 800566c:	613b      	str	r3, [r7, #16]
 800566e:	e013      	b.n	8005698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005670:	2301      	movs	r3, #1
 8005672:	613b      	str	r3, [r7, #16]
 8005674:	e010      	b.n	8005698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2b80      	cmp	r3, #128	; 0x80
 800567a:	d902      	bls.n	8005682 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800567c:	2303      	movs	r3, #3
 800567e:	613b      	str	r3, [r7, #16]
 8005680:	e00a      	b.n	8005698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b80      	cmp	r3, #128	; 0x80
 8005686:	d102      	bne.n	800568e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005688:	2302      	movs	r3, #2
 800568a:	613b      	str	r3, [r7, #16]
 800568c:	e004      	b.n	8005698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b70      	cmp	r3, #112	; 0x70
 8005692:	d101      	bne.n	8005698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005694:	2301      	movs	r3, #1
 8005696:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005698:	4b0b      	ldr	r3, [pc, #44]	; (80056c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f023 0207 	bic.w	r2, r3, #7
 80056a0:	4909      	ldr	r1, [pc, #36]	; (80056c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80056a8:	4b07      	ldr	r3, [pc, #28]	; (80056c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0307 	and.w	r3, r3, #7
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d001      	beq.n	80056ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e000      	b.n	80056bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3718      	adds	r7, #24
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	40021000 	.word	0x40021000
 80056c8:	40022000 	.word	0x40022000

080056cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b086      	sub	sp, #24
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80056d4:	2300      	movs	r3, #0
 80056d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80056d8:	2300      	movs	r3, #0
 80056da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d031      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80056f0:	d01a      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80056f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80056f6:	d814      	bhi.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d009      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80056fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005700:	d10f      	bne.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005702:	4b5d      	ldr	r3, [pc, #372]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	4a5c      	ldr	r2, [pc, #368]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800570c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800570e:	e00c      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	3304      	adds	r3, #4
 8005714:	2100      	movs	r1, #0
 8005716:	4618      	mov	r0, r3
 8005718:	f000 f9f0 	bl	8005afc <RCCEx_PLLSAI1_Config>
 800571c:	4603      	mov	r3, r0
 800571e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005720:	e003      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	74fb      	strb	r3, [r7, #19]
      break;
 8005726:	e000      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005728:	bf00      	nop
    }

    if(ret == HAL_OK)
 800572a:	7cfb      	ldrb	r3, [r7, #19]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10b      	bne.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005730:	4b51      	ldr	r3, [pc, #324]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005736:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800573e:	494e      	ldr	r1, [pc, #312]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005740:	4313      	orrs	r3, r2
 8005742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005746:	e001      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005748:	7cfb      	ldrb	r3, [r7, #19]
 800574a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 809e 	beq.w	8005896 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800575a:	2300      	movs	r3, #0
 800575c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800575e:	4b46      	ldr	r3, [pc, #280]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800576a:	2301      	movs	r3, #1
 800576c:	e000      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800576e:	2300      	movs	r3, #0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00d      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005774:	4b40      	ldr	r3, [pc, #256]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005778:	4a3f      	ldr	r2, [pc, #252]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800577a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800577e:	6593      	str	r3, [r2, #88]	; 0x58
 8005780:	4b3d      	ldr	r3, [pc, #244]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005788:	60bb      	str	r3, [r7, #8]
 800578a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800578c:	2301      	movs	r3, #1
 800578e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005790:	4b3a      	ldr	r3, [pc, #232]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a39      	ldr	r2, [pc, #228]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800579a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800579c:	f7fc fe9a 	bl	80024d4 <HAL_GetTick>
 80057a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80057a2:	e009      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057a4:	f7fc fe96 	bl	80024d4 <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d902      	bls.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	74fb      	strb	r3, [r7, #19]
        break;
 80057b6:	e005      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80057b8:	4b30      	ldr	r3, [pc, #192]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d0ef      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80057c4:	7cfb      	ldrb	r3, [r7, #19]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d15a      	bne.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80057ca:	4b2b      	ldr	r3, [pc, #172]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d01e      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d019      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80057e6:	4b24      	ldr	r3, [pc, #144]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057f0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80057f2:	4b21      	ldr	r3, [pc, #132]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f8:	4a1f      	ldr	r2, [pc, #124]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005802:	4b1d      	ldr	r3, [pc, #116]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005808:	4a1b      	ldr	r2, [pc, #108]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800580a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800580e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005812:	4a19      	ldr	r2, [pc, #100]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b00      	cmp	r3, #0
 8005822:	d016      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005824:	f7fc fe56 	bl	80024d4 <HAL_GetTick>
 8005828:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800582a:	e00b      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800582c:	f7fc fe52 	bl	80024d4 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	f241 3288 	movw	r2, #5000	; 0x1388
 800583a:	4293      	cmp	r3, r2
 800583c:	d902      	bls.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	74fb      	strb	r3, [r7, #19]
            break;
 8005842:	e006      	b.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005844:	4b0c      	ldr	r3, [pc, #48]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b00      	cmp	r3, #0
 8005850:	d0ec      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005852:	7cfb      	ldrb	r3, [r7, #19]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d10b      	bne.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005858:	4b07      	ldr	r3, [pc, #28]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800585a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800585e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005866:	4904      	ldr	r1, [pc, #16]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005868:	4313      	orrs	r3, r2
 800586a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800586e:	e009      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005870:	7cfb      	ldrb	r3, [r7, #19]
 8005872:	74bb      	strb	r3, [r7, #18]
 8005874:	e006      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005876:	bf00      	nop
 8005878:	40021000 	.word	0x40021000
 800587c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005880:	7cfb      	ldrb	r3, [r7, #19]
 8005882:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005884:	7c7b      	ldrb	r3, [r7, #17]
 8005886:	2b01      	cmp	r3, #1
 8005888:	d105      	bne.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800588a:	4b9b      	ldr	r3, [pc, #620]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800588c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800588e:	4a9a      	ldr	r2, [pc, #616]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005890:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005894:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00a      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058a2:	4b95      	ldr	r3, [pc, #596]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80058a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a8:	f023 0203 	bic.w	r2, r3, #3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a1b      	ldr	r3, [r3, #32]
 80058b0:	4991      	ldr	r1, [pc, #580]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00a      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80058c4:	4b8c      	ldr	r3, [pc, #560]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80058c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ca:	f023 020c 	bic.w	r2, r3, #12
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	4989      	ldr	r1, [pc, #548]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0304 	and.w	r3, r3, #4
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00a      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058e6:	4b84      	ldr	r3, [pc, #528]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80058e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f4:	4980      	ldr	r1, [pc, #512]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0320 	and.w	r3, r3, #32
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00a      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005908:	4b7b      	ldr	r3, [pc, #492]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800590a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800590e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005916:	4978      	ldr	r1, [pc, #480]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005918:	4313      	orrs	r3, r2
 800591a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00a      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800592a:	4b73      	ldr	r3, [pc, #460]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800592c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005930:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005938:	496f      	ldr	r1, [pc, #444]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800593a:	4313      	orrs	r3, r2
 800593c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00a      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800594c:	4b6a      	ldr	r3, [pc, #424]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800594e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005952:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595a:	4967      	ldr	r1, [pc, #412]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800595c:	4313      	orrs	r3, r2
 800595e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00a      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800596e:	4b62      	ldr	r3, [pc, #392]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005974:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597c:	495e      	ldr	r1, [pc, #376]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800597e:	4313      	orrs	r3, r2
 8005980:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800598c:	2b00      	cmp	r3, #0
 800598e:	d00a      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005990:	4b59      	ldr	r3, [pc, #356]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005996:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800599e:	4956      	ldr	r1, [pc, #344]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80059a0:	4313      	orrs	r3, r2
 80059a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00a      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80059b2:	4b51      	ldr	r3, [pc, #324]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80059b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c0:	494d      	ldr	r1, [pc, #308]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d028      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80059d4:	4b48      	ldr	r3, [pc, #288]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80059d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059e2:	4945      	ldr	r1, [pc, #276]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059f2:	d106      	bne.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059f4:	4b40      	ldr	r3, [pc, #256]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	4a3f      	ldr	r2, [pc, #252]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80059fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059fe:	60d3      	str	r3, [r2, #12]
 8005a00:	e011      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a0a:	d10c      	bne.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	3304      	adds	r3, #4
 8005a10:	2101      	movs	r1, #1
 8005a12:	4618      	mov	r0, r3
 8005a14:	f000 f872 	bl	8005afc <RCCEx_PLLSAI1_Config>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a1c:	7cfb      	ldrb	r3, [r7, #19]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8005a22:	7cfb      	ldrb	r3, [r7, #19]
 8005a24:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d028      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a32:	4b31      	ldr	r3, [pc, #196]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a38:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a40:	492d      	ldr	r1, [pc, #180]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a50:	d106      	bne.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a52:	4b29      	ldr	r3, [pc, #164]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	4a28      	ldr	r2, [pc, #160]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a5c:	60d3      	str	r3, [r2, #12]
 8005a5e:	e011      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a68:	d10c      	bne.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	3304      	adds	r3, #4
 8005a6e:	2101      	movs	r1, #1
 8005a70:	4618      	mov	r0, r3
 8005a72:	f000 f843 	bl	8005afc <RCCEx_PLLSAI1_Config>
 8005a76:	4603      	mov	r3, r0
 8005a78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a7a:	7cfb      	ldrb	r3, [r7, #19]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d001      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8005a80:	7cfb      	ldrb	r3, [r7, #19]
 8005a82:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d01c      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a90:	4b19      	ldr	r3, [pc, #100]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a96:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a9e:	4916      	ldr	r1, [pc, #88]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005aae:	d10c      	bne.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	3304      	adds	r3, #4
 8005ab4:	2102      	movs	r1, #2
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 f820 	bl	8005afc <RCCEx_PLLSAI1_Config>
 8005abc:	4603      	mov	r3, r0
 8005abe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ac0:	7cfb      	ldrb	r3, [r7, #19]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d001      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8005ac6:	7cfb      	ldrb	r3, [r7, #19]
 8005ac8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00a      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005ad6:	4b08      	ldr	r3, [pc, #32]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005adc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae4:	4904      	ldr	r1, [pc, #16]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005aec:	7cbb      	ldrb	r3, [r7, #18]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3718      	adds	r7, #24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	40021000 	.word	0x40021000

08005afc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b06:	2300      	movs	r3, #0
 8005b08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005b0a:	4b74      	ldr	r3, [pc, #464]	; (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	f003 0303 	and.w	r3, r3, #3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d018      	beq.n	8005b48 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005b16:	4b71      	ldr	r3, [pc, #452]	; (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	f003 0203 	and.w	r2, r3, #3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d10d      	bne.n	8005b42 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
       ||
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d009      	beq.n	8005b42 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005b2e:	4b6b      	ldr	r3, [pc, #428]	; (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	091b      	lsrs	r3, r3, #4
 8005b34:	f003 0307 	and.w	r3, r3, #7
 8005b38:	1c5a      	adds	r2, r3, #1
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685b      	ldr	r3, [r3, #4]
       ||
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d047      	beq.n	8005bd2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	73fb      	strb	r3, [r7, #15]
 8005b46:	e044      	b.n	8005bd2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2b03      	cmp	r3, #3
 8005b4e:	d018      	beq.n	8005b82 <RCCEx_PLLSAI1_Config+0x86>
 8005b50:	2b03      	cmp	r3, #3
 8005b52:	d825      	bhi.n	8005ba0 <RCCEx_PLLSAI1_Config+0xa4>
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d002      	beq.n	8005b5e <RCCEx_PLLSAI1_Config+0x62>
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d009      	beq.n	8005b70 <RCCEx_PLLSAI1_Config+0x74>
 8005b5c:	e020      	b.n	8005ba0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b5e:	4b5f      	ldr	r3, [pc, #380]	; (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d11d      	bne.n	8005ba6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b6e:	e01a      	b.n	8005ba6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b70:	4b5a      	ldr	r3, [pc, #360]	; (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d116      	bne.n	8005baa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b80:	e013      	b.n	8005baa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b82:	4b56      	ldr	r3, [pc, #344]	; (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10f      	bne.n	8005bae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b8e:	4b53      	ldr	r3, [pc, #332]	; (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d109      	bne.n	8005bae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b9e:	e006      	b.n	8005bae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ba4:	e004      	b.n	8005bb0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005ba6:	bf00      	nop
 8005ba8:	e002      	b.n	8005bb0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005baa:	bf00      	nop
 8005bac:	e000      	b.n	8005bb0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005bae:	bf00      	nop
    }

    if(status == HAL_OK)
 8005bb0:	7bfb      	ldrb	r3, [r7, #15]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10d      	bne.n	8005bd2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005bb6:	4b49      	ldr	r3, [pc, #292]	; (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6819      	ldr	r1, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	011b      	lsls	r3, r3, #4
 8005bca:	430b      	orrs	r3, r1
 8005bcc:	4943      	ldr	r1, [pc, #268]	; (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005bd2:	7bfb      	ldrb	r3, [r7, #15]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d17c      	bne.n	8005cd2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005bd8:	4b40      	ldr	r3, [pc, #256]	; (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a3f      	ldr	r2, [pc, #252]	; (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bde:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005be2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005be4:	f7fc fc76 	bl	80024d4 <HAL_GetTick>
 8005be8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005bea:	e009      	b.n	8005c00 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005bec:	f7fc fc72 	bl	80024d4 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d902      	bls.n	8005c00 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	73fb      	strb	r3, [r7, #15]
        break;
 8005bfe:	e005      	b.n	8005c0c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c00:	4b36      	ldr	r3, [pc, #216]	; (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1ef      	bne.n	8005bec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005c0c:	7bfb      	ldrb	r3, [r7, #15]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d15f      	bne.n	8005cd2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d110      	bne.n	8005c3a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c18:	4b30      	ldr	r3, [pc, #192]	; (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005c20:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	6892      	ldr	r2, [r2, #8]
 8005c28:	0211      	lsls	r1, r2, #8
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	68d2      	ldr	r2, [r2, #12]
 8005c2e:	06d2      	lsls	r2, r2, #27
 8005c30:	430a      	orrs	r2, r1
 8005c32:	492a      	ldr	r1, [pc, #168]	; (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	610b      	str	r3, [r1, #16]
 8005c38:	e027      	b.n	8005c8a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d112      	bne.n	8005c66 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c40:	4b26      	ldr	r3, [pc, #152]	; (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005c48:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	6892      	ldr	r2, [r2, #8]
 8005c50:	0211      	lsls	r1, r2, #8
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	6912      	ldr	r2, [r2, #16]
 8005c56:	0852      	lsrs	r2, r2, #1
 8005c58:	3a01      	subs	r2, #1
 8005c5a:	0552      	lsls	r2, r2, #21
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	491f      	ldr	r1, [pc, #124]	; (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	610b      	str	r3, [r1, #16]
 8005c64:	e011      	b.n	8005c8a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c66:	4b1d      	ldr	r3, [pc, #116]	; (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005c6e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	6892      	ldr	r2, [r2, #8]
 8005c76:	0211      	lsls	r1, r2, #8
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	6952      	ldr	r2, [r2, #20]
 8005c7c:	0852      	lsrs	r2, r2, #1
 8005c7e:	3a01      	subs	r2, #1
 8005c80:	0652      	lsls	r2, r2, #25
 8005c82:	430a      	orrs	r2, r1
 8005c84:	4915      	ldr	r1, [pc, #84]	; (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005c8a:	4b14      	ldr	r3, [pc, #80]	; (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a13      	ldr	r2, [pc, #76]	; (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c94:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c96:	f7fc fc1d 	bl	80024d4 <HAL_GetTick>
 8005c9a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c9c:	e009      	b.n	8005cb2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c9e:	f7fc fc19 	bl	80024d4 <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d902      	bls.n	8005cb2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	73fb      	strb	r3, [r7, #15]
          break;
 8005cb0:	e005      	b.n	8005cbe <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005cb2:	4b0a      	ldr	r3, [pc, #40]	; (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d0ef      	beq.n	8005c9e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005cbe:	7bfb      	ldrb	r3, [r7, #15]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d106      	bne.n	8005cd2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005cc4:	4b05      	ldr	r3, [pc, #20]	; (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cc6:	691a      	ldr	r2, [r3, #16]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	4903      	ldr	r1, [pc, #12]	; (8005cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	40021000 	.word	0x40021000

08005ce0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d101      	bne.n	8005cf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e049      	b.n	8005d86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d106      	bne.n	8005d0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f7fc fa4a 	bl	80021a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2202      	movs	r2, #2
 8005d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	3304      	adds	r3, #4
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	4610      	mov	r0, r2
 8005d20:	f000 fd1e 	bl	8006760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
	...

08005d90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d001      	beq.n	8005da8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e03b      	b.n	8005e20 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2202      	movs	r2, #2
 8005dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68da      	ldr	r2, [r3, #12]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f042 0201 	orr.w	r2, r2, #1
 8005dbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a19      	ldr	r2, [pc, #100]	; (8005e2c <HAL_TIM_Base_Start_IT+0x9c>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d009      	beq.n	8005dde <HAL_TIM_Base_Start_IT+0x4e>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dd2:	d004      	beq.n	8005dde <HAL_TIM_Base_Start_IT+0x4e>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a15      	ldr	r2, [pc, #84]	; (8005e30 <HAL_TIM_Base_Start_IT+0xa0>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d115      	bne.n	8005e0a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	689a      	ldr	r2, [r3, #8]
 8005de4:	4b13      	ldr	r3, [pc, #76]	; (8005e34 <HAL_TIM_Base_Start_IT+0xa4>)
 8005de6:	4013      	ands	r3, r2
 8005de8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2b06      	cmp	r3, #6
 8005dee:	d015      	beq.n	8005e1c <HAL_TIM_Base_Start_IT+0x8c>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005df6:	d011      	beq.n	8005e1c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f042 0201 	orr.w	r2, r2, #1
 8005e06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e08:	e008      	b.n	8005e1c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f042 0201 	orr.w	r2, r2, #1
 8005e18:	601a      	str	r2, [r3, #0]
 8005e1a:	e000      	b.n	8005e1e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e1c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3714      	adds	r7, #20
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr
 8005e2c:	40012c00 	.word	0x40012c00
 8005e30:	40014000 	.word	0x40014000
 8005e34:	00010007 	.word	0x00010007

08005e38 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68da      	ldr	r2, [r3, #12]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f022 0201 	bic.w	r2, r2, #1
 8005e4e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6a1a      	ldr	r2, [r3, #32]
 8005e56:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10f      	bne.n	8005e80 <HAL_TIM_Base_Stop_IT+0x48>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	6a1a      	ldr	r2, [r3, #32]
 8005e66:	f240 4344 	movw	r3, #1092	; 0x444
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d107      	bne.n	8005e80 <HAL_TIM_Base_Stop_IT+0x48>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f022 0201 	bic.w	r2, r2, #1
 8005e7e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	370c      	adds	r7, #12
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr

08005e96 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b082      	sub	sp, #8
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d101      	bne.n	8005ea8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e049      	b.n	8005f3c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d106      	bne.n	8005ec2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 f841 	bl	8005f44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2202      	movs	r2, #2
 8005ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	3304      	adds	r3, #4
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	4610      	mov	r0, r2
 8005ed6:	f000 fc43 	bl	8006760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3708      	adds	r7, #8
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f4c:	bf00      	nop
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d109      	bne.n	8005f7c <HAL_TIM_PWM_Start+0x24>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	bf14      	ite	ne
 8005f74:	2301      	movne	r3, #1
 8005f76:	2300      	moveq	r3, #0
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	e03c      	b.n	8005ff6 <HAL_TIM_PWM_Start+0x9e>
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	2b04      	cmp	r3, #4
 8005f80:	d109      	bne.n	8005f96 <HAL_TIM_PWM_Start+0x3e>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	bf14      	ite	ne
 8005f8e:	2301      	movne	r3, #1
 8005f90:	2300      	moveq	r3, #0
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	e02f      	b.n	8005ff6 <HAL_TIM_PWM_Start+0x9e>
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	2b08      	cmp	r3, #8
 8005f9a:	d109      	bne.n	8005fb0 <HAL_TIM_PWM_Start+0x58>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	bf14      	ite	ne
 8005fa8:	2301      	movne	r3, #1
 8005faa:	2300      	moveq	r3, #0
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	e022      	b.n	8005ff6 <HAL_TIM_PWM_Start+0x9e>
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	2b0c      	cmp	r3, #12
 8005fb4:	d109      	bne.n	8005fca <HAL_TIM_PWM_Start+0x72>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	bf14      	ite	ne
 8005fc2:	2301      	movne	r3, #1
 8005fc4:	2300      	moveq	r3, #0
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	e015      	b.n	8005ff6 <HAL_TIM_PWM_Start+0x9e>
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	2b10      	cmp	r3, #16
 8005fce:	d109      	bne.n	8005fe4 <HAL_TIM_PWM_Start+0x8c>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	bf14      	ite	ne
 8005fdc:	2301      	movne	r3, #1
 8005fde:	2300      	moveq	r3, #0
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	e008      	b.n	8005ff6 <HAL_TIM_PWM_Start+0x9e>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	bf14      	ite	ne
 8005ff0:	2301      	movne	r3, #1
 8005ff2:	2300      	moveq	r3, #0
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d001      	beq.n	8005ffe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e07e      	b.n	80060fc <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d104      	bne.n	800600e <HAL_TIM_PWM_Start+0xb6>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2202      	movs	r2, #2
 8006008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800600c:	e023      	b.n	8006056 <HAL_TIM_PWM_Start+0xfe>
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	2b04      	cmp	r3, #4
 8006012:	d104      	bne.n	800601e <HAL_TIM_PWM_Start+0xc6>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2202      	movs	r2, #2
 8006018:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800601c:	e01b      	b.n	8006056 <HAL_TIM_PWM_Start+0xfe>
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	2b08      	cmp	r3, #8
 8006022:	d104      	bne.n	800602e <HAL_TIM_PWM_Start+0xd6>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2202      	movs	r2, #2
 8006028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800602c:	e013      	b.n	8006056 <HAL_TIM_PWM_Start+0xfe>
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	2b0c      	cmp	r3, #12
 8006032:	d104      	bne.n	800603e <HAL_TIM_PWM_Start+0xe6>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2202      	movs	r2, #2
 8006038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800603c:	e00b      	b.n	8006056 <HAL_TIM_PWM_Start+0xfe>
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	2b10      	cmp	r3, #16
 8006042:	d104      	bne.n	800604e <HAL_TIM_PWM_Start+0xf6>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2202      	movs	r2, #2
 8006048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800604c:	e003      	b.n	8006056 <HAL_TIM_PWM_Start+0xfe>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2202      	movs	r2, #2
 8006052:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2201      	movs	r2, #1
 800605c:	6839      	ldr	r1, [r7, #0]
 800605e:	4618      	mov	r0, r3
 8006060:	f000 fefa 	bl	8006e58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a26      	ldr	r2, [pc, #152]	; (8006104 <HAL_TIM_PWM_Start+0x1ac>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d009      	beq.n	8006082 <HAL_TIM_PWM_Start+0x12a>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a25      	ldr	r2, [pc, #148]	; (8006108 <HAL_TIM_PWM_Start+0x1b0>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d004      	beq.n	8006082 <HAL_TIM_PWM_Start+0x12a>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a23      	ldr	r2, [pc, #140]	; (800610c <HAL_TIM_PWM_Start+0x1b4>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d101      	bne.n	8006086 <HAL_TIM_PWM_Start+0x12e>
 8006082:	2301      	movs	r3, #1
 8006084:	e000      	b.n	8006088 <HAL_TIM_PWM_Start+0x130>
 8006086:	2300      	movs	r3, #0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d007      	beq.n	800609c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800609a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a18      	ldr	r2, [pc, #96]	; (8006104 <HAL_TIM_PWM_Start+0x1ac>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d009      	beq.n	80060ba <HAL_TIM_PWM_Start+0x162>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ae:	d004      	beq.n	80060ba <HAL_TIM_PWM_Start+0x162>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a14      	ldr	r2, [pc, #80]	; (8006108 <HAL_TIM_PWM_Start+0x1b0>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d115      	bne.n	80060e6 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	689a      	ldr	r2, [r3, #8]
 80060c0:	4b13      	ldr	r3, [pc, #76]	; (8006110 <HAL_TIM_PWM_Start+0x1b8>)
 80060c2:	4013      	ands	r3, r2
 80060c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2b06      	cmp	r3, #6
 80060ca:	d015      	beq.n	80060f8 <HAL_TIM_PWM_Start+0x1a0>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060d2:	d011      	beq.n	80060f8 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f042 0201 	orr.w	r2, r2, #1
 80060e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060e4:	e008      	b.n	80060f8 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f042 0201 	orr.w	r2, r2, #1
 80060f4:	601a      	str	r2, [r3, #0]
 80060f6:	e000      	b.n	80060fa <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}
 8006104:	40012c00 	.word	0x40012c00
 8006108:	40014000 	.word	0x40014000
 800610c:	40014400 	.word	0x40014400
 8006110:	00010007 	.word	0x00010007

08006114 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	f003 0302 	and.w	r3, r3, #2
 8006126:	2b02      	cmp	r3, #2
 8006128:	d122      	bne.n	8006170 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	f003 0302 	and.w	r3, r3, #2
 8006134:	2b02      	cmp	r3, #2
 8006136:	d11b      	bne.n	8006170 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f06f 0202 	mvn.w	r2, #2
 8006140:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	f003 0303 	and.w	r3, r3, #3
 8006152:	2b00      	cmp	r3, #0
 8006154:	d003      	beq.n	800615e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 fae3 	bl	8006722 <HAL_TIM_IC_CaptureCallback>
 800615c:	e005      	b.n	800616a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 fad5 	bl	800670e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 fae6 	bl	8006736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	f003 0304 	and.w	r3, r3, #4
 800617a:	2b04      	cmp	r3, #4
 800617c:	d122      	bne.n	80061c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	f003 0304 	and.w	r3, r3, #4
 8006188:	2b04      	cmp	r3, #4
 800618a:	d11b      	bne.n	80061c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f06f 0204 	mvn.w	r2, #4
 8006194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2202      	movs	r2, #2
 800619a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d003      	beq.n	80061b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 fab9 	bl	8006722 <HAL_TIM_IC_CaptureCallback>
 80061b0:	e005      	b.n	80061be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 faab 	bl	800670e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 fabc 	bl	8006736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	f003 0308 	and.w	r3, r3, #8
 80061ce:	2b08      	cmp	r3, #8
 80061d0:	d122      	bne.n	8006218 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	f003 0308 	and.w	r3, r3, #8
 80061dc:	2b08      	cmp	r3, #8
 80061de:	d11b      	bne.n	8006218 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f06f 0208 	mvn.w	r2, #8
 80061e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2204      	movs	r2, #4
 80061ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	69db      	ldr	r3, [r3, #28]
 80061f6:	f003 0303 	and.w	r3, r3, #3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d003      	beq.n	8006206 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 fa8f 	bl	8006722 <HAL_TIM_IC_CaptureCallback>
 8006204:	e005      	b.n	8006212 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 fa81 	bl	800670e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 fa92 	bl	8006736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	f003 0310 	and.w	r3, r3, #16
 8006222:	2b10      	cmp	r3, #16
 8006224:	d122      	bne.n	800626c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	f003 0310 	and.w	r3, r3, #16
 8006230:	2b10      	cmp	r3, #16
 8006232:	d11b      	bne.n	800626c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f06f 0210 	mvn.w	r2, #16
 800623c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2208      	movs	r2, #8
 8006242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	69db      	ldr	r3, [r3, #28]
 800624a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800624e:	2b00      	cmp	r3, #0
 8006250:	d003      	beq.n	800625a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 fa65 	bl	8006722 <HAL_TIM_IC_CaptureCallback>
 8006258:	e005      	b.n	8006266 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 fa57 	bl	800670e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 fa68 	bl	8006736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	f003 0301 	and.w	r3, r3, #1
 8006276:	2b01      	cmp	r3, #1
 8006278:	d10e      	bne.n	8006298 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	f003 0301 	and.w	r3, r3, #1
 8006284:	2b01      	cmp	r3, #1
 8006286:	d107      	bne.n	8006298 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f06f 0201 	mvn.w	r2, #1
 8006290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f7fa fe5a 	bl	8000f4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a2:	2b80      	cmp	r3, #128	; 0x80
 80062a4:	d10e      	bne.n	80062c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062b0:	2b80      	cmp	r3, #128	; 0x80
 80062b2:	d107      	bne.n	80062c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 fed8 	bl	8007074 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062d2:	d10e      	bne.n	80062f2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062de:	2b80      	cmp	r3, #128	; 0x80
 80062e0:	d107      	bne.n	80062f2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80062ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 fecb 	bl	8007088 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fc:	2b40      	cmp	r3, #64	; 0x40
 80062fe:	d10e      	bne.n	800631e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800630a:	2b40      	cmp	r3, #64	; 0x40
 800630c:	d107      	bne.n	800631e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 fa16 	bl	800674a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	f003 0320 	and.w	r3, r3, #32
 8006328:	2b20      	cmp	r3, #32
 800632a:	d10e      	bne.n	800634a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	f003 0320 	and.w	r3, r3, #32
 8006336:	2b20      	cmp	r3, #32
 8006338:	d107      	bne.n	800634a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f06f 0220 	mvn.w	r2, #32
 8006342:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 fe8b 	bl	8007060 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800634a:	bf00      	nop
 800634c:	3708      	adds	r7, #8
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
	...

08006354 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b086      	sub	sp, #24
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006360:	2300      	movs	r3, #0
 8006362:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800636a:	2b01      	cmp	r3, #1
 800636c:	d101      	bne.n	8006372 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800636e:	2302      	movs	r3, #2
 8006370:	e0ff      	b.n	8006572 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2201      	movs	r2, #1
 8006376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2b14      	cmp	r3, #20
 800637e:	f200 80f0 	bhi.w	8006562 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006382:	a201      	add	r2, pc, #4	; (adr r2, 8006388 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006388:	080063dd 	.word	0x080063dd
 800638c:	08006563 	.word	0x08006563
 8006390:	08006563 	.word	0x08006563
 8006394:	08006563 	.word	0x08006563
 8006398:	0800641d 	.word	0x0800641d
 800639c:	08006563 	.word	0x08006563
 80063a0:	08006563 	.word	0x08006563
 80063a4:	08006563 	.word	0x08006563
 80063a8:	0800645f 	.word	0x0800645f
 80063ac:	08006563 	.word	0x08006563
 80063b0:	08006563 	.word	0x08006563
 80063b4:	08006563 	.word	0x08006563
 80063b8:	0800649f 	.word	0x0800649f
 80063bc:	08006563 	.word	0x08006563
 80063c0:	08006563 	.word	0x08006563
 80063c4:	08006563 	.word	0x08006563
 80063c8:	080064e1 	.word	0x080064e1
 80063cc:	08006563 	.word	0x08006563
 80063d0:	08006563 	.word	0x08006563
 80063d4:	08006563 	.word	0x08006563
 80063d8:	08006521 	.word	0x08006521
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68b9      	ldr	r1, [r7, #8]
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 fa20 	bl	8006828 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	699a      	ldr	r2, [r3, #24]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f042 0208 	orr.w	r2, r2, #8
 80063f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	699a      	ldr	r2, [r3, #24]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f022 0204 	bic.w	r2, r2, #4
 8006406:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	6999      	ldr	r1, [r3, #24]
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	691a      	ldr	r2, [r3, #16]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	430a      	orrs	r2, r1
 8006418:	619a      	str	r2, [r3, #24]
      break;
 800641a:	e0a5      	b.n	8006568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68b9      	ldr	r1, [r7, #8]
 8006422:	4618      	mov	r0, r3
 8006424:	f000 fa7c 	bl	8006920 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	699a      	ldr	r2, [r3, #24]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006436:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	699a      	ldr	r2, [r3, #24]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006446:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	6999      	ldr	r1, [r3, #24]
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	021a      	lsls	r2, r3, #8
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	430a      	orrs	r2, r1
 800645a:	619a      	str	r2, [r3, #24]
      break;
 800645c:	e084      	b.n	8006568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68b9      	ldr	r1, [r7, #8]
 8006464:	4618      	mov	r0, r3
 8006466:	f000 fad5 	bl	8006a14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	69da      	ldr	r2, [r3, #28]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f042 0208 	orr.w	r2, r2, #8
 8006478:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	69da      	ldr	r2, [r3, #28]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f022 0204 	bic.w	r2, r2, #4
 8006488:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	69d9      	ldr	r1, [r3, #28]
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	691a      	ldr	r2, [r3, #16]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	430a      	orrs	r2, r1
 800649a:	61da      	str	r2, [r3, #28]
      break;
 800649c:	e064      	b.n	8006568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68b9      	ldr	r1, [r7, #8]
 80064a4:	4618      	mov	r0, r3
 80064a6:	f000 fb2d 	bl	8006b04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	69da      	ldr	r2, [r3, #28]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	69da      	ldr	r2, [r3, #28]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	69d9      	ldr	r1, [r3, #28]
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	021a      	lsls	r2, r3, #8
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	430a      	orrs	r2, r1
 80064dc:	61da      	str	r2, [r3, #28]
      break;
 80064de:	e043      	b.n	8006568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68b9      	ldr	r1, [r7, #8]
 80064e6:	4618      	mov	r0, r3
 80064e8:	f000 fb6a 	bl	8006bc0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f042 0208 	orr.w	r2, r2, #8
 80064fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f022 0204 	bic.w	r2, r2, #4
 800650a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	691a      	ldr	r2, [r3, #16]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	430a      	orrs	r2, r1
 800651c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800651e:	e023      	b.n	8006568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68b9      	ldr	r1, [r7, #8]
 8006526:	4618      	mov	r0, r3
 8006528:	f000 fba2 	bl	8006c70 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800653a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800654a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	021a      	lsls	r2, r3, #8
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	430a      	orrs	r2, r1
 800655e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006560:	e002      	b.n	8006568 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	75fb      	strb	r3, [r7, #23]
      break;
 8006566:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006570:	7dfb      	ldrb	r3, [r7, #23]
}
 8006572:	4618      	mov	r0, r3
 8006574:	3718      	adds	r7, #24
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop

0800657c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006586:	2300      	movs	r3, #0
 8006588:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006590:	2b01      	cmp	r3, #1
 8006592:	d101      	bne.n	8006598 <HAL_TIM_ConfigClockSource+0x1c>
 8006594:	2302      	movs	r3, #2
 8006596:	e0b6      	b.n	8006706 <HAL_TIM_ConfigClockSource+0x18a>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2202      	movs	r2, #2
 80065a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80065ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68ba      	ldr	r2, [r7, #8]
 80065ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065d4:	d03e      	beq.n	8006654 <HAL_TIM_ConfigClockSource+0xd8>
 80065d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065da:	f200 8087 	bhi.w	80066ec <HAL_TIM_ConfigClockSource+0x170>
 80065de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065e2:	f000 8086 	beq.w	80066f2 <HAL_TIM_ConfigClockSource+0x176>
 80065e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ea:	d87f      	bhi.n	80066ec <HAL_TIM_ConfigClockSource+0x170>
 80065ec:	2b70      	cmp	r3, #112	; 0x70
 80065ee:	d01a      	beq.n	8006626 <HAL_TIM_ConfigClockSource+0xaa>
 80065f0:	2b70      	cmp	r3, #112	; 0x70
 80065f2:	d87b      	bhi.n	80066ec <HAL_TIM_ConfigClockSource+0x170>
 80065f4:	2b60      	cmp	r3, #96	; 0x60
 80065f6:	d050      	beq.n	800669a <HAL_TIM_ConfigClockSource+0x11e>
 80065f8:	2b60      	cmp	r3, #96	; 0x60
 80065fa:	d877      	bhi.n	80066ec <HAL_TIM_ConfigClockSource+0x170>
 80065fc:	2b50      	cmp	r3, #80	; 0x50
 80065fe:	d03c      	beq.n	800667a <HAL_TIM_ConfigClockSource+0xfe>
 8006600:	2b50      	cmp	r3, #80	; 0x50
 8006602:	d873      	bhi.n	80066ec <HAL_TIM_ConfigClockSource+0x170>
 8006604:	2b40      	cmp	r3, #64	; 0x40
 8006606:	d058      	beq.n	80066ba <HAL_TIM_ConfigClockSource+0x13e>
 8006608:	2b40      	cmp	r3, #64	; 0x40
 800660a:	d86f      	bhi.n	80066ec <HAL_TIM_ConfigClockSource+0x170>
 800660c:	2b30      	cmp	r3, #48	; 0x30
 800660e:	d064      	beq.n	80066da <HAL_TIM_ConfigClockSource+0x15e>
 8006610:	2b30      	cmp	r3, #48	; 0x30
 8006612:	d86b      	bhi.n	80066ec <HAL_TIM_ConfigClockSource+0x170>
 8006614:	2b20      	cmp	r3, #32
 8006616:	d060      	beq.n	80066da <HAL_TIM_ConfigClockSource+0x15e>
 8006618:	2b20      	cmp	r3, #32
 800661a:	d867      	bhi.n	80066ec <HAL_TIM_ConfigClockSource+0x170>
 800661c:	2b00      	cmp	r3, #0
 800661e:	d05c      	beq.n	80066da <HAL_TIM_ConfigClockSource+0x15e>
 8006620:	2b10      	cmp	r3, #16
 8006622:	d05a      	beq.n	80066da <HAL_TIM_ConfigClockSource+0x15e>
 8006624:	e062      	b.n	80066ec <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6818      	ldr	r0, [r3, #0]
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	6899      	ldr	r1, [r3, #8]
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	685a      	ldr	r2, [r3, #4]
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	f000 fbef 	bl	8006e18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006648:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68ba      	ldr	r2, [r7, #8]
 8006650:	609a      	str	r2, [r3, #8]
      break;
 8006652:	e04f      	b.n	80066f4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6818      	ldr	r0, [r3, #0]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	6899      	ldr	r1, [r3, #8]
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	f000 fbd8 	bl	8006e18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	689a      	ldr	r2, [r3, #8]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006676:	609a      	str	r2, [r3, #8]
      break;
 8006678:	e03c      	b.n	80066f4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6818      	ldr	r0, [r3, #0]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	6859      	ldr	r1, [r3, #4]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	461a      	mov	r2, r3
 8006688:	f000 fb4c 	bl	8006d24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2150      	movs	r1, #80	; 0x50
 8006692:	4618      	mov	r0, r3
 8006694:	f000 fba5 	bl	8006de2 <TIM_ITRx_SetConfig>
      break;
 8006698:	e02c      	b.n	80066f4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6818      	ldr	r0, [r3, #0]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	6859      	ldr	r1, [r3, #4]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	461a      	mov	r2, r3
 80066a8:	f000 fb6b 	bl	8006d82 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2160      	movs	r1, #96	; 0x60
 80066b2:	4618      	mov	r0, r3
 80066b4:	f000 fb95 	bl	8006de2 <TIM_ITRx_SetConfig>
      break;
 80066b8:	e01c      	b.n	80066f4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6818      	ldr	r0, [r3, #0]
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	6859      	ldr	r1, [r3, #4]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	461a      	mov	r2, r3
 80066c8:	f000 fb2c 	bl	8006d24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2140      	movs	r1, #64	; 0x40
 80066d2:	4618      	mov	r0, r3
 80066d4:	f000 fb85 	bl	8006de2 <TIM_ITRx_SetConfig>
      break;
 80066d8:	e00c      	b.n	80066f4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4619      	mov	r1, r3
 80066e4:	4610      	mov	r0, r2
 80066e6:	f000 fb7c 	bl	8006de2 <TIM_ITRx_SetConfig>
      break;
 80066ea:	e003      	b.n	80066f4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	73fb      	strb	r3, [r7, #15]
      break;
 80066f0:	e000      	b.n	80066f4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80066f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006704:	7bfb      	ldrb	r3, [r7, #15]
}
 8006706:	4618      	mov	r0, r3
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800670e:	b480      	push	{r7}
 8006710:	b083      	sub	sp, #12
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006716:	bf00      	nop
 8006718:	370c      	adds	r7, #12
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr

08006722 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006722:	b480      	push	{r7}
 8006724:	b083      	sub	sp, #12
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800672a:	bf00      	nop
 800672c:	370c      	adds	r7, #12
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr

08006736 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006736:	b480      	push	{r7}
 8006738:	b083      	sub	sp, #12
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800673e:	bf00      	nop
 8006740:	370c      	adds	r7, #12
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr

0800674a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800674a:	b480      	push	{r7}
 800674c:	b083      	sub	sp, #12
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006752:	bf00      	nop
 8006754:	370c      	adds	r7, #12
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
	...

08006760 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a2a      	ldr	r2, [pc, #168]	; (800681c <TIM_Base_SetConfig+0xbc>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d003      	beq.n	8006780 <TIM_Base_SetConfig+0x20>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800677e:	d108      	bne.n	8006792 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006786:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	4313      	orrs	r3, r2
 8006790:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a21      	ldr	r2, [pc, #132]	; (800681c <TIM_Base_SetConfig+0xbc>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d00b      	beq.n	80067b2 <TIM_Base_SetConfig+0x52>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067a0:	d007      	beq.n	80067b2 <TIM_Base_SetConfig+0x52>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a1e      	ldr	r2, [pc, #120]	; (8006820 <TIM_Base_SetConfig+0xc0>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d003      	beq.n	80067b2 <TIM_Base_SetConfig+0x52>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a1d      	ldr	r2, [pc, #116]	; (8006824 <TIM_Base_SetConfig+0xc4>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d108      	bne.n	80067c4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	689a      	ldr	r2, [r3, #8]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a0c      	ldr	r2, [pc, #48]	; (800681c <TIM_Base_SetConfig+0xbc>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d007      	beq.n	8006800 <TIM_Base_SetConfig+0xa0>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a0b      	ldr	r2, [pc, #44]	; (8006820 <TIM_Base_SetConfig+0xc0>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d003      	beq.n	8006800 <TIM_Base_SetConfig+0xa0>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a0a      	ldr	r2, [pc, #40]	; (8006824 <TIM_Base_SetConfig+0xc4>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d103      	bne.n	8006808 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	691a      	ldr	r2, [r3, #16]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	615a      	str	r2, [r3, #20]
}
 800680e:	bf00      	nop
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	40012c00 	.word	0x40012c00
 8006820:	40014000 	.word	0x40014000
 8006824:	40014400 	.word	0x40014400

08006828 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006828:	b480      	push	{r7}
 800682a:	b087      	sub	sp, #28
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	f023 0201 	bic.w	r2, r3, #1
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800685a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f023 0303 	bic.w	r3, r3, #3
 8006862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	4313      	orrs	r3, r2
 800686c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	f023 0302 	bic.w	r3, r3, #2
 8006874:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	697a      	ldr	r2, [r7, #20]
 800687c:	4313      	orrs	r3, r2
 800687e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a24      	ldr	r2, [pc, #144]	; (8006914 <TIM_OC1_SetConfig+0xec>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d007      	beq.n	8006898 <TIM_OC1_SetConfig+0x70>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a23      	ldr	r2, [pc, #140]	; (8006918 <TIM_OC1_SetConfig+0xf0>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d003      	beq.n	8006898 <TIM_OC1_SetConfig+0x70>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a22      	ldr	r2, [pc, #136]	; (800691c <TIM_OC1_SetConfig+0xf4>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d10c      	bne.n	80068b2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	f023 0308 	bic.w	r3, r3, #8
 800689e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	697a      	ldr	r2, [r7, #20]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	f023 0304 	bic.w	r3, r3, #4
 80068b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a17      	ldr	r2, [pc, #92]	; (8006914 <TIM_OC1_SetConfig+0xec>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d007      	beq.n	80068ca <TIM_OC1_SetConfig+0xa2>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a16      	ldr	r2, [pc, #88]	; (8006918 <TIM_OC1_SetConfig+0xf0>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d003      	beq.n	80068ca <TIM_OC1_SetConfig+0xa2>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a15      	ldr	r2, [pc, #84]	; (800691c <TIM_OC1_SetConfig+0xf4>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d111      	bne.n	80068ee <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	699b      	ldr	r3, [r3, #24]
 80068e8:	693a      	ldr	r2, [r7, #16]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	685a      	ldr	r2, [r3, #4]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	697a      	ldr	r2, [r7, #20]
 8006906:	621a      	str	r2, [r3, #32]
}
 8006908:	bf00      	nop
 800690a:	371c      	adds	r7, #28
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr
 8006914:	40012c00 	.word	0x40012c00
 8006918:	40014000 	.word	0x40014000
 800691c:	40014400 	.word	0x40014400

08006920 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006920:	b480      	push	{r7}
 8006922:	b087      	sub	sp, #28
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	f023 0210 	bic.w	r2, r3, #16
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800694e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800695a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	021b      	lsls	r3, r3, #8
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	4313      	orrs	r3, r2
 8006966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	f023 0320 	bic.w	r3, r3, #32
 800696e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	011b      	lsls	r3, r3, #4
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	4313      	orrs	r3, r2
 800697a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a22      	ldr	r2, [pc, #136]	; (8006a08 <TIM_OC2_SetConfig+0xe8>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d10d      	bne.n	80069a0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800698a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	011b      	lsls	r3, r3, #4
 8006992:	697a      	ldr	r2, [r7, #20]
 8006994:	4313      	orrs	r3, r2
 8006996:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800699e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a19      	ldr	r2, [pc, #100]	; (8006a08 <TIM_OC2_SetConfig+0xe8>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d007      	beq.n	80069b8 <TIM_OC2_SetConfig+0x98>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a18      	ldr	r2, [pc, #96]	; (8006a0c <TIM_OC2_SetConfig+0xec>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d003      	beq.n	80069b8 <TIM_OC2_SetConfig+0x98>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a17      	ldr	r2, [pc, #92]	; (8006a10 <TIM_OC2_SetConfig+0xf0>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d113      	bne.n	80069e0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	695b      	ldr	r3, [r3, #20]
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	693a      	ldr	r2, [r7, #16]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	693a      	ldr	r2, [r7, #16]
 80069dc:	4313      	orrs	r3, r2
 80069de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	685a      	ldr	r2, [r3, #4]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	621a      	str	r2, [r3, #32]
}
 80069fa:	bf00      	nop
 80069fc:	371c      	adds	r7, #28
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	40012c00 	.word	0x40012c00
 8006a0c:	40014000 	.word	0x40014000
 8006a10:	40014400 	.word	0x40014400

08006a14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b087      	sub	sp, #28
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a1b      	ldr	r3, [r3, #32]
 8006a22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	69db      	ldr	r3, [r3, #28]
 8006a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f023 0303 	bic.w	r3, r3, #3
 8006a4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	021b      	lsls	r3, r3, #8
 8006a68:	697a      	ldr	r2, [r7, #20]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a21      	ldr	r2, [pc, #132]	; (8006af8 <TIM_OC3_SetConfig+0xe4>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d10d      	bne.n	8006a92 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	021b      	lsls	r3, r3, #8
 8006a84:	697a      	ldr	r2, [r7, #20]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a18      	ldr	r2, [pc, #96]	; (8006af8 <TIM_OC3_SetConfig+0xe4>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d007      	beq.n	8006aaa <TIM_OC3_SetConfig+0x96>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a17      	ldr	r2, [pc, #92]	; (8006afc <TIM_OC3_SetConfig+0xe8>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d003      	beq.n	8006aaa <TIM_OC3_SetConfig+0x96>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a16      	ldr	r2, [pc, #88]	; (8006b00 <TIM_OC3_SetConfig+0xec>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d113      	bne.n	8006ad2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ab0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	695b      	ldr	r3, [r3, #20]
 8006abe:	011b      	lsls	r3, r3, #4
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	011b      	lsls	r3, r3, #4
 8006acc:	693a      	ldr	r2, [r7, #16]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	685a      	ldr	r2, [r3, #4]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	621a      	str	r2, [r3, #32]
}
 8006aec:	bf00      	nop
 8006aee:	371c      	adds	r7, #28
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr
 8006af8:	40012c00 	.word	0x40012c00
 8006afc:	40014000 	.word	0x40014000
 8006b00:	40014400 	.word	0x40014400

08006b04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b087      	sub	sp, #28
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a1b      	ldr	r3, [r3, #32]
 8006b12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a1b      	ldr	r3, [r3, #32]
 8006b1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	69db      	ldr	r3, [r3, #28]
 8006b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	021b      	lsls	r3, r3, #8
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	031b      	lsls	r3, r3, #12
 8006b5a:	693a      	ldr	r2, [r7, #16]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a14      	ldr	r2, [pc, #80]	; (8006bb4 <TIM_OC4_SetConfig+0xb0>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d007      	beq.n	8006b78 <TIM_OC4_SetConfig+0x74>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a13      	ldr	r2, [pc, #76]	; (8006bb8 <TIM_OC4_SetConfig+0xb4>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d003      	beq.n	8006b78 <TIM_OC4_SetConfig+0x74>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a12      	ldr	r2, [pc, #72]	; (8006bbc <TIM_OC4_SetConfig+0xb8>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d109      	bne.n	8006b8c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	695b      	ldr	r3, [r3, #20]
 8006b84:	019b      	lsls	r3, r3, #6
 8006b86:	697a      	ldr	r2, [r7, #20]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	693a      	ldr	r2, [r7, #16]
 8006ba4:	621a      	str	r2, [r3, #32]
}
 8006ba6:	bf00      	nop
 8006ba8:	371c      	adds	r7, #28
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	40012c00 	.word	0x40012c00
 8006bb8:	40014000 	.word	0x40014000
 8006bbc:	40014400 	.word	0x40014400

08006bc0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b087      	sub	sp, #28
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a1b      	ldr	r3, [r3, #32]
 8006bce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a1b      	ldr	r3, [r3, #32]
 8006bda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006c04:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	041b      	lsls	r3, r3, #16
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a13      	ldr	r2, [pc, #76]	; (8006c64 <TIM_OC5_SetConfig+0xa4>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d007      	beq.n	8006c2a <TIM_OC5_SetConfig+0x6a>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a12      	ldr	r2, [pc, #72]	; (8006c68 <TIM_OC5_SetConfig+0xa8>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d003      	beq.n	8006c2a <TIM_OC5_SetConfig+0x6a>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a11      	ldr	r2, [pc, #68]	; (8006c6c <TIM_OC5_SetConfig+0xac>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d109      	bne.n	8006c3e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	021b      	lsls	r3, r3, #8
 8006c38:	697a      	ldr	r2, [r7, #20]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	697a      	ldr	r2, [r7, #20]
 8006c42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	685a      	ldr	r2, [r3, #4]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	693a      	ldr	r2, [r7, #16]
 8006c56:	621a      	str	r2, [r3, #32]
}
 8006c58:	bf00      	nop
 8006c5a:	371c      	adds	r7, #28
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr
 8006c64:	40012c00 	.word	0x40012c00
 8006c68:	40014000 	.word	0x40014000
 8006c6c:	40014400 	.word	0x40014400

08006c70 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b087      	sub	sp, #28
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a1b      	ldr	r3, [r3, #32]
 8006c8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ca2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	021b      	lsls	r3, r3, #8
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006cb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	051b      	lsls	r3, r3, #20
 8006cbe:	693a      	ldr	r2, [r7, #16]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a14      	ldr	r2, [pc, #80]	; (8006d18 <TIM_OC6_SetConfig+0xa8>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d007      	beq.n	8006cdc <TIM_OC6_SetConfig+0x6c>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4a13      	ldr	r2, [pc, #76]	; (8006d1c <TIM_OC6_SetConfig+0xac>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d003      	beq.n	8006cdc <TIM_OC6_SetConfig+0x6c>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a12      	ldr	r2, [pc, #72]	; (8006d20 <TIM_OC6_SetConfig+0xb0>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d109      	bne.n	8006cf0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ce2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	695b      	ldr	r3, [r3, #20]
 8006ce8:	029b      	lsls	r3, r3, #10
 8006cea:	697a      	ldr	r2, [r7, #20]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	697a      	ldr	r2, [r7, #20]
 8006cf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	685a      	ldr	r2, [r3, #4]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	693a      	ldr	r2, [r7, #16]
 8006d08:	621a      	str	r2, [r3, #32]
}
 8006d0a:	bf00      	nop
 8006d0c:	371c      	adds	r7, #28
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	40012c00 	.word	0x40012c00
 8006d1c:	40014000 	.word	0x40014000
 8006d20:	40014400 	.word	0x40014400

08006d24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b087      	sub	sp, #28
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6a1b      	ldr	r3, [r3, #32]
 8006d34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	f023 0201 	bic.w	r2, r3, #1
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	011b      	lsls	r3, r3, #4
 8006d54:	693a      	ldr	r2, [r7, #16]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f023 030a 	bic.w	r3, r3, #10
 8006d60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	697a      	ldr	r2, [r7, #20]
 8006d74:	621a      	str	r2, [r3, #32]
}
 8006d76:	bf00      	nop
 8006d78:	371c      	adds	r7, #28
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d82:	b480      	push	{r7}
 8006d84:	b087      	sub	sp, #28
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	60f8      	str	r0, [r7, #12]
 8006d8a:	60b9      	str	r1, [r7, #8]
 8006d8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	f023 0210 	bic.w	r2, r3, #16
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6a1b      	ldr	r3, [r3, #32]
 8006da4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006dac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	031b      	lsls	r3, r3, #12
 8006db2:	697a      	ldr	r2, [r7, #20]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006dbe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	011b      	lsls	r3, r3, #4
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	697a      	ldr	r2, [r7, #20]
 8006dce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	693a      	ldr	r2, [r7, #16]
 8006dd4:	621a      	str	r2, [r3, #32]
}
 8006dd6:	bf00      	nop
 8006dd8:	371c      	adds	r7, #28
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr

08006de2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006de2:	b480      	push	{r7}
 8006de4:	b085      	sub	sp, #20
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
 8006dea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006df8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006dfa:	683a      	ldr	r2, [r7, #0]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	f043 0307 	orr.w	r3, r3, #7
 8006e04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	609a      	str	r2, [r3, #8]
}
 8006e0c:	bf00      	nop
 8006e0e:	3714      	adds	r7, #20
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b087      	sub	sp, #28
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
 8006e24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	021a      	lsls	r2, r3, #8
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	431a      	orrs	r2, r3
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	697a      	ldr	r2, [r7, #20]
 8006e4a:	609a      	str	r2, [r3, #8]
}
 8006e4c:	bf00      	nop
 8006e4e:	371c      	adds	r7, #28
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b087      	sub	sp, #28
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	f003 031f 	and.w	r3, r3, #31
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6a1a      	ldr	r2, [r3, #32]
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	43db      	mvns	r3, r3
 8006e7a:	401a      	ands	r2, r3
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6a1a      	ldr	r2, [r3, #32]
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	f003 031f 	and.w	r3, r3, #31
 8006e8a:	6879      	ldr	r1, [r7, #4]
 8006e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e90:	431a      	orrs	r2, r3
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	621a      	str	r2, [r3, #32]
}
 8006e96:	bf00      	nop
 8006e98:	371c      	adds	r7, #28
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr
	...

08006ea4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b085      	sub	sp, #20
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d101      	bne.n	8006ebc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006eb8:	2302      	movs	r3, #2
 8006eba:	e04f      	b.n	8006f5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2202      	movs	r2, #2
 8006ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a21      	ldr	r2, [pc, #132]	; (8006f68 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d108      	bne.n	8006ef8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006eec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006efe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a14      	ldr	r2, [pc, #80]	; (8006f68 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d009      	beq.n	8006f30 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f24:	d004      	beq.n	8006f30 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a10      	ldr	r2, [pc, #64]	; (8006f6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d10c      	bne.n	8006f4a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f36:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	68ba      	ldr	r2, [r7, #8]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68ba      	ldr	r2, [r7, #8]
 8006f48:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f5a:	2300      	movs	r3, #0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3714      	adds	r7, #20
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr
 8006f68:	40012c00 	.word	0x40012c00
 8006f6c:	40014000 	.word	0x40014000

08006f70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b085      	sub	sp, #20
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d101      	bne.n	8006f8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006f88:	2302      	movs	r3, #2
 8006f8a:	e060      	b.n	800704e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	695b      	ldr	r3, [r3, #20]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	699b      	ldr	r3, [r3, #24]
 8007000:	041b      	lsls	r3, r3, #16
 8007002:	4313      	orrs	r3, r2
 8007004:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a14      	ldr	r2, [pc, #80]	; (800705c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d115      	bne.n	800703c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701a:	051b      	lsls	r3, r3, #20
 800701c:	4313      	orrs	r3, r2
 800701e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	69db      	ldr	r3, [r3, #28]
 800702a:	4313      	orrs	r3, r2
 800702c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	6a1b      	ldr	r3, [r3, #32]
 8007038:	4313      	orrs	r3, r2
 800703a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3714      	adds	r7, #20
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	40012c00 	.word	0x40012c00

08007060 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800707c:	bf00      	nop
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <__errno>:
 800709c:	4b01      	ldr	r3, [pc, #4]	; (80070a4 <__errno+0x8>)
 800709e:	6818      	ldr	r0, [r3, #0]
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	20000010 	.word	0x20000010

080070a8 <__libc_init_array>:
 80070a8:	b570      	push	{r4, r5, r6, lr}
 80070aa:	4d0d      	ldr	r5, [pc, #52]	; (80070e0 <__libc_init_array+0x38>)
 80070ac:	4c0d      	ldr	r4, [pc, #52]	; (80070e4 <__libc_init_array+0x3c>)
 80070ae:	1b64      	subs	r4, r4, r5
 80070b0:	10a4      	asrs	r4, r4, #2
 80070b2:	2600      	movs	r6, #0
 80070b4:	42a6      	cmp	r6, r4
 80070b6:	d109      	bne.n	80070cc <__libc_init_array+0x24>
 80070b8:	4d0b      	ldr	r5, [pc, #44]	; (80070e8 <__libc_init_array+0x40>)
 80070ba:	4c0c      	ldr	r4, [pc, #48]	; (80070ec <__libc_init_array+0x44>)
 80070bc:	f000 fa24 	bl	8007508 <_init>
 80070c0:	1b64      	subs	r4, r4, r5
 80070c2:	10a4      	asrs	r4, r4, #2
 80070c4:	2600      	movs	r6, #0
 80070c6:	42a6      	cmp	r6, r4
 80070c8:	d105      	bne.n	80070d6 <__libc_init_array+0x2e>
 80070ca:	bd70      	pop	{r4, r5, r6, pc}
 80070cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80070d0:	4798      	blx	r3
 80070d2:	3601      	adds	r6, #1
 80070d4:	e7ee      	b.n	80070b4 <__libc_init_array+0xc>
 80070d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80070da:	4798      	blx	r3
 80070dc:	3601      	adds	r6, #1
 80070de:	e7f2      	b.n	80070c6 <__libc_init_array+0x1e>
 80070e0:	08007564 	.word	0x08007564
 80070e4:	08007564 	.word	0x08007564
 80070e8:	08007564 	.word	0x08007564
 80070ec:	08007568 	.word	0x08007568

080070f0 <memset>:
 80070f0:	4402      	add	r2, r0
 80070f2:	4603      	mov	r3, r0
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d100      	bne.n	80070fa <memset+0xa>
 80070f8:	4770      	bx	lr
 80070fa:	f803 1b01 	strb.w	r1, [r3], #1
 80070fe:	e7f9      	b.n	80070f4 <memset+0x4>

08007100 <log>:
 8007100:	b538      	push	{r3, r4, r5, lr}
 8007102:	ed2d 8b02 	vpush	{d8}
 8007106:	ec55 4b10 	vmov	r4, r5, d0
 800710a:	f000 f839 	bl	8007180 <__ieee754_log>
 800710e:	4622      	mov	r2, r4
 8007110:	462b      	mov	r3, r5
 8007112:	4620      	mov	r0, r4
 8007114:	4629      	mov	r1, r5
 8007116:	eeb0 8a40 	vmov.f32	s16, s0
 800711a:	eef0 8a60 	vmov.f32	s17, s1
 800711e:	f7f9 fcad 	bl	8000a7c <__aeabi_dcmpun>
 8007122:	b998      	cbnz	r0, 800714c <log+0x4c>
 8007124:	2200      	movs	r2, #0
 8007126:	2300      	movs	r3, #0
 8007128:	4620      	mov	r0, r4
 800712a:	4629      	mov	r1, r5
 800712c:	f7f9 fc9c 	bl	8000a68 <__aeabi_dcmpgt>
 8007130:	b960      	cbnz	r0, 800714c <log+0x4c>
 8007132:	2200      	movs	r2, #0
 8007134:	2300      	movs	r3, #0
 8007136:	4620      	mov	r0, r4
 8007138:	4629      	mov	r1, r5
 800713a:	f7f9 fc6d 	bl	8000a18 <__aeabi_dcmpeq>
 800713e:	b160      	cbz	r0, 800715a <log+0x5a>
 8007140:	f7ff ffac 	bl	800709c <__errno>
 8007144:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8007170 <log+0x70>
 8007148:	2322      	movs	r3, #34	; 0x22
 800714a:	6003      	str	r3, [r0, #0]
 800714c:	eeb0 0a48 	vmov.f32	s0, s16
 8007150:	eef0 0a68 	vmov.f32	s1, s17
 8007154:	ecbd 8b02 	vpop	{d8}
 8007158:	bd38      	pop	{r3, r4, r5, pc}
 800715a:	f7ff ff9f 	bl	800709c <__errno>
 800715e:	ecbd 8b02 	vpop	{d8}
 8007162:	2321      	movs	r3, #33	; 0x21
 8007164:	6003      	str	r3, [r0, #0]
 8007166:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800716a:	4803      	ldr	r0, [pc, #12]	; (8007178 <log+0x78>)
 800716c:	f000 b9c4 	b.w	80074f8 <nan>
 8007170:	00000000 	.word	0x00000000
 8007174:	fff00000 	.word	0xfff00000
 8007178:	08007560 	.word	0x08007560
 800717c:	00000000 	.word	0x00000000

08007180 <__ieee754_log>:
 8007180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007184:	ec51 0b10 	vmov	r0, r1, d0
 8007188:	ed2d 8b04 	vpush	{d8-d9}
 800718c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007190:	b083      	sub	sp, #12
 8007192:	460d      	mov	r5, r1
 8007194:	da29      	bge.n	80071ea <__ieee754_log+0x6a>
 8007196:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800719a:	4303      	orrs	r3, r0
 800719c:	ee10 2a10 	vmov	r2, s0
 80071a0:	d10c      	bne.n	80071bc <__ieee754_log+0x3c>
 80071a2:	49cf      	ldr	r1, [pc, #828]	; (80074e0 <__ieee754_log+0x360>)
 80071a4:	2200      	movs	r2, #0
 80071a6:	2300      	movs	r3, #0
 80071a8:	2000      	movs	r0, #0
 80071aa:	f7f9 faf7 	bl	800079c <__aeabi_ddiv>
 80071ae:	ec41 0b10 	vmov	d0, r0, r1
 80071b2:	b003      	add	sp, #12
 80071b4:	ecbd 8b04 	vpop	{d8-d9}
 80071b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071bc:	2900      	cmp	r1, #0
 80071be:	da05      	bge.n	80071cc <__ieee754_log+0x4c>
 80071c0:	460b      	mov	r3, r1
 80071c2:	f7f9 f809 	bl	80001d8 <__aeabi_dsub>
 80071c6:	2200      	movs	r2, #0
 80071c8:	2300      	movs	r3, #0
 80071ca:	e7ee      	b.n	80071aa <__ieee754_log+0x2a>
 80071cc:	4bc5      	ldr	r3, [pc, #788]	; (80074e4 <__ieee754_log+0x364>)
 80071ce:	2200      	movs	r2, #0
 80071d0:	f7f9 f9ba 	bl	8000548 <__aeabi_dmul>
 80071d4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80071d8:	460d      	mov	r5, r1
 80071da:	4ac3      	ldr	r2, [pc, #780]	; (80074e8 <__ieee754_log+0x368>)
 80071dc:	4295      	cmp	r5, r2
 80071de:	dd06      	ble.n	80071ee <__ieee754_log+0x6e>
 80071e0:	4602      	mov	r2, r0
 80071e2:	460b      	mov	r3, r1
 80071e4:	f7f8 fffa 	bl	80001dc <__adddf3>
 80071e8:	e7e1      	b.n	80071ae <__ieee754_log+0x2e>
 80071ea:	2300      	movs	r3, #0
 80071ec:	e7f5      	b.n	80071da <__ieee754_log+0x5a>
 80071ee:	152c      	asrs	r4, r5, #20
 80071f0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80071f4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80071f8:	441c      	add	r4, r3
 80071fa:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80071fe:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8007202:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007206:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800720a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800720e:	ea42 0105 	orr.w	r1, r2, r5
 8007212:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8007216:	2200      	movs	r2, #0
 8007218:	4bb4      	ldr	r3, [pc, #720]	; (80074ec <__ieee754_log+0x36c>)
 800721a:	f7f8 ffdd 	bl	80001d8 <__aeabi_dsub>
 800721e:	1cab      	adds	r3, r5, #2
 8007220:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007224:	2b02      	cmp	r3, #2
 8007226:	4682      	mov	sl, r0
 8007228:	468b      	mov	fp, r1
 800722a:	f04f 0200 	mov.w	r2, #0
 800722e:	dc53      	bgt.n	80072d8 <__ieee754_log+0x158>
 8007230:	2300      	movs	r3, #0
 8007232:	f7f9 fbf1 	bl	8000a18 <__aeabi_dcmpeq>
 8007236:	b1d0      	cbz	r0, 800726e <__ieee754_log+0xee>
 8007238:	2c00      	cmp	r4, #0
 800723a:	f000 8122 	beq.w	8007482 <__ieee754_log+0x302>
 800723e:	4620      	mov	r0, r4
 8007240:	f7f9 f918 	bl	8000474 <__aeabi_i2d>
 8007244:	a390      	add	r3, pc, #576	; (adr r3, 8007488 <__ieee754_log+0x308>)
 8007246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724a:	4606      	mov	r6, r0
 800724c:	460f      	mov	r7, r1
 800724e:	f7f9 f97b 	bl	8000548 <__aeabi_dmul>
 8007252:	a38f      	add	r3, pc, #572	; (adr r3, 8007490 <__ieee754_log+0x310>)
 8007254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007258:	4604      	mov	r4, r0
 800725a:	460d      	mov	r5, r1
 800725c:	4630      	mov	r0, r6
 800725e:	4639      	mov	r1, r7
 8007260:	f7f9 f972 	bl	8000548 <__aeabi_dmul>
 8007264:	4602      	mov	r2, r0
 8007266:	460b      	mov	r3, r1
 8007268:	4620      	mov	r0, r4
 800726a:	4629      	mov	r1, r5
 800726c:	e7ba      	b.n	80071e4 <__ieee754_log+0x64>
 800726e:	a38a      	add	r3, pc, #552	; (adr r3, 8007498 <__ieee754_log+0x318>)
 8007270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007274:	4650      	mov	r0, sl
 8007276:	4659      	mov	r1, fp
 8007278:	f7f9 f966 	bl	8000548 <__aeabi_dmul>
 800727c:	4602      	mov	r2, r0
 800727e:	460b      	mov	r3, r1
 8007280:	2000      	movs	r0, #0
 8007282:	499b      	ldr	r1, [pc, #620]	; (80074f0 <__ieee754_log+0x370>)
 8007284:	f7f8 ffa8 	bl	80001d8 <__aeabi_dsub>
 8007288:	4652      	mov	r2, sl
 800728a:	4606      	mov	r6, r0
 800728c:	460f      	mov	r7, r1
 800728e:	465b      	mov	r3, fp
 8007290:	4650      	mov	r0, sl
 8007292:	4659      	mov	r1, fp
 8007294:	f7f9 f958 	bl	8000548 <__aeabi_dmul>
 8007298:	4602      	mov	r2, r0
 800729a:	460b      	mov	r3, r1
 800729c:	4630      	mov	r0, r6
 800729e:	4639      	mov	r1, r7
 80072a0:	f7f9 f952 	bl	8000548 <__aeabi_dmul>
 80072a4:	4606      	mov	r6, r0
 80072a6:	460f      	mov	r7, r1
 80072a8:	b914      	cbnz	r4, 80072b0 <__ieee754_log+0x130>
 80072aa:	4632      	mov	r2, r6
 80072ac:	463b      	mov	r3, r7
 80072ae:	e0a2      	b.n	80073f6 <__ieee754_log+0x276>
 80072b0:	4620      	mov	r0, r4
 80072b2:	f7f9 f8df 	bl	8000474 <__aeabi_i2d>
 80072b6:	a374      	add	r3, pc, #464	; (adr r3, 8007488 <__ieee754_log+0x308>)
 80072b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072bc:	4680      	mov	r8, r0
 80072be:	4689      	mov	r9, r1
 80072c0:	f7f9 f942 	bl	8000548 <__aeabi_dmul>
 80072c4:	a372      	add	r3, pc, #456	; (adr r3, 8007490 <__ieee754_log+0x310>)
 80072c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ca:	4604      	mov	r4, r0
 80072cc:	460d      	mov	r5, r1
 80072ce:	4640      	mov	r0, r8
 80072d0:	4649      	mov	r1, r9
 80072d2:	f7f9 f939 	bl	8000548 <__aeabi_dmul>
 80072d6:	e0a7      	b.n	8007428 <__ieee754_log+0x2a8>
 80072d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80072dc:	f7f8 ff7e 	bl	80001dc <__adddf3>
 80072e0:	4602      	mov	r2, r0
 80072e2:	460b      	mov	r3, r1
 80072e4:	4650      	mov	r0, sl
 80072e6:	4659      	mov	r1, fp
 80072e8:	f7f9 fa58 	bl	800079c <__aeabi_ddiv>
 80072ec:	ec41 0b18 	vmov	d8, r0, r1
 80072f0:	4620      	mov	r0, r4
 80072f2:	f7f9 f8bf 	bl	8000474 <__aeabi_i2d>
 80072f6:	ec53 2b18 	vmov	r2, r3, d8
 80072fa:	ec41 0b19 	vmov	d9, r0, r1
 80072fe:	ec51 0b18 	vmov	r0, r1, d8
 8007302:	f7f9 f921 	bl	8000548 <__aeabi_dmul>
 8007306:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800730a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800730e:	9301      	str	r3, [sp, #4]
 8007310:	4602      	mov	r2, r0
 8007312:	460b      	mov	r3, r1
 8007314:	4680      	mov	r8, r0
 8007316:	4689      	mov	r9, r1
 8007318:	f7f9 f916 	bl	8000548 <__aeabi_dmul>
 800731c:	a360      	add	r3, pc, #384	; (adr r3, 80074a0 <__ieee754_log+0x320>)
 800731e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007322:	4606      	mov	r6, r0
 8007324:	460f      	mov	r7, r1
 8007326:	f7f9 f90f 	bl	8000548 <__aeabi_dmul>
 800732a:	a35f      	add	r3, pc, #380	; (adr r3, 80074a8 <__ieee754_log+0x328>)
 800732c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007330:	f7f8 ff54 	bl	80001dc <__adddf3>
 8007334:	4632      	mov	r2, r6
 8007336:	463b      	mov	r3, r7
 8007338:	f7f9 f906 	bl	8000548 <__aeabi_dmul>
 800733c:	a35c      	add	r3, pc, #368	; (adr r3, 80074b0 <__ieee754_log+0x330>)
 800733e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007342:	f7f8 ff4b 	bl	80001dc <__adddf3>
 8007346:	4632      	mov	r2, r6
 8007348:	463b      	mov	r3, r7
 800734a:	f7f9 f8fd 	bl	8000548 <__aeabi_dmul>
 800734e:	a35a      	add	r3, pc, #360	; (adr r3, 80074b8 <__ieee754_log+0x338>)
 8007350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007354:	f7f8 ff42 	bl	80001dc <__adddf3>
 8007358:	4642      	mov	r2, r8
 800735a:	464b      	mov	r3, r9
 800735c:	f7f9 f8f4 	bl	8000548 <__aeabi_dmul>
 8007360:	a357      	add	r3, pc, #348	; (adr r3, 80074c0 <__ieee754_log+0x340>)
 8007362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007366:	4680      	mov	r8, r0
 8007368:	4689      	mov	r9, r1
 800736a:	4630      	mov	r0, r6
 800736c:	4639      	mov	r1, r7
 800736e:	f7f9 f8eb 	bl	8000548 <__aeabi_dmul>
 8007372:	a355      	add	r3, pc, #340	; (adr r3, 80074c8 <__ieee754_log+0x348>)
 8007374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007378:	f7f8 ff30 	bl	80001dc <__adddf3>
 800737c:	4632      	mov	r2, r6
 800737e:	463b      	mov	r3, r7
 8007380:	f7f9 f8e2 	bl	8000548 <__aeabi_dmul>
 8007384:	a352      	add	r3, pc, #328	; (adr r3, 80074d0 <__ieee754_log+0x350>)
 8007386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738a:	f7f8 ff27 	bl	80001dc <__adddf3>
 800738e:	4632      	mov	r2, r6
 8007390:	463b      	mov	r3, r7
 8007392:	f7f9 f8d9 	bl	8000548 <__aeabi_dmul>
 8007396:	460b      	mov	r3, r1
 8007398:	4602      	mov	r2, r0
 800739a:	4649      	mov	r1, r9
 800739c:	4640      	mov	r0, r8
 800739e:	f7f8 ff1d 	bl	80001dc <__adddf3>
 80073a2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80073a6:	9b01      	ldr	r3, [sp, #4]
 80073a8:	3551      	adds	r5, #81	; 0x51
 80073aa:	431d      	orrs	r5, r3
 80073ac:	2d00      	cmp	r5, #0
 80073ae:	4680      	mov	r8, r0
 80073b0:	4689      	mov	r9, r1
 80073b2:	dd48      	ble.n	8007446 <__ieee754_log+0x2c6>
 80073b4:	4b4e      	ldr	r3, [pc, #312]	; (80074f0 <__ieee754_log+0x370>)
 80073b6:	2200      	movs	r2, #0
 80073b8:	4650      	mov	r0, sl
 80073ba:	4659      	mov	r1, fp
 80073bc:	f7f9 f8c4 	bl	8000548 <__aeabi_dmul>
 80073c0:	4652      	mov	r2, sl
 80073c2:	465b      	mov	r3, fp
 80073c4:	f7f9 f8c0 	bl	8000548 <__aeabi_dmul>
 80073c8:	4602      	mov	r2, r0
 80073ca:	460b      	mov	r3, r1
 80073cc:	4606      	mov	r6, r0
 80073ce:	460f      	mov	r7, r1
 80073d0:	4640      	mov	r0, r8
 80073d2:	4649      	mov	r1, r9
 80073d4:	f7f8 ff02 	bl	80001dc <__adddf3>
 80073d8:	ec53 2b18 	vmov	r2, r3, d8
 80073dc:	f7f9 f8b4 	bl	8000548 <__aeabi_dmul>
 80073e0:	4680      	mov	r8, r0
 80073e2:	4689      	mov	r9, r1
 80073e4:	b964      	cbnz	r4, 8007400 <__ieee754_log+0x280>
 80073e6:	4602      	mov	r2, r0
 80073e8:	460b      	mov	r3, r1
 80073ea:	4630      	mov	r0, r6
 80073ec:	4639      	mov	r1, r7
 80073ee:	f7f8 fef3 	bl	80001d8 <__aeabi_dsub>
 80073f2:	4602      	mov	r2, r0
 80073f4:	460b      	mov	r3, r1
 80073f6:	4650      	mov	r0, sl
 80073f8:	4659      	mov	r1, fp
 80073fa:	f7f8 feed 	bl	80001d8 <__aeabi_dsub>
 80073fe:	e6d6      	b.n	80071ae <__ieee754_log+0x2e>
 8007400:	a321      	add	r3, pc, #132	; (adr r3, 8007488 <__ieee754_log+0x308>)
 8007402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007406:	ec51 0b19 	vmov	r0, r1, d9
 800740a:	f7f9 f89d 	bl	8000548 <__aeabi_dmul>
 800740e:	a320      	add	r3, pc, #128	; (adr r3, 8007490 <__ieee754_log+0x310>)
 8007410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007414:	4604      	mov	r4, r0
 8007416:	460d      	mov	r5, r1
 8007418:	ec51 0b19 	vmov	r0, r1, d9
 800741c:	f7f9 f894 	bl	8000548 <__aeabi_dmul>
 8007420:	4642      	mov	r2, r8
 8007422:	464b      	mov	r3, r9
 8007424:	f7f8 feda 	bl	80001dc <__adddf3>
 8007428:	4602      	mov	r2, r0
 800742a:	460b      	mov	r3, r1
 800742c:	4630      	mov	r0, r6
 800742e:	4639      	mov	r1, r7
 8007430:	f7f8 fed2 	bl	80001d8 <__aeabi_dsub>
 8007434:	4652      	mov	r2, sl
 8007436:	465b      	mov	r3, fp
 8007438:	f7f8 fece 	bl	80001d8 <__aeabi_dsub>
 800743c:	4602      	mov	r2, r0
 800743e:	460b      	mov	r3, r1
 8007440:	4620      	mov	r0, r4
 8007442:	4629      	mov	r1, r5
 8007444:	e7d9      	b.n	80073fa <__ieee754_log+0x27a>
 8007446:	4602      	mov	r2, r0
 8007448:	460b      	mov	r3, r1
 800744a:	4650      	mov	r0, sl
 800744c:	4659      	mov	r1, fp
 800744e:	f7f8 fec3 	bl	80001d8 <__aeabi_dsub>
 8007452:	ec53 2b18 	vmov	r2, r3, d8
 8007456:	f7f9 f877 	bl	8000548 <__aeabi_dmul>
 800745a:	4606      	mov	r6, r0
 800745c:	460f      	mov	r7, r1
 800745e:	2c00      	cmp	r4, #0
 8007460:	f43f af23 	beq.w	80072aa <__ieee754_log+0x12a>
 8007464:	a308      	add	r3, pc, #32	; (adr r3, 8007488 <__ieee754_log+0x308>)
 8007466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746a:	ec51 0b19 	vmov	r0, r1, d9
 800746e:	f7f9 f86b 	bl	8000548 <__aeabi_dmul>
 8007472:	a307      	add	r3, pc, #28	; (adr r3, 8007490 <__ieee754_log+0x310>)
 8007474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007478:	4604      	mov	r4, r0
 800747a:	460d      	mov	r5, r1
 800747c:	ec51 0b19 	vmov	r0, r1, d9
 8007480:	e727      	b.n	80072d2 <__ieee754_log+0x152>
 8007482:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80074d8 <__ieee754_log+0x358>
 8007486:	e694      	b.n	80071b2 <__ieee754_log+0x32>
 8007488:	fee00000 	.word	0xfee00000
 800748c:	3fe62e42 	.word	0x3fe62e42
 8007490:	35793c76 	.word	0x35793c76
 8007494:	3dea39ef 	.word	0x3dea39ef
 8007498:	55555555 	.word	0x55555555
 800749c:	3fd55555 	.word	0x3fd55555
 80074a0:	df3e5244 	.word	0xdf3e5244
 80074a4:	3fc2f112 	.word	0x3fc2f112
 80074a8:	96cb03de 	.word	0x96cb03de
 80074ac:	3fc74664 	.word	0x3fc74664
 80074b0:	94229359 	.word	0x94229359
 80074b4:	3fd24924 	.word	0x3fd24924
 80074b8:	55555593 	.word	0x55555593
 80074bc:	3fe55555 	.word	0x3fe55555
 80074c0:	d078c69f 	.word	0xd078c69f
 80074c4:	3fc39a09 	.word	0x3fc39a09
 80074c8:	1d8e78af 	.word	0x1d8e78af
 80074cc:	3fcc71c5 	.word	0x3fcc71c5
 80074d0:	9997fa04 	.word	0x9997fa04
 80074d4:	3fd99999 	.word	0x3fd99999
	...
 80074e0:	c3500000 	.word	0xc3500000
 80074e4:	43500000 	.word	0x43500000
 80074e8:	7fefffff 	.word	0x7fefffff
 80074ec:	3ff00000 	.word	0x3ff00000
 80074f0:	3fe00000 	.word	0x3fe00000
 80074f4:	00000000 	.word	0x00000000

080074f8 <nan>:
 80074f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007500 <nan+0x8>
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	00000000 	.word	0x00000000
 8007504:	7ff80000 	.word	0x7ff80000

08007508 <_init>:
 8007508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800750a:	bf00      	nop
 800750c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800750e:	bc08      	pop	{r3}
 8007510:	469e      	mov	lr, r3
 8007512:	4770      	bx	lr

08007514 <_fini>:
 8007514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007516:	bf00      	nop
 8007518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800751a:	bc08      	pop	{r3}
 800751c:	469e      	mov	lr, r3
 800751e:	4770      	bx	lr
