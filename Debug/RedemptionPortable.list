
RedemptionPortable.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fe4  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003170  08003170  00013170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031b0  080031b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080031b0  080031b0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031b0  080031b0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031b0  080031b0  000131b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031b4  080031b4  000131b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080031b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  080031c4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  080031c4  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae3d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ce5  00000000  00000000  0002ae79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a30  00000000  00000000  0002cb60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000948  00000000  00000000  0002d590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000206b6  00000000  00000000  0002ded8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c29a  00000000  00000000  0004e58e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c108d  00000000  00000000  0005a828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011b8b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000284c  00000000  00000000  0011b908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003158 	.word	0x08003158

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003158 	.word	0x08003158

080001cc <BQ_Write>:
};




void BQ_Write(uint8_t reg, uint8_t data) {
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b086      	sub	sp, #24
 80001d0:	af04      	add	r7, sp, #16
 80001d2:	4603      	mov	r3, r0
 80001d4:	460a      	mov	r2, r1
 80001d6:	71fb      	strb	r3, [r7, #7]
 80001d8:	4613      	mov	r3, r2
 80001da:	71bb      	strb	r3, [r7, #6]

	if ( HAL_I2C_Mem_Write( &hi2c1, BQ_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 10 ) != HAL_OK)
 80001dc:	79fb      	ldrb	r3, [r7, #7]
 80001de:	b29a      	uxth	r2, r3
 80001e0:	230a      	movs	r3, #10
 80001e2:	9302      	str	r3, [sp, #8]
 80001e4:	2301      	movs	r3, #1
 80001e6:	9301      	str	r3, [sp, #4]
 80001e8:	1dbb      	adds	r3, r7, #6
 80001ea:	9300      	str	r3, [sp, #0]
 80001ec:	2301      	movs	r3, #1
 80001ee:	21d6      	movs	r1, #214	; 0xd6
 80001f0:	4806      	ldr	r0, [pc, #24]	; (800020c <BQ_Write+0x40>)
 80001f2:	f001 f8ab 	bl	800134c <HAL_I2C_Mem_Write>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d002      	beq.n	8000202 <BQ_Write+0x36>
	{
		GLOBAL_errors = I2CErrorWrite;
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <BQ_Write+0x44>)
 80001fe:	2200      	movs	r2, #0
 8000200:	701a      	strb	r2, [r3, #0]
	}

}
 8000202:	bf00      	nop
 8000204:	3708      	adds	r7, #8
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	20000028 	.word	0x20000028
 8000210:	2000007c 	.word	0x2000007c

08000214 <BQ_Read>:

uint8_t BQ_Read(uint8_t reg) {
 8000214:	b580      	push	{r7, lr}
 8000216:	b088      	sub	sp, #32
 8000218:	af04      	add	r7, sp, #16
 800021a:	4603      	mov	r3, r0
 800021c:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

	if ( HAL_I2C_Mem_Read( &hi2c1, BQ_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 10 ) != HAL_OK)
 800021e:	79fb      	ldrb	r3, [r7, #7]
 8000220:	b29a      	uxth	r2, r3
 8000222:	230a      	movs	r3, #10
 8000224:	9302      	str	r3, [sp, #8]
 8000226:	2301      	movs	r3, #1
 8000228:	9301      	str	r3, [sp, #4]
 800022a:	f107 030f 	add.w	r3, r7, #15
 800022e:	9300      	str	r3, [sp, #0]
 8000230:	2301      	movs	r3, #1
 8000232:	21d6      	movs	r1, #214	; 0xd6
 8000234:	4806      	ldr	r0, [pc, #24]	; (8000250 <BQ_Read+0x3c>)
 8000236:	f001 f99d 	bl	8001574 <HAL_I2C_Mem_Read>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d002      	beq.n	8000246 <BQ_Read+0x32>
	{
		GLOBAL_errors = I2CErrorRead;
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <BQ_Read+0x40>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
	}

    return data;
 8000246:	7bfb      	ldrb	r3, [r7, #15]

}
 8000248:	4618      	mov	r0, r3
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000028 	.word	0x20000028
 8000254:	2000007c 	.word	0x2000007c

08000258 <BQ_Init>:

void BQ_Init()
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
	struct BQ_Register_fields BQ;

	//REG00
	BQ.REG00.IINLIM = 0b111;	//3A input
 800025e:	783b      	ldrb	r3, [r7, #0]
 8000260:	f043 0307 	orr.w	r3, r3, #7
 8000264:	703b      	strb	r3, [r7, #0]
	BQ.REG00.VINDPM = 0b1011;	//4.76V
 8000266:	783b      	ldrb	r3, [r7, #0]
 8000268:	220b      	movs	r2, #11
 800026a:	f362 03c6 	bfi	r3, r2, #3, #4
 800026e:	703b      	strb	r3, [r7, #0]
	BQ.REG00.EN_HIZ = 1;
 8000270:	783b      	ldrb	r3, [r7, #0]
 8000272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000276:	703b      	strb	r3, [r7, #0]

	//REG01
	BQ.REG01.SYS_MIN = 0b011;	//3.3V minimum voltage cutoff
 8000278:	787b      	ldrb	r3, [r7, #1]
 800027a:	2203      	movs	r2, #3
 800027c:	f362 0343 	bfi	r3, r2, #1, #3
 8000280:	707b      	strb	r3, [r7, #1]
	BQ.REG01.CHG_CONFIG = 1;	//enable charge
 8000282:	787b      	ldrb	r3, [r7, #1]
 8000284:	f043 0310 	orr.w	r3, r3, #16
 8000288:	707b      	strb	r3, [r7, #1]
	BQ.REG01.OTG_CONFIG = 0;
 800028a:	787b      	ldrb	r3, [r7, #1]
 800028c:	f36f 1345 	bfc	r3, #5, #1
 8000290:	707b      	strb	r3, [r7, #1]
	BQ.REG01.I2CWDTIMER = 0;	//disable WD
 8000292:	787b      	ldrb	r3, [r7, #1]
 8000294:	f36f 1386 	bfc	r3, #6, #1
 8000298:	707b      	strb	r3, [r7, #1]
	BQ.REG01.RegisterReset = 0;
 800029a:	787b      	ldrb	r3, [r7, #1]
 800029c:	f36f 13c7 	bfc	r3, #7, #1
 80002a0:	707b      	strb	r3, [r7, #1]

	//REG02
	BQ.REG02.FORCE_20PCT = 0;
 80002a2:	78bb      	ldrb	r3, [r7, #2]
 80002a4:	f36f 0300 	bfc	r3, #0, #1
 80002a8:	70bb      	strb	r3, [r7, #2]
	BQ.REG02.BCOLD = 0;
 80002aa:	78bb      	ldrb	r3, [r7, #2]
 80002ac:	f36f 0341 	bfc	r3, #1, #1
 80002b0:	70bb      	strb	r3, [r7, #2]
	BQ.REG02.ICHG = 0b101111;	//Fast Charging current is 3008mAh
 80002b2:	78bb      	ldrb	r3, [r7, #2]
 80002b4:	222f      	movs	r2, #47	; 0x2f
 80002b6:	f362 0387 	bfi	r3, r2, #2, #6
 80002ba:	70bb      	strb	r3, [r7, #2]

	//REG03
	BQ.REG03.ITERM = 0b0011;	//Termination current is 384mAh
 80002bc:	78fb      	ldrb	r3, [r7, #3]
 80002be:	2203      	movs	r2, #3
 80002c0:	f362 0303 	bfi	r3, r2, #0, #4
 80002c4:	70fb      	strb	r3, [r7, #3]
	BQ.REG03.IPRECHG = 0b0001;	//Precharge current is 128mAh
 80002c6:	78fb      	ldrb	r3, [r7, #3]
 80002c8:	2201      	movs	r2, #1
 80002ca:	f362 1307 	bfi	r3, r2, #4, #4
 80002ce:	70fb      	strb	r3, [r7, #3]

	//REG04
	BQ.REG04.VRECHG = 0;
 80002d0:	793b      	ldrb	r3, [r7, #4]
 80002d2:	f36f 0300 	bfc	r3, #0, #1
 80002d6:	713b      	strb	r3, [r7, #4]
	BQ.REG04.BATLOWV = 1;		//Battery is precharged until 3.0v then changed to fast charge
 80002d8:	793b      	ldrb	r3, [r7, #4]
 80002da:	f043 0302 	orr.w	r3, r3, #2
 80002de:	713b      	strb	r3, [r7, #4]
	BQ.REG04.VREG = 0b101100;	//Battery is full at 4.208v
 80002e0:	793b      	ldrb	r3, [r7, #4]
 80002e2:	222c      	movs	r2, #44	; 0x2c
 80002e4:	f362 0387 	bfi	r3, r2, #2, #6
 80002e8:	713b      	strb	r3, [r7, #4]

	//REG05
	BQ.REG05.CHG_TIMER = 0b01;	//If enabled, it will charge for 8 hours
 80002ea:	797b      	ldrb	r3, [r7, #5]
 80002ec:	2201      	movs	r2, #1
 80002ee:	f362 0342 	bfi	r3, r2, #1, #2
 80002f2:	717b      	strb	r3, [r7, #5]
	BQ.REG05.EN_TIMER = 0;		//disable charging safety timer
 80002f4:	797b      	ldrb	r3, [r7, #5]
 80002f6:	f36f 03c3 	bfc	r3, #3, #1
 80002fa:	717b      	strb	r3, [r7, #5]
	BQ.REG05.WATCHDOG = 0b00;	//disable watchdog
 80002fc:	797b      	ldrb	r3, [r7, #5]
 80002fe:	f36f 1305 	bfc	r3, #4, #2
 8000302:	717b      	strb	r3, [r7, #5]
	BQ.REG05.EN_TERM = 1;
 8000304:	797b      	ldrb	r3, [r7, #5]
 8000306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800030a:	717b      	strb	r3, [r7, #5]

	//REG06
	BQ.REG06.TREG = 0b00;		//Thermal reg at 60C degrees
 800030c:	79bb      	ldrb	r3, [r7, #6]
 800030e:	f36f 0301 	bfc	r3, #0, #2
 8000312:	71bb      	strb	r3, [r7, #6]
	BQ.REG06.BHOT = 0b00;
 8000314:	79bb      	ldrb	r3, [r7, #6]
 8000316:	f36f 0383 	bfc	r3, #2, #2
 800031a:	71bb      	strb	r3, [r7, #6]
	BQ.REG06.BOOSTV= 0b1001;	//not needed
 800031c:	79bb      	ldrb	r3, [r7, #6]
 800031e:	2209      	movs	r2, #9
 8000320:	f362 1307 	bfi	r3, r2, #4, #4
 8000324:	71bb      	strb	r3, [r7, #6]

	//REG07
	BQ.REG07.INT_MASK = 0b11;	//Enable pin Inturrupts
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	f043 0303 	orr.w	r3, r3, #3
 800032c:	71fb      	strb	r3, [r7, #7]
	BQ.REG07.BATFET_Disable = 0;//to Force BATFET off, turn this ON
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	f36f 1345 	bfc	r3, #5, #1
 8000334:	71fb      	strb	r3, [r7, #7]
	BQ.REG07.TMR2X_EN = 1;
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800033c:	71fb      	strb	r3, [r7, #7]
	BQ.REG07.DPDM_EN = 0;
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	f36f 13c7 	bfc	r3, #7, #1
 8000344:	71fb      	strb	r3, [r7, #7]

	BQ_Write((uint8_t *)InputSourceControlReg, *(uint8_t *)&BQ.REG00);
 8000346:	463b      	mov	r3, r7
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	4619      	mov	r1, r3
 800034c:	2000      	movs	r0, #0
 800034e:	f7ff ff3d 	bl	80001cc <BQ_Write>
	BQ_Write((uint8_t *)PowerOnConfigReg, *(uint8_t *)&BQ.REG01);
 8000352:	463b      	mov	r3, r7
 8000354:	3301      	adds	r3, #1
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	4619      	mov	r1, r3
 800035a:	2001      	movs	r0, #1
 800035c:	f7ff ff36 	bl	80001cc <BQ_Write>
	BQ_Write((uint8_t *)ChargeCurrentControlReg, *(uint8_t *)&BQ.REG02);
 8000360:	463b      	mov	r3, r7
 8000362:	3302      	adds	r3, #2
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	4619      	mov	r1, r3
 8000368:	2002      	movs	r0, #2
 800036a:	f7ff ff2f 	bl	80001cc <BQ_Write>
	BQ_Write((uint8_t *)PrechargeTerminationCurrentControlReg, *(uint8_t *)&BQ.REG03);
 800036e:	463b      	mov	r3, r7
 8000370:	3303      	adds	r3, #3
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	4619      	mov	r1, r3
 8000376:	2003      	movs	r0, #3
 8000378:	f7ff ff28 	bl	80001cc <BQ_Write>
	BQ_Write((uint8_t *)ChargeVoltageControlReg, *(uint8_t *)&BQ.REG04);
 800037c:	463b      	mov	r3, r7
 800037e:	3304      	adds	r3, #4
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	4619      	mov	r1, r3
 8000384:	2004      	movs	r0, #4
 8000386:	f7ff ff21 	bl	80001cc <BQ_Write>
	BQ_Write((uint8_t *)ChargeTerminationTimerControlReg, *(uint8_t *)&BQ.REG05);
 800038a:	463b      	mov	r3, r7
 800038c:	3305      	adds	r3, #5
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	4619      	mov	r1, r3
 8000392:	2005      	movs	r0, #5
 8000394:	f7ff ff1a 	bl	80001cc <BQ_Write>
	BQ_Write((uint8_t *)BoostVoltageThermalRegulationControlReg, *(uint8_t *)&BQ.REG06);
 8000398:	463b      	mov	r3, r7
 800039a:	3306      	adds	r3, #6
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	4619      	mov	r1, r3
 80003a0:	2006      	movs	r0, #6
 80003a2:	f7ff ff13 	bl	80001cc <BQ_Write>
	BQ_Write((uint8_t *)MiscOperationControlReg, *(uint8_t *)&BQ.REG07);
 80003a6:	463b      	mov	r3, r7
 80003a8:	3307      	adds	r3, #7
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	4619      	mov	r1, r3
 80003ae:	2007      	movs	r0, #7
 80003b0:	f7ff ff0c 	bl	80001cc <BQ_Write>


}
 80003b4:	bf00      	nop
 80003b6:	3708      	adds	r7, #8
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}

080003bc <BQ_IsCharging>:
	}
}


uint8_t BQ_IsCharging()
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
	uint8_t SystemStatus 	= BQ_Read(SystemStatusReg);
 80003c2:	2008      	movs	r0, #8
 80003c4:	f7ff ff26 	bl	8000214 <BQ_Read>
 80003c8:	4603      	mov	r3, r0
 80003ca:	71fb      	strb	r3, [r7, #7]
	uint8_t chargeStatus 	= (SystemStatus >> 4) & 0b11;
 80003cc:	79fb      	ldrb	r3, [r7, #7]
 80003ce:	091b      	lsrs	r3, r3, #4
 80003d0:	b2db      	uxtb	r3, r3
 80003d2:	f003 0303 	and.w	r3, r3, #3
 80003d6:	71bb      	strb	r3, [r7, #6]
	return chargeStatus;
 80003d8:	79bb      	ldrb	r3, [r7, #6]
}
 80003da:	4618      	mov	r0, r3
 80003dc:	3708      	adds	r7, #8
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}

080003e2 <WakeUpFromSleepMode>:
#if (ENABLESLEEPMODE)
	void EnterSleepModeWakeOnInturrupt() {
		HAL_SuspendTick();
		HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
	}
	void WakeUpFromSleepMode(){
 80003e2:	b580      	push	{r7, lr}
 80003e4:	af00      	add	r7, sp, #0
		HAL_ResumeTick();
 80003e6:	f000 fc6d 	bl	8000cc4 <HAL_ResumeTick>
	}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
	...

080003f0 <HAL_GPIO_EXTI_Callback>:



/*		INURRUPT CODE		*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BQ_INT_Pin) // BQ INT pin wake up
 80003fa:	88fb      	ldrh	r3, [r7, #6]
 80003fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000400:	d104      	bne.n	800040c <HAL_GPIO_EXTI_Callback+0x1c>
	{
		WakeUpFromSleepMode();
 8000402:	f7ff ffee 	bl	80003e2 <WakeUpFromSleepMode>
		BQ_FLAG = true;
 8000406:	4b03      	ldr	r3, [pc, #12]	; (8000414 <HAL_GPIO_EXTI_Callback+0x24>)
 8000408:	2201      	movs	r2, #1
 800040a:	701a      	strb	r2, [r3, #0]
	}
}
 800040c:	bf00      	nop
 800040e:	3708      	adds	r7, #8
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	2000007d 	.word	0x2000007d

08000418 <MAX17048_Init>:

bool MAX17048_Init()
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
	bool ok = true;
 800041e:	2301      	movs	r3, #1
 8000420:	71fb      	strb	r3, [r7, #7]
    if (ok) ok = max17048_is_present(&hi2c1);
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d004      	beq.n	8000432 <MAX17048_Init+0x1a>
 8000428:	4825      	ldr	r0, [pc, #148]	; (80004c0 <MAX17048_Init+0xa8>)
 800042a:	f000 f9f8 	bl	800081e <max17048_is_present>
 800042e:	4603      	mov	r3, r0
 8000430:	71fb      	strb	r3, [r7, #7]
    if (ok) ok = max17048_set_undervolted_voltage(&hi2c1, 3000);
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d006      	beq.n	8000446 <MAX17048_Init+0x2e>
 8000438:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800043c:	4820      	ldr	r0, [pc, #128]	; (80004c0 <MAX17048_Init+0xa8>)
 800043e:	f000 fa33 	bl	80008a8 <max17048_set_undervolted_voltage>
 8000442:	4603      	mov	r3, r0
 8000444:	71fb      	strb	r3, [r7, #7]
    if (ok) ok = max17048_set_overvolted_voltage(&hi2c1, 4200);
 8000446:	79fb      	ldrb	r3, [r7, #7]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d006      	beq.n	800045a <MAX17048_Init+0x42>
 800044c:	f241 0168 	movw	r1, #4200	; 0x1068
 8000450:	481b      	ldr	r0, [pc, #108]	; (80004c0 <MAX17048_Init+0xa8>)
 8000452:	f000 fa49 	bl	80008e8 <max17048_set_overvolted_voltage>
 8000456:	4603      	mov	r3, r0
 8000458:	71fb      	strb	r3, [r7, #7]
    if (ok) ok = max17048_set_reset_voltage(&hi2c1, 2500);
 800045a:	79fb      	ldrb	r3, [r7, #7]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d006      	beq.n	800046e <MAX17048_Init+0x56>
 8000460:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8000464:	4816      	ldr	r0, [pc, #88]	; (80004c0 <MAX17048_Init+0xa8>)
 8000466:	f000 fa5b 	bl	8000920 <max17048_set_reset_voltage>
 800046a:	4603      	mov	r3, r0
 800046c:	71fb      	strb	r3, [r7, #7]
    if (ok) ok = max17048_set_bat_low_soc(&hi2c1, 20);
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d005      	beq.n	8000480 <MAX17048_Init+0x68>
 8000474:	2114      	movs	r1, #20
 8000476:	4812      	ldr	r0, [pc, #72]	; (80004c0 <MAX17048_Init+0xa8>)
 8000478:	f000 f9f2 	bl	8000860 <max17048_set_bat_low_soc>
 800047c:	4603      	mov	r3, r0
 800047e:	71fb      	strb	r3, [r7, #7]
    if (ok) ok = max17048_set_voltage_reset_alert(&hi2c1, false);
 8000480:	79fb      	ldrb	r3, [r7, #7]
 8000482:	2b00      	cmp	r3, #0
 8000484:	d005      	beq.n	8000492 <MAX17048_Init+0x7a>
 8000486:	2100      	movs	r1, #0
 8000488:	480d      	ldr	r0, [pc, #52]	; (80004c0 <MAX17048_Init+0xa8>)
 800048a:	f000 fa82 	bl	8000992 <max17048_set_voltage_reset_alert>
 800048e:	4603      	mov	r3, r0
 8000490:	71fb      	strb	r3, [r7, #7]
    if (ok) ok = max17048_set_soc_change_alert(&hi2c1, false);
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d005      	beq.n	80004a4 <MAX17048_Init+0x8c>
 8000498:	2100      	movs	r1, #0
 800049a:	4809      	ldr	r0, [pc, #36]	; (80004c0 <MAX17048_Init+0xa8>)
 800049c:	f000 fa62 	bl	8000964 <max17048_set_soc_change_alert>
 80004a0:	4603      	mov	r3, r0
 80004a2:	71fb      	strb	r3, [r7, #7]
    if (ok) ok = max17048_clear_alerts(&hi2c1);
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d004      	beq.n	80004b4 <MAX17048_Init+0x9c>
 80004aa:	4805      	ldr	r0, [pc, #20]	; (80004c0 <MAX17048_Init+0xa8>)
 80004ac:	f000 fa89 	bl	80009c2 <max17048_clear_alerts>
 80004b0:	4603      	mov	r3, r0
 80004b2:	71fb      	strb	r3, [r7, #7]

    return ok;
 80004b4:	79fb      	ldrb	r3, [r7, #7]
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	3708      	adds	r7, #8
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	20000028 	.word	0x20000028

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fb87 	bl	8000bda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f82e 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f8b0 	bl	8000634 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d4:	f000 f870 	bl	80005b8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MAX17048_Init();
 80004d8:	f7ff ff9e 	bl	8000418 <MAX17048_Init>
  BQ_Init();
 80004dc:	f7ff febc 	bl	8000258 <BQ_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(BQ_FLAG)
 80004e0:	4b10      	ldr	r3, [pc, #64]	; (8000524 <main+0x60>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d016      	beq.n	8000516 <main+0x52>
	  {
		  BQ_FLAG = false;
 80004e8:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <main+0x60>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	701a      	strb	r2, [r3, #0]
		  ChargeStatus = BQ_IsCharging();
 80004ee:	f7ff ff65 	bl	80003bc <BQ_IsCharging>
 80004f2:	4603      	mov	r3, r0
 80004f4:	461a      	mov	r2, r3
 80004f6:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <main+0x64>)
 80004f8:	701a      	strb	r2, [r3, #0]
		  switch(ChargeStatus)
 80004fa:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <main+0x64>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	2b03      	cmp	r3, #3
 8000500:	d00b      	beq.n	800051a <main+0x56>
 8000502:	2b03      	cmp	r3, #3
 8000504:	dcec      	bgt.n	80004e0 <main+0x1c>
 8000506:	2b00      	cmp	r3, #0
 8000508:	d009      	beq.n	800051e <main+0x5a>
 800050a:	2b00      	cmp	r3, #0
 800050c:	dbe8      	blt.n	80004e0 <main+0x1c>
 800050e:	3b01      	subs	r3, #1
 8000510:	2b01      	cmp	r3, #1
 8000512:	d8e5      	bhi.n	80004e0 <main+0x1c>
			  //Not Charging
			  break;
		  case 1:
		  case 2:
			  //Charging
			  break;
 8000514:	e004      	b.n	8000520 <main+0x5c>
		  case 3:
			  //Charging done
			  break;
		  }
	  }
 8000516:	bf00      	nop
 8000518:	e7e2      	b.n	80004e0 <main+0x1c>
			  break;
 800051a:	bf00      	nop
 800051c:	e7e0      	b.n	80004e0 <main+0x1c>
			  break;
 800051e:	bf00      	nop
	  if(BQ_FLAG)
 8000520:	e7de      	b.n	80004e0 <main+0x1c>
 8000522:	bf00      	nop
 8000524:	2000007d 	.word	0x2000007d
 8000528:	2000007e 	.word	0x2000007e

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b096      	sub	sp, #88	; 0x58
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0314 	add.w	r3, r7, #20
 8000536:	2244      	movs	r2, #68	; 0x44
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f002 fe04 	bl	8003148 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	463b      	mov	r3, r7
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	605a      	str	r2, [r3, #4]
 8000548:	609a      	str	r2, [r3, #8]
 800054a:	60da      	str	r2, [r3, #12]
 800054c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800054e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000552:	f001 fc75 	bl	8001e40 <HAL_PWREx_ControlVoltageScaling>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800055c:	f000 f89c 	bl	8000698 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000560:	2310      	movs	r3, #16
 8000562:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000564:	2301      	movs	r3, #1
 8000566:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000568:	2300      	movs	r3, #0
 800056a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800056c:	2360      	movs	r3, #96	; 0x60
 800056e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000570:	2300      	movs	r3, #0
 8000572:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000574:	f107 0314 	add.w	r3, r7, #20
 8000578:	4618      	mov	r0, r3
 800057a:	f001 fcb7 	bl	8001eec <HAL_RCC_OscConfig>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000584:	f000 f888 	bl	8000698 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000588:	230f      	movs	r3, #15
 800058a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800058c:	2300      	movs	r3, #0
 800058e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800059c:	463b      	mov	r3, r7
 800059e:	2100      	movs	r1, #0
 80005a0:	4618      	mov	r0, r3
 80005a2:	f002 f8b7 	bl	8002714 <HAL_RCC_ClockConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005ac:	f000 f874 	bl	8000698 <Error_Handler>
  }
}
 80005b0:	bf00      	nop
 80005b2:	3758      	adds	r7, #88	; 0x58
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005bc:	4b1b      	ldr	r3, [pc, #108]	; (800062c <MX_I2C1_Init+0x74>)
 80005be:	4a1c      	ldr	r2, [pc, #112]	; (8000630 <MX_I2C1_Init+0x78>)
 80005c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000004;
 80005c2:	4b1a      	ldr	r3, [pc, #104]	; (800062c <MX_I2C1_Init+0x74>)
 80005c4:	2204      	movs	r2, #4
 80005c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005c8:	4b18      	ldr	r3, [pc, #96]	; (800062c <MX_I2C1_Init+0x74>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005ce:	4b17      	ldr	r3, [pc, #92]	; (800062c <MX_I2C1_Init+0x74>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005d4:	4b15      	ldr	r3, [pc, #84]	; (800062c <MX_I2C1_Init+0x74>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005da:	4b14      	ldr	r3, [pc, #80]	; (800062c <MX_I2C1_Init+0x74>)
 80005dc:	2200      	movs	r2, #0
 80005de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <MX_I2C1_Init+0x74>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <MX_I2C1_Init+0x74>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <MX_I2C1_Init+0x74>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005f2:	480e      	ldr	r0, [pc, #56]	; (800062c <MX_I2C1_Init+0x74>)
 80005f4:	f000 fe1a 	bl	800122c <HAL_I2C_Init>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005fe:	f000 f84b 	bl	8000698 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000602:	2100      	movs	r1, #0
 8000604:	4809      	ldr	r0, [pc, #36]	; (800062c <MX_I2C1_Init+0x74>)
 8000606:	f001 fb75 	bl	8001cf4 <HAL_I2CEx_ConfigAnalogFilter>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000610:	f000 f842 	bl	8000698 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000614:	2100      	movs	r1, #0
 8000616:	4805      	ldr	r0, [pc, #20]	; (800062c <MX_I2C1_Init+0x74>)
 8000618:	f001 fbb7 	bl	8001d8a <HAL_I2CEx_ConfigDigitalFilter>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000622:	f000 f839 	bl	8000698 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000028 	.word	0x20000028
 8000630:	40005400 	.word	0x40005400

08000634 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <MX_GPIO_Init+0x60>)
 800064a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064c:	4a11      	ldr	r2, [pc, #68]	; (8000694 <MX_GPIO_Init+0x60>)
 800064e:	f043 0301 	orr.w	r3, r3, #1
 8000652:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000654:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <MX_GPIO_Init+0x60>)
 8000656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000658:	f003 0301 	and.w	r3, r3, #1
 800065c:	603b      	str	r3, [r7, #0]
 800065e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : BQ_INT_Pin */
  GPIO_InitStruct.Pin = BQ_INT_Pin;
 8000660:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000664:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000666:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800066a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BQ_INT_GPIO_Port, &GPIO_InitStruct);
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	4619      	mov	r1, r3
 8000674:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000678:	f000 fc46 	bl	8000f08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800067c:	2200      	movs	r2, #0
 800067e:	2100      	movs	r1, #0
 8000680:	2017      	movs	r0, #23
 8000682:	f000 fc0a 	bl	8000e9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000686:	2017      	movs	r0, #23
 8000688:	f000 fc23 	bl	8000ed2 <HAL_NVIC_EnableIRQ>

}
 800068c:	bf00      	nop
 800068e:	3718      	adds	r7, #24
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40021000 	.word	0x40021000

08000698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800069c:	b672      	cpsid	i
}
 800069e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <Error_Handler+0x8>

080006a2 <i2c_master_read_u16>:
// MAX17048 uses big endian register layout
#define SWAP16(x) ((uint16_t)(((x) << 8) | ((x) >> 8)))


bool i2c_master_read_u16(I2C_HandleTypeDef *i2cHandle, uint8_t device, uint8_t reg, uint16_t *buf )
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b088      	sub	sp, #32
 80006a6:	af04      	add	r7, sp, #16
 80006a8:	60f8      	str	r0, [r7, #12]
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	460b      	mov	r3, r1
 80006ae:	72fb      	strb	r3, [r7, #11]
 80006b0:	4613      	mov	r3, r2
 80006b2:	72bb      	strb	r3, [r7, #10]
	if ( HAL_I2C_Mem_Read( i2cHandle, device, reg, I2C_MEMADD_SIZE_16BIT, buf, 2, 10 ) != HAL_OK)
 80006b4:	7afb      	ldrb	r3, [r7, #11]
 80006b6:	b299      	uxth	r1, r3
 80006b8:	7abb      	ldrb	r3, [r7, #10]
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	230a      	movs	r3, #10
 80006be:	9302      	str	r3, [sp, #8]
 80006c0:	2302      	movs	r3, #2
 80006c2:	9301      	str	r3, [sp, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	9300      	str	r3, [sp, #0]
 80006c8:	2302      	movs	r3, #2
 80006ca:	68f8      	ldr	r0, [r7, #12]
 80006cc:	f000 ff52 	bl	8001574 <HAL_I2C_Mem_Read>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <i2c_master_read_u16+0x38>
	{
		return 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	e000      	b.n	80006dc <i2c_master_read_u16+0x3a>
	}

	return 1;
 80006da:	2301      	movs	r3, #1
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <i2c_master_write_u16>:

bool i2c_master_write_u16(I2C_HandleTypeDef *i2cHandle, uint8_t device, uint8_t reg, uint16_t *buf )
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af04      	add	r7, sp, #16
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	460b      	mov	r3, r1
 80006f0:	72fb      	strb	r3, [r7, #11]
 80006f2:	4613      	mov	r3, r2
 80006f4:	72bb      	strb	r3, [r7, #10]
	if ( HAL_I2C_Mem_Write( i2cHandle, device, reg, I2C_MEMADD_SIZE_16BIT, buf, 2, 10 ) != HAL_OK)
 80006f6:	7afb      	ldrb	r3, [r7, #11]
 80006f8:	b299      	uxth	r1, r3
 80006fa:	7abb      	ldrb	r3, [r7, #10]
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	230a      	movs	r3, #10
 8000700:	9302      	str	r3, [sp, #8]
 8000702:	2302      	movs	r3, #2
 8000704:	9301      	str	r3, [sp, #4]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	2302      	movs	r3, #2
 800070c:	68f8      	ldr	r0, [r7, #12]
 800070e:	f000 fe1d 	bl	800134c <HAL_I2C_Mem_Write>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <i2c_master_write_u16+0x38>
	{
		return 0;
 8000718:	2300      	movs	r3, #0
 800071a:	e000      	b.n	800071e <i2c_master_write_u16+0x3a>
	}

	return 1;
 800071c:	2301      	movs	r3, #1
}
 800071e:	4618      	mov	r0, r3
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <read_reg>:


static inline bool read_reg(I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint16_t* out) {
 8000726:	b580      	push	{r7, lr}
 8000728:	b084      	sub	sp, #16
 800072a:	af00      	add	r7, sp, #0
 800072c:	60f8      	str	r0, [r7, #12]
 800072e:	460b      	mov	r3, r1
 8000730:	607a      	str	r2, [r7, #4]
 8000732:	72fb      	strb	r3, [r7, #11]
    if (!i2c_master_read_u16(i2cHandle, MAX_ADDR, reg, out)) {
 8000734:	7afa      	ldrb	r2, [r7, #11]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2136      	movs	r1, #54	; 0x36
 800073a:	68f8      	ldr	r0, [r7, #12]
 800073c:	f7ff ffb1 	bl	80006a2 <i2c_master_read_u16>
 8000740:	4603      	mov	r3, r0
 8000742:	f083 0301 	eor.w	r3, r3, #1
 8000746:	b2db      	uxtb	r3, r3
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <read_reg+0x2a>
        return false;
 800074c:	2300      	movs	r3, #0
 800074e:	e00e      	b.n	800076e <read_reg+0x48>
    }

    *out = SWAP16(*out);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	881b      	ldrh	r3, [r3, #0]
 8000754:	021b      	lsls	r3, r3, #8
 8000756:	b21a      	sxth	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	0a1b      	lsrs	r3, r3, #8
 800075e:	b29b      	uxth	r3, r3
 8000760:	b21b      	sxth	r3, r3
 8000762:	4313      	orrs	r3, r2
 8000764:	b21b      	sxth	r3, r3
 8000766:	b29a      	uxth	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	801a      	strh	r2, [r3, #0]
    return true;
 800076c:	2301      	movs	r3, #1
}
 800076e:	4618      	mov	r0, r3
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <write_reg>:

static inline bool write_reg(I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint16_t data) {
 8000776:	b580      	push	{r7, lr}
 8000778:	b082      	sub	sp, #8
 800077a:	af00      	add	r7, sp, #0
 800077c:	6078      	str	r0, [r7, #4]
 800077e:	460b      	mov	r3, r1
 8000780:	70fb      	strb	r3, [r7, #3]
 8000782:	4613      	mov	r3, r2
 8000784:	803b      	strh	r3, [r7, #0]
    return i2c_master_write_u16(i2cHandle, MAX_ADDR, reg, SWAP16(data));
 8000786:	883b      	ldrh	r3, [r7, #0]
 8000788:	021b      	lsls	r3, r3, #8
 800078a:	b21a      	sxth	r2, r3
 800078c:	883b      	ldrh	r3, [r7, #0]
 800078e:	0a1b      	lsrs	r3, r3, #8
 8000790:	b29b      	uxth	r3, r3
 8000792:	b21b      	sxth	r3, r3
 8000794:	4313      	orrs	r3, r2
 8000796:	b21b      	sxth	r3, r3
 8000798:	b29b      	uxth	r3, r3
 800079a:	78fa      	ldrb	r2, [r7, #3]
 800079c:	2136      	movs	r1, #54	; 0x36
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f7ff ffa0 	bl	80006e4 <i2c_master_write_u16>
 80007a4:	4603      	mov	r3, r0
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <modify_reg>:

static inline bool modify_reg(I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint16_t data, uint16_t mask) {
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b086      	sub	sp, #24
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	60f8      	str	r0, [r7, #12]
 80007b6:	4608      	mov	r0, r1
 80007b8:	4611      	mov	r1, r2
 80007ba:	461a      	mov	r2, r3
 80007bc:	4603      	mov	r3, r0
 80007be:	72fb      	strb	r3, [r7, #11]
 80007c0:	460b      	mov	r3, r1
 80007c2:	813b      	strh	r3, [r7, #8]
 80007c4:	4613      	mov	r3, r2
 80007c6:	80fb      	strh	r3, [r7, #6]
    uint16_t buf;
    if (!read_reg(i2cHandle, reg, &buf)) {
 80007c8:	f107 0216 	add.w	r2, r7, #22
 80007cc:	7afb      	ldrb	r3, [r7, #11]
 80007ce:	4619      	mov	r1, r3
 80007d0:	68f8      	ldr	r0, [r7, #12]
 80007d2:	f7ff ffa8 	bl	8000726 <read_reg>
 80007d6:	4603      	mov	r3, r0
 80007d8:	f083 0301 	eor.w	r3, r3, #1
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <modify_reg+0x38>
        return false;
 80007e2:	2300      	movs	r3, #0
 80007e4:	e017      	b.n	8000816 <modify_reg+0x68>
    }

    buf = (buf & ~mask) | (data & mask);
 80007e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007ea:	43db      	mvns	r3, r3
 80007ec:	b21a      	sxth	r2, r3
 80007ee:	8afb      	ldrh	r3, [r7, #22]
 80007f0:	b21b      	sxth	r3, r3
 80007f2:	4013      	ands	r3, r2
 80007f4:	b21a      	sxth	r2, r3
 80007f6:	8939      	ldrh	r1, [r7, #8]
 80007f8:	88fb      	ldrh	r3, [r7, #6]
 80007fa:	400b      	ands	r3, r1
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	b21b      	sxth	r3, r3
 8000800:	4313      	orrs	r3, r2
 8000802:	b21b      	sxth	r3, r3
 8000804:	b29b      	uxth	r3, r3
 8000806:	82fb      	strh	r3, [r7, #22]
    return write_reg(i2cHandle, reg, buf);
 8000808:	8afa      	ldrh	r2, [r7, #22]
 800080a:	7afb      	ldrb	r3, [r7, #11]
 800080c:	4619      	mov	r1, r3
 800080e:	68f8      	ldr	r0, [r7, #12]
 8000810:	f7ff ffb1 	bl	8000776 <write_reg>
 8000814:	4603      	mov	r3, r0
}
 8000816:	4618      	mov	r0, r3
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <max17048_is_present>:

bool max17048_is_present(I2C_HandleTypeDef *i2cHandle) {
 800081e:	b580      	push	{r7, lr}
 8000820:	b084      	sub	sp, #16
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
    uint16_t data;
    if (!read_reg(i2cHandle, VERSION, &data)) {
 8000826:	f107 030e 	add.w	r3, r7, #14
 800082a:	461a      	mov	r2, r3
 800082c:	2108      	movs	r1, #8
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f7ff ff79 	bl	8000726 <read_reg>
 8000834:	4603      	mov	r3, r0
 8000836:	f083 0301 	eor.w	r3, r3, #1
 800083a:	b2db      	uxtb	r3, r3
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <max17048_is_present+0x26>
        return false;
 8000840:	2300      	movs	r3, #0
 8000842:	e009      	b.n	8000858 <max17048_is_present+0x3a>
    }

    return ((data & VERSION_MSK) == PART_NUMBER);
 8000844:	89fb      	ldrh	r3, [r7, #14]
 8000846:	461a      	mov	r2, r3
 8000848:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800084c:	4013      	ands	r3, r2
 800084e:	2b10      	cmp	r3, #16
 8000850:	bf0c      	ite	eq
 8000852:	2301      	moveq	r3, #1
 8000854:	2300      	movne	r3, #0
 8000856:	b2db      	uxtb	r3, r3
}
 8000858:	4618      	mov	r0, r3
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <max17048_set_bat_low_soc>:

    *percent = (max17048_soc_t)(data >> 8);
    return true;
}

bool max17048_set_bat_low_soc(I2C_HandleTypeDef *i2cHandle, max17048_soc_t percent) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	460b      	mov	r3, r1
 800086a:	70fb      	strb	r3, [r7, #3]
    if (percent < BAT_LOW_MIN || percent > BAT_LOW_MAX) {
 800086c:	78fb      	ldrb	r3, [r7, #3]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d002      	beq.n	8000878 <max17048_set_bat_low_soc+0x18>
 8000872:	78fb      	ldrb	r3, [r7, #3]
 8000874:	2b20      	cmp	r3, #32
 8000876:	d901      	bls.n	800087c <max17048_set_bat_low_soc+0x1c>
        return false;
 8000878:	2300      	movs	r3, #0
 800087a:	e011      	b.n	80008a0 <max17048_set_bat_low_soc+0x40>
    }
    uint16_t data = (uint16_t)((BAT_LOW_MAX - (percent % BAT_LOW_MAX)) & BAT_LOW_MSK);
 800087c:	78fb      	ldrb	r3, [r7, #3]
 800087e:	b29b      	uxth	r3, r3
 8000880:	f003 031f 	and.w	r3, r3, #31
 8000884:	b29b      	uxth	r3, r3
 8000886:	f1c3 0320 	rsb	r3, r3, #32
 800088a:	b29b      	uxth	r3, r3
 800088c:	f003 031f 	and.w	r3, r3, #31
 8000890:	81fb      	strh	r3, [r7, #14]

    return modify_reg(i2cHandle, CONFIG, data, BAT_LOW_MSK);
 8000892:	89fa      	ldrh	r2, [r7, #14]
 8000894:	231f      	movs	r3, #31
 8000896:	210c      	movs	r1, #12
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f7ff ff88 	bl	80007ae <modify_reg>
 800089e:	4603      	mov	r3, r0
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3710      	adds	r7, #16
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <max17048_set_undervolted_voltage>:

bool max17048_set_undervolted_voltage(I2C_HandleTypeDef *i2cHandle, max17048_voltage_t mv) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	460b      	mov	r3, r1
 80008b2:	807b      	strh	r3, [r7, #2]
    uint16_t data = (uint16_t)(((mv / VALRT_RESOLUTION) << VALRT_MIN_POS) & VALRT_MIN_MSK);
 80008b4:	887b      	ldrh	r3, [r7, #2]
 80008b6:	4a0b      	ldr	r2, [pc, #44]	; (80008e4 <max17048_set_undervolted_voltage+0x3c>)
 80008b8:	fba2 2303 	umull	r2, r3, r2, r3
 80008bc:	091b      	lsrs	r3, r3, #4
 80008be:	b29b      	uxth	r3, r3
 80008c0:	021b      	lsls	r3, r3, #8
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80008c8:	81fb      	strh	r3, [r7, #14]

    return modify_reg(i2cHandle, VALRT, data, VALRT_MIN_MSK);
 80008ca:	89fa      	ldrh	r2, [r7, #14]
 80008cc:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80008d0:	2114      	movs	r1, #20
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f7ff ff6b 	bl	80007ae <modify_reg>
 80008d8:	4603      	mov	r3, r0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	cccccccd 	.word	0xcccccccd

080008e8 <max17048_set_overvolted_voltage>:

bool max17048_set_overvolted_voltage(I2C_HandleTypeDef *i2cHandle, max17048_voltage_t mv) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	460b      	mov	r3, r1
 80008f2:	807b      	strh	r3, [r7, #2]
    uint16_t data = (uint16_t)(((mv / VALRT_RESOLUTION) << VALRT_MAX_POS) & VALRT_MAX_MSK);
 80008f4:	887b      	ldrh	r3, [r7, #2]
 80008f6:	4a09      	ldr	r2, [pc, #36]	; (800091c <max17048_set_overvolted_voltage+0x34>)
 80008f8:	fba2 2303 	umull	r2, r3, r2, r3
 80008fc:	091b      	lsrs	r3, r3, #4
 80008fe:	b29b      	uxth	r3, r3
 8000900:	b2db      	uxtb	r3, r3
 8000902:	81fb      	strh	r3, [r7, #14]

    return modify_reg(i2cHandle, VALRT, data, VALRT_MAX_MSK);
 8000904:	89fa      	ldrh	r2, [r7, #14]
 8000906:	23ff      	movs	r3, #255	; 0xff
 8000908:	2114      	movs	r1, #20
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff ff4f 	bl	80007ae <modify_reg>
 8000910:	4603      	mov	r3, r0
}
 8000912:	4618      	mov	r0, r3
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	cccccccd 	.word	0xcccccccd

08000920 <max17048_set_reset_voltage>:

bool max17048_set_reset_voltage(I2C_HandleTypeDef *i2cHandle, max17048_voltage_t mv) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	460b      	mov	r3, r1
 800092a:	807b      	strh	r3, [r7, #2]
    uint16_t data = (uint16_t)(((mv / VRESET_RESOLUTION) << VRESET_POS) & VRESET_MSK);
 800092c:	887b      	ldrh	r3, [r7, #2]
 800092e:	4a0c      	ldr	r2, [pc, #48]	; (8000960 <max17048_set_reset_voltage+0x40>)
 8000930:	fba2 2303 	umull	r2, r3, r2, r3
 8000934:	095b      	lsrs	r3, r3, #5
 8000936:	b29b      	uxth	r3, r3
 8000938:	025b      	lsls	r3, r3, #9
 800093a:	b29b      	uxth	r3, r3
 800093c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000940:	f023 0301 	bic.w	r3, r3, #1
 8000944:	81fb      	strh	r3, [r7, #14]

    return modify_reg(i2cHandle, VRESET_ID, data, VRESET_MSK);
 8000946:	89fa      	ldrh	r2, [r7, #14]
 8000948:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 800094c:	2118      	movs	r1, #24
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f7ff ff2d 	bl	80007ae <modify_reg>
 8000954:	4603      	mov	r3, r0
}
 8000956:	4618      	mov	r0, r3
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	cccccccd 	.word	0xcccccccd

08000964 <max17048_set_soc_change_alert>:

bool max17048_set_soc_change_alert(I2C_HandleTypeDef *i2cHandle, bool enable) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	460b      	mov	r3, r1
 800096e:	70fb      	strb	r3, [r7, #3]
    uint16_t data = (uint16_t)((enable << ALSC_BIT_POS) & ALSC_BIT_MSK);
 8000970:	78fb      	ldrb	r3, [r7, #3]
 8000972:	019b      	lsls	r3, r3, #6
 8000974:	b29b      	uxth	r3, r3
 8000976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800097a:	81fb      	strh	r3, [r7, #14]

    return modify_reg(i2cHandle, CONFIG, data, ALSC_BIT_MSK);
 800097c:	89fa      	ldrh	r2, [r7, #14]
 800097e:	2340      	movs	r3, #64	; 0x40
 8000980:	210c      	movs	r1, #12
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f7ff ff13 	bl	80007ae <modify_reg>
 8000988:	4603      	mov	r3, r0
}
 800098a:	4618      	mov	r0, r3
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <max17048_set_voltage_reset_alert>:

bool max17048_set_voltage_reset_alert(I2C_HandleTypeDef *i2cHandle, bool enable) {
 8000992:	b580      	push	{r7, lr}
 8000994:	b084      	sub	sp, #16
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
 800099a:	460b      	mov	r3, r1
 800099c:	70fb      	strb	r3, [r7, #3]
    uint16_t data = (uint16_t)((enable << ENVR_BIT_POS) & ENVR_BIT_MSK);
 800099e:	78fb      	ldrb	r3, [r7, #3]
 80009a0:	039b      	lsls	r3, r3, #14
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a8:	81fb      	strh	r3, [r7, #14]

    return modify_reg(i2cHandle, STATUS, data, ENVR_BIT_MSK);
 80009aa:	89fa      	ldrh	r2, [r7, #14]
 80009ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009b0:	211a      	movs	r1, #26
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f7ff fefb 	bl	80007ae <modify_reg>
 80009b8:	4603      	mov	r3, r0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <max17048_clear_alerts>:

bool max17048_clear_alerts(I2C_HandleTypeDef *i2cHandle) {
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b084      	sub	sp, #16
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
    bool ok = true;
 80009ca:	2301      	movs	r3, #1
 80009cc:	73fb      	strb	r3, [r7, #15]

    if (ok) ok = modify_reg(i2cHandle, STATUS, 0, ALRT_STATUS_MSK);
 80009ce:	7bfb      	ldrb	r3, [r7, #15]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d008      	beq.n	80009e6 <max17048_clear_alerts+0x24>
 80009d4:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 80009d8:	2200      	movs	r2, #0
 80009da:	211a      	movs	r1, #26
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f7ff fee6 	bl	80007ae <modify_reg>
 80009e2:	4603      	mov	r3, r0
 80009e4:	73fb      	strb	r3, [r7, #15]
    if (ok) ok = modify_reg(i2cHandle, CONFIG, 0, ALRT_BIT_MSK);
 80009e6:	7bfb      	ldrb	r3, [r7, #15]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d007      	beq.n	80009fc <max17048_clear_alerts+0x3a>
 80009ec:	2320      	movs	r3, #32
 80009ee:	2200      	movs	r2, #0
 80009f0:	210c      	movs	r1, #12
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f7ff fedb 	bl	80007ae <modify_reg>
 80009f8:	4603      	mov	r3, r0
 80009fa:	73fb      	strb	r3, [r7, #15]

    return ok;
 80009fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3710      	adds	r7, #16
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <HAL_MspInit+0x44>)
 8000a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a12:	4a0e      	ldr	r2, [pc, #56]	; (8000a4c <HAL_MspInit+0x44>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6613      	str	r3, [r2, #96]	; 0x60
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <HAL_MspInit+0x44>)
 8000a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <HAL_MspInit+0x44>)
 8000a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2a:	4a08      	ldr	r2, [pc, #32]	; (8000a4c <HAL_MspInit+0x44>)
 8000a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a30:	6593      	str	r3, [r2, #88]	; 0x58
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_MspInit+0x44>)
 8000a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	40021000 	.word	0x40021000

08000a50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b0a0      	sub	sp, #128	; 0x80
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a68:	f107 0310 	add.w	r3, r7, #16
 8000a6c:	225c      	movs	r2, #92	; 0x5c
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f002 fb69 	bl	8003148 <memset>
  if(hi2c->Instance==I2C1)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a1f      	ldr	r2, [pc, #124]	; (8000af8 <HAL_I2C_MspInit+0xa8>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d137      	bne.n	8000af0 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a80:	2340      	movs	r3, #64	; 0x40
 8000a82:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f002 f82d 	bl	8002aec <HAL_RCCEx_PeriphCLKConfig>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000a98:	f7ff fdfe 	bl	8000698 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9c:	4b17      	ldr	r3, [pc, #92]	; (8000afc <HAL_I2C_MspInit+0xac>)
 8000a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa0:	4a16      	ldr	r2, [pc, #88]	; (8000afc <HAL_I2C_MspInit+0xac>)
 8000aa2:	f043 0301 	orr.w	r3, r3, #1
 8000aa6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa8:	4b14      	ldr	r3, [pc, #80]	; (8000afc <HAL_I2C_MspInit+0xac>)
 8000aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aac:	f003 0301 	and.w	r3, r3, #1
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ab4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ab8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aba:	2312      	movs	r3, #18
 8000abc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ac6:	2304      	movs	r3, #4
 8000ac8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aca:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ace:	4619      	mov	r1, r3
 8000ad0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad4:	f000 fa18 	bl	8000f08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ad8:	4b08      	ldr	r3, [pc, #32]	; (8000afc <HAL_I2C_MspInit+0xac>)
 8000ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000adc:	4a07      	ldr	r2, [pc, #28]	; (8000afc <HAL_I2C_MspInit+0xac>)
 8000ade:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ae2:	6593      	str	r3, [r2, #88]	; 0x58
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <HAL_I2C_MspInit+0xac>)
 8000ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000af0:	bf00      	nop
 8000af2:	3780      	adds	r7, #128	; 0x80
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40005400 	.word	0x40005400
 8000afc:	40021000 	.word	0x40021000

08000b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <NMI_Handler+0x4>

08000b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <HardFault_Handler+0x4>

08000b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <MemManage_Handler+0x4>

08000b12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b16:	e7fe      	b.n	8000b16 <BusFault_Handler+0x4>

08000b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <UsageFault_Handler+0x4>

08000b1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b4c:	f000 f89a 	bl	8000c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BQ_INT_Pin);
 8000b58:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000b5c:	f000 fb4e 	bl	80011fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <SystemInit+0x20>)
 8000b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b6e:	4a05      	ldr	r2, [pc, #20]	; (8000b84 <SystemInit+0x20>)
 8000b70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b8c:	f7ff ffea 	bl	8000b64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b90:	480c      	ldr	r0, [pc, #48]	; (8000bc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b92:	490d      	ldr	r1, [pc, #52]	; (8000bc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b94:	4a0d      	ldr	r2, [pc, #52]	; (8000bcc <LoopForever+0xe>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b98:	e002      	b.n	8000ba0 <LoopCopyDataInit>

08000b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9e:	3304      	adds	r3, #4

08000ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba4:	d3f9      	bcc.n	8000b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba8:	4c0a      	ldr	r4, [pc, #40]	; (8000bd4 <LoopForever+0x16>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bac:	e001      	b.n	8000bb2 <LoopFillZerobss>

08000bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb0:	3204      	adds	r2, #4

08000bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb4:	d3fb      	bcc.n	8000bae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bb6:	f002 faa3 	bl	8003100 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bba:	f7ff fc83 	bl	80004c4 <main>

08000bbe <LoopForever>:

LoopForever:
    b LoopForever
 8000bbe:	e7fe      	b.n	8000bbe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bc0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bcc:	080031b8 	.word	0x080031b8
  ldr r2, =_sbss
 8000bd0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bd4:	20000084 	.word	0x20000084

08000bd8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC1_IRQHandler>

08000bda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b082      	sub	sp, #8
 8000bde:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000be0:	2300      	movs	r3, #0
 8000be2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be4:	2003      	movs	r0, #3
 8000be6:	f000 f94d 	bl	8000e84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bea:	200f      	movs	r0, #15
 8000bec:	f000 f80e 	bl	8000c0c <HAL_InitTick>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d002      	beq.n	8000bfc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	71fb      	strb	r3, [r7, #7]
 8000bfa:	e001      	b.n	8000c00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bfc:	f7ff ff04 	bl	8000a08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c00:	79fb      	ldrb	r3, [r7, #7]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c14:	2300      	movs	r3, #0
 8000c16:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c18:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <HAL_InitTick+0x6c>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d023      	beq.n	8000c68 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c20:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <HAL_InitTick+0x70>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <HAL_InitTick+0x6c>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 f959 	bl	8000eee <HAL_SYSTICK_Config>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d10f      	bne.n	8000c62 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2b0f      	cmp	r3, #15
 8000c46:	d809      	bhi.n	8000c5c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	f000 f923 	bl	8000e9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c54:	4a0a      	ldr	r2, [pc, #40]	; (8000c80 <HAL_InitTick+0x74>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6013      	str	r3, [r2, #0]
 8000c5a:	e007      	b.n	8000c6c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	73fb      	strb	r3, [r7, #15]
 8000c60:	e004      	b.n	8000c6c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	73fb      	strb	r3, [r7, #15]
 8000c66:	e001      	b.n	8000c6c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000008 	.word	0x20000008
 8000c7c:	20000000 	.word	0x20000000
 8000c80:	20000004 	.word	0x20000004

08000c84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_IncTick+0x20>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_IncTick+0x24>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4413      	add	r3, r2
 8000c94:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <HAL_IncTick+0x24>)
 8000c96:	6013      	str	r3, [r2, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	20000008 	.word	0x20000008
 8000ca8:	20000080 	.word	0x20000080

08000cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb0:	4b03      	ldr	r3, [pc, #12]	; (8000cc0 <HAL_GetTick+0x14>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	20000080 	.word	0x20000080

08000cc4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <HAL_ResumeTick+0x1c>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <HAL_ResumeTick+0x1c>)
 8000cce:	f043 0302 	orr.w	r3, r3, #2
 8000cd2:	6013      	str	r3, [r2, #0]
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000e010 	.word	0xe000e010

08000ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfa:	68ba      	ldr	r2, [r7, #8]
 8000cfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d00:	4013      	ands	r3, r2
 8000d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d16:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <__NVIC_SetPriorityGrouping+0x44>)
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	60d3      	str	r3, [r2, #12]
}
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d30:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <__NVIC_GetPriorityGrouping+0x18>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	0a1b      	lsrs	r3, r3, #8
 8000d36:	f003 0307 	and.w	r3, r3, #7
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	db0b      	blt.n	8000d72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	f003 021f 	and.w	r2, r3, #31
 8000d60:	4907      	ldr	r1, [pc, #28]	; (8000d80 <__NVIC_EnableIRQ+0x38>)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	095b      	lsrs	r3, r3, #5
 8000d68:	2001      	movs	r0, #1
 8000d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000e100 	.word	0xe000e100

08000d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	6039      	str	r1, [r7, #0]
 8000d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	db0a      	blt.n	8000dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	b2da      	uxtb	r2, r3
 8000d9c:	490c      	ldr	r1, [pc, #48]	; (8000dd0 <__NVIC_SetPriority+0x4c>)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	0112      	lsls	r2, r2, #4
 8000da4:	b2d2      	uxtb	r2, r2
 8000da6:	440b      	add	r3, r1
 8000da8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dac:	e00a      	b.n	8000dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	4908      	ldr	r1, [pc, #32]	; (8000dd4 <__NVIC_SetPriority+0x50>)
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	f003 030f 	and.w	r3, r3, #15
 8000dba:	3b04      	subs	r3, #4
 8000dbc:	0112      	lsls	r2, r2, #4
 8000dbe:	b2d2      	uxtb	r2, r2
 8000dc0:	440b      	add	r3, r1
 8000dc2:	761a      	strb	r2, [r3, #24]
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000e100 	.word	0xe000e100
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b089      	sub	sp, #36	; 0x24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	f1c3 0307 	rsb	r3, r3, #7
 8000df2:	2b04      	cmp	r3, #4
 8000df4:	bf28      	it	cs
 8000df6:	2304      	movcs	r3, #4
 8000df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	2b06      	cmp	r3, #6
 8000e00:	d902      	bls.n	8000e08 <NVIC_EncodePriority+0x30>
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	3b03      	subs	r3, #3
 8000e06:	e000      	b.n	8000e0a <NVIC_EncodePriority+0x32>
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43da      	mvns	r2, r3
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e20:	f04f 31ff 	mov.w	r1, #4294967295
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2a:	43d9      	mvns	r1, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	4313      	orrs	r3, r2
         );
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3724      	adds	r7, #36	; 0x24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
	...

08000e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e50:	d301      	bcc.n	8000e56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e52:	2301      	movs	r3, #1
 8000e54:	e00f      	b.n	8000e76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e56:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <SysTick_Config+0x40>)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e5e:	210f      	movs	r1, #15
 8000e60:	f04f 30ff 	mov.w	r0, #4294967295
 8000e64:	f7ff ff8e 	bl	8000d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e68:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <SysTick_Config+0x40>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e6e:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <SysTick_Config+0x40>)
 8000e70:	2207      	movs	r2, #7
 8000e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	e000e010 	.word	0xe000e010

08000e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f7ff ff29 	bl	8000ce4 <__NVIC_SetPriorityGrouping>
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b086      	sub	sp, #24
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	60b9      	str	r1, [r7, #8]
 8000ea4:	607a      	str	r2, [r7, #4]
 8000ea6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000eac:	f7ff ff3e 	bl	8000d2c <__NVIC_GetPriorityGrouping>
 8000eb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	68b9      	ldr	r1, [r7, #8]
 8000eb6:	6978      	ldr	r0, [r7, #20]
 8000eb8:	f7ff ff8e 	bl	8000dd8 <NVIC_EncodePriority>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec2:	4611      	mov	r1, r2
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ff5d 	bl	8000d84 <__NVIC_SetPriority>
}
 8000eca:	bf00      	nop
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	4603      	mov	r3, r0
 8000eda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ff31 	bl	8000d48 <__NVIC_EnableIRQ>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff ffa2 	bl	8000e40 <SysTick_Config>
 8000efc:	4603      	mov	r3, r0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b087      	sub	sp, #28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f16:	e154      	b.n	80011c2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	fa01 f303 	lsl.w	r3, r1, r3
 8000f24:	4013      	ands	r3, r2
 8000f26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	f000 8146 	beq.w	80011bc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f003 0303 	and.w	r3, r3, #3
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d005      	beq.n	8000f48 <HAL_GPIO_Init+0x40>
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 0303 	and.w	r3, r3, #3
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d130      	bne.n	8000faa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	2203      	movs	r2, #3
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	68da      	ldr	r2, [r3, #12]
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f7e:	2201      	movs	r2, #1
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	091b      	lsrs	r3, r3, #4
 8000f94:	f003 0201 	and.w	r2, r3, #1
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 0303 	and.w	r3, r3, #3
 8000fb2:	2b03      	cmp	r3, #3
 8000fb4:	d017      	beq.n	8000fe6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	689a      	ldr	r2, [r3, #8]
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 0303 	and.w	r3, r3, #3
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d123      	bne.n	800103a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	08da      	lsrs	r2, r3, #3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3208      	adds	r2, #8
 8000ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	220f      	movs	r2, #15
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	691a      	ldr	r2, [r3, #16]
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	f003 0307 	and.w	r3, r3, #7
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	08da      	lsrs	r2, r3, #3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3208      	adds	r2, #8
 8001034:	6939      	ldr	r1, [r7, #16]
 8001036:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	2203      	movs	r2, #3
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4013      	ands	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f003 0203 	and.w	r2, r3, #3
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001076:	2b00      	cmp	r3, #0
 8001078:	f000 80a0 	beq.w	80011bc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107c:	4b58      	ldr	r3, [pc, #352]	; (80011e0 <HAL_GPIO_Init+0x2d8>)
 800107e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001080:	4a57      	ldr	r2, [pc, #348]	; (80011e0 <HAL_GPIO_Init+0x2d8>)
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	6613      	str	r3, [r2, #96]	; 0x60
 8001088:	4b55      	ldr	r3, [pc, #340]	; (80011e0 <HAL_GPIO_Init+0x2d8>)
 800108a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001094:	4a53      	ldr	r2, [pc, #332]	; (80011e4 <HAL_GPIO_Init+0x2dc>)
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	089b      	lsrs	r3, r3, #2
 800109a:	3302      	adds	r3, #2
 800109c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	220f      	movs	r2, #15
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4013      	ands	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010be:	d019      	beq.n	80010f4 <HAL_GPIO_Init+0x1ec>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a49      	ldr	r2, [pc, #292]	; (80011e8 <HAL_GPIO_Init+0x2e0>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d013      	beq.n	80010f0 <HAL_GPIO_Init+0x1e8>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a48      	ldr	r2, [pc, #288]	; (80011ec <HAL_GPIO_Init+0x2e4>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d00d      	beq.n	80010ec <HAL_GPIO_Init+0x1e4>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a47      	ldr	r2, [pc, #284]	; (80011f0 <HAL_GPIO_Init+0x2e8>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d007      	beq.n	80010e8 <HAL_GPIO_Init+0x1e0>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a46      	ldr	r2, [pc, #280]	; (80011f4 <HAL_GPIO_Init+0x2ec>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d101      	bne.n	80010e4 <HAL_GPIO_Init+0x1dc>
 80010e0:	2304      	movs	r3, #4
 80010e2:	e008      	b.n	80010f6 <HAL_GPIO_Init+0x1ee>
 80010e4:	2307      	movs	r3, #7
 80010e6:	e006      	b.n	80010f6 <HAL_GPIO_Init+0x1ee>
 80010e8:	2303      	movs	r3, #3
 80010ea:	e004      	b.n	80010f6 <HAL_GPIO_Init+0x1ee>
 80010ec:	2302      	movs	r3, #2
 80010ee:	e002      	b.n	80010f6 <HAL_GPIO_Init+0x1ee>
 80010f0:	2301      	movs	r3, #1
 80010f2:	e000      	b.n	80010f6 <HAL_GPIO_Init+0x1ee>
 80010f4:	2300      	movs	r3, #0
 80010f6:	697a      	ldr	r2, [r7, #20]
 80010f8:	f002 0203 	and.w	r2, r2, #3
 80010fc:	0092      	lsls	r2, r2, #2
 80010fe:	4093      	lsls	r3, r2
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4313      	orrs	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001106:	4937      	ldr	r1, [pc, #220]	; (80011e4 <HAL_GPIO_Init+0x2dc>)
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	089b      	lsrs	r3, r3, #2
 800110c:	3302      	adds	r3, #2
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001114:	4b38      	ldr	r3, [pc, #224]	; (80011f8 <HAL_GPIO_Init+0x2f0>)
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	43db      	mvns	r3, r3
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d003      	beq.n	8001138 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001138:	4a2f      	ldr	r2, [pc, #188]	; (80011f8 <HAL_GPIO_Init+0x2f0>)
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800113e:	4b2e      	ldr	r3, [pc, #184]	; (80011f8 <HAL_GPIO_Init+0x2f0>)
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	43db      	mvns	r3, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4313      	orrs	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001162:	4a25      	ldr	r2, [pc, #148]	; (80011f8 <HAL_GPIO_Init+0x2f0>)
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001168:	4b23      	ldr	r3, [pc, #140]	; (80011f8 <HAL_GPIO_Init+0x2f0>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	43db      	mvns	r3, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4013      	ands	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4313      	orrs	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800118c:	4a1a      	ldr	r2, [pc, #104]	; (80011f8 <HAL_GPIO_Init+0x2f0>)
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001192:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <HAL_GPIO_Init+0x2f0>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	43db      	mvns	r3, r3
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4013      	ands	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011b6:	4a10      	ldr	r2, [pc, #64]	; (80011f8 <HAL_GPIO_Init+0x2f0>)
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	3301      	adds	r3, #1
 80011c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	fa22 f303 	lsr.w	r3, r2, r3
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	f47f aea3 	bne.w	8000f18 <HAL_GPIO_Init+0x10>
  }
}
 80011d2:	bf00      	nop
 80011d4:	bf00      	nop
 80011d6:	371c      	adds	r7, #28
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40010000 	.word	0x40010000
 80011e8:	48000400 	.word	0x48000400
 80011ec:	48000800 	.word	0x48000800
 80011f0:	48000c00 	.word	0x48000c00
 80011f4:	48001000 	.word	0x48001000
 80011f8:	40010400 	.word	0x40010400

080011fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001206:	4b08      	ldr	r3, [pc, #32]	; (8001228 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001208:	695a      	ldr	r2, [r3, #20]
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	4013      	ands	r3, r2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d006      	beq.n	8001220 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001212:	4a05      	ldr	r2, [pc, #20]	; (8001228 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001214:	88fb      	ldrh	r3, [r7, #6]
 8001216:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001218:	88fb      	ldrh	r3, [r7, #6]
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff f8e8 	bl	80003f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40010400 	.word	0x40010400

0800122c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d101      	bne.n	800123e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e081      	b.n	8001342 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d106      	bne.n	8001258 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff fbfc 	bl	8000a50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2224      	movs	r2, #36	; 0x24
 800125c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f022 0201 	bic.w	r2, r2, #1
 800126e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800127c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	689a      	ldr	r2, [r3, #8]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800128c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d107      	bne.n	80012a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	e006      	b.n	80012b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689a      	ldr	r2, [r3, #8]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80012b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d104      	bne.n	80012c6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	6812      	ldr	r2, [r2, #0]
 80012d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	68da      	ldr	r2, [r3, #12]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	691a      	ldr	r2, [r3, #16]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	430a      	orrs	r2, r1
 8001302:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	69d9      	ldr	r1, [r3, #28]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a1a      	ldr	r2, [r3, #32]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	430a      	orrs	r2, r1
 8001312:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f042 0201 	orr.w	r2, r2, #1
 8001322:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2220      	movs	r2, #32
 800132e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b088      	sub	sp, #32
 8001350:	af02      	add	r7, sp, #8
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	4608      	mov	r0, r1
 8001356:	4611      	mov	r1, r2
 8001358:	461a      	mov	r2, r3
 800135a:	4603      	mov	r3, r0
 800135c:	817b      	strh	r3, [r7, #10]
 800135e:	460b      	mov	r3, r1
 8001360:	813b      	strh	r3, [r7, #8]
 8001362:	4613      	mov	r3, r2
 8001364:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800136c:	b2db      	uxtb	r3, r3
 800136e:	2b20      	cmp	r3, #32
 8001370:	f040 80f9 	bne.w	8001566 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001374:	6a3b      	ldr	r3, [r7, #32]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d002      	beq.n	8001380 <HAL_I2C_Mem_Write+0x34>
 800137a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800137c:	2b00      	cmp	r3, #0
 800137e:	d105      	bne.n	800138c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001386:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e0ed      	b.n	8001568 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001392:	2b01      	cmp	r3, #1
 8001394:	d101      	bne.n	800139a <HAL_I2C_Mem_Write+0x4e>
 8001396:	2302      	movs	r3, #2
 8001398:	e0e6      	b.n	8001568 <HAL_I2C_Mem_Write+0x21c>
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2201      	movs	r2, #1
 800139e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80013a2:	f7ff fc83 	bl	8000cac <HAL_GetTick>
 80013a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2319      	movs	r3, #25
 80013ae:	2201      	movs	r2, #1
 80013b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013b4:	68f8      	ldr	r0, [r7, #12]
 80013b6:	f000 fac3 	bl	8001940 <I2C_WaitOnFlagUntilTimeout>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e0d1      	b.n	8001568 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2221      	movs	r2, #33	; 0x21
 80013c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2240      	movs	r2, #64	; 0x40
 80013d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2200      	movs	r2, #0
 80013d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	6a3a      	ldr	r2, [r7, #32]
 80013de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80013e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2200      	movs	r2, #0
 80013ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80013ec:	88f8      	ldrh	r0, [r7, #6]
 80013ee:	893a      	ldrh	r2, [r7, #8]
 80013f0:	8979      	ldrh	r1, [r7, #10]
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	9301      	str	r3, [sp, #4]
 80013f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	4603      	mov	r3, r0
 80013fc:	68f8      	ldr	r0, [r7, #12]
 80013fe:	f000 f9d3 	bl	80017a8 <I2C_RequestMemoryWrite>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d005      	beq.n	8001414 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2200      	movs	r2, #0
 800140c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e0a9      	b.n	8001568 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001418:	b29b      	uxth	r3, r3
 800141a:	2bff      	cmp	r3, #255	; 0xff
 800141c:	d90e      	bls.n	800143c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	22ff      	movs	r2, #255	; 0xff
 8001422:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001428:	b2da      	uxtb	r2, r3
 800142a:	8979      	ldrh	r1, [r7, #10]
 800142c:	2300      	movs	r3, #0
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	f000 fc2b 	bl	8001c90 <I2C_TransferConfig>
 800143a:	e00f      	b.n	800145c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001440:	b29a      	uxth	r2, r3
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800144a:	b2da      	uxtb	r2, r3
 800144c:	8979      	ldrh	r1, [r7, #10]
 800144e:	2300      	movs	r3, #0
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f000 fc1a 	bl	8001c90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800145c:	697a      	ldr	r2, [r7, #20]
 800145e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001460:	68f8      	ldr	r0, [r7, #12]
 8001462:	f000 faad 	bl	80019c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e07b      	b.n	8001568 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	781a      	ldrb	r2, [r3, #0]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001480:	1c5a      	adds	r2, r3, #1
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800148a:	b29b      	uxth	r3, r3
 800148c:	3b01      	subs	r3, #1
 800148e:	b29a      	uxth	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001498:	3b01      	subs	r3, #1
 800149a:	b29a      	uxth	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d034      	beq.n	8001514 <HAL_I2C_Mem_Write+0x1c8>
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d130      	bne.n	8001514 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b8:	2200      	movs	r2, #0
 80014ba:	2180      	movs	r1, #128	; 0x80
 80014bc:	68f8      	ldr	r0, [r7, #12]
 80014be:	f000 fa3f 	bl	8001940 <I2C_WaitOnFlagUntilTimeout>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e04d      	b.n	8001568 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	2bff      	cmp	r3, #255	; 0xff
 80014d4:	d90e      	bls.n	80014f4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	22ff      	movs	r2, #255	; 0xff
 80014da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	8979      	ldrh	r1, [r7, #10]
 80014e4:	2300      	movs	r3, #0
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	f000 fbcf 	bl	8001c90 <I2C_TransferConfig>
 80014f2:	e00f      	b.n	8001514 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001502:	b2da      	uxtb	r2, r3
 8001504:	8979      	ldrh	r1, [r7, #10]
 8001506:	2300      	movs	r3, #0
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	f000 fbbe 	bl	8001c90 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001518:	b29b      	uxth	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d19e      	bne.n	800145c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800151e:	697a      	ldr	r2, [r7, #20]
 8001520:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001522:	68f8      	ldr	r0, [r7, #12]
 8001524:	f000 fa8c 	bl	8001a40 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e01a      	b.n	8001568 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2220      	movs	r2, #32
 8001538:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	6859      	ldr	r1, [r3, #4]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <HAL_I2C_Mem_Write+0x224>)
 8001546:	400b      	ands	r3, r1
 8001548:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2220      	movs	r2, #32
 800154e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001562:	2300      	movs	r3, #0
 8001564:	e000      	b.n	8001568 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001566:	2302      	movs	r3, #2
  }
}
 8001568:	4618      	mov	r0, r3
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	fe00e800 	.word	0xfe00e800

08001574 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b088      	sub	sp, #32
 8001578:	af02      	add	r7, sp, #8
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	4608      	mov	r0, r1
 800157e:	4611      	mov	r1, r2
 8001580:	461a      	mov	r2, r3
 8001582:	4603      	mov	r3, r0
 8001584:	817b      	strh	r3, [r7, #10]
 8001586:	460b      	mov	r3, r1
 8001588:	813b      	strh	r3, [r7, #8]
 800158a:	4613      	mov	r3, r2
 800158c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b20      	cmp	r3, #32
 8001598:	f040 80fd 	bne.w	8001796 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800159c:	6a3b      	ldr	r3, [r7, #32]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d002      	beq.n	80015a8 <HAL_I2C_Mem_Read+0x34>
 80015a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d105      	bne.n	80015b4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e0f1      	b.n	8001798 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d101      	bne.n	80015c2 <HAL_I2C_Mem_Read+0x4e>
 80015be:	2302      	movs	r3, #2
 80015c0:	e0ea      	b.n	8001798 <HAL_I2C_Mem_Read+0x224>
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2201      	movs	r2, #1
 80015c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80015ca:	f7ff fb6f 	bl	8000cac <HAL_GetTick>
 80015ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	2319      	movs	r3, #25
 80015d6:	2201      	movs	r2, #1
 80015d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015dc:	68f8      	ldr	r0, [r7, #12]
 80015de:	f000 f9af 	bl	8001940 <I2C_WaitOnFlagUntilTimeout>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e0d5      	b.n	8001798 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2222      	movs	r2, #34	; 0x22
 80015f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2240      	movs	r2, #64	; 0x40
 80015f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2200      	movs	r2, #0
 8001600:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6a3a      	ldr	r2, [r7, #32]
 8001606:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800160c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2200      	movs	r2, #0
 8001612:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001614:	88f8      	ldrh	r0, [r7, #6]
 8001616:	893a      	ldrh	r2, [r7, #8]
 8001618:	8979      	ldrh	r1, [r7, #10]
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	4603      	mov	r3, r0
 8001624:	68f8      	ldr	r0, [r7, #12]
 8001626:	f000 f913 	bl	8001850 <I2C_RequestMemoryRead>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d005      	beq.n	800163c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e0ad      	b.n	8001798 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001640:	b29b      	uxth	r3, r3
 8001642:	2bff      	cmp	r3, #255	; 0xff
 8001644:	d90e      	bls.n	8001664 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	22ff      	movs	r2, #255	; 0xff
 800164a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001650:	b2da      	uxtb	r2, r3
 8001652:	8979      	ldrh	r1, [r7, #10]
 8001654:	4b52      	ldr	r3, [pc, #328]	; (80017a0 <HAL_I2C_Mem_Read+0x22c>)
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	f000 fb17 	bl	8001c90 <I2C_TransferConfig>
 8001662:	e00f      	b.n	8001684 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001668:	b29a      	uxth	r2, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001672:	b2da      	uxtb	r2, r3
 8001674:	8979      	ldrh	r1, [r7, #10]
 8001676:	4b4a      	ldr	r3, [pc, #296]	; (80017a0 <HAL_I2C_Mem_Read+0x22c>)
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800167e:	68f8      	ldr	r0, [r7, #12]
 8001680:	f000 fb06 	bl	8001c90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800168a:	2200      	movs	r2, #0
 800168c:	2104      	movs	r1, #4
 800168e:	68f8      	ldr	r0, [r7, #12]
 8001690:	f000 f956 	bl	8001940 <I2C_WaitOnFlagUntilTimeout>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e07c      	b.n	8001798 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a8:	b2d2      	uxtb	r2, r2
 80016aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b0:	1c5a      	adds	r2, r3, #1
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ba:	3b01      	subs	r3, #1
 80016bc:	b29a      	uxth	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	3b01      	subs	r3, #1
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d034      	beq.n	8001744 <HAL_I2C_Mem_Read+0x1d0>
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d130      	bne.n	8001744 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e8:	2200      	movs	r2, #0
 80016ea:	2180      	movs	r1, #128	; 0x80
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f000 f927 	bl	8001940 <I2C_WaitOnFlagUntilTimeout>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e04d      	b.n	8001798 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001700:	b29b      	uxth	r3, r3
 8001702:	2bff      	cmp	r3, #255	; 0xff
 8001704:	d90e      	bls.n	8001724 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	22ff      	movs	r2, #255	; 0xff
 800170a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001710:	b2da      	uxtb	r2, r3
 8001712:	8979      	ldrh	r1, [r7, #10]
 8001714:	2300      	movs	r3, #0
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800171c:	68f8      	ldr	r0, [r7, #12]
 800171e:	f000 fab7 	bl	8001c90 <I2C_TransferConfig>
 8001722:	e00f      	b.n	8001744 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001728:	b29a      	uxth	r2, r3
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001732:	b2da      	uxtb	r2, r3
 8001734:	8979      	ldrh	r1, [r7, #10]
 8001736:	2300      	movs	r3, #0
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	f000 faa6 	bl	8001c90 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001748:	b29b      	uxth	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d19a      	bne.n	8001684 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001752:	68f8      	ldr	r0, [r7, #12]
 8001754:	f000 f974 	bl	8001a40 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e01a      	b.n	8001798 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2220      	movs	r2, #32
 8001768:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6859      	ldr	r1, [r3, #4]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <HAL_I2C_Mem_Read+0x230>)
 8001776:	400b      	ands	r3, r1
 8001778:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2220      	movs	r2, #32
 800177e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001792:	2300      	movs	r3, #0
 8001794:	e000      	b.n	8001798 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001796:	2302      	movs	r3, #2
  }
}
 8001798:	4618      	mov	r0, r3
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	80002400 	.word	0x80002400
 80017a4:	fe00e800 	.word	0xfe00e800

080017a8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af02      	add	r7, sp, #8
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	4608      	mov	r0, r1
 80017b2:	4611      	mov	r1, r2
 80017b4:	461a      	mov	r2, r3
 80017b6:	4603      	mov	r3, r0
 80017b8:	817b      	strh	r3, [r7, #10]
 80017ba:	460b      	mov	r3, r1
 80017bc:	813b      	strh	r3, [r7, #8]
 80017be:	4613      	mov	r3, r2
 80017c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80017c2:	88fb      	ldrh	r3, [r7, #6]
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	8979      	ldrh	r1, [r7, #10]
 80017c8:	4b20      	ldr	r3, [pc, #128]	; (800184c <I2C_RequestMemoryWrite+0xa4>)
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017d0:	68f8      	ldr	r0, [r7, #12]
 80017d2:	f000 fa5d 	bl	8001c90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80017d6:	69fa      	ldr	r2, [r7, #28]
 80017d8:	69b9      	ldr	r1, [r7, #24]
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f000 f8f0 	bl	80019c0 <I2C_WaitOnTXISFlagUntilTimeout>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e02c      	b.n	8001844 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d105      	bne.n	80017fc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80017f0:	893b      	ldrh	r3, [r7, #8]
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	629a      	str	r2, [r3, #40]	; 0x28
 80017fa:	e015      	b.n	8001828 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80017fc:	893b      	ldrh	r3, [r7, #8]
 80017fe:	0a1b      	lsrs	r3, r3, #8
 8001800:	b29b      	uxth	r3, r3
 8001802:	b2da      	uxtb	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800180a:	69fa      	ldr	r2, [r7, #28]
 800180c:	69b9      	ldr	r1, [r7, #24]
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	f000 f8d6 	bl	80019c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e012      	b.n	8001844 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800181e:	893b      	ldrh	r3, [r7, #8]
 8001820:	b2da      	uxtb	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	2200      	movs	r2, #0
 8001830:	2180      	movs	r1, #128	; 0x80
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	f000 f884 	bl	8001940 <I2C_WaitOnFlagUntilTimeout>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e000      	b.n	8001844 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	80002000 	.word	0x80002000

08001850 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af02      	add	r7, sp, #8
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	4608      	mov	r0, r1
 800185a:	4611      	mov	r1, r2
 800185c:	461a      	mov	r2, r3
 800185e:	4603      	mov	r3, r0
 8001860:	817b      	strh	r3, [r7, #10]
 8001862:	460b      	mov	r3, r1
 8001864:	813b      	strh	r3, [r7, #8]
 8001866:	4613      	mov	r3, r2
 8001868:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800186a:	88fb      	ldrh	r3, [r7, #6]
 800186c:	b2da      	uxtb	r2, r3
 800186e:	8979      	ldrh	r1, [r7, #10]
 8001870:	4b20      	ldr	r3, [pc, #128]	; (80018f4 <I2C_RequestMemoryRead+0xa4>)
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	2300      	movs	r3, #0
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	f000 fa0a 	bl	8001c90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800187c:	69fa      	ldr	r2, [r7, #28]
 800187e:	69b9      	ldr	r1, [r7, #24]
 8001880:	68f8      	ldr	r0, [r7, #12]
 8001882:	f000 f89d 	bl	80019c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e02c      	b.n	80018ea <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001890:	88fb      	ldrh	r3, [r7, #6]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d105      	bne.n	80018a2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001896:	893b      	ldrh	r3, [r7, #8]
 8001898:	b2da      	uxtb	r2, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	629a      	str	r2, [r3, #40]	; 0x28
 80018a0:	e015      	b.n	80018ce <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80018a2:	893b      	ldrh	r3, [r7, #8]
 80018a4:	0a1b      	lsrs	r3, r3, #8
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018b0:	69fa      	ldr	r2, [r7, #28]
 80018b2:	69b9      	ldr	r1, [r7, #24]
 80018b4:	68f8      	ldr	r0, [r7, #12]
 80018b6:	f000 f883 	bl	80019c0 <I2C_WaitOnTXISFlagUntilTimeout>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e012      	b.n	80018ea <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80018c4:	893b      	ldrh	r3, [r7, #8]
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	2200      	movs	r2, #0
 80018d6:	2140      	movs	r1, #64	; 0x40
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f000 f831 	bl	8001940 <I2C_WaitOnFlagUntilTimeout>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e000      	b.n	80018ea <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	80002000 	.word	0x80002000

080018f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b02      	cmp	r3, #2
 800190c:	d103      	bne.n	8001916 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2200      	movs	r2, #0
 8001914:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	2b01      	cmp	r3, #1
 8001922:	d007      	beq.n	8001934 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	699a      	ldr	r2, [r3, #24]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f042 0201 	orr.w	r2, r2, #1
 8001932:	619a      	str	r2, [r3, #24]
  }
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	603b      	str	r3, [r7, #0]
 800194c:	4613      	mov	r3, r2
 800194e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001950:	e022      	b.n	8001998 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001958:	d01e      	beq.n	8001998 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800195a:	f7ff f9a7 	bl	8000cac <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	429a      	cmp	r2, r3
 8001968:	d302      	bcc.n	8001970 <I2C_WaitOnFlagUntilTimeout+0x30>
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d113      	bne.n	8001998 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001974:	f043 0220 	orr.w	r2, r3, #32
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2220      	movs	r2, #32
 8001980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e00f      	b.n	80019b8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	699a      	ldr	r2, [r3, #24]
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	4013      	ands	r3, r2
 80019a2:	68ba      	ldr	r2, [r7, #8]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	bf0c      	ite	eq
 80019a8:	2301      	moveq	r3, #1
 80019aa:	2300      	movne	r3, #0
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	461a      	mov	r2, r3
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d0cd      	beq.n	8001952 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019cc:	e02c      	b.n	8001a28 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	68b9      	ldr	r1, [r7, #8]
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f000 f870 	bl	8001ab8 <I2C_IsErrorOccurred>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e02a      	b.n	8001a38 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e8:	d01e      	beq.n	8001a28 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019ea:	f7ff f95f 	bl	8000cac <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	68ba      	ldr	r2, [r7, #8]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d302      	bcc.n	8001a00 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d113      	bne.n	8001a28 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a04:	f043 0220 	orr.w	r2, r3, #32
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2220      	movs	r2, #32
 8001a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e007      	b.n	8001a38 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d1cb      	bne.n	80019ce <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a4c:	e028      	b.n	8001aa0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	68b9      	ldr	r1, [r7, #8]
 8001a52:	68f8      	ldr	r0, [r7, #12]
 8001a54:	f000 f830 	bl	8001ab8 <I2C_IsErrorOccurred>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e026      	b.n	8001ab0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a62:	f7ff f923 	bl	8000cac <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	68ba      	ldr	r2, [r7, #8]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d302      	bcc.n	8001a78 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d113      	bne.n	8001aa0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7c:	f043 0220 	orr.w	r2, r3, #32
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2220      	movs	r2, #32
 8001a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e007      	b.n	8001ab0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	f003 0320 	and.w	r3, r3, #32
 8001aaa:	2b20      	cmp	r3, #32
 8001aac:	d1cf      	bne.n	8001a4e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	; 0x28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	f003 0310 	and.w	r3, r3, #16
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d075      	beq.n	8001bd0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2210      	movs	r2, #16
 8001aea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001aec:	e056      	b.n	8001b9c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af4:	d052      	beq.n	8001b9c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001af6:	f7ff f8d9 	bl	8000cac <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	68ba      	ldr	r2, [r7, #8]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d302      	bcc.n	8001b0c <I2C_IsErrorOccurred+0x54>
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d147      	bne.n	8001b9c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b16:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b1e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b2e:	d12e      	bne.n	8001b8e <I2C_IsErrorOccurred+0xd6>
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b36:	d02a      	beq.n	8001b8e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001b38:	7cfb      	ldrb	r3, [r7, #19]
 8001b3a:	2b20      	cmp	r3, #32
 8001b3c:	d027      	beq.n	8001b8e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b4c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001b4e:	f7ff f8ad 	bl	8000cac <HAL_GetTick>
 8001b52:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b54:	e01b      	b.n	8001b8e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001b56:	f7ff f8a9 	bl	8000cac <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b19      	cmp	r3, #25
 8001b62:	d914      	bls.n	8001b8e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b68:	f043 0220 	orr.w	r2, r3, #32
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2220      	movs	r2, #32
 8001b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	f003 0320 	and.w	r3, r3, #32
 8001b98:	2b20      	cmp	r3, #32
 8001b9a:	d1dc      	bne.n	8001b56 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	f003 0320 	and.w	r3, r3, #32
 8001ba6:	2b20      	cmp	r3, #32
 8001ba8:	d003      	beq.n	8001bb2 <I2C_IsErrorOccurred+0xfa>
 8001baa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d09d      	beq.n	8001aee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001bb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d103      	bne.n	8001bc2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2220      	movs	r2, #32
 8001bc0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001bc2:	6a3b      	ldr	r3, [r7, #32]
 8001bc4:	f043 0304 	orr.w	r3, r3, #4
 8001bc8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00b      	beq.n	8001bfa <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001be2:	6a3b      	ldr	r3, [r7, #32]
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bf2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d00b      	beq.n	8001c1c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001c04:	6a3b      	ldr	r3, [r7, #32]
 8001c06:	f043 0308 	orr.w	r3, r3, #8
 8001c0a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00b      	beq.n	8001c3e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001c26:	6a3b      	ldr	r3, [r7, #32]
 8001c28:	f043 0302 	orr.w	r3, r3, #2
 8001c2c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c36:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001c3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d01c      	beq.n	8001c80 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f7ff fe56 	bl	80018f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6859      	ldr	r1, [r3, #4]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <I2C_IsErrorOccurred+0x1d4>)
 8001c58:	400b      	ands	r3, r1
 8001c5a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c60:	6a3b      	ldr	r3, [r7, #32]
 8001c62:	431a      	orrs	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2220      	movs	r2, #32
 8001c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001c80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3728      	adds	r7, #40	; 0x28
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	fe00e800 	.word	0xfe00e800

08001c90 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b087      	sub	sp, #28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	607b      	str	r3, [r7, #4]
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	817b      	strh	r3, [r7, #10]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ca2:	897b      	ldrh	r3, [r7, #10]
 8001ca4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001ca8:	7a7b      	ldrb	r3, [r7, #9]
 8001caa:	041b      	lsls	r3, r3, #16
 8001cac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001cb0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001cb6:	6a3b      	ldr	r3, [r7, #32]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001cbe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
 8001cc8:	0d5b      	lsrs	r3, r3, #21
 8001cca:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001cce:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <I2C_TransferConfig+0x60>)
 8001cd0:	430b      	orrs	r3, r1
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	ea02 0103 	and.w	r1, r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001ce2:	bf00      	nop
 8001ce4:	371c      	adds	r7, #28
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	03ff63ff 	.word	0x03ff63ff

08001cf4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b20      	cmp	r3, #32
 8001d08:	d138      	bne.n	8001d7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d101      	bne.n	8001d18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d14:	2302      	movs	r3, #2
 8001d16:	e032      	b.n	8001d7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2224      	movs	r2, #36	; 0x24
 8001d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 0201 	bic.w	r2, r2, #1
 8001d36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6819      	ldr	r1, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f042 0201 	orr.w	r2, r2, #1
 8001d66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2220      	movs	r2, #32
 8001d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	e000      	b.n	8001d7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d7c:	2302      	movs	r3, #2
  }
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b085      	sub	sp, #20
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
 8001d92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2b20      	cmp	r3, #32
 8001d9e:	d139      	bne.n	8001e14 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d101      	bne.n	8001dae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001daa:	2302      	movs	r3, #2
 8001dac:	e033      	b.n	8001e16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2224      	movs	r2, #36	; 0x24
 8001dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0201 	bic.w	r2, r2, #1
 8001dcc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ddc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	021b      	lsls	r3, r3, #8
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f042 0201 	orr.w	r2, r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2220      	movs	r2, #32
 8001e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e10:	2300      	movs	r3, #0
 8001e12:	e000      	b.n	8001e16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e14:	2302      	movs	r3, #2
  }
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
	...

08001e24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e28:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <HAL_PWREx_GetVoltageRange+0x18>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40007000 	.word	0x40007000

08001e40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e4e:	d130      	bne.n	8001eb2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e50:	4b23      	ldr	r3, [pc, #140]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e5c:	d038      	beq.n	8001ed0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e5e:	4b20      	ldr	r3, [pc, #128]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e66:	4a1e      	ldr	r2, [pc, #120]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e6c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2232      	movs	r2, #50	; 0x32
 8001e74:	fb02 f303 	mul.w	r3, r2, r3
 8001e78:	4a1b      	ldr	r2, [pc, #108]	; (8001ee8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7e:	0c9b      	lsrs	r3, r3, #18
 8001e80:	3301      	adds	r3, #1
 8001e82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e84:	e002      	b.n	8001e8c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e8c:	4b14      	ldr	r3, [pc, #80]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e98:	d102      	bne.n	8001ea0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1f2      	bne.n	8001e86 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ea0:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eac:	d110      	bne.n	8001ed0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e00f      	b.n	8001ed2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ebe:	d007      	beq.n	8001ed0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ec0:	4b07      	ldr	r3, [pc, #28]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ec8:	4a05      	ldr	r2, [pc, #20]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ece:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40007000 	.word	0x40007000
 8001ee4:	20000000 	.word	0x20000000
 8001ee8:	431bde83 	.word	0x431bde83

08001eec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d102      	bne.n	8001f00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	f000 bc02 	b.w	8002704 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f00:	4b96      	ldr	r3, [pc, #600]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 030c 	and.w	r3, r3, #12
 8001f08:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f0a:	4b94      	ldr	r3, [pc, #592]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0310 	and.w	r3, r3, #16
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 80e4 	beq.w	80020ea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d007      	beq.n	8001f38 <HAL_RCC_OscConfig+0x4c>
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	2b0c      	cmp	r3, #12
 8001f2c:	f040 808b 	bne.w	8002046 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	f040 8087 	bne.w	8002046 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f38:	4b88      	ldr	r3, [pc, #544]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d005      	beq.n	8001f50 <HAL_RCC_OscConfig+0x64>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e3d9      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a1a      	ldr	r2, [r3, #32]
 8001f54:	4b81      	ldr	r3, [pc, #516]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0308 	and.w	r3, r3, #8
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d004      	beq.n	8001f6a <HAL_RCC_OscConfig+0x7e>
 8001f60:	4b7e      	ldr	r3, [pc, #504]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f68:	e005      	b.n	8001f76 <HAL_RCC_OscConfig+0x8a>
 8001f6a:	4b7c      	ldr	r3, [pc, #496]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8001f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f70:	091b      	lsrs	r3, r3, #4
 8001f72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d223      	bcs.n	8001fc2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 fd54 	bl	8002a2c <RCC_SetFlashLatencyFromMSIRange>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e3ba      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f8e:	4b73      	ldr	r3, [pc, #460]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a72      	ldr	r2, [pc, #456]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8001f94:	f043 0308 	orr.w	r3, r3, #8
 8001f98:	6013      	str	r3, [r2, #0]
 8001f9a:	4b70      	ldr	r3, [pc, #448]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	496d      	ldr	r1, [pc, #436]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fac:	4b6b      	ldr	r3, [pc, #428]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	021b      	lsls	r3, r3, #8
 8001fba:	4968      	ldr	r1, [pc, #416]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	604b      	str	r3, [r1, #4]
 8001fc0:	e025      	b.n	800200e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fc2:	4b66      	ldr	r3, [pc, #408]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a65      	ldr	r2, [pc, #404]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8001fc8:	f043 0308 	orr.w	r3, r3, #8
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	4b63      	ldr	r3, [pc, #396]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	4960      	ldr	r1, [pc, #384]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fe0:	4b5e      	ldr	r3, [pc, #376]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	021b      	lsls	r3, r3, #8
 8001fee:	495b      	ldr	r1, [pc, #364]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d109      	bne.n	800200e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 fd14 	bl	8002a2c <RCC_SetFlashLatencyFromMSIRange>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e37a      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800200e:	f000 fc81 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 8002012:	4602      	mov	r2, r0
 8002014:	4b51      	ldr	r3, [pc, #324]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	091b      	lsrs	r3, r3, #4
 800201a:	f003 030f 	and.w	r3, r3, #15
 800201e:	4950      	ldr	r1, [pc, #320]	; (8002160 <HAL_RCC_OscConfig+0x274>)
 8002020:	5ccb      	ldrb	r3, [r1, r3]
 8002022:	f003 031f 	and.w	r3, r3, #31
 8002026:	fa22 f303 	lsr.w	r3, r2, r3
 800202a:	4a4e      	ldr	r2, [pc, #312]	; (8002164 <HAL_RCC_OscConfig+0x278>)
 800202c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800202e:	4b4e      	ldr	r3, [pc, #312]	; (8002168 <HAL_RCC_OscConfig+0x27c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f7fe fdea 	bl	8000c0c <HAL_InitTick>
 8002038:	4603      	mov	r3, r0
 800203a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800203c:	7bfb      	ldrb	r3, [r7, #15]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d052      	beq.n	80020e8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002042:	7bfb      	ldrb	r3, [r7, #15]
 8002044:	e35e      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d032      	beq.n	80020b4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800204e:	4b43      	ldr	r3, [pc, #268]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a42      	ldr	r2, [pc, #264]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800205a:	f7fe fe27 	bl	8000cac <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002060:	e008      	b.n	8002074 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002062:	f7fe fe23 	bl	8000cac <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e347      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002074:	4b39      	ldr	r3, [pc, #228]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0f0      	beq.n	8002062 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002080:	4b36      	ldr	r3, [pc, #216]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a35      	ldr	r2, [pc, #212]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8002086:	f043 0308 	orr.w	r3, r3, #8
 800208a:	6013      	str	r3, [r2, #0]
 800208c:	4b33      	ldr	r3, [pc, #204]	; (800215c <HAL_RCC_OscConfig+0x270>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	4930      	ldr	r1, [pc, #192]	; (800215c <HAL_RCC_OscConfig+0x270>)
 800209a:	4313      	orrs	r3, r2
 800209c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800209e:	4b2f      	ldr	r3, [pc, #188]	; (800215c <HAL_RCC_OscConfig+0x270>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	021b      	lsls	r3, r3, #8
 80020ac:	492b      	ldr	r1, [pc, #172]	; (800215c <HAL_RCC_OscConfig+0x270>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	604b      	str	r3, [r1, #4]
 80020b2:	e01a      	b.n	80020ea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020b4:	4b29      	ldr	r3, [pc, #164]	; (800215c <HAL_RCC_OscConfig+0x270>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a28      	ldr	r2, [pc, #160]	; (800215c <HAL_RCC_OscConfig+0x270>)
 80020ba:	f023 0301 	bic.w	r3, r3, #1
 80020be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020c0:	f7fe fdf4 	bl	8000cac <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020c8:	f7fe fdf0 	bl	8000cac <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e314      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020da:	4b20      	ldr	r3, [pc, #128]	; (800215c <HAL_RCC_OscConfig+0x270>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f0      	bne.n	80020c8 <HAL_RCC_OscConfig+0x1dc>
 80020e6:	e000      	b.n	80020ea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d073      	beq.n	80021de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	2b08      	cmp	r3, #8
 80020fa:	d005      	beq.n	8002108 <HAL_RCC_OscConfig+0x21c>
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	2b0c      	cmp	r3, #12
 8002100:	d10e      	bne.n	8002120 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	2b03      	cmp	r3, #3
 8002106:	d10b      	bne.n	8002120 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002108:	4b14      	ldr	r3, [pc, #80]	; (800215c <HAL_RCC_OscConfig+0x270>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d063      	beq.n	80021dc <HAL_RCC_OscConfig+0x2f0>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d15f      	bne.n	80021dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e2f1      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002128:	d106      	bne.n	8002138 <HAL_RCC_OscConfig+0x24c>
 800212a:	4b0c      	ldr	r3, [pc, #48]	; (800215c <HAL_RCC_OscConfig+0x270>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a0b      	ldr	r2, [pc, #44]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8002130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	e025      	b.n	8002184 <HAL_RCC_OscConfig+0x298>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002140:	d114      	bne.n	800216c <HAL_RCC_OscConfig+0x280>
 8002142:	4b06      	ldr	r3, [pc, #24]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a05      	ldr	r2, [pc, #20]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8002148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	4b03      	ldr	r3, [pc, #12]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a02      	ldr	r2, [pc, #8]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8002154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	e013      	b.n	8002184 <HAL_RCC_OscConfig+0x298>
 800215c:	40021000 	.word	0x40021000
 8002160:	08003170 	.word	0x08003170
 8002164:	20000000 	.word	0x20000000
 8002168:	20000004 	.word	0x20000004
 800216c:	4ba0      	ldr	r3, [pc, #640]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a9f      	ldr	r2, [pc, #636]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002176:	6013      	str	r3, [r2, #0]
 8002178:	4b9d      	ldr	r3, [pc, #628]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a9c      	ldr	r2, [pc, #624]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 800217e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002182:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d013      	beq.n	80021b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218c:	f7fe fd8e 	bl	8000cac <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002194:	f7fe fd8a 	bl	8000cac <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b64      	cmp	r3, #100	; 0x64
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e2ae      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021a6:	4b92      	ldr	r3, [pc, #584]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f0      	beq.n	8002194 <HAL_RCC_OscConfig+0x2a8>
 80021b2:	e014      	b.n	80021de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b4:	f7fe fd7a 	bl	8000cac <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021bc:	f7fe fd76 	bl	8000cac <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b64      	cmp	r3, #100	; 0x64
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e29a      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ce:	4b88      	ldr	r3, [pc, #544]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f0      	bne.n	80021bc <HAL_RCC_OscConfig+0x2d0>
 80021da:	e000      	b.n	80021de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d060      	beq.n	80022ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	2b04      	cmp	r3, #4
 80021ee:	d005      	beq.n	80021fc <HAL_RCC_OscConfig+0x310>
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	2b0c      	cmp	r3, #12
 80021f4:	d119      	bne.n	800222a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d116      	bne.n	800222a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021fc:	4b7c      	ldr	r3, [pc, #496]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002204:	2b00      	cmp	r3, #0
 8002206:	d005      	beq.n	8002214 <HAL_RCC_OscConfig+0x328>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e277      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002214:	4b76      	ldr	r3, [pc, #472]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	061b      	lsls	r3, r3, #24
 8002222:	4973      	ldr	r1, [pc, #460]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002224:	4313      	orrs	r3, r2
 8002226:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002228:	e040      	b.n	80022ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d023      	beq.n	800227a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002232:	4b6f      	ldr	r3, [pc, #444]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a6e      	ldr	r2, [pc, #440]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800223c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223e:	f7fe fd35 	bl	8000cac <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002246:	f7fe fd31 	bl	8000cac <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e255      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002258:	4b65      	ldr	r3, [pc, #404]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0f0      	beq.n	8002246 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002264:	4b62      	ldr	r3, [pc, #392]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	061b      	lsls	r3, r3, #24
 8002272:	495f      	ldr	r1, [pc, #380]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002274:	4313      	orrs	r3, r2
 8002276:	604b      	str	r3, [r1, #4]
 8002278:	e018      	b.n	80022ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800227a:	4b5d      	ldr	r3, [pc, #372]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a5c      	ldr	r2, [pc, #368]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002280:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002284:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002286:	f7fe fd11 	bl	8000cac <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800228e:	f7fe fd0d 	bl	8000cac <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e231      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022a0:	4b53      	ldr	r3, [pc, #332]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1f0      	bne.n	800228e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0308 	and.w	r3, r3, #8
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d03c      	beq.n	8002332 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d01c      	beq.n	80022fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022c0:	4b4b      	ldr	r3, [pc, #300]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 80022c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022c6:	4a4a      	ldr	r2, [pc, #296]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d0:	f7fe fcec 	bl	8000cac <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022d8:	f7fe fce8 	bl	8000cac <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e20c      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022ea:	4b41      	ldr	r3, [pc, #260]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 80022ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0ef      	beq.n	80022d8 <HAL_RCC_OscConfig+0x3ec>
 80022f8:	e01b      	b.n	8002332 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022fa:	4b3d      	ldr	r3, [pc, #244]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 80022fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002300:	4a3b      	ldr	r2, [pc, #236]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002302:	f023 0301 	bic.w	r3, r3, #1
 8002306:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800230a:	f7fe fccf 	bl	8000cac <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002312:	f7fe fccb 	bl	8000cac <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e1ef      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002324:	4b32      	ldr	r3, [pc, #200]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002326:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1ef      	bne.n	8002312 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0304 	and.w	r3, r3, #4
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 80a6 	beq.w	800248c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002340:	2300      	movs	r3, #0
 8002342:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002344:	4b2a      	ldr	r3, [pc, #168]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10d      	bne.n	800236c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002350:	4b27      	ldr	r3, [pc, #156]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002354:	4a26      	ldr	r2, [pc, #152]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800235a:	6593      	str	r3, [r2, #88]	; 0x58
 800235c:	4b24      	ldr	r3, [pc, #144]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 800235e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002364:	60bb      	str	r3, [r7, #8]
 8002366:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002368:	2301      	movs	r3, #1
 800236a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800236c:	4b21      	ldr	r3, [pc, #132]	; (80023f4 <HAL_RCC_OscConfig+0x508>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002374:	2b00      	cmp	r3, #0
 8002376:	d118      	bne.n	80023aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002378:	4b1e      	ldr	r3, [pc, #120]	; (80023f4 <HAL_RCC_OscConfig+0x508>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a1d      	ldr	r2, [pc, #116]	; (80023f4 <HAL_RCC_OscConfig+0x508>)
 800237e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002382:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002384:	f7fe fc92 	bl	8000cac <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800238c:	f7fe fc8e 	bl	8000cac <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e1b2      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800239e:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <HAL_RCC_OscConfig+0x508>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0f0      	beq.n	800238c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d108      	bne.n	80023c4 <HAL_RCC_OscConfig+0x4d8>
 80023b2:	4b0f      	ldr	r3, [pc, #60]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 80023b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b8:	4a0d      	ldr	r2, [pc, #52]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 80023ba:	f043 0301 	orr.w	r3, r3, #1
 80023be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023c2:	e029      	b.n	8002418 <HAL_RCC_OscConfig+0x52c>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	2b05      	cmp	r3, #5
 80023ca:	d115      	bne.n	80023f8 <HAL_RCC_OscConfig+0x50c>
 80023cc:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 80023ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d2:	4a07      	ldr	r2, [pc, #28]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 80023d4:	f043 0304 	orr.w	r3, r3, #4
 80023d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023dc:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 80023de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e2:	4a03      	ldr	r2, [pc, #12]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023ec:	e014      	b.n	8002418 <HAL_RCC_OscConfig+0x52c>
 80023ee:	bf00      	nop
 80023f0:	40021000 	.word	0x40021000
 80023f4:	40007000 	.word	0x40007000
 80023f8:	4b9a      	ldr	r3, [pc, #616]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 80023fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023fe:	4a99      	ldr	r2, [pc, #612]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 8002400:	f023 0301 	bic.w	r3, r3, #1
 8002404:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002408:	4b96      	ldr	r3, [pc, #600]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 800240a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240e:	4a95      	ldr	r2, [pc, #596]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 8002410:	f023 0304 	bic.w	r3, r3, #4
 8002414:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d016      	beq.n	800244e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002420:	f7fe fc44 	bl	8000cac <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002426:	e00a      	b.n	800243e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002428:	f7fe fc40 	bl	8000cac <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	f241 3288 	movw	r2, #5000	; 0x1388
 8002436:	4293      	cmp	r3, r2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e162      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800243e:	4b89      	ldr	r3, [pc, #548]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 8002440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0ed      	beq.n	8002428 <HAL_RCC_OscConfig+0x53c>
 800244c:	e015      	b.n	800247a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244e:	f7fe fc2d 	bl	8000cac <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002454:	e00a      	b.n	800246c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002456:	f7fe fc29 	bl	8000cac <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	f241 3288 	movw	r2, #5000	; 0x1388
 8002464:	4293      	cmp	r3, r2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e14b      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800246c:	4b7d      	ldr	r3, [pc, #500]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 800246e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1ed      	bne.n	8002456 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800247a:	7ffb      	ldrb	r3, [r7, #31]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d105      	bne.n	800248c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002480:	4b78      	ldr	r3, [pc, #480]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 8002482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002484:	4a77      	ldr	r2, [pc, #476]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 8002486:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800248a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0320 	and.w	r3, r3, #32
 8002494:	2b00      	cmp	r3, #0
 8002496:	d03c      	beq.n	8002512 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249c:	2b00      	cmp	r3, #0
 800249e:	d01c      	beq.n	80024da <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024a0:	4b70      	ldr	r3, [pc, #448]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 80024a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024a6:	4a6f      	ldr	r2, [pc, #444]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b0:	f7fe fbfc 	bl	8000cac <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024b8:	f7fe fbf8 	bl	8000cac <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e11c      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024ca:	4b66      	ldr	r3, [pc, #408]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 80024cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0ef      	beq.n	80024b8 <HAL_RCC_OscConfig+0x5cc>
 80024d8:	e01b      	b.n	8002512 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024da:	4b62      	ldr	r3, [pc, #392]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 80024dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024e0:	4a60      	ldr	r2, [pc, #384]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 80024e2:	f023 0301 	bic.w	r3, r3, #1
 80024e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ea:	f7fe fbdf 	bl	8000cac <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024f2:	f7fe fbdb 	bl	8000cac <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e0ff      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002504:	4b57      	ldr	r3, [pc, #348]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 8002506:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1ef      	bne.n	80024f2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 80f3 	beq.w	8002702 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002520:	2b02      	cmp	r3, #2
 8002522:	f040 80c9 	bne.w	80026b8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002526:	4b4f      	ldr	r3, [pc, #316]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	f003 0203 	and.w	r2, r3, #3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002536:	429a      	cmp	r2, r3
 8002538:	d12c      	bne.n	8002594 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002544:	3b01      	subs	r3, #1
 8002546:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002548:	429a      	cmp	r2, r3
 800254a:	d123      	bne.n	8002594 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002556:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002558:	429a      	cmp	r2, r3
 800255a:	d11b      	bne.n	8002594 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002566:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002568:	429a      	cmp	r2, r3
 800256a:	d113      	bne.n	8002594 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002576:	085b      	lsrs	r3, r3, #1
 8002578:	3b01      	subs	r3, #1
 800257a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800257c:	429a      	cmp	r2, r3
 800257e:	d109      	bne.n	8002594 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	085b      	lsrs	r3, r3, #1
 800258c:	3b01      	subs	r3, #1
 800258e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002590:	429a      	cmp	r2, r3
 8002592:	d06b      	beq.n	800266c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	2b0c      	cmp	r3, #12
 8002598:	d062      	beq.n	8002660 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800259a:	4b32      	ldr	r3, [pc, #200]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e0ac      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80025aa:	4b2e      	ldr	r3, [pc, #184]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a2d      	ldr	r2, [pc, #180]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 80025b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025b4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025b6:	f7fe fb79 	bl	8000cac <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025be:	f7fe fb75 	bl	8000cac <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e099      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025d0:	4b24      	ldr	r3, [pc, #144]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1f0      	bne.n	80025be <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025dc:	4b21      	ldr	r3, [pc, #132]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 80025de:	68da      	ldr	r2, [r3, #12]
 80025e0:	4b21      	ldr	r3, [pc, #132]	; (8002668 <HAL_RCC_OscConfig+0x77c>)
 80025e2:	4013      	ands	r3, r2
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80025ec:	3a01      	subs	r2, #1
 80025ee:	0112      	lsls	r2, r2, #4
 80025f0:	4311      	orrs	r1, r2
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025f6:	0212      	lsls	r2, r2, #8
 80025f8:	4311      	orrs	r1, r2
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80025fe:	0852      	lsrs	r2, r2, #1
 8002600:	3a01      	subs	r2, #1
 8002602:	0552      	lsls	r2, r2, #21
 8002604:	4311      	orrs	r1, r2
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800260a:	0852      	lsrs	r2, r2, #1
 800260c:	3a01      	subs	r2, #1
 800260e:	0652      	lsls	r2, r2, #25
 8002610:	4311      	orrs	r1, r2
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002616:	06d2      	lsls	r2, r2, #27
 8002618:	430a      	orrs	r2, r1
 800261a:	4912      	ldr	r1, [pc, #72]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 800261c:	4313      	orrs	r3, r2
 800261e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002620:	4b10      	ldr	r3, [pc, #64]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a0f      	ldr	r2, [pc, #60]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 8002626:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800262a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800262c:	4b0d      	ldr	r3, [pc, #52]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	4a0c      	ldr	r2, [pc, #48]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 8002632:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002636:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002638:	f7fe fb38 	bl	8000cac <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002640:	f7fe fb34 	bl	8000cac <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e058      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002652:	4b04      	ldr	r3, [pc, #16]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0f0      	beq.n	8002640 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800265e:	e050      	b.n	8002702 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e04f      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
 8002664:	40021000 	.word	0x40021000
 8002668:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800266c:	4b27      	ldr	r3, [pc, #156]	; (800270c <HAL_RCC_OscConfig+0x820>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d144      	bne.n	8002702 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002678:	4b24      	ldr	r3, [pc, #144]	; (800270c <HAL_RCC_OscConfig+0x820>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a23      	ldr	r2, [pc, #140]	; (800270c <HAL_RCC_OscConfig+0x820>)
 800267e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002682:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002684:	4b21      	ldr	r3, [pc, #132]	; (800270c <HAL_RCC_OscConfig+0x820>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	4a20      	ldr	r2, [pc, #128]	; (800270c <HAL_RCC_OscConfig+0x820>)
 800268a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800268e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002690:	f7fe fb0c 	bl	8000cac <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002698:	f7fe fb08 	bl	8000cac <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e02c      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026aa:	4b18      	ldr	r3, [pc, #96]	; (800270c <HAL_RCC_OscConfig+0x820>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0x7ac>
 80026b6:	e024      	b.n	8002702 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	2b0c      	cmp	r3, #12
 80026bc:	d01f      	beq.n	80026fe <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026be:	4b13      	ldr	r3, [pc, #76]	; (800270c <HAL_RCC_OscConfig+0x820>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a12      	ldr	r2, [pc, #72]	; (800270c <HAL_RCC_OscConfig+0x820>)
 80026c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ca:	f7fe faef 	bl	8000cac <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d2:	f7fe faeb 	bl	8000cac <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e00f      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026e4:	4b09      	ldr	r3, [pc, #36]	; (800270c <HAL_RCC_OscConfig+0x820>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1f0      	bne.n	80026d2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80026f0:	4b06      	ldr	r3, [pc, #24]	; (800270c <HAL_RCC_OscConfig+0x820>)
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	4905      	ldr	r1, [pc, #20]	; (800270c <HAL_RCC_OscConfig+0x820>)
 80026f6:	4b06      	ldr	r3, [pc, #24]	; (8002710 <HAL_RCC_OscConfig+0x824>)
 80026f8:	4013      	ands	r3, r2
 80026fa:	60cb      	str	r3, [r1, #12]
 80026fc:	e001      	b.n	8002702 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3720      	adds	r7, #32
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40021000 	.word	0x40021000
 8002710:	feeefffc 	.word	0xfeeefffc

08002714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e0e7      	b.n	80028f8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002728:	4b75      	ldr	r3, [pc, #468]	; (8002900 <HAL_RCC_ClockConfig+0x1ec>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	429a      	cmp	r2, r3
 8002734:	d910      	bls.n	8002758 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002736:	4b72      	ldr	r3, [pc, #456]	; (8002900 <HAL_RCC_ClockConfig+0x1ec>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f023 0207 	bic.w	r2, r3, #7
 800273e:	4970      	ldr	r1, [pc, #448]	; (8002900 <HAL_RCC_ClockConfig+0x1ec>)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	4313      	orrs	r3, r2
 8002744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002746:	4b6e      	ldr	r3, [pc, #440]	; (8002900 <HAL_RCC_ClockConfig+0x1ec>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	429a      	cmp	r2, r3
 8002752:	d001      	beq.n	8002758 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e0cf      	b.n	80028f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d010      	beq.n	8002786 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	4b66      	ldr	r3, [pc, #408]	; (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002770:	429a      	cmp	r2, r3
 8002772:	d908      	bls.n	8002786 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002774:	4b63      	ldr	r3, [pc, #396]	; (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	4960      	ldr	r1, [pc, #384]	; (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 8002782:	4313      	orrs	r3, r2
 8002784:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d04c      	beq.n	800282c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b03      	cmp	r3, #3
 8002798:	d107      	bne.n	80027aa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800279a:	4b5a      	ldr	r3, [pc, #360]	; (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d121      	bne.n	80027ea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e0a6      	b.n	80028f8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d107      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027b2:	4b54      	ldr	r3, [pc, #336]	; (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d115      	bne.n	80027ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e09a      	b.n	80028f8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d107      	bne.n	80027da <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027ca:	4b4e      	ldr	r3, [pc, #312]	; (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d109      	bne.n	80027ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e08e      	b.n	80028f8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027da:	4b4a      	ldr	r3, [pc, #296]	; (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e086      	b.n	80028f8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027ea:	4b46      	ldr	r3, [pc, #280]	; (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f023 0203 	bic.w	r2, r3, #3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	4943      	ldr	r1, [pc, #268]	; (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027fc:	f7fe fa56 	bl	8000cac <HAL_GetTick>
 8002800:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002802:	e00a      	b.n	800281a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002804:	f7fe fa52 	bl	8000cac <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002812:	4293      	cmp	r3, r2
 8002814:	d901      	bls.n	800281a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e06e      	b.n	80028f8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281a:	4b3a      	ldr	r3, [pc, #232]	; (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 020c 	and.w	r2, r3, #12
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	429a      	cmp	r2, r3
 800282a:	d1eb      	bne.n	8002804 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d010      	beq.n	800285a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	4b31      	ldr	r3, [pc, #196]	; (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002844:	429a      	cmp	r2, r3
 8002846:	d208      	bcs.n	800285a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002848:	4b2e      	ldr	r3, [pc, #184]	; (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	492b      	ldr	r1, [pc, #172]	; (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 8002856:	4313      	orrs	r3, r2
 8002858:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800285a:	4b29      	ldr	r3, [pc, #164]	; (8002900 <HAL_RCC_ClockConfig+0x1ec>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	429a      	cmp	r2, r3
 8002866:	d210      	bcs.n	800288a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002868:	4b25      	ldr	r3, [pc, #148]	; (8002900 <HAL_RCC_ClockConfig+0x1ec>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f023 0207 	bic.w	r2, r3, #7
 8002870:	4923      	ldr	r1, [pc, #140]	; (8002900 <HAL_RCC_ClockConfig+0x1ec>)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	4313      	orrs	r3, r2
 8002876:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002878:	4b21      	ldr	r3, [pc, #132]	; (8002900 <HAL_RCC_ClockConfig+0x1ec>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	429a      	cmp	r2, r3
 8002884:	d001      	beq.n	800288a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e036      	b.n	80028f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0304 	and.w	r3, r3, #4
 8002892:	2b00      	cmp	r3, #0
 8002894:	d008      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002896:	4b1b      	ldr	r3, [pc, #108]	; (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	4918      	ldr	r1, [pc, #96]	; (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0308 	and.w	r3, r3, #8
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d009      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028b4:	4b13      	ldr	r3, [pc, #76]	; (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	4910      	ldr	r1, [pc, #64]	; (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028c8:	f000 f824 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 80028cc:	4602      	mov	r2, r0
 80028ce:	4b0d      	ldr	r3, [pc, #52]	; (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	091b      	lsrs	r3, r3, #4
 80028d4:	f003 030f 	and.w	r3, r3, #15
 80028d8:	490b      	ldr	r1, [pc, #44]	; (8002908 <HAL_RCC_ClockConfig+0x1f4>)
 80028da:	5ccb      	ldrb	r3, [r1, r3]
 80028dc:	f003 031f 	and.w	r3, r3, #31
 80028e0:	fa22 f303 	lsr.w	r3, r2, r3
 80028e4:	4a09      	ldr	r2, [pc, #36]	; (800290c <HAL_RCC_ClockConfig+0x1f8>)
 80028e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80028e8:	4b09      	ldr	r3, [pc, #36]	; (8002910 <HAL_RCC_ClockConfig+0x1fc>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fe f98d 	bl	8000c0c <HAL_InitTick>
 80028f2:	4603      	mov	r3, r0
 80028f4:	72fb      	strb	r3, [r7, #11]

  return status;
 80028f6:	7afb      	ldrb	r3, [r7, #11]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40022000 	.word	0x40022000
 8002904:	40021000 	.word	0x40021000
 8002908:	08003170 	.word	0x08003170
 800290c:	20000000 	.word	0x20000000
 8002910:	20000004 	.word	0x20000004

08002914 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002914:	b480      	push	{r7}
 8002916:	b089      	sub	sp, #36	; 0x24
 8002918:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800291a:	2300      	movs	r3, #0
 800291c:	61fb      	str	r3, [r7, #28]
 800291e:	2300      	movs	r3, #0
 8002920:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002922:	4b3e      	ldr	r3, [pc, #248]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 030c 	and.w	r3, r3, #12
 800292a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800292c:	4b3b      	ldr	r3, [pc, #236]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x108>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	f003 0303 	and.w	r3, r3, #3
 8002934:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <HAL_RCC_GetSysClockFreq+0x34>
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	2b0c      	cmp	r3, #12
 8002940:	d121      	bne.n	8002986 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d11e      	bne.n	8002986 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002948:	4b34      	ldr	r3, [pc, #208]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x108>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	2b00      	cmp	r3, #0
 8002952:	d107      	bne.n	8002964 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002954:	4b31      	ldr	r3, [pc, #196]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002956:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800295a:	0a1b      	lsrs	r3, r3, #8
 800295c:	f003 030f 	and.w	r3, r3, #15
 8002960:	61fb      	str	r3, [r7, #28]
 8002962:	e005      	b.n	8002970 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002964:	4b2d      	ldr	r3, [pc, #180]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	091b      	lsrs	r3, r3, #4
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002970:	4a2b      	ldr	r2, [pc, #172]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002978:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10d      	bne.n	800299c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002984:	e00a      	b.n	800299c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	2b04      	cmp	r3, #4
 800298a:	d102      	bne.n	8002992 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800298c:	4b25      	ldr	r3, [pc, #148]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x110>)
 800298e:	61bb      	str	r3, [r7, #24]
 8002990:	e004      	b.n	800299c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	2b08      	cmp	r3, #8
 8002996:	d101      	bne.n	800299c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002998:	4b23      	ldr	r3, [pc, #140]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x114>)
 800299a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	2b0c      	cmp	r3, #12
 80029a0:	d134      	bne.n	8002a0c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029a2:	4b1e      	ldr	r3, [pc, #120]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x108>)
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d003      	beq.n	80029ba <HAL_RCC_GetSysClockFreq+0xa6>
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d003      	beq.n	80029c0 <HAL_RCC_GetSysClockFreq+0xac>
 80029b8:	e005      	b.n	80029c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80029ba:	4b1a      	ldr	r3, [pc, #104]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x110>)
 80029bc:	617b      	str	r3, [r7, #20]
      break;
 80029be:	e005      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80029c0:	4b19      	ldr	r3, [pc, #100]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x114>)
 80029c2:	617b      	str	r3, [r7, #20]
      break;
 80029c4:	e002      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	617b      	str	r3, [r7, #20]
      break;
 80029ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029cc:	4b13      	ldr	r3, [pc, #76]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x108>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	091b      	lsrs	r3, r3, #4
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	3301      	adds	r3, #1
 80029d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80029da:	4b10      	ldr	r3, [pc, #64]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x108>)
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	0a1b      	lsrs	r3, r3, #8
 80029e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	fb03 f202 	mul.w	r2, r3, r2
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029f2:	4b0a      	ldr	r3, [pc, #40]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x108>)
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	0e5b      	lsrs	r3, r3, #25
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	3301      	adds	r3, #1
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a0c:	69bb      	ldr	r3, [r7, #24]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3724      	adds	r7, #36	; 0x24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	08003180 	.word	0x08003180
 8002a24:	00f42400 	.word	0x00f42400
 8002a28:	007a1200 	.word	0x007a1200

08002a2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a34:	2300      	movs	r3, #0
 8002a36:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a38:	4b2a      	ldr	r3, [pc, #168]	; (8002ae4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d003      	beq.n	8002a4c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a44:	f7ff f9ee 	bl	8001e24 <HAL_PWREx_GetVoltageRange>
 8002a48:	6178      	str	r0, [r7, #20]
 8002a4a:	e014      	b.n	8002a76 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a4c:	4b25      	ldr	r3, [pc, #148]	; (8002ae4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a50:	4a24      	ldr	r2, [pc, #144]	; (8002ae4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a56:	6593      	str	r3, [r2, #88]	; 0x58
 8002a58:	4b22      	ldr	r3, [pc, #136]	; (8002ae4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a64:	f7ff f9de 	bl	8001e24 <HAL_PWREx_GetVoltageRange>
 8002a68:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a6a:	4b1e      	ldr	r3, [pc, #120]	; (8002ae4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6e:	4a1d      	ldr	r2, [pc, #116]	; (8002ae4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a74:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a7c:	d10b      	bne.n	8002a96 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2b80      	cmp	r3, #128	; 0x80
 8002a82:	d919      	bls.n	8002ab8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2ba0      	cmp	r3, #160	; 0xa0
 8002a88:	d902      	bls.n	8002a90 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	613b      	str	r3, [r7, #16]
 8002a8e:	e013      	b.n	8002ab8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a90:	2301      	movs	r3, #1
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	e010      	b.n	8002ab8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b80      	cmp	r3, #128	; 0x80
 8002a9a:	d902      	bls.n	8002aa2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	613b      	str	r3, [r7, #16]
 8002aa0:	e00a      	b.n	8002ab8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b80      	cmp	r3, #128	; 0x80
 8002aa6:	d102      	bne.n	8002aae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	613b      	str	r3, [r7, #16]
 8002aac:	e004      	b.n	8002ab8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b70      	cmp	r3, #112	; 0x70
 8002ab2:	d101      	bne.n	8002ab8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ab8:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f023 0207 	bic.w	r2, r3, #7
 8002ac0:	4909      	ldr	r1, [pc, #36]	; (8002ae8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ac8:	4b07      	ldr	r3, [pc, #28]	; (8002ae8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d001      	beq.n	8002ada <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e000      	b.n	8002adc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3718      	adds	r7, #24
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	40022000 	.word	0x40022000

08002aec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002af4:	2300      	movs	r3, #0
 8002af6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002af8:	2300      	movs	r3, #0
 8002afa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d031      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b10:	d01a      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002b12:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b16:	d814      	bhi.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d009      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b20:	d10f      	bne.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002b22:	4b5d      	ldr	r3, [pc, #372]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	4a5c      	ldr	r2, [pc, #368]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b2c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b2e:	e00c      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3304      	adds	r3, #4
 8002b34:	2100      	movs	r1, #0
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 f9f0 	bl	8002f1c <RCCEx_PLLSAI1_Config>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b40:	e003      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	74fb      	strb	r3, [r7, #19]
      break;
 8002b46:	e000      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002b48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b4a:	7cfb      	ldrb	r3, [r7, #19]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10b      	bne.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b50:	4b51      	ldr	r3, [pc, #324]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5e:	494e      	ldr	r1, [pc, #312]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b66:	e001      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b68:	7cfb      	ldrb	r3, [r7, #19]
 8002b6a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 809e 	beq.w	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b7e:	4b46      	ldr	r3, [pc, #280]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e000      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002b8e:	2300      	movs	r3, #0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00d      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b94:	4b40      	ldr	r3, [pc, #256]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b98:	4a3f      	ldr	r2, [pc, #252]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b9e:	6593      	str	r3, [r2, #88]	; 0x58
 8002ba0:	4b3d      	ldr	r3, [pc, #244]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba8:	60bb      	str	r3, [r7, #8]
 8002baa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bac:	2301      	movs	r3, #1
 8002bae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bb0:	4b3a      	ldr	r3, [pc, #232]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a39      	ldr	r2, [pc, #228]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bbc:	f7fe f876 	bl	8000cac <HAL_GetTick>
 8002bc0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002bc2:	e009      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc4:	f7fe f872 	bl	8000cac <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d902      	bls.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	74fb      	strb	r3, [r7, #19]
        break;
 8002bd6:	e005      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002bd8:	4b30      	ldr	r3, [pc, #192]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0ef      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002be4:	7cfb      	ldrb	r3, [r7, #19]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d15a      	bne.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002bea:	4b2b      	ldr	r3, [pc, #172]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bf4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d01e      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d019      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c06:	4b24      	ldr	r3, [pc, #144]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c10:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c12:	4b21      	ldr	r3, [pc, #132]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c18:	4a1f      	ldr	r2, [pc, #124]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c22:	4b1d      	ldr	r3, [pc, #116]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c28:	4a1b      	ldr	r2, [pc, #108]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c32:	4a19      	ldr	r2, [pc, #100]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d016      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c44:	f7fe f832 	bl	8000cac <HAL_GetTick>
 8002c48:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c4a:	e00b      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c4c:	f7fe f82e 	bl	8000cac <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d902      	bls.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	74fb      	strb	r3, [r7, #19]
            break;
 8002c62:	e006      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c64:	4b0c      	ldr	r3, [pc, #48]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0ec      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002c72:	7cfb      	ldrb	r3, [r7, #19]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10b      	bne.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c78:	4b07      	ldr	r3, [pc, #28]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c86:	4904      	ldr	r1, [pc, #16]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002c8e:	e009      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c90:	7cfb      	ldrb	r3, [r7, #19]
 8002c92:	74bb      	strb	r3, [r7, #18]
 8002c94:	e006      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002c96:	bf00      	nop
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ca0:	7cfb      	ldrb	r3, [r7, #19]
 8002ca2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ca4:	7c7b      	ldrb	r3, [r7, #17]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d105      	bne.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002caa:	4b9b      	ldr	r3, [pc, #620]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cae:	4a9a      	ldr	r2, [pc, #616]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002cb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cb4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00a      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cc2:	4b95      	ldr	r3, [pc, #596]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc8:	f023 0203 	bic.w	r2, r3, #3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	4991      	ldr	r1, [pc, #580]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00a      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ce4:	4b8c      	ldr	r3, [pc, #560]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cea:	f023 020c 	bic.w	r2, r3, #12
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	4989      	ldr	r1, [pc, #548]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0304 	and.w	r3, r3, #4
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00a      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d06:	4b84      	ldr	r3, [pc, #528]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d14:	4980      	ldr	r1, [pc, #512]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0320 	and.w	r3, r3, #32
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00a      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d28:	4b7b      	ldr	r3, [pc, #492]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d36:	4978      	ldr	r1, [pc, #480]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00a      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d4a:	4b73      	ldr	r3, [pc, #460]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d58:	496f      	ldr	r1, [pc, #444]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00a      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d6c:	4b6a      	ldr	r3, [pc, #424]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	4967      	ldr	r1, [pc, #412]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00a      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d8e:	4b62      	ldr	r3, [pc, #392]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d94:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9c:	495e      	ldr	r1, [pc, #376]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00a      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002db0:	4b59      	ldr	r3, [pc, #356]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dbe:	4956      	ldr	r1, [pc, #344]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00a      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002dd2:	4b51      	ldr	r3, [pc, #324]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de0:	494d      	ldr	r1, [pc, #308]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d028      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002df4:	4b48      	ldr	r3, [pc, #288]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e02:	4945      	ldr	r1, [pc, #276]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e12:	d106      	bne.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e14:	4b40      	ldr	r3, [pc, #256]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	4a3f      	ldr	r2, [pc, #252]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002e1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e1e:	60d3      	str	r3, [r2, #12]
 8002e20:	e011      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e2a:	d10c      	bne.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3304      	adds	r3, #4
 8002e30:	2101      	movs	r1, #1
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 f872 	bl	8002f1c <RCCEx_PLLSAI1_Config>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e3c:	7cfb      	ldrb	r3, [r7, #19]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8002e42:	7cfb      	ldrb	r3, [r7, #19]
 8002e44:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d028      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e52:	4b31      	ldr	r3, [pc, #196]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e58:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e60:	492d      	ldr	r1, [pc, #180]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e70:	d106      	bne.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e72:	4b29      	ldr	r3, [pc, #164]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	4a28      	ldr	r2, [pc, #160]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002e78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e7c:	60d3      	str	r3, [r2, #12]
 8002e7e:	e011      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e88:	d10c      	bne.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	2101      	movs	r1, #1
 8002e90:	4618      	mov	r0, r3
 8002e92:	f000 f843 	bl	8002f1c <RCCEx_PLLSAI1_Config>
 8002e96:	4603      	mov	r3, r0
 8002e98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e9a:	7cfb      	ldrb	r3, [r7, #19]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002ea0:	7cfb      	ldrb	r3, [r7, #19]
 8002ea2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d01c      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002eb0:	4b19      	ldr	r3, [pc, #100]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ebe:	4916      	ldr	r1, [pc, #88]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ece:	d10c      	bne.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3304      	adds	r3, #4
 8002ed4:	2102      	movs	r1, #2
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f000 f820 	bl	8002f1c <RCCEx_PLLSAI1_Config>
 8002edc:	4603      	mov	r3, r0
 8002ede:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ee0:	7cfb      	ldrb	r3, [r7, #19]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8002ee6:	7cfb      	ldrb	r3, [r7, #19]
 8002ee8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00a      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002ef6:	4b08      	ldr	r3, [pc, #32]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f04:	4904      	ldr	r1, [pc, #16]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f0c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	40021000 	.word	0x40021000

08002f1c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f26:	2300      	movs	r3, #0
 8002f28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f2a:	4b74      	ldr	r3, [pc, #464]	; (80030fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d018      	beq.n	8002f68 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f36:	4b71      	ldr	r3, [pc, #452]	; (80030fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	f003 0203 	and.w	r2, r3, #3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d10d      	bne.n	8002f62 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
       ||
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d009      	beq.n	8002f62 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f4e:	4b6b      	ldr	r3, [pc, #428]	; (80030fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	091b      	lsrs	r3, r3, #4
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	1c5a      	adds	r2, r3, #1
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
       ||
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d047      	beq.n	8002ff2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	73fb      	strb	r3, [r7, #15]
 8002f66:	e044      	b.n	8002ff2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2b03      	cmp	r3, #3
 8002f6e:	d018      	beq.n	8002fa2 <RCCEx_PLLSAI1_Config+0x86>
 8002f70:	2b03      	cmp	r3, #3
 8002f72:	d825      	bhi.n	8002fc0 <RCCEx_PLLSAI1_Config+0xa4>
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d002      	beq.n	8002f7e <RCCEx_PLLSAI1_Config+0x62>
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d009      	beq.n	8002f90 <RCCEx_PLLSAI1_Config+0x74>
 8002f7c:	e020      	b.n	8002fc0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f7e:	4b5f      	ldr	r3, [pc, #380]	; (80030fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d11d      	bne.n	8002fc6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f8e:	e01a      	b.n	8002fc6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f90:	4b5a      	ldr	r3, [pc, #360]	; (80030fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d116      	bne.n	8002fca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fa0:	e013      	b.n	8002fca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002fa2:	4b56      	ldr	r3, [pc, #344]	; (80030fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10f      	bne.n	8002fce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002fae:	4b53      	ldr	r3, [pc, #332]	; (80030fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d109      	bne.n	8002fce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fbe:	e006      	b.n	8002fce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	73fb      	strb	r3, [r7, #15]
      break;
 8002fc4:	e004      	b.n	8002fd0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fc6:	bf00      	nop
 8002fc8:	e002      	b.n	8002fd0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fca:	bf00      	nop
 8002fcc:	e000      	b.n	8002fd0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fce:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fd0:	7bfb      	ldrb	r3, [r7, #15]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10d      	bne.n	8002ff2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002fd6:	4b49      	ldr	r3, [pc, #292]	; (80030fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6819      	ldr	r1, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	430b      	orrs	r3, r1
 8002fec:	4943      	ldr	r1, [pc, #268]	; (80030fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ff2:	7bfb      	ldrb	r3, [r7, #15]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d17c      	bne.n	80030f2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ff8:	4b40      	ldr	r3, [pc, #256]	; (80030fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a3f      	ldr	r2, [pc, #252]	; (80030fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ffe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003002:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003004:	f7fd fe52 	bl	8000cac <HAL_GetTick>
 8003008:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800300a:	e009      	b.n	8003020 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800300c:	f7fd fe4e 	bl	8000cac <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d902      	bls.n	8003020 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	73fb      	strb	r3, [r7, #15]
        break;
 800301e:	e005      	b.n	800302c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003020:	4b36      	ldr	r3, [pc, #216]	; (80030fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1ef      	bne.n	800300c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800302c:	7bfb      	ldrb	r3, [r7, #15]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d15f      	bne.n	80030f2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d110      	bne.n	800305a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003038:	4b30      	ldr	r3, [pc, #192]	; (80030fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003040:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	6892      	ldr	r2, [r2, #8]
 8003048:	0211      	lsls	r1, r2, #8
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	68d2      	ldr	r2, [r2, #12]
 800304e:	06d2      	lsls	r2, r2, #27
 8003050:	430a      	orrs	r2, r1
 8003052:	492a      	ldr	r1, [pc, #168]	; (80030fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003054:	4313      	orrs	r3, r2
 8003056:	610b      	str	r3, [r1, #16]
 8003058:	e027      	b.n	80030aa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d112      	bne.n	8003086 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003060:	4b26      	ldr	r3, [pc, #152]	; (80030fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003068:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	6892      	ldr	r2, [r2, #8]
 8003070:	0211      	lsls	r1, r2, #8
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	6912      	ldr	r2, [r2, #16]
 8003076:	0852      	lsrs	r2, r2, #1
 8003078:	3a01      	subs	r2, #1
 800307a:	0552      	lsls	r2, r2, #21
 800307c:	430a      	orrs	r2, r1
 800307e:	491f      	ldr	r1, [pc, #124]	; (80030fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003080:	4313      	orrs	r3, r2
 8003082:	610b      	str	r3, [r1, #16]
 8003084:	e011      	b.n	80030aa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003086:	4b1d      	ldr	r3, [pc, #116]	; (80030fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800308e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6892      	ldr	r2, [r2, #8]
 8003096:	0211      	lsls	r1, r2, #8
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6952      	ldr	r2, [r2, #20]
 800309c:	0852      	lsrs	r2, r2, #1
 800309e:	3a01      	subs	r2, #1
 80030a0:	0652      	lsls	r2, r2, #25
 80030a2:	430a      	orrs	r2, r1
 80030a4:	4915      	ldr	r1, [pc, #84]	; (80030fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80030aa:	4b14      	ldr	r3, [pc, #80]	; (80030fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a13      	ldr	r2, [pc, #76]	; (80030fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80030b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030b4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b6:	f7fd fdf9 	bl	8000cac <HAL_GetTick>
 80030ba:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030bc:	e009      	b.n	80030d2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030be:	f7fd fdf5 	bl	8000cac <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d902      	bls.n	80030d2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	73fb      	strb	r3, [r7, #15]
          break;
 80030d0:	e005      	b.n	80030de <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030d2:	4b0a      	ldr	r3, [pc, #40]	; (80030fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0ef      	beq.n	80030be <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80030de:	7bfb      	ldrb	r3, [r7, #15]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d106      	bne.n	80030f2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80030e4:	4b05      	ldr	r3, [pc, #20]	; (80030fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80030e6:	691a      	ldr	r2, [r3, #16]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	4903      	ldr	r1, [pc, #12]	; (80030fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40021000 	.word	0x40021000

08003100 <__libc_init_array>:
 8003100:	b570      	push	{r4, r5, r6, lr}
 8003102:	4d0d      	ldr	r5, [pc, #52]	; (8003138 <__libc_init_array+0x38>)
 8003104:	4c0d      	ldr	r4, [pc, #52]	; (800313c <__libc_init_array+0x3c>)
 8003106:	1b64      	subs	r4, r4, r5
 8003108:	10a4      	asrs	r4, r4, #2
 800310a:	2600      	movs	r6, #0
 800310c:	42a6      	cmp	r6, r4
 800310e:	d109      	bne.n	8003124 <__libc_init_array+0x24>
 8003110:	4d0b      	ldr	r5, [pc, #44]	; (8003140 <__libc_init_array+0x40>)
 8003112:	4c0c      	ldr	r4, [pc, #48]	; (8003144 <__libc_init_array+0x44>)
 8003114:	f000 f820 	bl	8003158 <_init>
 8003118:	1b64      	subs	r4, r4, r5
 800311a:	10a4      	asrs	r4, r4, #2
 800311c:	2600      	movs	r6, #0
 800311e:	42a6      	cmp	r6, r4
 8003120:	d105      	bne.n	800312e <__libc_init_array+0x2e>
 8003122:	bd70      	pop	{r4, r5, r6, pc}
 8003124:	f855 3b04 	ldr.w	r3, [r5], #4
 8003128:	4798      	blx	r3
 800312a:	3601      	adds	r6, #1
 800312c:	e7ee      	b.n	800310c <__libc_init_array+0xc>
 800312e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003132:	4798      	blx	r3
 8003134:	3601      	adds	r6, #1
 8003136:	e7f2      	b.n	800311e <__libc_init_array+0x1e>
 8003138:	080031b0 	.word	0x080031b0
 800313c:	080031b0 	.word	0x080031b0
 8003140:	080031b0 	.word	0x080031b0
 8003144:	080031b4 	.word	0x080031b4

08003148 <memset>:
 8003148:	4402      	add	r2, r0
 800314a:	4603      	mov	r3, r0
 800314c:	4293      	cmp	r3, r2
 800314e:	d100      	bne.n	8003152 <memset+0xa>
 8003150:	4770      	bx	lr
 8003152:	f803 1b01 	strb.w	r1, [r3], #1
 8003156:	e7f9      	b.n	800314c <memset+0x4>

08003158 <_init>:
 8003158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800315a:	bf00      	nop
 800315c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800315e:	bc08      	pop	{r3}
 8003160:	469e      	mov	lr, r3
 8003162:	4770      	bx	lr

08003164 <_fini>:
 8003164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003166:	bf00      	nop
 8003168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800316a:	bc08      	pop	{r3}
 800316c:	469e      	mov	lr, r3
 800316e:	4770      	bx	lr
