
RedemptionPortable.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cc0  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004e4c  08004e4c  00014e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e8c  08004e8c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004e8c  08004e8c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e8c  08004e8c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e8c  08004e8c  00014e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e90  08004e90  00014e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004e94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000010  08004ea4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08004ea4  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010882  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000231b  00000000  00000000  000308c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  00032be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed0  00000000  00000000  00033bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002179b  00000000  00000000  00034a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ee4  00000000  00000000  00056223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cba7d  00000000  00000000  00068107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00133b84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000425c  00000000  00000000  00133bd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004e34 	.word	0x08004e34

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	08004e34 	.word	0x08004e34

080001cc <BQ_Write>:
};




void BQ_Write(uint8_t reg, uint8_t data) {
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b086      	sub	sp, #24
 80001d0:	af04      	add	r7, sp, #16
 80001d2:	4603      	mov	r3, r0
 80001d4:	460a      	mov	r2, r1
 80001d6:	71fb      	strb	r3, [r7, #7]
 80001d8:	4613      	mov	r3, r2
 80001da:	71bb      	strb	r3, [r7, #6]

	if ( HAL_I2C_Mem_Write( &hi2c1, BQ_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 10 ) != HAL_OK)
 80001dc:	79fb      	ldrb	r3, [r7, #7]
 80001de:	b29a      	uxth	r2, r3
 80001e0:	230a      	movs	r3, #10
 80001e2:	9302      	str	r3, [sp, #8]
 80001e4:	2301      	movs	r3, #1
 80001e6:	9301      	str	r3, [sp, #4]
 80001e8:	1dbb      	adds	r3, r7, #6
 80001ea:	9300      	str	r3, [sp, #0]
 80001ec:	2301      	movs	r3, #1
 80001ee:	21d6      	movs	r1, #214	; 0xd6
 80001f0:	4806      	ldr	r0, [pc, #24]	; (800020c <BQ_Write+0x40>)
 80001f2:	f001 fdb3 	bl	8001d5c <HAL_I2C_Mem_Write>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d002      	beq.n	8000202 <BQ_Write+0x36>
	{
		GLOBAL_errors = I2CErrorWrite;
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <BQ_Write+0x44>)
 80001fe:	2200      	movs	r2, #0
 8000200:	701a      	strb	r2, [r3, #0]
	}

}
 8000202:	bf00      	nop
 8000204:	3708      	adds	r7, #8
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	2000002c 	.word	0x2000002c
 8000210:	20000118 	.word	0x20000118

08000214 <BQ_Read>:

uint8_t BQ_Read(uint8_t reg) {
 8000214:	b580      	push	{r7, lr}
 8000216:	b088      	sub	sp, #32
 8000218:	af04      	add	r7, sp, #16
 800021a:	4603      	mov	r3, r0
 800021c:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

	if ( HAL_I2C_Mem_Read( &hi2c1, BQ_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 10 ) != HAL_OK)
 800021e:	79fb      	ldrb	r3, [r7, #7]
 8000220:	b29a      	uxth	r2, r3
 8000222:	230a      	movs	r3, #10
 8000224:	9302      	str	r3, [sp, #8]
 8000226:	2301      	movs	r3, #1
 8000228:	9301      	str	r3, [sp, #4]
 800022a:	f107 030f 	add.w	r3, r7, #15
 800022e:	9300      	str	r3, [sp, #0]
 8000230:	2301      	movs	r3, #1
 8000232:	21d6      	movs	r1, #214	; 0xd6
 8000234:	4806      	ldr	r0, [pc, #24]	; (8000250 <BQ_Read+0x3c>)
 8000236:	f001 fea5 	bl	8001f84 <HAL_I2C_Mem_Read>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d002      	beq.n	8000246 <BQ_Read+0x32>
	{
		GLOBAL_errors = I2CErrorRead;
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <BQ_Read+0x40>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
	}

    return data;
 8000246:	7bfb      	ldrb	r3, [r7, #15]

}
 8000248:	4618      	mov	r0, r3
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	2000002c 	.word	0x2000002c
 8000254:	20000118 	.word	0x20000118

08000258 <BQ_Init>:

bool BQ_Init()
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
	struct BQ_Register_fields BQ;

	//REG00
	BQ.REG00.IINLIM = 0b111;	//3A input
 800025e:	783b      	ldrb	r3, [r7, #0]
 8000260:	f043 0307 	orr.w	r3, r3, #7
 8000264:	703b      	strb	r3, [r7, #0]
	BQ.REG00.VINDPM = 0b1011;	//4.76V
 8000266:	783b      	ldrb	r3, [r7, #0]
 8000268:	220b      	movs	r2, #11
 800026a:	f362 03c6 	bfi	r3, r2, #3, #4
 800026e:	703b      	strb	r3, [r7, #0]
	BQ.REG00.EN_HIZ = 1;
 8000270:	783b      	ldrb	r3, [r7, #0]
 8000272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000276:	703b      	strb	r3, [r7, #0]

	//REG01
	BQ.REG01.SYS_MIN = 0b011;	//3.3V minimum voltage cutoff
 8000278:	787b      	ldrb	r3, [r7, #1]
 800027a:	2203      	movs	r2, #3
 800027c:	f362 0343 	bfi	r3, r2, #1, #3
 8000280:	707b      	strb	r3, [r7, #1]
	BQ.REG01.CHG_CONFIG = 1;	//enable charge
 8000282:	787b      	ldrb	r3, [r7, #1]
 8000284:	f043 0310 	orr.w	r3, r3, #16
 8000288:	707b      	strb	r3, [r7, #1]
	BQ.REG01.OTG_CONFIG = 0;
 800028a:	787b      	ldrb	r3, [r7, #1]
 800028c:	f36f 1345 	bfc	r3, #5, #1
 8000290:	707b      	strb	r3, [r7, #1]
	BQ.REG01.I2CWDTIMER = 0;	//disable WD
 8000292:	787b      	ldrb	r3, [r7, #1]
 8000294:	f36f 1386 	bfc	r3, #6, #1
 8000298:	707b      	strb	r3, [r7, #1]
	BQ.REG01.RegisterReset = 0;
 800029a:	787b      	ldrb	r3, [r7, #1]
 800029c:	f36f 13c7 	bfc	r3, #7, #1
 80002a0:	707b      	strb	r3, [r7, #1]

	//REG02
	BQ.REG02.FORCE_20PCT = 0;
 80002a2:	78bb      	ldrb	r3, [r7, #2]
 80002a4:	f36f 0300 	bfc	r3, #0, #1
 80002a8:	70bb      	strb	r3, [r7, #2]
	BQ.REG02.BCOLD = 0;
 80002aa:	78bb      	ldrb	r3, [r7, #2]
 80002ac:	f36f 0341 	bfc	r3, #1, #1
 80002b0:	70bb      	strb	r3, [r7, #2]
	BQ.REG02.ICHG = 0b101111;	//Fast Charging current is 3008mAh
 80002b2:	78bb      	ldrb	r3, [r7, #2]
 80002b4:	222f      	movs	r2, #47	; 0x2f
 80002b6:	f362 0387 	bfi	r3, r2, #2, #6
 80002ba:	70bb      	strb	r3, [r7, #2]

	//REG03
	BQ.REG03.ITERM = 0b0011;	//Termination current is 384mAh
 80002bc:	78fb      	ldrb	r3, [r7, #3]
 80002be:	2203      	movs	r2, #3
 80002c0:	f362 0303 	bfi	r3, r2, #0, #4
 80002c4:	70fb      	strb	r3, [r7, #3]
	BQ.REG03.IPRECHG = 0b0001;	//Precharge current is 128mAh
 80002c6:	78fb      	ldrb	r3, [r7, #3]
 80002c8:	2201      	movs	r2, #1
 80002ca:	f362 1307 	bfi	r3, r2, #4, #4
 80002ce:	70fb      	strb	r3, [r7, #3]

	//REG04
	BQ.REG04.VRECHG = 0;
 80002d0:	793b      	ldrb	r3, [r7, #4]
 80002d2:	f36f 0300 	bfc	r3, #0, #1
 80002d6:	713b      	strb	r3, [r7, #4]
	BQ.REG04.BATLOWV = 1;		//Battery is precharged until 3.0v then changed to fast charge
 80002d8:	793b      	ldrb	r3, [r7, #4]
 80002da:	f043 0302 	orr.w	r3, r3, #2
 80002de:	713b      	strb	r3, [r7, #4]
	BQ.REG04.VREG = 0b101100;	//Battery is full at 4.208v
 80002e0:	793b      	ldrb	r3, [r7, #4]
 80002e2:	222c      	movs	r2, #44	; 0x2c
 80002e4:	f362 0387 	bfi	r3, r2, #2, #6
 80002e8:	713b      	strb	r3, [r7, #4]

	//REG05
	BQ.REG05.CHG_TIMER = 0b01;	//If enabled, it will charge for 8 hours
 80002ea:	797b      	ldrb	r3, [r7, #5]
 80002ec:	2201      	movs	r2, #1
 80002ee:	f362 0342 	bfi	r3, r2, #1, #2
 80002f2:	717b      	strb	r3, [r7, #5]
	BQ.REG05.EN_TIMER = 0;		//disable charging safety timer
 80002f4:	797b      	ldrb	r3, [r7, #5]
 80002f6:	f36f 03c3 	bfc	r3, #3, #1
 80002fa:	717b      	strb	r3, [r7, #5]
	BQ.REG05.WATCHDOG = 0b00;	//disable watchdog
 80002fc:	797b      	ldrb	r3, [r7, #5]
 80002fe:	f36f 1305 	bfc	r3, #4, #2
 8000302:	717b      	strb	r3, [r7, #5]
	BQ.REG05.EN_TERM = 1;
 8000304:	797b      	ldrb	r3, [r7, #5]
 8000306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800030a:	717b      	strb	r3, [r7, #5]

	//REG06
	BQ.REG06.TREG = 0b00;		//Thermal reg at 60C degrees
 800030c:	79bb      	ldrb	r3, [r7, #6]
 800030e:	f36f 0301 	bfc	r3, #0, #2
 8000312:	71bb      	strb	r3, [r7, #6]
	BQ.REG06.BHOT = 0b00;
 8000314:	79bb      	ldrb	r3, [r7, #6]
 8000316:	f36f 0383 	bfc	r3, #2, #2
 800031a:	71bb      	strb	r3, [r7, #6]
	BQ.REG06.BOOSTV= 0b1001;	//not needed
 800031c:	79bb      	ldrb	r3, [r7, #6]
 800031e:	2209      	movs	r2, #9
 8000320:	f362 1307 	bfi	r3, r2, #4, #4
 8000324:	71bb      	strb	r3, [r7, #6]

	//REG07
	BQ.REG07.INT_MASK = 0b11;	//Enable pin Inturrupts
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	f043 0303 	orr.w	r3, r3, #3
 800032c:	71fb      	strb	r3, [r7, #7]
	BQ.REG07.BATFET_Disable = 0;//to Force BATFET off, turn this ON
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	f36f 1345 	bfc	r3, #5, #1
 8000334:	71fb      	strb	r3, [r7, #7]
	BQ.REG07.TMR2X_EN = 1;
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800033c:	71fb      	strb	r3, [r7, #7]
	BQ.REG07.DPDM_EN = 0;
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	f36f 13c7 	bfc	r3, #7, #1
 8000344:	71fb      	strb	r3, [r7, #7]

	if(!BQ_IsPresent())
 8000346:	f000 f845 	bl	80003d4 <BQ_IsPresent>
 800034a:	4603      	mov	r3, r0
 800034c:	f083 0301 	eor.w	r3, r3, #1
 8000350:	b2db      	uxtb	r3, r3
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <BQ_Init+0x102>
	{
		return false;
 8000356:	2300      	movs	r3, #0
 8000358:	e037      	b.n	80003ca <BQ_Init+0x172>
	}
	BQ_Write((uint8_t *)InputSourceControlReg, *(uint8_t *)&BQ.REG00);
 800035a:	463b      	mov	r3, r7
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	4619      	mov	r1, r3
 8000360:	2000      	movs	r0, #0
 8000362:	f7ff ff33 	bl	80001cc <BQ_Write>
	BQ_Write((uint8_t *)PowerOnConfigReg, *(uint8_t *)&BQ.REG01);
 8000366:	463b      	mov	r3, r7
 8000368:	3301      	adds	r3, #1
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	4619      	mov	r1, r3
 800036e:	2001      	movs	r0, #1
 8000370:	f7ff ff2c 	bl	80001cc <BQ_Write>
	BQ_Write((uint8_t *)ChargeCurrentControlReg, *(uint8_t *)&BQ.REG02);
 8000374:	463b      	mov	r3, r7
 8000376:	3302      	adds	r3, #2
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	4619      	mov	r1, r3
 800037c:	2002      	movs	r0, #2
 800037e:	f7ff ff25 	bl	80001cc <BQ_Write>
	BQ_Write((uint8_t *)PrechargeTerminationCurrentControlReg, *(uint8_t *)&BQ.REG03);
 8000382:	463b      	mov	r3, r7
 8000384:	3303      	adds	r3, #3
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	4619      	mov	r1, r3
 800038a:	2003      	movs	r0, #3
 800038c:	f7ff ff1e 	bl	80001cc <BQ_Write>
	BQ_Write((uint8_t *)ChargeVoltageControlReg, *(uint8_t *)&BQ.REG04);
 8000390:	463b      	mov	r3, r7
 8000392:	3304      	adds	r3, #4
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	4619      	mov	r1, r3
 8000398:	2004      	movs	r0, #4
 800039a:	f7ff ff17 	bl	80001cc <BQ_Write>
	BQ_Write((uint8_t *)ChargeTerminationTimerControlReg, *(uint8_t *)&BQ.REG05);
 800039e:	463b      	mov	r3, r7
 80003a0:	3305      	adds	r3, #5
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	4619      	mov	r1, r3
 80003a6:	2005      	movs	r0, #5
 80003a8:	f7ff ff10 	bl	80001cc <BQ_Write>
	BQ_Write((uint8_t *)BoostVoltageThermalRegulationControlReg, *(uint8_t *)&BQ.REG06);
 80003ac:	463b      	mov	r3, r7
 80003ae:	3306      	adds	r3, #6
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	4619      	mov	r1, r3
 80003b4:	2006      	movs	r0, #6
 80003b6:	f7ff ff09 	bl	80001cc <BQ_Write>
	BQ_Write((uint8_t *)MiscOperationControlReg, *(uint8_t *)&BQ.REG07);
 80003ba:	463b      	mov	r3, r7
 80003bc:	3307      	adds	r3, #7
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	4619      	mov	r1, r3
 80003c2:	2007      	movs	r0, #7
 80003c4:	f7ff ff02 	bl	80001cc <BQ_Write>

	return true;
 80003c8:	2301      	movs	r3, #1
}
 80003ca:	4618      	mov	r0, r3
 80003cc:	3708      	adds	r7, #8
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
	...

080003d4 <BQ_IsPresent>:

bool BQ_IsPresent()
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
	if(GLOBAL_errors != 0)
 80003da:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <BQ_IsPresent+0x44>)
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <BQ_IsPresent+0x12>
	{
		return false;
 80003e2:	2300      	movs	r3, #0
 80003e4:	e013      	b.n	800040e <BQ_IsPresent+0x3a>
	}

	uint8_t reg = BQ_Read(PartStatusReg);
 80003e6:	200a      	movs	r0, #10
 80003e8:	f7ff ff14 	bl	8000214 <BQ_Read>
 80003ec:	4603      	mov	r3, r0
 80003ee:	71fb      	strb	r3, [r7, #7]

	reg = (reg >>5);
 80003f0:	79fb      	ldrb	r3, [r7, #7]
 80003f2:	095b      	lsrs	r3, r3, #5
 80003f4:	71fb      	strb	r3, [r7, #7]

	if(BQ_Read(PartStatusReg) == 0b110)
 80003f6:	200a      	movs	r0, #10
 80003f8:	f7ff ff0c 	bl	8000214 <BQ_Read>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b06      	cmp	r3, #6
 8000400:	d101      	bne.n	8000406 <BQ_IsPresent+0x32>
	{
		return true;
 8000402:	2301      	movs	r3, #1
 8000404:	e003      	b.n	800040e <BQ_IsPresent+0x3a>
	}else
	{
		GLOBAL_errors = BQNotPresentOrNotCorrectPart;
 8000406:	4b04      	ldr	r3, [pc, #16]	; (8000418 <BQ_IsPresent+0x44>)
 8000408:	2202      	movs	r2, #2
 800040a:	701a      	strb	r2, [r3, #0]
		return false;
 800040c:	2300      	movs	r3, #0
	}
}
 800040e:	4618      	mov	r0, r3
 8000410:	3708      	adds	r7, #8
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	20000118 	.word	0x20000118

0800041c <WakeUpFromSleepMode>:
#if (ENABLESLEEPMODE)
	void EnterSleepModeWakeOnInturrupt() {
		HAL_SuspendTick();
		HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
	}
	void WakeUpFromSleepMode(){
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
		HAL_ResumeTick();
 8000420:	f001 f940 	bl	80016a4 <HAL_ResumeTick>
	}
 8000424:	bf00      	nop
 8000426:	bd80      	pop	{r7, pc}

08000428 <HAL_GPIO_EXTI_Callback>:



/*		INURRUPT CODE		*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BQ_INT_Pin) // BQ INT pin wake up
 8000432:	88fb      	ldrh	r3, [r7, #6]
 8000434:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000438:	d104      	bne.n	8000444 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		WakeUpFromSleepMode();
 800043a:	f7ff ffef 	bl	800041c <WakeUpFromSleepMode>
		BQ_FLAG = true;
 800043e:	4b4c      	ldr	r3, [pc, #304]	; (8000570 <HAL_GPIO_EXTI_Callback+0x148>)
 8000440:	2201      	movs	r2, #1
 8000442:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == MAX_ALRT_Pin)
 8000444:	88fb      	ldrh	r3, [r7, #6]
 8000446:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800044a:	d104      	bne.n	8000456 <HAL_GPIO_EXTI_Callback+0x2e>
	{
		WakeUpFromSleepMode();
 800044c:	f7ff ffe6 	bl	800041c <WakeUpFromSleepMode>
		MAX_FLAG = true;
 8000450:	4b48      	ldr	r3, [pc, #288]	; (8000574 <HAL_GPIO_EXTI_Callback+0x14c>)
 8000452:	2201      	movs	r2, #1
 8000454:	701a      	strb	r2, [r3, #0]

	}
	if(GPIO_Pin == Power_Button_Pin)
 8000456:	88fb      	ldrh	r3, [r7, #6]
 8000458:	2b80      	cmp	r3, #128	; 0x80
 800045a:	f040 8084 	bne.w	8000566 <HAL_GPIO_EXTI_Callback+0x13e>
	{
		if(HAL_GPIO_ReadPin(Power_Button_GPIO_Port, Power_Button_Pin) == GPIO_PIN_RESET
 800045e:	2180      	movs	r1, #128	; 0x80
 8000460:	4845      	ldr	r0, [pc, #276]	; (8000578 <HAL_GPIO_EXTI_Callback+0x150>)
 8000462:	f001 fbbb 	bl	8001bdc <HAL_GPIO_ReadPin>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d110      	bne.n	800048e <HAL_GPIO_EXTI_Callback+0x66>
				&& PowerButtonDebounced && !IsPressPeriodStart)
 800046c:	4b43      	ldr	r3, [pc, #268]	; (800057c <HAL_GPIO_EXTI_Callback+0x154>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d00c      	beq.n	800048e <HAL_GPIO_EXTI_Callback+0x66>
 8000474:	4b42      	ldr	r3, [pc, #264]	; (8000580 <HAL_GPIO_EXTI_Callback+0x158>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	f083 0301 	eor.w	r3, r3, #1
 800047c:	b2db      	uxtb	r3, r3
 800047e:	2b00      	cmp	r3, #0
 8000480:	d005      	beq.n	800048e <HAL_GPIO_EXTI_Callback+0x66>
		{
			HAL_TIM_Base_Start_IT(&htim15);	//Start Debounce
 8000482:	4840      	ldr	r0, [pc, #256]	; (8000584 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000484:	f003 fb9c 	bl	8003bc0 <HAL_TIM_Base_Start_IT>
			PowerButtonDebounced = false;
 8000488:	4b3c      	ldr	r3, [pc, #240]	; (800057c <HAL_GPIO_EXTI_Callback+0x154>)
 800048a:	2200      	movs	r2, #0
 800048c:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(Power_Button_GPIO_Port, Power_Button_Pin) == GPIO_PIN_SET &&
 800048e:	2180      	movs	r1, #128	; 0x80
 8000490:	4839      	ldr	r0, [pc, #228]	; (8000578 <HAL_GPIO_EXTI_Callback+0x150>)
 8000492:	f001 fba3 	bl	8001bdc <HAL_GPIO_ReadPin>
 8000496:	4603      	mov	r3, r0
 8000498:	2b01      	cmp	r3, #1
 800049a:	d130      	bne.n	80004fe <HAL_GPIO_EXTI_Callback+0xd6>
 800049c:	4b37      	ldr	r3, [pc, #220]	; (800057c <HAL_GPIO_EXTI_Callback+0x154>)
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d02c      	beq.n	80004fe <HAL_GPIO_EXTI_Callback+0xd6>
				PowerButtonDebounced && IsPressPeriodStart && PowerButtonShortPress &&
 80004a4:	4b36      	ldr	r3, [pc, #216]	; (8000580 <HAL_GPIO_EXTI_Callback+0x158>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d028      	beq.n	80004fe <HAL_GPIO_EXTI_Callback+0xd6>
 80004ac:	4b36      	ldr	r3, [pc, #216]	; (8000588 <HAL_GPIO_EXTI_Callback+0x160>)
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d024      	beq.n	80004fe <HAL_GPIO_EXTI_Callback+0xd6>
 80004b4:	4b35      	ldr	r3, [pc, #212]	; (800058c <HAL_GPIO_EXTI_Callback+0x164>)
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d020      	beq.n	80004fe <HAL_GPIO_EXTI_Callback+0xd6>
				PowerButtonLongPress && !SystemPowerState)
 80004bc:	4b34      	ldr	r3, [pc, #208]	; (8000590 <HAL_GPIO_EXTI_Callback+0x168>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	f083 0301 	eor.w	r3, r3, #1
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d019      	beq.n	80004fe <HAL_GPIO_EXTI_Callback+0xd6>
		{
			//All conditions met turn ON system and clear for next button
			HAL_TIM_Base_Stop_IT(&htim15);
 80004ca:	482e      	ldr	r0, [pc, #184]	; (8000584 <HAL_GPIO_EXTI_Callback+0x15c>)
 80004cc:	f003 fbcc 	bl	8003c68 <HAL_TIM_Base_Stop_IT>
			__HAL_TIM_SET_AUTORELOAD(&htim15, BUTTON_DEBOUNCE_MS);	//Reset power button debounce period
 80004d0:	4b2c      	ldr	r3, [pc, #176]	; (8000584 <HAL_GPIO_EXTI_Callback+0x15c>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2264      	movs	r2, #100	; 0x64
 80004d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80004d8:	4b2a      	ldr	r3, [pc, #168]	; (8000584 <HAL_GPIO_EXTI_Callback+0x15c>)
 80004da:	2264      	movs	r2, #100	; 0x64
 80004dc:	60da      	str	r2, [r3, #12]
			SystemPowerState = true;
 80004de:	4b2c      	ldr	r3, [pc, #176]	; (8000590 <HAL_GPIO_EXTI_Callback+0x168>)
 80004e0:	2201      	movs	r2, #1
 80004e2:	701a      	strb	r2, [r3, #0]
			PowerButtonDebounced = true;
 80004e4:	4b25      	ldr	r3, [pc, #148]	; (800057c <HAL_GPIO_EXTI_Callback+0x154>)
 80004e6:	2201      	movs	r2, #1
 80004e8:	701a      	strb	r2, [r3, #0]
			IsPressPeriodStart = false;
 80004ea:	4b25      	ldr	r3, [pc, #148]	; (8000580 <HAL_GPIO_EXTI_Callback+0x158>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	701a      	strb	r2, [r3, #0]
			PowerButtonShortPress = false;
 80004f0:	4b25      	ldr	r3, [pc, #148]	; (8000588 <HAL_GPIO_EXTI_Callback+0x160>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	701a      	strb	r2, [r3, #0]
			PowerButtonLongPress = false;
 80004f6:	4b25      	ldr	r3, [pc, #148]	; (800058c <HAL_GPIO_EXTI_Callback+0x164>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	701a      	strb	r2, [r3, #0]
		}


	}

}
 80004fc:	e033      	b.n	8000566 <HAL_GPIO_EXTI_Callback+0x13e>
		else if(HAL_GPIO_ReadPin(Power_Button_GPIO_Port, Power_Button_Pin) == GPIO_PIN_SET &&
 80004fe:	2180      	movs	r1, #128	; 0x80
 8000500:	481d      	ldr	r0, [pc, #116]	; (8000578 <HAL_GPIO_EXTI_Callback+0x150>)
 8000502:	f001 fb6b 	bl	8001bdc <HAL_GPIO_ReadPin>
 8000506:	4603      	mov	r3, r0
 8000508:	2b01      	cmp	r3, #1
 800050a:	d12c      	bne.n	8000566 <HAL_GPIO_EXTI_Callback+0x13e>
 800050c:	4b1b      	ldr	r3, [pc, #108]	; (800057c <HAL_GPIO_EXTI_Callback+0x154>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d028      	beq.n	8000566 <HAL_GPIO_EXTI_Callback+0x13e>
				PowerButtonDebounced && IsPressPeriodStart && PowerButtonShortPress &&
 8000514:	4b1a      	ldr	r3, [pc, #104]	; (8000580 <HAL_GPIO_EXTI_Callback+0x158>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d024      	beq.n	8000566 <HAL_GPIO_EXTI_Callback+0x13e>
 800051c:	4b1a      	ldr	r3, [pc, #104]	; (8000588 <HAL_GPIO_EXTI_Callback+0x160>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d020      	beq.n	8000566 <HAL_GPIO_EXTI_Callback+0x13e>
 8000524:	4b19      	ldr	r3, [pc, #100]	; (800058c <HAL_GPIO_EXTI_Callback+0x164>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d01c      	beq.n	8000566 <HAL_GPIO_EXTI_Callback+0x13e>
				PowerButtonLongPress && SystemPowerState)
 800052c:	4b18      	ldr	r3, [pc, #96]	; (8000590 <HAL_GPIO_EXTI_Callback+0x168>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d018      	beq.n	8000566 <HAL_GPIO_EXTI_Callback+0x13e>
			HAL_TIM_Base_Stop_IT(&htim15);
 8000534:	4813      	ldr	r0, [pc, #76]	; (8000584 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000536:	f003 fb97 	bl	8003c68 <HAL_TIM_Base_Stop_IT>
			__HAL_TIM_SET_AUTORELOAD(&htim15, BUTTON_DEBOUNCE_MS);	//Reset power button debounce period
 800053a:	4b12      	ldr	r3, [pc, #72]	; (8000584 <HAL_GPIO_EXTI_Callback+0x15c>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	2264      	movs	r2, #100	; 0x64
 8000540:	62da      	str	r2, [r3, #44]	; 0x2c
 8000542:	4b10      	ldr	r3, [pc, #64]	; (8000584 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000544:	2264      	movs	r2, #100	; 0x64
 8000546:	60da      	str	r2, [r3, #12]
			SystemPowerState = false;
 8000548:	4b11      	ldr	r3, [pc, #68]	; (8000590 <HAL_GPIO_EXTI_Callback+0x168>)
 800054a:	2200      	movs	r2, #0
 800054c:	701a      	strb	r2, [r3, #0]
			PowerButtonDebounced = true;
 800054e:	4b0b      	ldr	r3, [pc, #44]	; (800057c <HAL_GPIO_EXTI_Callback+0x154>)
 8000550:	2201      	movs	r2, #1
 8000552:	701a      	strb	r2, [r3, #0]
			IsPressPeriodStart = false;
 8000554:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <HAL_GPIO_EXTI_Callback+0x158>)
 8000556:	2200      	movs	r2, #0
 8000558:	701a      	strb	r2, [r3, #0]
			PowerButtonShortPress = false;
 800055a:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <HAL_GPIO_EXTI_Callback+0x160>)
 800055c:	2200      	movs	r2, #0
 800055e:	701a      	strb	r2, [r3, #0]
			PowerButtonLongPress = false;
 8000560:	4b0a      	ldr	r3, [pc, #40]	; (800058c <HAL_GPIO_EXTI_Callback+0x164>)
 8000562:	2200      	movs	r2, #0
 8000564:	701a      	strb	r2, [r3, #0]
}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000119 	.word	0x20000119
 8000574:	2000011a 	.word	0x2000011a
 8000578:	48000800 	.word	0x48000800
 800057c:	20000000 	.word	0x20000000
 8000580:	2000011b 	.word	0x2000011b
 8000584:	200000cc 	.word	0x200000cc
 8000588:	2000011c 	.word	0x2000011c
 800058c:	2000011d 	.word	0x2000011d
 8000590:	2000011f 	.word	0x2000011f

08000594 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
	if(HAL_GPIO_ReadPin(Power_Button_GPIO_Port, Power_Button_Pin) == GPIO_PIN_RESET && !PowerButtonDebounced){
 800059c:	2180      	movs	r1, #128	; 0x80
 800059e:	4864      	ldr	r0, [pc, #400]	; (8000730 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80005a0:	f001 fb1c 	bl	8001bdc <HAL_GPIO_ReadPin>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d10c      	bne.n	80005c4 <HAL_TIM_PeriodElapsedCallback+0x30>
 80005aa:	4b62      	ldr	r3, [pc, #392]	; (8000734 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	f083 0301 	eor.w	r3, r3, #1
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d005      	beq.n	80005c4 <HAL_TIM_PeriodElapsedCallback+0x30>
		HAL_TIM_Base_Stop_IT(&htim15);
 80005b8:	485f      	ldr	r0, [pc, #380]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80005ba:	f003 fb55 	bl	8003c68 <HAL_TIM_Base_Stop_IT>
		PowerButtonDebounced = true;
 80005be:	4b5d      	ldr	r3, [pc, #372]	; (8000734 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	701a      	strb	r2, [r3, #0]

	}
	if(HAL_GPIO_ReadPin(Power_Button_GPIO_Port, Power_Button_Pin) == GPIO_PIN_RESET && !IsPressPeriodStart){
 80005c4:	2180      	movs	r1, #128	; 0x80
 80005c6:	485a      	ldr	r0, [pc, #360]	; (8000730 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80005c8:	f001 fb08 	bl	8001bdc <HAL_GPIO_ReadPin>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d119      	bne.n	8000606 <HAL_TIM_PeriodElapsedCallback+0x72>
 80005d2:	4b5a      	ldr	r3, [pc, #360]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	f083 0301 	eor.w	r3, r3, #1
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d012      	beq.n	8000606 <HAL_TIM_PeriodElapsedCallback+0x72>

		__HAL_TIM_SET_AUTORELOAD(&htim15, BUTTON_SHORTPRESS_PERIOD);
 80005e0:	4b55      	ldr	r3, [pc, #340]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80005ea:	4b53      	ldr	r3, [pc, #332]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80005ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005f0:	60da      	str	r2, [r3, #12]
		HAL_TIM_Base_Start_IT(&htim15);
 80005f2:	4851      	ldr	r0, [pc, #324]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80005f4:	f003 fae4 	bl	8003bc0 <HAL_TIM_Base_Start_IT>
		IsPressPeriodStart = true;
 80005f8:	4b50      	ldr	r3, [pc, #320]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
		PowerButtonShortPress = false;
 80005fe:	4b50      	ldr	r3, [pc, #320]	; (8000740 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
 8000604:	e06b      	b.n	80006de <HAL_TIM_PeriodElapsedCallback+0x14a>
	}
	else if(HAL_GPIO_ReadPin(Power_Button_GPIO_Port, Power_Button_Pin) == GPIO_PIN_RESET && !PowerButtonShortPress){
 8000606:	2180      	movs	r1, #128	; 0x80
 8000608:	4849      	ldr	r0, [pc, #292]	; (8000730 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800060a:	f001 fae7 	bl	8001bdc <HAL_GPIO_ReadPin>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d11c      	bne.n	800064e <HAL_TIM_PeriodElapsedCallback+0xba>
 8000614:	4b4a      	ldr	r3, [pc, #296]	; (8000740 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	f083 0301 	eor.w	r3, r3, #1
 800061c:	b2db      	uxtb	r3, r3
 800061e:	2b00      	cmp	r3, #0
 8000620:	d015      	beq.n	800064e <HAL_TIM_PeriodElapsedCallback+0xba>
		HAL_TIM_Base_Stop_IT(&htim15);
 8000622:	4845      	ldr	r0, [pc, #276]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000624:	f003 fb20 	bl	8003c68 <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_SET_AUTORELOAD(&htim15, BUTTON_LONGPRESS_PERIOD);
 8000628:	4b43      	ldr	r3, [pc, #268]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000630:	62da      	str	r2, [r3, #44]	; 0x2c
 8000632:	4b41      	ldr	r3, [pc, #260]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000634:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000638:	60da      	str	r2, [r3, #12]
		HAL_TIM_Base_Start_IT(&htim15);
 800063a:	483f      	ldr	r0, [pc, #252]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800063c:	f003 fac0 	bl	8003bc0 <HAL_TIM_Base_Start_IT>
		PowerButtonShortPress = true;
 8000640:	4b3f      	ldr	r3, [pc, #252]	; (8000740 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000642:	2201      	movs	r2, #1
 8000644:	701a      	strb	r2, [r3, #0]
		PowerButtonLongPress = false;
 8000646:	4b3f      	ldr	r3, [pc, #252]	; (8000744 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000648:	2200      	movs	r2, #0
 800064a:	701a      	strb	r2, [r3, #0]
 800064c:	e047      	b.n	80006de <HAL_TIM_PeriodElapsedCallback+0x14a>
	}
	else if(HAL_GPIO_ReadPin(Power_Button_GPIO_Port, Power_Button_Pin) == GPIO_PIN_RESET && !PowerButtonLongPress){
 800064e:	2180      	movs	r1, #128	; 0x80
 8000650:	4837      	ldr	r0, [pc, #220]	; (8000730 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000652:	f001 fac3 	bl	8001bdc <HAL_GPIO_ReadPin>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d11c      	bne.n	8000696 <HAL_TIM_PeriodElapsedCallback+0x102>
 800065c:	4b39      	ldr	r3, [pc, #228]	; (8000744 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	f083 0301 	eor.w	r3, r3, #1
 8000664:	b2db      	uxtb	r3, r3
 8000666:	2b00      	cmp	r3, #0
 8000668:	d015      	beq.n	8000696 <HAL_TIM_PeriodElapsedCallback+0x102>
		HAL_TIM_Base_Stop_IT(&htim15);
 800066a:	4833      	ldr	r0, [pc, #204]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800066c:	f003 fafc 	bl	8003c68 <HAL_TIM_Base_Stop_IT>
		PowerButtonLongPress = true;
 8000670:	4b34      	ldr	r3, [pc, #208]	; (8000744 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000672:	2201      	movs	r2, #1
 8000674:	701a      	strb	r2, [r3, #0]
		PowerButtonUnintentionalPress = false;
 8000676:	4b34      	ldr	r3, [pc, #208]	; (8000748 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_AUTORELOAD(&htim15, BUTTON_UNINTENTIONAL_PERIOD);
 800067c:	4b2e      	ldr	r3, [pc, #184]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000684:	62da      	str	r2, [r3, #44]	; 0x2c
 8000686:	4b2c      	ldr	r3, [pc, #176]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000688:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800068c:	60da      	str	r2, [r3, #12]
		HAL_TIM_Base_Start_IT(&htim15);
 800068e:	482a      	ldr	r0, [pc, #168]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000690:	f003 fa96 	bl	8003bc0 <HAL_TIM_Base_Start_IT>
 8000694:	e023      	b.n	80006de <HAL_TIM_PeriodElapsedCallback+0x14a>
	}
	else if(HAL_GPIO_ReadPin(Power_Button_GPIO_Port, Power_Button_Pin) == GPIO_PIN_RESET && !PowerButtonUnintentionalPress)
 8000696:	2180      	movs	r1, #128	; 0x80
 8000698:	4825      	ldr	r0, [pc, #148]	; (8000730 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800069a:	f001 fa9f 	bl	8001bdc <HAL_GPIO_ReadPin>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d11c      	bne.n	80006de <HAL_TIM_PeriodElapsedCallback+0x14a>
 80006a4:	4b28      	ldr	r3, [pc, #160]	; (8000748 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	f083 0301 	eor.w	r3, r3, #1
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d015      	beq.n	80006de <HAL_TIM_PeriodElapsedCallback+0x14a>
	{
		//unintentional button press so clear everything for next press
		HAL_TIM_Base_Stop_IT(&htim15);
 80006b2:	4821      	ldr	r0, [pc, #132]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80006b4:	f003 fad8 	bl	8003c68 <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_SET_AUTORELOAD(&htim15, BUTTON_DEBOUNCE_MS);	//Reset power button debounce period
 80006b8:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2264      	movs	r2, #100	; 0x64
 80006be:	62da      	str	r2, [r3, #44]	; 0x2c
 80006c0:	4b1d      	ldr	r3, [pc, #116]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80006c2:	2264      	movs	r2, #100	; 0x64
 80006c4:	60da      	str	r2, [r3, #12]
		PowerButtonDebounced = true;
 80006c6:	4b1b      	ldr	r3, [pc, #108]	; (8000734 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	701a      	strb	r2, [r3, #0]
		IsPressPeriodStart = false;
 80006cc:	4b1b      	ldr	r3, [pc, #108]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	701a      	strb	r2, [r3, #0]
		PowerButtonShortPress = false;
 80006d2:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	701a      	strb	r2, [r3, #0]
		PowerButtonLongPress = false;
 80006d8:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80006da:	2200      	movs	r2, #0
 80006dc:	701a      	strb	r2, [r3, #0]
	}

	if(HAL_GPIO_ReadPin(Power_Button_GPIO_Port, Power_Button_Pin) == GPIO_PIN_SET && IsPressPeriodStart)
 80006de:	2180      	movs	r1, #128	; 0x80
 80006e0:	4813      	ldr	r0, [pc, #76]	; (8000730 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80006e2:	f001 fa7b 	bl	8001bdc <HAL_GPIO_ReadPin>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d11c      	bne.n	8000726 <HAL_TIM_PeriodElapsedCallback+0x192>
 80006ec:	4b13      	ldr	r3, [pc, #76]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d018      	beq.n	8000726 <HAL_TIM_PeriodElapsedCallback+0x192>
	{
		//Cancelled press so clear everything for next press
		HAL_TIM_Base_Stop_IT(&htim15);
 80006f4:	4810      	ldr	r0, [pc, #64]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80006f6:	f003 fab7 	bl	8003c68 <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_SET_AUTORELOAD(&htim15, BUTTON_DEBOUNCE_MS);	//Reset power button debounce period
 80006fa:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	2264      	movs	r2, #100	; 0x64
 8000700:	62da      	str	r2, [r3, #44]	; 0x2c
 8000702:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000704:	2264      	movs	r2, #100	; 0x64
 8000706:	60da      	str	r2, [r3, #12]
		PowerButtonDebounced = true;
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800070a:	2201      	movs	r2, #1
 800070c:	701a      	strb	r2, [r3, #0]
		IsPressPeriodStart = false;
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
		PowerButtonShortPress = false;
 8000714:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]
		PowerButtonLongPress = false;
 800071a:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800071c:	2200      	movs	r2, #0
 800071e:	701a      	strb	r2, [r3, #0]
		PowerButtonUnintentionalPress = false;
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000722:	2200      	movs	r2, #0
 8000724:	701a      	strb	r2, [r3, #0]
	}




}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	48000800 	.word	0x48000800
 8000734:	20000000 	.word	0x20000000
 8000738:	200000cc 	.word	0x200000cc
 800073c:	2000011b 	.word	0x2000011b
 8000740:	2000011c 	.word	0x2000011c
 8000744:	2000011d 	.word	0x2000011d
 8000748:	2000011e 	.word	0x2000011e

0800074c <MAX17048_Init>:
#if (USINGMAX17048)

uint8_t CurrentBatteryPercentage;

	bool MAX17048_Init()
	{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
		bool ok = true;
 8000752:	2301      	movs	r3, #1
 8000754:	71fb      	strb	r3, [r7, #7]
		if (ok) ok = max17048_is_present(&hi2c1);
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d004      	beq.n	8000766 <MAX17048_Init+0x1a>
 800075c:	4825      	ldr	r0, [pc, #148]	; (80007f4 <MAX17048_Init+0xa8>)
 800075e:	f000 fc8c 	bl	800107a <max17048_is_present>
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
		if (ok) ok = max17048_set_undervolted_voltage(&hi2c1, Battery_UnderVoltage);
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d006      	beq.n	800077a <MAX17048_Init+0x2e>
 800076c:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8000770:	4820      	ldr	r0, [pc, #128]	; (80007f4 <MAX17048_Init+0xa8>)
 8000772:	f000 fce7 	bl	8001144 <max17048_set_undervolted_voltage>
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
		if (ok) ok = max17048_set_overvolted_voltage(&hi2c1, Battery_OverVoltage);
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d006      	beq.n	800078e <MAX17048_Init+0x42>
 8000780:	f241 0168 	movw	r1, #4200	; 0x1068
 8000784:	481b      	ldr	r0, [pc, #108]	; (80007f4 <MAX17048_Init+0xa8>)
 8000786:	f000 fcfd 	bl	8001184 <max17048_set_overvolted_voltage>
 800078a:	4603      	mov	r3, r0
 800078c:	71fb      	strb	r3, [r7, #7]
		if (ok) ok = max17048_set_reset_voltage(&hi2c1, Battery_ResetVoltage);
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d006      	beq.n	80007a2 <MAX17048_Init+0x56>
 8000794:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8000798:	4816      	ldr	r0, [pc, #88]	; (80007f4 <MAX17048_Init+0xa8>)
 800079a:	f000 fd0f 	bl	80011bc <max17048_set_reset_voltage>
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
		if (ok) ok = max17048_set_bat_low_soc(&hi2c1, Battery_LowSOCAlert);
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d005      	beq.n	80007b4 <MAX17048_Init+0x68>
 80007a8:	211e      	movs	r1, #30
 80007aa:	4812      	ldr	r0, [pc, #72]	; (80007f4 <MAX17048_Init+0xa8>)
 80007ac:	f000 fca5 	bl	80010fa <max17048_set_bat_low_soc>
 80007b0:	4603      	mov	r3, r0
 80007b2:	71fb      	strb	r3, [r7, #7]
		if (ok) ok = max17048_set_voltage_reset_alert(&hi2c1, false);
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d005      	beq.n	80007c6 <MAX17048_Init+0x7a>
 80007ba:	2100      	movs	r1, #0
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MAX17048_Init+0xa8>)
 80007be:	f000 fd36 	bl	800122e <max17048_set_voltage_reset_alert>
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
		if (ok) ok = max17048_set_soc_change_alert(&hi2c1, false);
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d005      	beq.n	80007d8 <MAX17048_Init+0x8c>
 80007cc:	2100      	movs	r1, #0
 80007ce:	4809      	ldr	r0, [pc, #36]	; (80007f4 <MAX17048_Init+0xa8>)
 80007d0:	f000 fd16 	bl	8001200 <max17048_set_soc_change_alert>
 80007d4:	4603      	mov	r3, r0
 80007d6:	71fb      	strb	r3, [r7, #7]
		if (ok) ok = max17048_clear_alerts(&hi2c1);
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d004      	beq.n	80007e8 <MAX17048_Init+0x9c>
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MAX17048_Init+0xa8>)
 80007e0:	f000 fd3d 	bl	800125e <max17048_clear_alerts>
 80007e4:	4603      	mov	r3, r0
 80007e6:	71fb      	strb	r3, [r7, #7]
		return ok;
 80007e8:	79fb      	ldrb	r3, [r7, #7]
	}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2000002c 	.word	0x2000002c

080007f8 <Remap>:
#endif

static int Remap (float value, float from1, float to1, float from2, float to2) {
 80007f8:	b480      	push	{r7}
 80007fa:	b087      	sub	sp, #28
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	ed87 0a05 	vstr	s0, [r7, #20]
 8000802:	edc7 0a04 	vstr	s1, [r7, #16]
 8000806:	ed87 1a03 	vstr	s2, [r7, #12]
 800080a:	edc7 1a02 	vstr	s3, [r7, #8]
 800080e:	ed87 2a01 	vstr	s4, [r7, #4]
	return ((value - from1) / (to1 - from1) * (to2 - from2)) + from2;
 8000812:	ed97 7a05 	vldr	s14, [r7, #20]
 8000816:	edd7 7a04 	vldr	s15, [r7, #16]
 800081a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800081e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000822:	edd7 7a04 	vldr	s15, [r7, #16]
 8000826:	ee77 7a67 	vsub.f32	s15, s14, s15
 800082a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800082e:	edd7 6a01 	vldr	s13, [r7, #4]
 8000832:	edd7 7a02 	vldr	s15, [r7, #8]
 8000836:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800083a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800083e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000842:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000846:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800084a:	ee17 3a90 	vmov	r3, s15
}
 800084e:	4618      	mov	r0, r3
 8000850:	371c      	adds	r7, #28
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
	...

0800085c <Set_RGB>:

void Set_RGB(uint8_t Red,uint8_t Green,uint8_t Blue) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
 8000866:	460b      	mov	r3, r1
 8000868:	71bb      	strb	r3, [r7, #6]
 800086a:	4613      	mov	r3, r2
 800086c:	717b      	strb	r3, [r7, #5]
	//invert 0-100 -> 100-0 in case LED is common Anode and grounded to STM's GPIO's
	Red = Remap(Red, 0, 100, 100, 0);
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	ee07 3a90 	vmov	s15, r3
 8000874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000878:	ed9f 2a21 	vldr	s4, [pc, #132]	; 8000900 <Set_RGB+0xa4>
 800087c:	eddf 1a21 	vldr	s3, [pc, #132]	; 8000904 <Set_RGB+0xa8>
 8000880:	ed9f 1a20 	vldr	s2, [pc, #128]	; 8000904 <Set_RGB+0xa8>
 8000884:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8000900 <Set_RGB+0xa4>
 8000888:	eeb0 0a67 	vmov.f32	s0, s15
 800088c:	f7ff ffb4 	bl	80007f8 <Remap>
 8000890:	4603      	mov	r3, r0
 8000892:	71fb      	strb	r3, [r7, #7]
	Green = Remap(Green, 0, 100, 100, 0);
 8000894:	79bb      	ldrb	r3, [r7, #6]
 8000896:	ee07 3a90 	vmov	s15, r3
 800089a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800089e:	ed9f 2a18 	vldr	s4, [pc, #96]	; 8000900 <Set_RGB+0xa4>
 80008a2:	eddf 1a18 	vldr	s3, [pc, #96]	; 8000904 <Set_RGB+0xa8>
 80008a6:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8000904 <Set_RGB+0xa8>
 80008aa:	eddf 0a15 	vldr	s1, [pc, #84]	; 8000900 <Set_RGB+0xa4>
 80008ae:	eeb0 0a67 	vmov.f32	s0, s15
 80008b2:	f7ff ffa1 	bl	80007f8 <Remap>
 80008b6:	4603      	mov	r3, r0
 80008b8:	71bb      	strb	r3, [r7, #6]
	Blue = Remap(Blue, 0, 100, 100, 0);
 80008ba:	797b      	ldrb	r3, [r7, #5]
 80008bc:	ee07 3a90 	vmov	s15, r3
 80008c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008c4:	ed9f 2a0e 	vldr	s4, [pc, #56]	; 8000900 <Set_RGB+0xa4>
 80008c8:	eddf 1a0e 	vldr	s3, [pc, #56]	; 8000904 <Set_RGB+0xa8>
 80008cc:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 8000904 <Set_RGB+0xa8>
 80008d0:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8000900 <Set_RGB+0xa4>
 80008d4:	eeb0 0a67 	vmov.f32	s0, s15
 80008d8:	f7ff ff8e 	bl	80007f8 <Remap>
 80008dc:	4603      	mov	r3, r0
 80008de:	717b      	strb	r3, [r7, #5]
	TIM2->CCR1 = Red;
 80008e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	6353      	str	r3, [r2, #52]	; 0x34
	TIM2->CCR2 = Green;
 80008e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008ec:	79bb      	ldrb	r3, [r7, #6]
 80008ee:	6393      	str	r3, [r2, #56]	; 0x38
	TIM2->CCR3 = Blue;
 80008f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008f4:	797b      	ldrb	r3, [r7, #5]
 80008f6:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	00000000 	.word	0x00000000
 8000904:	42c80000 	.word	0x42c80000

08000908 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000908:	b598      	push	{r3, r4, r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800090c:	f000 fe31 	bl	8001572 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000910:	f000 f924 	bl	8000b5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000914:	f000 fa84 	bl	8000e20 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000918:	f000 f966 	bl	8000be8 <MX_I2C1_Init>
  MX_TIM2_Init();
 800091c:	f000 f9a2 	bl	8000c64 <MX_TIM2_Init>
  MX_TIM15_Init();
 8000920:	f000 fa2c 	bl	8000d7c <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  __HAL_TIM_SET_AUTORELOAD(&htim15, BUTTON_DEBOUNCE_MS);	//Set power button debounce period
 8000924:	4b81      	ldr	r3, [pc, #516]	; (8000b2c <main+0x224>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2264      	movs	r2, #100	; 0x64
 800092a:	62da      	str	r2, [r3, #44]	; 0x2c
 800092c:	4b7f      	ldr	r3, [pc, #508]	; (8000b2c <main+0x224>)
 800092e:	2264      	movs	r2, #100	; 0x64
 8000930:	60da      	str	r2, [r3, #12]
  HAL_Delay(70);	// For stability
 8000932:	2046      	movs	r0, #70	; 0x46
 8000934:	f000 fe92 	bl	800165c <HAL_Delay>

#if (USINGMAX17048)
  MAX17048_Init();
 8000938:	f7ff ff08 	bl	800074c <MAX17048_Init>
#endif

  if(!BQ_Init())
 800093c:	f7ff fc8c 	bl	8000258 <BQ_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	f083 0301 	eor.w	r3, r3, #1
 8000946:	b2db      	uxtb	r3, r3
 8000948:	2b00      	cmp	r3, #0
 800094a:	d01c      	beq.n	8000986 <main+0x7e>
  {
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800094c:	2100      	movs	r1, #0
 800094e:	4878      	ldr	r0, [pc, #480]	; (8000b30 <main+0x228>)
 8000950:	f003 fa1a 	bl	8003d88 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000954:	2104      	movs	r1, #4
 8000956:	4876      	ldr	r0, [pc, #472]	; (8000b30 <main+0x228>)
 8000958:	f003 fa16 	bl	8003d88 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800095c:	2108      	movs	r1, #8
 800095e:	4874      	ldr	r0, [pc, #464]	; (8000b30 <main+0x228>)
 8000960:	f003 fa12 	bl	8003d88 <HAL_TIM_PWM_Start>

	  while(1)		//if BQ not present, then warn using that it's not finding it by flashing red
	  {
		  Set_RGB(100, 0, 0);
 8000964:	2200      	movs	r2, #0
 8000966:	2100      	movs	r1, #0
 8000968:	2064      	movs	r0, #100	; 0x64
 800096a:	f7ff ff77 	bl	800085c <Set_RGB>
		  HAL_Delay(250);
 800096e:	20fa      	movs	r0, #250	; 0xfa
 8000970:	f000 fe74 	bl	800165c <HAL_Delay>
		  Set_RGB(0, 0, 0);
 8000974:	2200      	movs	r2, #0
 8000976:	2100      	movs	r1, #0
 8000978:	2000      	movs	r0, #0
 800097a:	f7ff ff6f 	bl	800085c <Set_RGB>
		  HAL_Delay(250);
 800097e:	20fa      	movs	r0, #250	; 0xfa
 8000980:	f000 fe6c 	bl	800165c <HAL_Delay>
		  Set_RGB(100, 0, 0);
 8000984:	e7ee      	b.n	8000964 <main+0x5c>
	  }

  }
  HAL_Delay(70);	// For stability
 8000986:	2046      	movs	r0, #70	; 0x46
 8000988:	f000 fe68 	bl	800165c <HAL_Delay>

  max17048_get_soc(&hi2c1, &CurrentBatteryPercentage);	//Get current Battery Percentage
 800098c:	4969      	ldr	r1, [pc, #420]	; (8000b34 <main+0x22c>)
 800098e:	486a      	ldr	r0, [pc, #424]	; (8000b38 <main+0x230>)
 8000990:	f000 fb94 	bl	80010bc <max17048_get_soc>
  Set_RGB( 100, 100, 100 );
 8000994:	2264      	movs	r2, #100	; 0x64
 8000996:	2164      	movs	r1, #100	; 0x64
 8000998:	2064      	movs	r0, #100	; 0x64
 800099a:	f7ff ff5f 	bl	800085c <Set_RGB>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(BQ_FLAG)
 800099e:	4b67      	ldr	r3, [pc, #412]	; (8000b3c <main+0x234>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d002      	beq.n	80009ac <main+0xa4>
	  {
		  BQ_FLAG = false;	//clear flag
 80009a6:	4b65      	ldr	r3, [pc, #404]	; (8000b3c <main+0x234>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]
		   * something with the BQ INT
		   */
	  }

#if (USINGMAX17048)
	  if(MAX_FLAG)
 80009ac:	4b64      	ldr	r3, [pc, #400]	; (8000b40 <main+0x238>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d002      	beq.n	80009ba <main+0xb2>
	  {
		  MAX_FLAG = false;	//clear flag
 80009b4:	4b62      	ldr	r3, [pc, #392]	; (8000b40 <main+0x238>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	701a      	strb	r2, [r3, #0]
	  }

#endif

	  if(SystemPowerState)
 80009ba:	4b62      	ldr	r3, [pc, #392]	; (8000b44 <main+0x23c>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d07d      	beq.n	8000abe <main+0x1b6>
	  {
		  if(!InitialSystemBoot)	//Start a boot sequence once
 80009c2:	4b61      	ldr	r3, [pc, #388]	; (8000b48 <main+0x240>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	f083 0301 	eor.w	r3, r3, #1
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d026      	beq.n	8000a1e <main+0x116>
		  {
			  InitialSystemBoot = true;	//Do it once
 80009d0:	4b5d      	ldr	r3, [pc, #372]	; (8000b48 <main+0x240>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	701a      	strb	r2, [r3, #0]
			  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80009d6:	2100      	movs	r1, #0
 80009d8:	4855      	ldr	r0, [pc, #340]	; (8000b30 <main+0x228>)
 80009da:	f003 f9d5 	bl	8003d88 <HAL_TIM_PWM_Start>
			  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80009de:	2104      	movs	r1, #4
 80009e0:	4853      	ldr	r0, [pc, #332]	; (8000b30 <main+0x228>)
 80009e2:	f003 f9d1 	bl	8003d88 <HAL_TIM_PWM_Start>
			  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80009e6:	2108      	movs	r1, #8
 80009e8:	4851      	ldr	r0, [pc, #324]	; (8000b30 <main+0x228>)
 80009ea:	f003 f9cd 	bl	8003d88 <HAL_TIM_PWM_Start>
			  Set_RGB( 100, 0, 0 );
 80009ee:	2200      	movs	r2, #0
 80009f0:	2100      	movs	r1, #0
 80009f2:	2064      	movs	r0, #100	; 0x64
 80009f4:	f7ff ff32 	bl	800085c <Set_RGB>
			  HAL_Delay(100);
 80009f8:	2064      	movs	r0, #100	; 0x64
 80009fa:	f000 fe2f 	bl	800165c <HAL_Delay>
			  Set_RGB(0, 100, 0);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2164      	movs	r1, #100	; 0x64
 8000a02:	2000      	movs	r0, #0
 8000a04:	f7ff ff2a 	bl	800085c <Set_RGB>
			  HAL_Delay(100);
 8000a08:	2064      	movs	r0, #100	; 0x64
 8000a0a:	f000 fe27 	bl	800165c <HAL_Delay>
			  Set_RGB(0, 0, 100);
 8000a0e:	2264      	movs	r2, #100	; 0x64
 8000a10:	2100      	movs	r1, #0
 8000a12:	2000      	movs	r0, #0
 8000a14:	f7ff ff22 	bl	800085c <Set_RGB>
			  HAL_Delay(200);
 8000a18:	20c8      	movs	r0, #200	; 0xc8
 8000a1a:	f000 fe1f 	bl	800165c <HAL_Delay>
		  }
		  /*
		   * While system is running,the code below will always run
		   */

		  if(IsSystemCharging)
 8000a1e:	4b4b      	ldr	r3, [pc, #300]	; (8000b4c <main+0x244>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d01d      	beq.n	8000a62 <main+0x15a>
		  {
			  if(CurrentBatteryPercentage < 70)
 8000a26:	4b43      	ldr	r3, [pc, #268]	; (8000b34 <main+0x22c>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b45      	cmp	r3, #69	; 0x45
 8000a2c:	d805      	bhi.n	8000a3a <main+0x132>
			  {
				  Set_RGB(100, 64, 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2140      	movs	r1, #64	; 0x40
 8000a32:	2064      	movs	r0, #100	; 0x64
 8000a34:	f7ff ff12 	bl	800085c <Set_RGB>
 8000a38:	e7b1      	b.n	800099e <main+0x96>
			  }else if(CurrentBatteryPercentage >= 70 && CurrentBatteryPercentage < 90)
 8000a3a:	4b3e      	ldr	r3, [pc, #248]	; (8000b34 <main+0x22c>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	2b45      	cmp	r3, #69	; 0x45
 8000a40:	d909      	bls.n	8000a56 <main+0x14e>
 8000a42:	4b3c      	ldr	r3, [pc, #240]	; (8000b34 <main+0x22c>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b59      	cmp	r3, #89	; 0x59
 8000a48:	d805      	bhi.n	8000a56 <main+0x14e>
			  {
				  Set_RGB(0, 100, 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2164      	movs	r1, #100	; 0x64
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f7ff ff04 	bl	800085c <Set_RGB>
 8000a54:	e069      	b.n	8000b2a <main+0x222>
			  }else
			  {
				  Set_RGB(0, 0, 100);
 8000a56:	2264      	movs	r2, #100	; 0x64
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f7ff fefe 	bl	800085c <Set_RGB>
 8000a60:	e79d      	b.n	800099e <main+0x96>
			  }
		  }
		  else
		  {
			  Set_RGB(Remap(CurrentBatteryPercentage, 0, 100, 100, 0), 0, Remap(CurrentBatteryPercentage, 0, 100, 40, 100));
 8000a62:	4b34      	ldr	r3, [pc, #208]	; (8000b34 <main+0x22c>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	ee07 3a90 	vmov	s15, r3
 8000a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a6e:	ed9f 2a38 	vldr	s4, [pc, #224]	; 8000b50 <main+0x248>
 8000a72:	eddf 1a38 	vldr	s3, [pc, #224]	; 8000b54 <main+0x24c>
 8000a76:	ed9f 1a37 	vldr	s2, [pc, #220]	; 8000b54 <main+0x24c>
 8000a7a:	eddf 0a35 	vldr	s1, [pc, #212]	; 8000b50 <main+0x248>
 8000a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8000a82:	f7ff feb9 	bl	80007f8 <Remap>
 8000a86:	4603      	mov	r3, r0
 8000a88:	b2dc      	uxtb	r4, r3
 8000a8a:	4b2a      	ldr	r3, [pc, #168]	; (8000b34 <main+0x22c>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	ee07 3a90 	vmov	s15, r3
 8000a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a96:	ed9f 2a2f 	vldr	s4, [pc, #188]	; 8000b54 <main+0x24c>
 8000a9a:	eddf 1a2f 	vldr	s3, [pc, #188]	; 8000b58 <main+0x250>
 8000a9e:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 8000b54 <main+0x24c>
 8000aa2:	eddf 0a2b 	vldr	s1, [pc, #172]	; 8000b50 <main+0x248>
 8000aa6:	eeb0 0a67 	vmov.f32	s0, s15
 8000aaa:	f7ff fea5 	bl	80007f8 <Remap>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4620      	mov	r0, r4
 8000ab8:	f7ff fed0 	bl	800085c <Set_RGB>
 8000abc:	e76f      	b.n	800099e <main+0x96>
		  }

	  }else if(!SystemPowerState)
 8000abe:	4b21      	ldr	r3, [pc, #132]	; (8000b44 <main+0x23c>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	f083 0301 	eor.w	r3, r3, #1
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	f43f af68 	beq.w	800099e <main+0x96>
	  {
		 if(InitialSystemBoot)	//Start shutdown sequence
 8000ace:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <main+0x240>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	f43f af63 	beq.w	800099e <main+0x96>
		 {
			 InitialSystemBoot = false;
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <main+0x240>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	701a      	strb	r2, [r3, #0]
			  Set_RGB( 0, 100, 0 );
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2164      	movs	r1, #100	; 0x64
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f7ff feba 	bl	800085c <Set_RGB>
			  HAL_Delay(200);
 8000ae8:	20c8      	movs	r0, #200	; 0xc8
 8000aea:	f000 fdb7 	bl	800165c <HAL_Delay>
			  Set_RGB(0, 0, 100);
 8000aee:	2264      	movs	r2, #100	; 0x64
 8000af0:	2100      	movs	r1, #0
 8000af2:	2000      	movs	r0, #0
 8000af4:	f7ff feb2 	bl	800085c <Set_RGB>
			  HAL_Delay(200);
 8000af8:	20c8      	movs	r0, #200	; 0xc8
 8000afa:	f000 fdaf 	bl	800165c <HAL_Delay>
			  Set_RGB( 0, 100, 0 );
 8000afe:	2200      	movs	r2, #0
 8000b00:	2164      	movs	r1, #100	; 0x64
 8000b02:	2000      	movs	r0, #0
 8000b04:	f7ff feaa 	bl	800085c <Set_RGB>
			  HAL_Delay(200);
 8000b08:	20c8      	movs	r0, #200	; 0xc8
 8000b0a:	f000 fda7 	bl	800165c <HAL_Delay>
			  Set_RGB(0, 0, 100);
 8000b0e:	2264      	movs	r2, #100	; 0x64
 8000b10:	2100      	movs	r1, #0
 8000b12:	2000      	movs	r0, #0
 8000b14:	f7ff fea2 	bl	800085c <Set_RGB>
			  HAL_Delay(500);
 8000b18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b1c:	f000 fd9e 	bl	800165c <HAL_Delay>
			  Set_RGB(0, 0, 0);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2100      	movs	r1, #0
 8000b24:	2000      	movs	r0, #0
 8000b26:	f7ff fe99 	bl	800085c <Set_RGB>
	  if(BQ_FLAG)
 8000b2a:	e738      	b.n	800099e <main+0x96>
 8000b2c:	200000cc 	.word	0x200000cc
 8000b30:	20000080 	.word	0x20000080
 8000b34:	20000122 	.word	0x20000122
 8000b38:	2000002c 	.word	0x2000002c
 8000b3c:	20000119 	.word	0x20000119
 8000b40:	2000011a 	.word	0x2000011a
 8000b44:	2000011f 	.word	0x2000011f
 8000b48:	20000120 	.word	0x20000120
 8000b4c:	20000121 	.word	0x20000121
 8000b50:	00000000 	.word	0x00000000
 8000b54:	42c80000 	.word	0x42c80000
 8000b58:	42200000 	.word	0x42200000

08000b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b096      	sub	sp, #88	; 0x58
 8000b60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	2244      	movs	r2, #68	; 0x44
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f004 f95a 	bl	8004e24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b70:	463b      	mov	r3, r7
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
 8000b7c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b7e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b82:	f001 fe65 	bl	8002850 <HAL_PWREx_ControlVoltageScaling>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b8c:	f000 f9b2 	bl	8000ef4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000b90:	2310      	movs	r3, #16
 8000b92:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b94:	2301      	movs	r3, #1
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b9c:	2360      	movs	r3, #96	; 0x60
 8000b9e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f001 fea7 	bl	80028fc <HAL_RCC_OscConfig>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000bb4:	f000 f99e 	bl	8000ef4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb8:	230f      	movs	r3, #15
 8000bba:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bcc:	463b      	mov	r3, r7
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f002 faa7 	bl	8003124 <HAL_RCC_ClockConfig>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000bdc:	f000 f98a 	bl	8000ef4 <Error_Handler>
  }
}
 8000be0:	bf00      	nop
 8000be2:	3758      	adds	r7, #88	; 0x58
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bec:	4b1b      	ldr	r3, [pc, #108]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000bee:	4a1c      	ldr	r2, [pc, #112]	; (8000c60 <MX_I2C1_Init+0x78>)
 8000bf0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000004;
 8000bf2:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000bf4:	2204      	movs	r2, #4
 8000bf6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000bf8:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bfe:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c04:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c0a:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c22:	480e      	ldr	r0, [pc, #56]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000c24:	f001 f80a 	bl	8001c3c <HAL_I2C_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c2e:	f000 f961 	bl	8000ef4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c32:	2100      	movs	r1, #0
 8000c34:	4809      	ldr	r0, [pc, #36]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000c36:	f001 fd65 	bl	8002704 <HAL_I2CEx_ConfigAnalogFilter>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c40:	f000 f958 	bl	8000ef4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c44:	2100      	movs	r1, #0
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000c48:	f001 fda7 	bl	800279a <HAL_I2CEx_ConfigDigitalFilter>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c52:	f000 f94f 	bl	8000ef4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	2000002c 	.word	0x2000002c
 8000c60:	40005400 	.word	0x40005400

08000c64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08e      	sub	sp, #56	; 0x38
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c84:	463b      	mov	r3, r7
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
 8000c90:	611a      	str	r2, [r3, #16]
 8000c92:	615a      	str	r2, [r3, #20]
 8000c94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c96:	4b38      	ldr	r3, [pc, #224]	; (8000d78 <MX_TIM2_Init+0x114>)
 8000c98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c9c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4-1;
 8000c9e:	4b36      	ldr	r3, [pc, #216]	; (8000d78 <MX_TIM2_Init+0x114>)
 8000ca0:	2203      	movs	r2, #3
 8000ca2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca4:	4b34      	ldr	r3, [pc, #208]	; (8000d78 <MX_TIM2_Init+0x114>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000caa:	4b33      	ldr	r3, [pc, #204]	; (8000d78 <MX_TIM2_Init+0x114>)
 8000cac:	2263      	movs	r2, #99	; 0x63
 8000cae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb0:	4b31      	ldr	r3, [pc, #196]	; (8000d78 <MX_TIM2_Init+0x114>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb6:	4b30      	ldr	r3, [pc, #192]	; (8000d78 <MX_TIM2_Init+0x114>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cbc:	482e      	ldr	r0, [pc, #184]	; (8000d78 <MX_TIM2_Init+0x114>)
 8000cbe:	f002 ff27 	bl	8003b10 <HAL_TIM_Base_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000cc8:	f000 f914 	bl	8000ef4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ccc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4827      	ldr	r0, [pc, #156]	; (8000d78 <MX_TIM2_Init+0x114>)
 8000cda:	f003 fb67 	bl	80043ac <HAL_TIM_ConfigClockSource>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000ce4:	f000 f906 	bl	8000ef4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ce8:	4823      	ldr	r0, [pc, #140]	; (8000d78 <MX_TIM2_Init+0x114>)
 8000cea:	f002 ffec 	bl	8003cc6 <HAL_TIM_PWM_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000cf4:	f000 f8fe 	bl	8000ef4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d00:	f107 031c 	add.w	r3, r7, #28
 8000d04:	4619      	mov	r1, r3
 8000d06:	481c      	ldr	r0, [pc, #112]	; (8000d78 <MX_TIM2_Init+0x114>)
 8000d08:	f003 ffe4 	bl	8004cd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000d12:	f000 f8ef 	bl	8000ef4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d16:	2360      	movs	r3, #96	; 0x60
 8000d18:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d26:	463b      	mov	r3, r7
 8000d28:	2200      	movs	r2, #0
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4812      	ldr	r0, [pc, #72]	; (8000d78 <MX_TIM2_Init+0x114>)
 8000d2e:	f003 fa29 	bl	8004184 <HAL_TIM_PWM_ConfigChannel>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000d38:	f000 f8dc 	bl	8000ef4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	2204      	movs	r2, #4
 8000d40:	4619      	mov	r1, r3
 8000d42:	480d      	ldr	r0, [pc, #52]	; (8000d78 <MX_TIM2_Init+0x114>)
 8000d44:	f003 fa1e 	bl	8004184 <HAL_TIM_PWM_ConfigChannel>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000d4e:	f000 f8d1 	bl	8000ef4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d52:	463b      	mov	r3, r7
 8000d54:	2208      	movs	r2, #8
 8000d56:	4619      	mov	r1, r3
 8000d58:	4807      	ldr	r0, [pc, #28]	; (8000d78 <MX_TIM2_Init+0x114>)
 8000d5a:	f003 fa13 	bl	8004184 <HAL_TIM_PWM_ConfigChannel>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000d64:	f000 f8c6 	bl	8000ef4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d68:	4803      	ldr	r0, [pc, #12]	; (8000d78 <MX_TIM2_Init+0x114>)
 8000d6a:	f000 fb4f 	bl	800140c <HAL_TIM_MspPostInit>

}
 8000d6e:	bf00      	nop
 8000d70:	3738      	adds	r7, #56	; 0x38
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000080 	.word	0x20000080

08000d7c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b088      	sub	sp, #32
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d82:	f107 0310 	add.w	r3, r7, #16
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000d9a:	4b1f      	ldr	r3, [pc, #124]	; (8000e18 <MX_TIM15_Init+0x9c>)
 8000d9c:	4a1f      	ldr	r2, [pc, #124]	; (8000e1c <MX_TIM15_Init+0xa0>)
 8000d9e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 4000;
 8000da0:	4b1d      	ldr	r3, [pc, #116]	; (8000e18 <MX_TIM15_Init+0x9c>)
 8000da2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000da6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da8:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <MX_TIM15_Init+0x9c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 50;
 8000dae:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <MX_TIM15_Init+0x9c>)
 8000db0:	2232      	movs	r2, #50	; 0x32
 8000db2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db4:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <MX_TIM15_Init+0x9c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000dba:	4b17      	ldr	r3, [pc, #92]	; (8000e18 <MX_TIM15_Init+0x9c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc0:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <MX_TIM15_Init+0x9c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000dc6:	4814      	ldr	r0, [pc, #80]	; (8000e18 <MX_TIM15_Init+0x9c>)
 8000dc8:	f002 fea2 	bl	8003b10 <HAL_TIM_Base_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8000dd2:	f000 f88f 	bl	8000ef4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dda:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000ddc:	f107 0310 	add.w	r3, r7, #16
 8000de0:	4619      	mov	r1, r3
 8000de2:	480d      	ldr	r0, [pc, #52]	; (8000e18 <MX_TIM15_Init+0x9c>)
 8000de4:	f003 fae2 	bl	80043ac <HAL_TIM_ConfigClockSource>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8000dee:	f000 f881 	bl	8000ef4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4806      	ldr	r0, [pc, #24]	; (8000e18 <MX_TIM15_Init+0x9c>)
 8000e00:	f003 ff68 	bl	8004cd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8000e0a:	f000 f873 	bl	8000ef4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	3720      	adds	r7, #32
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200000cc 	.word	0x200000cc
 8000e1c:	40014000 	.word	0x40014000

08000e20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b088      	sub	sp, #32
 8000e24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e26:	f107 030c 	add.w	r3, r7, #12
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
 8000e34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	4b2d      	ldr	r3, [pc, #180]	; (8000eec <MX_GPIO_Init+0xcc>)
 8000e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3a:	4a2c      	ldr	r2, [pc, #176]	; (8000eec <MX_GPIO_Init+0xcc>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e42:	4b2a      	ldr	r3, [pc, #168]	; (8000eec <MX_GPIO_Init+0xcc>)
 8000e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4e:	4b27      	ldr	r3, [pc, #156]	; (8000eec <MX_GPIO_Init+0xcc>)
 8000e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e52:	4a26      	ldr	r2, [pc, #152]	; (8000eec <MX_GPIO_Init+0xcc>)
 8000e54:	f043 0304 	orr.w	r3, r3, #4
 8000e58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5a:	4b24      	ldr	r3, [pc, #144]	; (8000eec <MX_GPIO_Init+0xcc>)
 8000e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5e:	f003 0304 	and.w	r3, r3, #4
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e66:	4b21      	ldr	r3, [pc, #132]	; (8000eec <MX_GPIO_Init+0xcc>)
 8000e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6a:	4a20      	ldr	r2, [pc, #128]	; (8000eec <MX_GPIO_Init+0xcc>)
 8000e6c:	f043 0302 	orr.w	r3, r3, #2
 8000e70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e72:	4b1e      	ldr	r3, [pc, #120]	; (8000eec <MX_GPIO_Init+0xcc>)
 8000e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	603b      	str	r3, [r7, #0]
 8000e7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : Power_Button_Pin */
  GPIO_InitStruct.Pin = Power_Button_Pin;
 8000e7e:	2380      	movs	r3, #128	; 0x80
 8000e80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000e82:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000e86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Power_Button_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	4619      	mov	r1, r3
 8000e92:	4817      	ldr	r0, [pc, #92]	; (8000ef0 <MX_GPIO_Init+0xd0>)
 8000e94:	f000 fd28 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MAX_ALRT_Pin */
  GPIO_InitStruct.Pin = MAX_ALRT_Pin;
 8000e98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e9e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ea2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MAX_ALRT_GPIO_Port, &GPIO_InitStruct);
 8000ea8:	f107 030c 	add.w	r3, r7, #12
 8000eac:	4619      	mov	r1, r3
 8000eae:	4810      	ldr	r0, [pc, #64]	; (8000ef0 <MX_GPIO_Init+0xd0>)
 8000eb0:	f000 fd1a 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BQ_INT_Pin */
  GPIO_InitStruct.Pin = BQ_INT_Pin;
 8000eb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000eba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ebe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BQ_INT_GPIO_Port, &GPIO_InitStruct);
 8000ec4:	f107 030c 	add.w	r3, r7, #12
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ece:	f000 fd0b 	bl	80018e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	2017      	movs	r0, #23
 8000ed8:	f000 fccf 	bl	800187a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000edc:	2017      	movs	r0, #23
 8000ede:	f000 fce8 	bl	80018b2 <HAL_NVIC_EnableIRQ>

}
 8000ee2:	bf00      	nop
 8000ee4:	3720      	adds	r7, #32
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	48000800 	.word	0x48000800

08000ef4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef8:	b672      	cpsid	i
}
 8000efa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000efc:	e7fe      	b.n	8000efc <Error_Handler+0x8>

08000efe <i2c_master_read_u16>:
// MAX17048 uses big endian register layout
#define SWAP16(x) ((uint16_t)(((x) << 8) | ((x) >> 8)))


bool i2c_master_read_u16(I2C_HandleTypeDef *i2cHandle, uint8_t device, uint8_t reg, uint16_t *buf )
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b088      	sub	sp, #32
 8000f02:	af04      	add	r7, sp, #16
 8000f04:	60f8      	str	r0, [r7, #12]
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	72fb      	strb	r3, [r7, #11]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	72bb      	strb	r3, [r7, #10]
	if ( HAL_I2C_Mem_Read( i2cHandle, device, reg, I2C_MEMADD_SIZE_16BIT, buf, 2, 10 ) != HAL_OK)
 8000f10:	7afb      	ldrb	r3, [r7, #11]
 8000f12:	b299      	uxth	r1, r3
 8000f14:	7abb      	ldrb	r3, [r7, #10]
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	230a      	movs	r3, #10
 8000f1a:	9302      	str	r3, [sp, #8]
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	9301      	str	r3, [sp, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	2302      	movs	r3, #2
 8000f26:	68f8      	ldr	r0, [r7, #12]
 8000f28:	f001 f82c 	bl	8001f84 <HAL_I2C_Mem_Read>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <i2c_master_read_u16+0x38>
	{
		return 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	e000      	b.n	8000f38 <i2c_master_read_u16+0x3a>
	}

	return 1;
 8000f36:	2301      	movs	r3, #1
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <i2c_master_write_u16>:

bool i2c_master_write_u16(I2C_HandleTypeDef *i2cHandle, uint8_t device, uint8_t reg, uint16_t *buf )
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af04      	add	r7, sp, #16
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	72fb      	strb	r3, [r7, #11]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	72bb      	strb	r3, [r7, #10]
	if ( HAL_I2C_Mem_Write( i2cHandle, device, reg, I2C_MEMADD_SIZE_16BIT, buf, 2, 10 ) != HAL_OK)
 8000f52:	7afb      	ldrb	r3, [r7, #11]
 8000f54:	b299      	uxth	r1, r3
 8000f56:	7abb      	ldrb	r3, [r7, #10]
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	230a      	movs	r3, #10
 8000f5c:	9302      	str	r3, [sp, #8]
 8000f5e:	2302      	movs	r3, #2
 8000f60:	9301      	str	r3, [sp, #4]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	2302      	movs	r3, #2
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	f000 fef7 	bl	8001d5c <HAL_I2C_Mem_Write>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <i2c_master_write_u16+0x38>
	{
		return 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	e000      	b.n	8000f7a <i2c_master_write_u16+0x3a>
	}

	return 1;
 8000f78:	2301      	movs	r3, #1
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <read_reg>:


static inline bool read_reg(I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint16_t* out) {
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b084      	sub	sp, #16
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	60f8      	str	r0, [r7, #12]
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	607a      	str	r2, [r7, #4]
 8000f8e:	72fb      	strb	r3, [r7, #11]
    if (!i2c_master_read_u16(i2cHandle, MAX_ADDR, reg, out)) {
 8000f90:	7afa      	ldrb	r2, [r7, #11]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2136      	movs	r1, #54	; 0x36
 8000f96:	68f8      	ldr	r0, [r7, #12]
 8000f98:	f7ff ffb1 	bl	8000efe <i2c_master_read_u16>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	f083 0301 	eor.w	r3, r3, #1
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <read_reg+0x2a>
        return false;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	e00e      	b.n	8000fca <read_reg+0x48>
    }

    *out = SWAP16(*out);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	881b      	ldrh	r3, [r3, #0]
 8000fb0:	021b      	lsls	r3, r3, #8
 8000fb2:	b21a      	sxth	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	b21b      	sxth	r3, r3
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	b21b      	sxth	r3, r3
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	801a      	strh	r2, [r3, #0]
    return true;
 8000fc8:	2301      	movs	r3, #1
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <write_reg>:

static inline bool write_reg(I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint16_t data) {
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
 8000fda:	460b      	mov	r3, r1
 8000fdc:	70fb      	strb	r3, [r7, #3]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	803b      	strh	r3, [r7, #0]
    return i2c_master_write_u16(i2cHandle, MAX_ADDR, reg, SWAP16(data));
 8000fe2:	883b      	ldrh	r3, [r7, #0]
 8000fe4:	021b      	lsls	r3, r3, #8
 8000fe6:	b21a      	sxth	r2, r3
 8000fe8:	883b      	ldrh	r3, [r7, #0]
 8000fea:	0a1b      	lsrs	r3, r3, #8
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	b21b      	sxth	r3, r3
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	b21b      	sxth	r3, r3
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	78fa      	ldrb	r2, [r7, #3]
 8000ff8:	2136      	movs	r1, #54	; 0x36
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff ffa0 	bl	8000f40 <i2c_master_write_u16>
 8001000:	4603      	mov	r3, r0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <modify_reg>:

static inline bool modify_reg(I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint16_t data, uint16_t mask) {
 800100a:	b580      	push	{r7, lr}
 800100c:	b086      	sub	sp, #24
 800100e:	af00      	add	r7, sp, #0
 8001010:	60f8      	str	r0, [r7, #12]
 8001012:	4608      	mov	r0, r1
 8001014:	4611      	mov	r1, r2
 8001016:	461a      	mov	r2, r3
 8001018:	4603      	mov	r3, r0
 800101a:	72fb      	strb	r3, [r7, #11]
 800101c:	460b      	mov	r3, r1
 800101e:	813b      	strh	r3, [r7, #8]
 8001020:	4613      	mov	r3, r2
 8001022:	80fb      	strh	r3, [r7, #6]
    uint16_t buf;
    if (!read_reg(i2cHandle, reg, &buf)) {
 8001024:	f107 0216 	add.w	r2, r7, #22
 8001028:	7afb      	ldrb	r3, [r7, #11]
 800102a:	4619      	mov	r1, r3
 800102c:	68f8      	ldr	r0, [r7, #12]
 800102e:	f7ff ffa8 	bl	8000f82 <read_reg>
 8001032:	4603      	mov	r3, r0
 8001034:	f083 0301 	eor.w	r3, r3, #1
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <modify_reg+0x38>
        return false;
 800103e:	2300      	movs	r3, #0
 8001040:	e017      	b.n	8001072 <modify_reg+0x68>
    }

    buf = (buf & ~mask) | (data & mask);
 8001042:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001046:	43db      	mvns	r3, r3
 8001048:	b21a      	sxth	r2, r3
 800104a:	8afb      	ldrh	r3, [r7, #22]
 800104c:	b21b      	sxth	r3, r3
 800104e:	4013      	ands	r3, r2
 8001050:	b21a      	sxth	r2, r3
 8001052:	8939      	ldrh	r1, [r7, #8]
 8001054:	88fb      	ldrh	r3, [r7, #6]
 8001056:	400b      	ands	r3, r1
 8001058:	b29b      	uxth	r3, r3
 800105a:	b21b      	sxth	r3, r3
 800105c:	4313      	orrs	r3, r2
 800105e:	b21b      	sxth	r3, r3
 8001060:	b29b      	uxth	r3, r3
 8001062:	82fb      	strh	r3, [r7, #22]
    return write_reg(i2cHandle, reg, buf);
 8001064:	8afa      	ldrh	r2, [r7, #22]
 8001066:	7afb      	ldrb	r3, [r7, #11]
 8001068:	4619      	mov	r1, r3
 800106a:	68f8      	ldr	r0, [r7, #12]
 800106c:	f7ff ffb1 	bl	8000fd2 <write_reg>
 8001070:	4603      	mov	r3, r0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <max17048_is_present>:

bool max17048_is_present(I2C_HandleTypeDef *i2cHandle) {
 800107a:	b580      	push	{r7, lr}
 800107c:	b084      	sub	sp, #16
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
    uint16_t data;
    if (!read_reg(i2cHandle, VERSION, &data)) {
 8001082:	f107 030e 	add.w	r3, r7, #14
 8001086:	461a      	mov	r2, r3
 8001088:	2108      	movs	r1, #8
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f7ff ff79 	bl	8000f82 <read_reg>
 8001090:	4603      	mov	r3, r0
 8001092:	f083 0301 	eor.w	r3, r3, #1
 8001096:	b2db      	uxtb	r3, r3
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <max17048_is_present+0x26>
        return false;
 800109c:	2300      	movs	r3, #0
 800109e:	e009      	b.n	80010b4 <max17048_is_present+0x3a>
    }

    return ((data & VERSION_MSK) == PART_NUMBER);
 80010a0:	89fb      	ldrh	r3, [r7, #14]
 80010a2:	461a      	mov	r2, r3
 80010a4:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80010a8:	4013      	ands	r3, r2
 80010aa:	2b10      	cmp	r3, #16
 80010ac:	bf0c      	ite	eq
 80010ae:	2301      	moveq	r3, #1
 80010b0:	2300      	movne	r3, #0
 80010b2:	b2db      	uxtb	r3, r3
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <max17048_get_soc>:

    *mv = (max17048_voltage_t)(VCELL_TO_MV(data));
    return true;
}

bool max17048_get_soc(I2C_HandleTypeDef *i2cHandle, max17048_soc_t* percent) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
    uint16_t data;
    if (!read_reg(i2cHandle, SOC, &data)) {
 80010c6:	f107 030e 	add.w	r3, r7, #14
 80010ca:	461a      	mov	r2, r3
 80010cc:	2104      	movs	r1, #4
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff ff57 	bl	8000f82 <read_reg>
 80010d4:	4603      	mov	r3, r0
 80010d6:	f083 0301 	eor.w	r3, r3, #1
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <max17048_get_soc+0x28>
        return false;
 80010e0:	2300      	movs	r3, #0
 80010e2:	e006      	b.n	80010f2 <max17048_get_soc+0x36>
    }

    *percent = (max17048_soc_t)(data >> 8);
 80010e4:	89fb      	ldrh	r3, [r7, #14]
 80010e6:	0a1b      	lsrs	r3, r3, #8
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	701a      	strb	r2, [r3, #0]
    return true;
 80010f0:	2301      	movs	r3, #1
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <max17048_set_bat_low_soc>:

bool max17048_set_bat_low_soc(I2C_HandleTypeDef *i2cHandle, max17048_soc_t percent) {
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b084      	sub	sp, #16
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	460b      	mov	r3, r1
 8001104:	70fb      	strb	r3, [r7, #3]
    if (percent < BAT_LOW_MIN || percent > BAT_LOW_MAX) {
 8001106:	78fb      	ldrb	r3, [r7, #3]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d002      	beq.n	8001112 <max17048_set_bat_low_soc+0x18>
 800110c:	78fb      	ldrb	r3, [r7, #3]
 800110e:	2b20      	cmp	r3, #32
 8001110:	d901      	bls.n	8001116 <max17048_set_bat_low_soc+0x1c>
        return false;
 8001112:	2300      	movs	r3, #0
 8001114:	e011      	b.n	800113a <max17048_set_bat_low_soc+0x40>
    }
    uint16_t data = (uint16_t)((BAT_LOW_MAX - (percent % BAT_LOW_MAX)) & BAT_LOW_MSK);
 8001116:	78fb      	ldrb	r3, [r7, #3]
 8001118:	b29b      	uxth	r3, r3
 800111a:	f003 031f 	and.w	r3, r3, #31
 800111e:	b29b      	uxth	r3, r3
 8001120:	f1c3 0320 	rsb	r3, r3, #32
 8001124:	b29b      	uxth	r3, r3
 8001126:	f003 031f 	and.w	r3, r3, #31
 800112a:	81fb      	strh	r3, [r7, #14]

    return modify_reg(i2cHandle, CONFIG, data, BAT_LOW_MSK);
 800112c:	89fa      	ldrh	r2, [r7, #14]
 800112e:	231f      	movs	r3, #31
 8001130:	210c      	movs	r1, #12
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff ff69 	bl	800100a <modify_reg>
 8001138:	4603      	mov	r3, r0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <max17048_set_undervolted_voltage>:

bool max17048_set_undervolted_voltage(I2C_HandleTypeDef *i2cHandle, max17048_voltage_t mv) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	807b      	strh	r3, [r7, #2]
    uint16_t data = (uint16_t)(((mv / VALRT_RESOLUTION) << VALRT_MIN_POS) & VALRT_MIN_MSK);
 8001150:	887b      	ldrh	r3, [r7, #2]
 8001152:	4a0b      	ldr	r2, [pc, #44]	; (8001180 <max17048_set_undervolted_voltage+0x3c>)
 8001154:	fba2 2303 	umull	r2, r3, r2, r3
 8001158:	091b      	lsrs	r3, r3, #4
 800115a:	b29b      	uxth	r3, r3
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	b29b      	uxth	r3, r3
 8001160:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001164:	81fb      	strh	r3, [r7, #14]

    return modify_reg(i2cHandle, VALRT, data, VALRT_MIN_MSK);
 8001166:	89fa      	ldrh	r2, [r7, #14]
 8001168:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800116c:	2114      	movs	r1, #20
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ff4b 	bl	800100a <modify_reg>
 8001174:	4603      	mov	r3, r0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	cccccccd 	.word	0xcccccccd

08001184 <max17048_set_overvolted_voltage>:

bool max17048_set_overvolted_voltage(I2C_HandleTypeDef *i2cHandle, max17048_voltage_t mv) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	460b      	mov	r3, r1
 800118e:	807b      	strh	r3, [r7, #2]
    uint16_t data = (uint16_t)(((mv / VALRT_RESOLUTION) << VALRT_MAX_POS) & VALRT_MAX_MSK);
 8001190:	887b      	ldrh	r3, [r7, #2]
 8001192:	4a09      	ldr	r2, [pc, #36]	; (80011b8 <max17048_set_overvolted_voltage+0x34>)
 8001194:	fba2 2303 	umull	r2, r3, r2, r3
 8001198:	091b      	lsrs	r3, r3, #4
 800119a:	b29b      	uxth	r3, r3
 800119c:	b2db      	uxtb	r3, r3
 800119e:	81fb      	strh	r3, [r7, #14]

    return modify_reg(i2cHandle, VALRT, data, VALRT_MAX_MSK);
 80011a0:	89fa      	ldrh	r2, [r7, #14]
 80011a2:	23ff      	movs	r3, #255	; 0xff
 80011a4:	2114      	movs	r1, #20
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff ff2f 	bl	800100a <modify_reg>
 80011ac:	4603      	mov	r3, r0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	cccccccd 	.word	0xcccccccd

080011bc <max17048_set_reset_voltage>:

bool max17048_set_reset_voltage(I2C_HandleTypeDef *i2cHandle, max17048_voltage_t mv) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	807b      	strh	r3, [r7, #2]
    uint16_t data = (uint16_t)(((mv / VRESET_RESOLUTION) << VRESET_POS) & VRESET_MSK);
 80011c8:	887b      	ldrh	r3, [r7, #2]
 80011ca:	4a0c      	ldr	r2, [pc, #48]	; (80011fc <max17048_set_reset_voltage+0x40>)
 80011cc:	fba2 2303 	umull	r2, r3, r2, r3
 80011d0:	095b      	lsrs	r3, r3, #5
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	025b      	lsls	r3, r3, #9
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80011dc:	f023 0301 	bic.w	r3, r3, #1
 80011e0:	81fb      	strh	r3, [r7, #14]

    return modify_reg(i2cHandle, VRESET_ID, data, VRESET_MSK);
 80011e2:	89fa      	ldrh	r2, [r7, #14]
 80011e4:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 80011e8:	2118      	movs	r1, #24
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff ff0d 	bl	800100a <modify_reg>
 80011f0:	4603      	mov	r3, r0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	cccccccd 	.word	0xcccccccd

08001200 <max17048_set_soc_change_alert>:

bool max17048_set_soc_change_alert(I2C_HandleTypeDef *i2cHandle, bool enable) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	70fb      	strb	r3, [r7, #3]
    uint16_t data = (uint16_t)((enable << ALSC_BIT_POS) & ALSC_BIT_MSK);
 800120c:	78fb      	ldrb	r3, [r7, #3]
 800120e:	019b      	lsls	r3, r3, #6
 8001210:	b29b      	uxth	r3, r3
 8001212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001216:	81fb      	strh	r3, [r7, #14]

    return modify_reg(i2cHandle, CONFIG, data, ALSC_BIT_MSK);
 8001218:	89fa      	ldrh	r2, [r7, #14]
 800121a:	2340      	movs	r3, #64	; 0x40
 800121c:	210c      	movs	r1, #12
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff fef3 	bl	800100a <modify_reg>
 8001224:	4603      	mov	r3, r0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <max17048_set_voltage_reset_alert>:

bool max17048_set_voltage_reset_alert(I2C_HandleTypeDef *i2cHandle, bool enable) {
 800122e:	b580      	push	{r7, lr}
 8001230:	b084      	sub	sp, #16
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
 8001236:	460b      	mov	r3, r1
 8001238:	70fb      	strb	r3, [r7, #3]
    uint16_t data = (uint16_t)((enable << ENVR_BIT_POS) & ENVR_BIT_MSK);
 800123a:	78fb      	ldrb	r3, [r7, #3]
 800123c:	039b      	lsls	r3, r3, #14
 800123e:	b29b      	uxth	r3, r3
 8001240:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001244:	81fb      	strh	r3, [r7, #14]

    return modify_reg(i2cHandle, STATUS, data, ENVR_BIT_MSK);
 8001246:	89fa      	ldrh	r2, [r7, #14]
 8001248:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800124c:	211a      	movs	r1, #26
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff fedb 	bl	800100a <modify_reg>
 8001254:	4603      	mov	r3, r0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <max17048_clear_alerts>:

bool max17048_clear_alerts(I2C_HandleTypeDef *i2cHandle) {
 800125e:	b580      	push	{r7, lr}
 8001260:	b084      	sub	sp, #16
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
    bool ok = true;
 8001266:	2301      	movs	r3, #1
 8001268:	73fb      	strb	r3, [r7, #15]

    if (ok) ok = modify_reg(i2cHandle, STATUS, 0, ALRT_STATUS_MSK);
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d008      	beq.n	8001282 <max17048_clear_alerts+0x24>
 8001270:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 8001274:	2200      	movs	r2, #0
 8001276:	211a      	movs	r1, #26
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff fec6 	bl	800100a <modify_reg>
 800127e:	4603      	mov	r3, r0
 8001280:	73fb      	strb	r3, [r7, #15]
    if (ok) ok = modify_reg(i2cHandle, CONFIG, 0, ALRT_BIT_MSK);
 8001282:	7bfb      	ldrb	r3, [r7, #15]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d007      	beq.n	8001298 <max17048_clear_alerts+0x3a>
 8001288:	2320      	movs	r3, #32
 800128a:	2200      	movs	r2, #0
 800128c:	210c      	movs	r1, #12
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff febb 	bl	800100a <modify_reg>
 8001294:	4603      	mov	r3, r0
 8001296:	73fb      	strb	r3, [r7, #15]

    return ok;
 8001298:	7bfb      	ldrb	r3, [r7, #15]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012aa:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <HAL_MspInit+0x44>)
 80012ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ae:	4a0e      	ldr	r2, [pc, #56]	; (80012e8 <HAL_MspInit+0x44>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6613      	str	r3, [r2, #96]	; 0x60
 80012b6:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <HAL_MspInit+0x44>)
 80012b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <HAL_MspInit+0x44>)
 80012c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c6:	4a08      	ldr	r2, [pc, #32]	; (80012e8 <HAL_MspInit+0x44>)
 80012c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012cc:	6593      	str	r3, [r2, #88]	; 0x58
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_MspInit+0x44>)
 80012d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	40021000 	.word	0x40021000

080012ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b0a0      	sub	sp, #128	; 0x80
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001304:	f107 0310 	add.w	r3, r7, #16
 8001308:	225c      	movs	r2, #92	; 0x5c
 800130a:	2100      	movs	r1, #0
 800130c:	4618      	mov	r0, r3
 800130e:	f003 fd89 	bl	8004e24 <memset>
  if(hi2c->Instance==I2C1)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a1f      	ldr	r2, [pc, #124]	; (8001394 <HAL_I2C_MspInit+0xa8>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d137      	bne.n	800138c <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800131c:	2340      	movs	r3, #64	; 0x40
 800131e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001320:	2300      	movs	r3, #0
 8001322:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001324:	f107 0310 	add.w	r3, r7, #16
 8001328:	4618      	mov	r0, r3
 800132a:	f002 f8e7 	bl	80034fc <HAL_RCCEx_PeriphCLKConfig>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001334:	f7ff fdde 	bl	8000ef4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001338:	4b17      	ldr	r3, [pc, #92]	; (8001398 <HAL_I2C_MspInit+0xac>)
 800133a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133c:	4a16      	ldr	r2, [pc, #88]	; (8001398 <HAL_I2C_MspInit+0xac>)
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001344:	4b14      	ldr	r3, [pc, #80]	; (8001398 <HAL_I2C_MspInit+0xac>)
 8001346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001350:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001354:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001356:	2312      	movs	r3, #18
 8001358:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135e:	2303      	movs	r3, #3
 8001360:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001362:	2304      	movs	r3, #4
 8001364:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800136a:	4619      	mov	r1, r3
 800136c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001370:	f000 faba 	bl	80018e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <HAL_I2C_MspInit+0xac>)
 8001376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001378:	4a07      	ldr	r2, [pc, #28]	; (8001398 <HAL_I2C_MspInit+0xac>)
 800137a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800137e:	6593      	str	r3, [r2, #88]	; 0x58
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <HAL_I2C_MspInit+0xac>)
 8001382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001384:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800138c:	bf00      	nop
 800138e:	3780      	adds	r7, #128	; 0x80
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40005400 	.word	0x40005400
 8001398:	40021000 	.word	0x40021000

0800139c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013ac:	d10c      	bne.n	80013c8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <HAL_TIM_Base_MspInit+0x68>)
 80013b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b2:	4a14      	ldr	r2, [pc, #80]	; (8001404 <HAL_TIM_Base_MspInit+0x68>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6593      	str	r3, [r2, #88]	; 0x58
 80013ba:	4b12      	ldr	r3, [pc, #72]	; (8001404 <HAL_TIM_Base_MspInit+0x68>)
 80013bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80013c6:	e018      	b.n	80013fa <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM15)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a0e      	ldr	r2, [pc, #56]	; (8001408 <HAL_TIM_Base_MspInit+0x6c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d113      	bne.n	80013fa <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80013d2:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <HAL_TIM_Base_MspInit+0x68>)
 80013d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013d6:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <HAL_TIM_Base_MspInit+0x68>)
 80013d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013dc:	6613      	str	r3, [r2, #96]	; 0x60
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <HAL_TIM_Base_MspInit+0x68>)
 80013e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	2018      	movs	r0, #24
 80013f0:	f000 fa43 	bl	800187a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80013f4:	2018      	movs	r0, #24
 80013f6:	f000 fa5c 	bl	80018b2 <HAL_NVIC_EnableIRQ>
}
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40021000 	.word	0x40021000
 8001408:	40014000 	.word	0x40014000

0800140c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 030c 	add.w	r3, r7, #12
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800142c:	d11c      	bne.n	8001468 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142e:	4b10      	ldr	r3, [pc, #64]	; (8001470 <HAL_TIM_MspPostInit+0x64>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001432:	4a0f      	ldr	r2, [pc, #60]	; (8001470 <HAL_TIM_MspPostInit+0x64>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	64d3      	str	r3, [r2, #76]	; 0x4c
 800143a:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <HAL_TIM_MspPostInit+0x64>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = RGB_R_Pin|RGB_G_Pin|RGB_B_Pin;
 8001446:	2307      	movs	r3, #7
 8001448:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001452:	2300      	movs	r3, #0
 8001454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001456:	2301      	movs	r3, #1
 8001458:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145a:	f107 030c 	add.w	r3, r7, #12
 800145e:	4619      	mov	r1, r3
 8001460:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001464:	f000 fa40 	bl	80018e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001468:	bf00      	nop
 800146a:	3720      	adds	r7, #32
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40021000 	.word	0x40021000

08001474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <NMI_Handler+0x4>

0800147a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800147e:	e7fe      	b.n	800147e <HardFault_Handler+0x4>

08001480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <MemManage_Handler+0x4>

08001486 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <BusFault_Handler+0x4>

0800148c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <UsageFault_Handler+0x4>

08001492 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c0:	f000 f8ac 	bl	800161c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Power_Button_Pin);
 80014cc:	2080      	movs	r0, #128	; 0x80
 80014ce:	f000 fb9d 	bl	8001c0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BQ_INT_Pin);
 80014d2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80014d6:	f000 fb99 	bl	8001c0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MAX_ALRT_Pin);
 80014da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014de:	f000 fb95 	bl	8001c0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80014ec:	4802      	ldr	r0, [pc, #8]	; (80014f8 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80014ee:	f002 fd29 	bl	8003f44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	200000cc 	.word	0x200000cc

080014fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <SystemInit+0x20>)
 8001502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001506:	4a05      	ldr	r2, [pc, #20]	; (800151c <SystemInit+0x20>)
 8001508:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800150c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001520:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001558 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001524:	f7ff ffea 	bl	80014fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001528:	480c      	ldr	r0, [pc, #48]	; (800155c <LoopForever+0x6>)
  ldr r1, =_edata
 800152a:	490d      	ldr	r1, [pc, #52]	; (8001560 <LoopForever+0xa>)
  ldr r2, =_sidata
 800152c:	4a0d      	ldr	r2, [pc, #52]	; (8001564 <LoopForever+0xe>)
  movs r3, #0
 800152e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001530:	e002      	b.n	8001538 <LoopCopyDataInit>

08001532 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001532:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001534:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001536:	3304      	adds	r3, #4

08001538 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001538:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800153a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800153c:	d3f9      	bcc.n	8001532 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800153e:	4a0a      	ldr	r2, [pc, #40]	; (8001568 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001540:	4c0a      	ldr	r4, [pc, #40]	; (800156c <LoopForever+0x16>)
  movs r3, #0
 8001542:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001544:	e001      	b.n	800154a <LoopFillZerobss>

08001546 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001546:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001548:	3204      	adds	r2, #4

0800154a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800154a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800154c:	d3fb      	bcc.n	8001546 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800154e:	f003 fc45 	bl	8004ddc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001552:	f7ff f9d9 	bl	8000908 <main>

08001556 <LoopForever>:

LoopForever:
    b LoopForever
 8001556:	e7fe      	b.n	8001556 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001558:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800155c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001560:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001564:	08004e94 	.word	0x08004e94
  ldr r2, =_sbss
 8001568:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800156c:	20000128 	.word	0x20000128

08001570 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001570:	e7fe      	b.n	8001570 <ADC1_IRQHandler>

08001572 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001578:	2300      	movs	r3, #0
 800157a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800157c:	2003      	movs	r0, #3
 800157e:	f000 f971 	bl	8001864 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001582:	200f      	movs	r0, #15
 8001584:	f000 f80e 	bl	80015a4 <HAL_InitTick>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d002      	beq.n	8001594 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	71fb      	strb	r3, [r7, #7]
 8001592:	e001      	b.n	8001598 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001594:	f7ff fe86 	bl	80012a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001598:	79fb      	ldrb	r3, [r7, #7]
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
	...

080015a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015ac:	2300      	movs	r3, #0
 80015ae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015b0:	4b17      	ldr	r3, [pc, #92]	; (8001610 <HAL_InitTick+0x6c>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d023      	beq.n	8001600 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015b8:	4b16      	ldr	r3, [pc, #88]	; (8001614 <HAL_InitTick+0x70>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4b14      	ldr	r3, [pc, #80]	; (8001610 <HAL_InitTick+0x6c>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	4619      	mov	r1, r3
 80015c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 f97d 	bl	80018ce <HAL_SYSTICK_Config>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d10f      	bne.n	80015fa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2b0f      	cmp	r3, #15
 80015de:	d809      	bhi.n	80015f4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e0:	2200      	movs	r2, #0
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	f04f 30ff 	mov.w	r0, #4294967295
 80015e8:	f000 f947 	bl	800187a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015ec:	4a0a      	ldr	r2, [pc, #40]	; (8001618 <HAL_InitTick+0x74>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	e007      	b.n	8001604 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	73fb      	strb	r3, [r7, #15]
 80015f8:	e004      	b.n	8001604 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	73fb      	strb	r3, [r7, #15]
 80015fe:	e001      	b.n	8001604 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001604:	7bfb      	ldrb	r3, [r7, #15]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	2000000c 	.word	0x2000000c
 8001614:	20000004 	.word	0x20000004
 8001618:	20000008 	.word	0x20000008

0800161c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_IncTick+0x20>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	461a      	mov	r2, r3
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_IncTick+0x24>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4413      	add	r3, r2
 800162c:	4a04      	ldr	r2, [pc, #16]	; (8001640 <HAL_IncTick+0x24>)
 800162e:	6013      	str	r3, [r2, #0]
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	2000000c 	.word	0x2000000c
 8001640:	20000124 	.word	0x20000124

08001644 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return uwTick;
 8001648:	4b03      	ldr	r3, [pc, #12]	; (8001658 <HAL_GetTick+0x14>)
 800164a:	681b      	ldr	r3, [r3, #0]
}
 800164c:	4618      	mov	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	20000124 	.word	0x20000124

0800165c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001664:	f7ff ffee 	bl	8001644 <HAL_GetTick>
 8001668:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001674:	d005      	beq.n	8001682 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001676:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <HAL_Delay+0x44>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	461a      	mov	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4413      	add	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001682:	bf00      	nop
 8001684:	f7ff ffde 	bl	8001644 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	429a      	cmp	r2, r3
 8001692:	d8f7      	bhi.n	8001684 <HAL_Delay+0x28>
  {
  }
}
 8001694:	bf00      	nop
 8001696:	bf00      	nop
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	2000000c 	.word	0x2000000c

080016a4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80016a8:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <HAL_ResumeTick+0x1c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <HAL_ResumeTick+0x1c>)
 80016ae:	f043 0302 	orr.w	r3, r3, #2
 80016b2:	6013      	str	r3, [r2, #0]
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000e010 	.word	0xe000e010

080016c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <__NVIC_SetPriorityGrouping+0x44>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e0:	4013      	ands	r3, r2
 80016e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f6:	4a04      	ldr	r2, [pc, #16]	; (8001708 <__NVIC_SetPriorityGrouping+0x44>)
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	60d3      	str	r3, [r2, #12]
}
 80016fc:	bf00      	nop
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001710:	4b04      	ldr	r3, [pc, #16]	; (8001724 <__NVIC_GetPriorityGrouping+0x18>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	0a1b      	lsrs	r3, r3, #8
 8001716:	f003 0307 	and.w	r3, r3, #7
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	2b00      	cmp	r3, #0
 8001738:	db0b      	blt.n	8001752 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	f003 021f 	and.w	r2, r3, #31
 8001740:	4907      	ldr	r1, [pc, #28]	; (8001760 <__NVIC_EnableIRQ+0x38>)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	095b      	lsrs	r3, r3, #5
 8001748:	2001      	movs	r0, #1
 800174a:	fa00 f202 	lsl.w	r2, r0, r2
 800174e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	e000e100 	.word	0xe000e100

08001764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	6039      	str	r1, [r7, #0]
 800176e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001774:	2b00      	cmp	r3, #0
 8001776:	db0a      	blt.n	800178e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	b2da      	uxtb	r2, r3
 800177c:	490c      	ldr	r1, [pc, #48]	; (80017b0 <__NVIC_SetPriority+0x4c>)
 800177e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001782:	0112      	lsls	r2, r2, #4
 8001784:	b2d2      	uxtb	r2, r2
 8001786:	440b      	add	r3, r1
 8001788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800178c:	e00a      	b.n	80017a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	b2da      	uxtb	r2, r3
 8001792:	4908      	ldr	r1, [pc, #32]	; (80017b4 <__NVIC_SetPriority+0x50>)
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	3b04      	subs	r3, #4
 800179c:	0112      	lsls	r2, r2, #4
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	440b      	add	r3, r1
 80017a2:	761a      	strb	r2, [r3, #24]
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	e000e100 	.word	0xe000e100
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b089      	sub	sp, #36	; 0x24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f1c3 0307 	rsb	r3, r3, #7
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	bf28      	it	cs
 80017d6:	2304      	movcs	r3, #4
 80017d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	3304      	adds	r3, #4
 80017de:	2b06      	cmp	r3, #6
 80017e0:	d902      	bls.n	80017e8 <NVIC_EncodePriority+0x30>
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	3b03      	subs	r3, #3
 80017e6:	e000      	b.n	80017ea <NVIC_EncodePriority+0x32>
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	f04f 32ff 	mov.w	r2, #4294967295
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43da      	mvns	r2, r3
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	401a      	ands	r2, r3
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001800:	f04f 31ff 	mov.w	r1, #4294967295
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	fa01 f303 	lsl.w	r3, r1, r3
 800180a:	43d9      	mvns	r1, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001810:	4313      	orrs	r3, r2
         );
}
 8001812:	4618      	mov	r0, r3
 8001814:	3724      	adds	r7, #36	; 0x24
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
	...

08001820 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3b01      	subs	r3, #1
 800182c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001830:	d301      	bcc.n	8001836 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001832:	2301      	movs	r3, #1
 8001834:	e00f      	b.n	8001856 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001836:	4a0a      	ldr	r2, [pc, #40]	; (8001860 <SysTick_Config+0x40>)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3b01      	subs	r3, #1
 800183c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800183e:	210f      	movs	r1, #15
 8001840:	f04f 30ff 	mov.w	r0, #4294967295
 8001844:	f7ff ff8e 	bl	8001764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <SysTick_Config+0x40>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800184e:	4b04      	ldr	r3, [pc, #16]	; (8001860 <SysTick_Config+0x40>)
 8001850:	2207      	movs	r2, #7
 8001852:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	e000e010 	.word	0xe000e010

08001864 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff ff29 	bl	80016c4 <__NVIC_SetPriorityGrouping>
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b086      	sub	sp, #24
 800187e:	af00      	add	r7, sp, #0
 8001880:	4603      	mov	r3, r0
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
 8001886:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800188c:	f7ff ff3e 	bl	800170c <__NVIC_GetPriorityGrouping>
 8001890:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	68b9      	ldr	r1, [r7, #8]
 8001896:	6978      	ldr	r0, [r7, #20]
 8001898:	f7ff ff8e 	bl	80017b8 <NVIC_EncodePriority>
 800189c:	4602      	mov	r2, r0
 800189e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a2:	4611      	mov	r1, r2
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff ff5d 	bl	8001764 <__NVIC_SetPriority>
}
 80018aa:	bf00      	nop
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	4603      	mov	r3, r0
 80018ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff31 	bl	8001728 <__NVIC_EnableIRQ>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff ffa2 	bl	8001820 <SysTick_Config>
 80018dc:	4603      	mov	r3, r0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b087      	sub	sp, #28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018f6:	e154      	b.n	8001ba2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	2101      	movs	r1, #1
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	fa01 f303 	lsl.w	r3, r1, r3
 8001904:	4013      	ands	r3, r2
 8001906:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 8146 	beq.w	8001b9c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 0303 	and.w	r3, r3, #3
 8001918:	2b01      	cmp	r3, #1
 800191a:	d005      	beq.n	8001928 <HAL_GPIO_Init+0x40>
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 0303 	and.w	r3, r3, #3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d130      	bne.n	800198a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	2203      	movs	r2, #3
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	68da      	ldr	r2, [r3, #12]
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	4313      	orrs	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800195e:	2201      	movs	r2, #1
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	4013      	ands	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	091b      	lsrs	r3, r3, #4
 8001974:	f003 0201 	and.w	r2, r3, #1
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4313      	orrs	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	2b03      	cmp	r3, #3
 8001994:	d017      	beq.n	80019c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	2203      	movs	r2, #3
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	4013      	ands	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	4313      	orrs	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 0303 	and.w	r3, r3, #3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d123      	bne.n	8001a1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	08da      	lsrs	r2, r3, #3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	3208      	adds	r2, #8
 80019da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	220f      	movs	r2, #15
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43db      	mvns	r3, r3
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	4013      	ands	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	691a      	ldr	r2, [r3, #16]
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	f003 0307 	and.w	r3, r3, #7
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	08da      	lsrs	r2, r3, #3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3208      	adds	r2, #8
 8001a14:	6939      	ldr	r1, [r7, #16]
 8001a16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	2203      	movs	r2, #3
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f003 0203 	and.w	r2, r3, #3
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f000 80a0 	beq.w	8001b9c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5c:	4b58      	ldr	r3, [pc, #352]	; (8001bc0 <HAL_GPIO_Init+0x2d8>)
 8001a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a60:	4a57      	ldr	r2, [pc, #348]	; (8001bc0 <HAL_GPIO_Init+0x2d8>)
 8001a62:	f043 0301 	orr.w	r3, r3, #1
 8001a66:	6613      	str	r3, [r2, #96]	; 0x60
 8001a68:	4b55      	ldr	r3, [pc, #340]	; (8001bc0 <HAL_GPIO_Init+0x2d8>)
 8001a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a74:	4a53      	ldr	r2, [pc, #332]	; (8001bc4 <HAL_GPIO_Init+0x2dc>)
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	089b      	lsrs	r3, r3, #2
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f003 0303 	and.w	r3, r3, #3
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	220f      	movs	r2, #15
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a9e:	d019      	beq.n	8001ad4 <HAL_GPIO_Init+0x1ec>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4a49      	ldr	r2, [pc, #292]	; (8001bc8 <HAL_GPIO_Init+0x2e0>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d013      	beq.n	8001ad0 <HAL_GPIO_Init+0x1e8>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a48      	ldr	r2, [pc, #288]	; (8001bcc <HAL_GPIO_Init+0x2e4>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d00d      	beq.n	8001acc <HAL_GPIO_Init+0x1e4>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4a47      	ldr	r2, [pc, #284]	; (8001bd0 <HAL_GPIO_Init+0x2e8>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d007      	beq.n	8001ac8 <HAL_GPIO_Init+0x1e0>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a46      	ldr	r2, [pc, #280]	; (8001bd4 <HAL_GPIO_Init+0x2ec>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d101      	bne.n	8001ac4 <HAL_GPIO_Init+0x1dc>
 8001ac0:	2304      	movs	r3, #4
 8001ac2:	e008      	b.n	8001ad6 <HAL_GPIO_Init+0x1ee>
 8001ac4:	2307      	movs	r3, #7
 8001ac6:	e006      	b.n	8001ad6 <HAL_GPIO_Init+0x1ee>
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e004      	b.n	8001ad6 <HAL_GPIO_Init+0x1ee>
 8001acc:	2302      	movs	r3, #2
 8001ace:	e002      	b.n	8001ad6 <HAL_GPIO_Init+0x1ee>
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e000      	b.n	8001ad6 <HAL_GPIO_Init+0x1ee>
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	f002 0203 	and.w	r2, r2, #3
 8001adc:	0092      	lsls	r2, r2, #2
 8001ade:	4093      	lsls	r3, r2
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ae6:	4937      	ldr	r1, [pc, #220]	; (8001bc4 <HAL_GPIO_Init+0x2dc>)
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	089b      	lsrs	r3, r3, #2
 8001aec:	3302      	adds	r3, #2
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001af4:	4b38      	ldr	r3, [pc, #224]	; (8001bd8 <HAL_GPIO_Init+0x2f0>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	43db      	mvns	r3, r3
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b18:	4a2f      	ldr	r2, [pc, #188]	; (8001bd8 <HAL_GPIO_Init+0x2f0>)
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b1e:	4b2e      	ldr	r3, [pc, #184]	; (8001bd8 <HAL_GPIO_Init+0x2f0>)
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	43db      	mvns	r3, r3
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b42:	4a25      	ldr	r2, [pc, #148]	; (8001bd8 <HAL_GPIO_Init+0x2f0>)
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b48:	4b23      	ldr	r3, [pc, #140]	; (8001bd8 <HAL_GPIO_Init+0x2f0>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	43db      	mvns	r3, r3
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4013      	ands	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b6c:	4a1a      	ldr	r2, [pc, #104]	; (8001bd8 <HAL_GPIO_Init+0x2f0>)
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b72:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <HAL_GPIO_Init+0x2f0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b96:	4a10      	ldr	r2, [pc, #64]	; (8001bd8 <HAL_GPIO_Init+0x2f0>)
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f47f aea3 	bne.w	80018f8 <HAL_GPIO_Init+0x10>
  }
}
 8001bb2:	bf00      	nop
 8001bb4:	bf00      	nop
 8001bb6:	371c      	adds	r7, #28
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	40010000 	.word	0x40010000
 8001bc8:	48000400 	.word	0x48000400
 8001bcc:	48000800 	.word	0x48000800
 8001bd0:	48000c00 	.word	0x48000c00
 8001bd4:	48001000 	.word	0x48001000
 8001bd8:	40010400 	.word	0x40010400

08001bdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	691a      	ldr	r2, [r3, #16]
 8001bec:	887b      	ldrh	r3, [r7, #2]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d002      	beq.n	8001bfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	73fb      	strb	r3, [r7, #15]
 8001bf8:	e001      	b.n	8001bfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c16:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c18:	695a      	ldr	r2, [r3, #20]
 8001c1a:	88fb      	ldrh	r3, [r7, #6]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d006      	beq.n	8001c30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c22:	4a05      	ldr	r2, [pc, #20]	; (8001c38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c24:	88fb      	ldrh	r3, [r7, #6]
 8001c26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c28:	88fb      	ldrh	r3, [r7, #6]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7fe fbfc 	bl	8000428 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c30:	bf00      	nop
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40010400 	.word	0x40010400

08001c3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e081      	b.n	8001d52 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d106      	bne.n	8001c68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff fb42 	bl	80012ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2224      	movs	r2, #36	; 0x24
 8001c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0201 	bic.w	r2, r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d107      	bne.n	8001cb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	e006      	b.n	8001cc4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001cc2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d104      	bne.n	8001cd6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cd4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6812      	ldr	r2, [r2, #0]
 8001ce0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ce4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ce8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68da      	ldr	r2, [r3, #12]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cf8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	691a      	ldr	r2, [r3, #16]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	69d9      	ldr	r1, [r3, #28]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a1a      	ldr	r2, [r3, #32]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f042 0201 	orr.w	r2, r2, #1
 8001d32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2220      	movs	r2, #32
 8001d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b088      	sub	sp, #32
 8001d60:	af02      	add	r7, sp, #8
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	4608      	mov	r0, r1
 8001d66:	4611      	mov	r1, r2
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	817b      	strh	r3, [r7, #10]
 8001d6e:	460b      	mov	r3, r1
 8001d70:	813b      	strh	r3, [r7, #8]
 8001d72:	4613      	mov	r3, r2
 8001d74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b20      	cmp	r3, #32
 8001d80:	f040 80f9 	bne.w	8001f76 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d84:	6a3b      	ldr	r3, [r7, #32]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d002      	beq.n	8001d90 <HAL_I2C_Mem_Write+0x34>
 8001d8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d105      	bne.n	8001d9c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d96:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e0ed      	b.n	8001f78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d101      	bne.n	8001daa <HAL_I2C_Mem_Write+0x4e>
 8001da6:	2302      	movs	r3, #2
 8001da8:	e0e6      	b.n	8001f78 <HAL_I2C_Mem_Write+0x21c>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001db2:	f7ff fc47 	bl	8001644 <HAL_GetTick>
 8001db6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	2319      	movs	r3, #25
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f000 fac3 	bl	8002350 <I2C_WaitOnFlagUntilTimeout>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e0d1      	b.n	8001f78 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2221      	movs	r2, #33	; 0x21
 8001dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2240      	movs	r2, #64	; 0x40
 8001de0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6a3a      	ldr	r2, [r7, #32]
 8001dee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001df4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001dfc:	88f8      	ldrh	r0, [r7, #6]
 8001dfe:	893a      	ldrh	r2, [r7, #8]
 8001e00:	8979      	ldrh	r1, [r7, #10]
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	9301      	str	r3, [sp, #4]
 8001e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f000 f9d3 	bl	80021b8 <I2C_RequestMemoryWrite>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d005      	beq.n	8001e24 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e0a9      	b.n	8001f78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	2bff      	cmp	r3, #255	; 0xff
 8001e2c:	d90e      	bls.n	8001e4c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	22ff      	movs	r2, #255	; 0xff
 8001e32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	8979      	ldrh	r1, [r7, #10]
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f000 fc2b 	bl	80026a0 <I2C_TransferConfig>
 8001e4a:	e00f      	b.n	8001e6c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	8979      	ldrh	r1, [r7, #10]
 8001e5e:	2300      	movs	r3, #0
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f000 fc1a 	bl	80026a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f000 faad 	bl	80023d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e07b      	b.n	8001f78 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	781a      	ldrb	r2, [r3, #0]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e90:	1c5a      	adds	r2, r3, #1
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d034      	beq.n	8001f24 <HAL_I2C_Mem_Write+0x1c8>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d130      	bne.n	8001f24 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec8:	2200      	movs	r2, #0
 8001eca:	2180      	movs	r1, #128	; 0x80
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f000 fa3f 	bl	8002350 <I2C_WaitOnFlagUntilTimeout>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e04d      	b.n	8001f78 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	2bff      	cmp	r3, #255	; 0xff
 8001ee4:	d90e      	bls.n	8001f04 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	22ff      	movs	r2, #255	; 0xff
 8001eea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	8979      	ldrh	r1, [r7, #10]
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001efc:	68f8      	ldr	r0, [r7, #12]
 8001efe:	f000 fbcf 	bl	80026a0 <I2C_TransferConfig>
 8001f02:	e00f      	b.n	8001f24 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	8979      	ldrh	r1, [r7, #10]
 8001f16:	2300      	movs	r3, #0
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f000 fbbe 	bl	80026a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d19e      	bne.n	8001e6c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f000 fa8c 	bl	8002450 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e01a      	b.n	8001f78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2220      	movs	r2, #32
 8001f48:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6859      	ldr	r1, [r3, #4]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <HAL_I2C_Mem_Write+0x224>)
 8001f56:	400b      	ands	r3, r1
 8001f58:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2220      	movs	r2, #32
 8001f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f72:	2300      	movs	r3, #0
 8001f74:	e000      	b.n	8001f78 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001f76:	2302      	movs	r3, #2
  }
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	fe00e800 	.word	0xfe00e800

08001f84 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b088      	sub	sp, #32
 8001f88:	af02      	add	r7, sp, #8
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	4608      	mov	r0, r1
 8001f8e:	4611      	mov	r1, r2
 8001f90:	461a      	mov	r2, r3
 8001f92:	4603      	mov	r3, r0
 8001f94:	817b      	strh	r3, [r7, #10]
 8001f96:	460b      	mov	r3, r1
 8001f98:	813b      	strh	r3, [r7, #8]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b20      	cmp	r3, #32
 8001fa8:	f040 80fd 	bne.w	80021a6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fac:	6a3b      	ldr	r3, [r7, #32]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d002      	beq.n	8001fb8 <HAL_I2C_Mem_Read+0x34>
 8001fb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d105      	bne.n	8001fc4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fbe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e0f1      	b.n	80021a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d101      	bne.n	8001fd2 <HAL_I2C_Mem_Read+0x4e>
 8001fce:	2302      	movs	r3, #2
 8001fd0:	e0ea      	b.n	80021a8 <HAL_I2C_Mem_Read+0x224>
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fda:	f7ff fb33 	bl	8001644 <HAL_GetTick>
 8001fde:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	9300      	str	r3, [sp, #0]
 8001fe4:	2319      	movs	r3, #25
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	f000 f9af 	bl	8002350 <I2C_WaitOnFlagUntilTimeout>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e0d5      	b.n	80021a8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2222      	movs	r2, #34	; 0x22
 8002000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2240      	movs	r2, #64	; 0x40
 8002008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6a3a      	ldr	r2, [r7, #32]
 8002016:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800201c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002024:	88f8      	ldrh	r0, [r7, #6]
 8002026:	893a      	ldrh	r2, [r7, #8]
 8002028:	8979      	ldrh	r1, [r7, #10]
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	9301      	str	r3, [sp, #4]
 800202e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	4603      	mov	r3, r0
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f000 f913 	bl	8002260 <I2C_RequestMemoryRead>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d005      	beq.n	800204c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e0ad      	b.n	80021a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002050:	b29b      	uxth	r3, r3
 8002052:	2bff      	cmp	r3, #255	; 0xff
 8002054:	d90e      	bls.n	8002074 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	22ff      	movs	r2, #255	; 0xff
 800205a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002060:	b2da      	uxtb	r2, r3
 8002062:	8979      	ldrh	r1, [r7, #10]
 8002064:	4b52      	ldr	r3, [pc, #328]	; (80021b0 <HAL_I2C_Mem_Read+0x22c>)
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f000 fb17 	bl	80026a0 <I2C_TransferConfig>
 8002072:	e00f      	b.n	8002094 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002078:	b29a      	uxth	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002082:	b2da      	uxtb	r2, r3
 8002084:	8979      	ldrh	r1, [r7, #10]
 8002086:	4b4a      	ldr	r3, [pc, #296]	; (80021b0 <HAL_I2C_Mem_Read+0x22c>)
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 fb06 	bl	80026a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800209a:	2200      	movs	r2, #0
 800209c:	2104      	movs	r1, #4
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f000 f956 	bl	8002350 <I2C_WaitOnFlagUntilTimeout>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e07c      	b.n	80021a8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	1c5a      	adds	r2, r3, #1
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ca:	3b01      	subs	r3, #1
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	3b01      	subs	r3, #1
 80020da:	b29a      	uxth	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d034      	beq.n	8002154 <HAL_I2C_Mem_Read+0x1d0>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d130      	bne.n	8002154 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	9300      	str	r3, [sp, #0]
 80020f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f8:	2200      	movs	r2, #0
 80020fa:	2180      	movs	r1, #128	; 0x80
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f000 f927 	bl	8002350 <I2C_WaitOnFlagUntilTimeout>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e04d      	b.n	80021a8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002110:	b29b      	uxth	r3, r3
 8002112:	2bff      	cmp	r3, #255	; 0xff
 8002114:	d90e      	bls.n	8002134 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	22ff      	movs	r2, #255	; 0xff
 800211a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002120:	b2da      	uxtb	r2, r3
 8002122:	8979      	ldrh	r1, [r7, #10]
 8002124:	2300      	movs	r3, #0
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f000 fab7 	bl	80026a0 <I2C_TransferConfig>
 8002132:	e00f      	b.n	8002154 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002138:	b29a      	uxth	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002142:	b2da      	uxtb	r2, r3
 8002144:	8979      	ldrh	r1, [r7, #10]
 8002146:	2300      	movs	r3, #0
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 faa6 	bl	80026a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002158:	b29b      	uxth	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d19a      	bne.n	8002094 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f000 f974 	bl	8002450 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e01a      	b.n	80021a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2220      	movs	r2, #32
 8002178:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6859      	ldr	r1, [r3, #4]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <HAL_I2C_Mem_Read+0x230>)
 8002186:	400b      	ands	r3, r1
 8002188:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2220      	movs	r2, #32
 800218e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021a2:	2300      	movs	r3, #0
 80021a4:	e000      	b.n	80021a8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80021a6:	2302      	movs	r3, #2
  }
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	80002400 	.word	0x80002400
 80021b4:	fe00e800 	.word	0xfe00e800

080021b8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af02      	add	r7, sp, #8
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	4608      	mov	r0, r1
 80021c2:	4611      	mov	r1, r2
 80021c4:	461a      	mov	r2, r3
 80021c6:	4603      	mov	r3, r0
 80021c8:	817b      	strh	r3, [r7, #10]
 80021ca:	460b      	mov	r3, r1
 80021cc:	813b      	strh	r3, [r7, #8]
 80021ce:	4613      	mov	r3, r2
 80021d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80021d2:	88fb      	ldrh	r3, [r7, #6]
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	8979      	ldrh	r1, [r7, #10]
 80021d8:	4b20      	ldr	r3, [pc, #128]	; (800225c <I2C_RequestMemoryWrite+0xa4>)
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021e0:	68f8      	ldr	r0, [r7, #12]
 80021e2:	f000 fa5d 	bl	80026a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021e6:	69fa      	ldr	r2, [r7, #28]
 80021e8:	69b9      	ldr	r1, [r7, #24]
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 f8f0 	bl	80023d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e02c      	b.n	8002254 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021fa:	88fb      	ldrh	r3, [r7, #6]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d105      	bne.n	800220c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002200:	893b      	ldrh	r3, [r7, #8]
 8002202:	b2da      	uxtb	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	629a      	str	r2, [r3, #40]	; 0x28
 800220a:	e015      	b.n	8002238 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800220c:	893b      	ldrh	r3, [r7, #8]
 800220e:	0a1b      	lsrs	r3, r3, #8
 8002210:	b29b      	uxth	r3, r3
 8002212:	b2da      	uxtb	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800221a:	69fa      	ldr	r2, [r7, #28]
 800221c:	69b9      	ldr	r1, [r7, #24]
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f000 f8d6 	bl	80023d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e012      	b.n	8002254 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800222e:	893b      	ldrh	r3, [r7, #8]
 8002230:	b2da      	uxtb	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	2200      	movs	r2, #0
 8002240:	2180      	movs	r1, #128	; 0x80
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f000 f884 	bl	8002350 <I2C_WaitOnFlagUntilTimeout>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e000      	b.n	8002254 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	80002000 	.word	0x80002000

08002260 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af02      	add	r7, sp, #8
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	4608      	mov	r0, r1
 800226a:	4611      	mov	r1, r2
 800226c:	461a      	mov	r2, r3
 800226e:	4603      	mov	r3, r0
 8002270:	817b      	strh	r3, [r7, #10]
 8002272:	460b      	mov	r3, r1
 8002274:	813b      	strh	r3, [r7, #8]
 8002276:	4613      	mov	r3, r2
 8002278:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800227a:	88fb      	ldrh	r3, [r7, #6]
 800227c:	b2da      	uxtb	r2, r3
 800227e:	8979      	ldrh	r1, [r7, #10]
 8002280:	4b20      	ldr	r3, [pc, #128]	; (8002304 <I2C_RequestMemoryRead+0xa4>)
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	2300      	movs	r3, #0
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 fa0a 	bl	80026a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800228c:	69fa      	ldr	r2, [r7, #28]
 800228e:	69b9      	ldr	r1, [r7, #24]
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f000 f89d 	bl	80023d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e02c      	b.n	80022fa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022a0:	88fb      	ldrh	r3, [r7, #6]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d105      	bne.n	80022b2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022a6:	893b      	ldrh	r3, [r7, #8]
 80022a8:	b2da      	uxtb	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	629a      	str	r2, [r3, #40]	; 0x28
 80022b0:	e015      	b.n	80022de <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80022b2:	893b      	ldrh	r3, [r7, #8]
 80022b4:	0a1b      	lsrs	r3, r3, #8
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022c0:	69fa      	ldr	r2, [r7, #28]
 80022c2:	69b9      	ldr	r1, [r7, #24]
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f000 f883 	bl	80023d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e012      	b.n	80022fa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022d4:	893b      	ldrh	r3, [r7, #8]
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	2200      	movs	r2, #0
 80022e6:	2140      	movs	r1, #64	; 0x40
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	f000 f831 	bl	8002350 <I2C_WaitOnFlagUntilTimeout>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e000      	b.n	80022fa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	80002000 	.word	0x80002000

08002308 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b02      	cmp	r3, #2
 800231c:	d103      	bne.n	8002326 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2200      	movs	r2, #0
 8002324:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	2b01      	cmp	r3, #1
 8002332:	d007      	beq.n	8002344 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699a      	ldr	r2, [r3, #24]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f042 0201 	orr.w	r2, r2, #1
 8002342:	619a      	str	r2, [r3, #24]
  }
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	603b      	str	r3, [r7, #0]
 800235c:	4613      	mov	r3, r2
 800235e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002360:	e022      	b.n	80023a8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002368:	d01e      	beq.n	80023a8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800236a:	f7ff f96b 	bl	8001644 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d302      	bcc.n	8002380 <I2C_WaitOnFlagUntilTimeout+0x30>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d113      	bne.n	80023a8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002384:	f043 0220 	orr.w	r2, r3, #32
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2220      	movs	r2, #32
 8002390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e00f      	b.n	80023c8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	699a      	ldr	r2, [r3, #24]
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	4013      	ands	r3, r2
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	bf0c      	ite	eq
 80023b8:	2301      	moveq	r3, #1
 80023ba:	2300      	movne	r3, #0
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	461a      	mov	r2, r3
 80023c0:	79fb      	ldrb	r3, [r7, #7]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d0cd      	beq.n	8002362 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023dc:	e02c      	b.n	8002438 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	68b9      	ldr	r1, [r7, #8]
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f000 f870 	bl	80024c8 <I2C_IsErrorOccurred>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e02a      	b.n	8002448 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f8:	d01e      	beq.n	8002438 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023fa:	f7ff f923 	bl	8001644 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	68ba      	ldr	r2, [r7, #8]
 8002406:	429a      	cmp	r2, r3
 8002408:	d302      	bcc.n	8002410 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d113      	bne.n	8002438 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002414:	f043 0220 	orr.w	r2, r3, #32
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2220      	movs	r2, #32
 8002420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e007      	b.n	8002448 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b02      	cmp	r3, #2
 8002444:	d1cb      	bne.n	80023de <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800245c:	e028      	b.n	80024b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	68b9      	ldr	r1, [r7, #8]
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f000 f830 	bl	80024c8 <I2C_IsErrorOccurred>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e026      	b.n	80024c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002472:	f7ff f8e7 	bl	8001644 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	68ba      	ldr	r2, [r7, #8]
 800247e:	429a      	cmp	r2, r3
 8002480:	d302      	bcc.n	8002488 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d113      	bne.n	80024b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248c:	f043 0220 	orr.w	r2, r3, #32
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2220      	movs	r2, #32
 8002498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e007      	b.n	80024c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	f003 0320 	and.w	r3, r3, #32
 80024ba:	2b20      	cmp	r3, #32
 80024bc:	d1cf      	bne.n	800245e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08a      	sub	sp, #40	; 0x28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024d4:	2300      	movs	r3, #0
 80024d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80024e2:	2300      	movs	r3, #0
 80024e4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	f003 0310 	and.w	r3, r3, #16
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d075      	beq.n	80025e0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2210      	movs	r2, #16
 80024fa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024fc:	e056      	b.n	80025ac <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002504:	d052      	beq.n	80025ac <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002506:	f7ff f89d 	bl	8001644 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	429a      	cmp	r2, r3
 8002514:	d302      	bcc.n	800251c <I2C_IsErrorOccurred+0x54>
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d147      	bne.n	80025ac <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002526:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800252e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800253a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800253e:	d12e      	bne.n	800259e <I2C_IsErrorOccurred+0xd6>
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002546:	d02a      	beq.n	800259e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002548:	7cfb      	ldrb	r3, [r7, #19]
 800254a:	2b20      	cmp	r3, #32
 800254c:	d027      	beq.n	800259e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800255c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800255e:	f7ff f871 	bl	8001644 <HAL_GetTick>
 8002562:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002564:	e01b      	b.n	800259e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002566:	f7ff f86d 	bl	8001644 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b19      	cmp	r3, #25
 8002572:	d914      	bls.n	800259e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002578:	f043 0220 	orr.w	r2, r3, #32
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2220      	movs	r2, #32
 8002584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	f003 0320 	and.w	r3, r3, #32
 80025a8:	2b20      	cmp	r3, #32
 80025aa:	d1dc      	bne.n	8002566 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	f003 0320 	and.w	r3, r3, #32
 80025b6:	2b20      	cmp	r3, #32
 80025b8:	d003      	beq.n	80025c2 <I2C_IsErrorOccurred+0xfa>
 80025ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d09d      	beq.n	80024fe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80025c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d103      	bne.n	80025d2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2220      	movs	r2, #32
 80025d0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80025d2:	6a3b      	ldr	r3, [r7, #32]
 80025d4:	f043 0304 	orr.w	r3, r3, #4
 80025d8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00b      	beq.n	800260a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80025f2:	6a3b      	ldr	r3, [r7, #32]
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002602:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00b      	beq.n	800262c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	f043 0308 	orr.w	r3, r3, #8
 800261a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002624:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00b      	beq.n	800264e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002636:	6a3b      	ldr	r3, [r7, #32]
 8002638:	f043 0302 	orr.w	r3, r3, #2
 800263c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002646:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800264e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002652:	2b00      	cmp	r3, #0
 8002654:	d01c      	beq.n	8002690 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f7ff fe56 	bl	8002308 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6859      	ldr	r1, [r3, #4]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	4b0d      	ldr	r3, [pc, #52]	; (800269c <I2C_IsErrorOccurred+0x1d4>)
 8002668:	400b      	ands	r3, r1
 800266a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002670:	6a3b      	ldr	r3, [r7, #32]
 8002672:	431a      	orrs	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2220      	movs	r2, #32
 800267c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002694:	4618      	mov	r0, r3
 8002696:	3728      	adds	r7, #40	; 0x28
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	fe00e800 	.word	0xfe00e800

080026a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b087      	sub	sp, #28
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	607b      	str	r3, [r7, #4]
 80026aa:	460b      	mov	r3, r1
 80026ac:	817b      	strh	r3, [r7, #10]
 80026ae:	4613      	mov	r3, r2
 80026b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026b2:	897b      	ldrh	r3, [r7, #10]
 80026b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026b8:	7a7b      	ldrb	r3, [r7, #9]
 80026ba:	041b      	lsls	r3, r3, #16
 80026bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026c0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026ce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	6a3b      	ldr	r3, [r7, #32]
 80026d8:	0d5b      	lsrs	r3, r3, #21
 80026da:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80026de:	4b08      	ldr	r3, [pc, #32]	; (8002700 <I2C_TransferConfig+0x60>)
 80026e0:	430b      	orrs	r3, r1
 80026e2:	43db      	mvns	r3, r3
 80026e4:	ea02 0103 	and.w	r1, r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80026f2:	bf00      	nop
 80026f4:	371c      	adds	r7, #28
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	03ff63ff 	.word	0x03ff63ff

08002704 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b20      	cmp	r3, #32
 8002718:	d138      	bne.n	800278c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002720:	2b01      	cmp	r3, #1
 8002722:	d101      	bne.n	8002728 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002724:	2302      	movs	r3, #2
 8002726:	e032      	b.n	800278e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2224      	movs	r2, #36	; 0x24
 8002734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 0201 	bic.w	r2, r2, #1
 8002746:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002756:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6819      	ldr	r1, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f042 0201 	orr.w	r2, r2, #1
 8002776:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2220      	movs	r2, #32
 800277c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	e000      	b.n	800278e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800278c:	2302      	movs	r3, #2
  }
}
 800278e:	4618      	mov	r0, r3
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800279a:	b480      	push	{r7}
 800279c:	b085      	sub	sp, #20
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
 80027a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b20      	cmp	r3, #32
 80027ae:	d139      	bne.n	8002824 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d101      	bne.n	80027be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027ba:	2302      	movs	r3, #2
 80027bc:	e033      	b.n	8002826 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2224      	movs	r2, #36	; 0x24
 80027ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0201 	bic.w	r2, r2, #1
 80027dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	021b      	lsls	r3, r3, #8
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 0201 	orr.w	r2, r2, #1
 800280e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2220      	movs	r2, #32
 8002814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002820:	2300      	movs	r3, #0
 8002822:	e000      	b.n	8002826 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002824:	2302      	movs	r3, #2
  }
}
 8002826:	4618      	mov	r0, r3
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
	...

08002834 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002838:	4b04      	ldr	r3, [pc, #16]	; (800284c <HAL_PWREx_GetVoltageRange+0x18>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002840:	4618      	mov	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	40007000 	.word	0x40007000

08002850 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800285e:	d130      	bne.n	80028c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002860:	4b23      	ldr	r3, [pc, #140]	; (80028f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800286c:	d038      	beq.n	80028e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800286e:	4b20      	ldr	r3, [pc, #128]	; (80028f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002876:	4a1e      	ldr	r2, [pc, #120]	; (80028f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002878:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800287c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800287e:	4b1d      	ldr	r3, [pc, #116]	; (80028f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2232      	movs	r2, #50	; 0x32
 8002884:	fb02 f303 	mul.w	r3, r2, r3
 8002888:	4a1b      	ldr	r2, [pc, #108]	; (80028f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800288a:	fba2 2303 	umull	r2, r3, r2, r3
 800288e:	0c9b      	lsrs	r3, r3, #18
 8002890:	3301      	adds	r3, #1
 8002892:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002894:	e002      	b.n	800289c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	3b01      	subs	r3, #1
 800289a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800289c:	4b14      	ldr	r3, [pc, #80]	; (80028f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028a8:	d102      	bne.n	80028b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1f2      	bne.n	8002896 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028b0:	4b0f      	ldr	r3, [pc, #60]	; (80028f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028bc:	d110      	bne.n	80028e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e00f      	b.n	80028e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80028c2:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ce:	d007      	beq.n	80028e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80028d0:	4b07      	ldr	r3, [pc, #28]	; (80028f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028d8:	4a05      	ldr	r2, [pc, #20]	; (80028f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40007000 	.word	0x40007000
 80028f4:	20000004 	.word	0x20000004
 80028f8:	431bde83 	.word	0x431bde83

080028fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b088      	sub	sp, #32
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d102      	bne.n	8002910 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	f000 bc02 	b.w	8003114 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002910:	4b96      	ldr	r3, [pc, #600]	; (8002b6c <HAL_RCC_OscConfig+0x270>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 030c 	and.w	r3, r3, #12
 8002918:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800291a:	4b94      	ldr	r3, [pc, #592]	; (8002b6c <HAL_RCC_OscConfig+0x270>)
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0310 	and.w	r3, r3, #16
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 80e4 	beq.w	8002afa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d007      	beq.n	8002948 <HAL_RCC_OscConfig+0x4c>
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	2b0c      	cmp	r3, #12
 800293c:	f040 808b 	bne.w	8002a56 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	2b01      	cmp	r3, #1
 8002944:	f040 8087 	bne.w	8002a56 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002948:	4b88      	ldr	r3, [pc, #544]	; (8002b6c <HAL_RCC_OscConfig+0x270>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d005      	beq.n	8002960 <HAL_RCC_OscConfig+0x64>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e3d9      	b.n	8003114 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a1a      	ldr	r2, [r3, #32]
 8002964:	4b81      	ldr	r3, [pc, #516]	; (8002b6c <HAL_RCC_OscConfig+0x270>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0308 	and.w	r3, r3, #8
 800296c:	2b00      	cmp	r3, #0
 800296e:	d004      	beq.n	800297a <HAL_RCC_OscConfig+0x7e>
 8002970:	4b7e      	ldr	r3, [pc, #504]	; (8002b6c <HAL_RCC_OscConfig+0x270>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002978:	e005      	b.n	8002986 <HAL_RCC_OscConfig+0x8a>
 800297a:	4b7c      	ldr	r3, [pc, #496]	; (8002b6c <HAL_RCC_OscConfig+0x270>)
 800297c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002980:	091b      	lsrs	r3, r3, #4
 8002982:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002986:	4293      	cmp	r3, r2
 8002988:	d223      	bcs.n	80029d2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	4618      	mov	r0, r3
 8002990:	f000 fd54 	bl	800343c <RCC_SetFlashLatencyFromMSIRange>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e3ba      	b.n	8003114 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800299e:	4b73      	ldr	r3, [pc, #460]	; (8002b6c <HAL_RCC_OscConfig+0x270>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a72      	ldr	r2, [pc, #456]	; (8002b6c <HAL_RCC_OscConfig+0x270>)
 80029a4:	f043 0308 	orr.w	r3, r3, #8
 80029a8:	6013      	str	r3, [r2, #0]
 80029aa:	4b70      	ldr	r3, [pc, #448]	; (8002b6c <HAL_RCC_OscConfig+0x270>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	496d      	ldr	r1, [pc, #436]	; (8002b6c <HAL_RCC_OscConfig+0x270>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029bc:	4b6b      	ldr	r3, [pc, #428]	; (8002b6c <HAL_RCC_OscConfig+0x270>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69db      	ldr	r3, [r3, #28]
 80029c8:	021b      	lsls	r3, r3, #8
 80029ca:	4968      	ldr	r1, [pc, #416]	; (8002b6c <HAL_RCC_OscConfig+0x270>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	604b      	str	r3, [r1, #4]
 80029d0:	e025      	b.n	8002a1e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029d2:	4b66      	ldr	r3, [pc, #408]	; (8002b6c <HAL_RCC_OscConfig+0x270>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a65      	ldr	r2, [pc, #404]	; (8002b6c <HAL_RCC_OscConfig+0x270>)
 80029d8:	f043 0308 	orr.w	r3, r3, #8
 80029dc:	6013      	str	r3, [r2, #0]
 80029de:	4b63      	ldr	r3, [pc, #396]	; (8002b6c <HAL_RCC_OscConfig+0x270>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	4960      	ldr	r1, [pc, #384]	; (8002b6c <HAL_RCC_OscConfig+0x270>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029f0:	4b5e      	ldr	r3, [pc, #376]	; (8002b6c <HAL_RCC_OscConfig+0x270>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	021b      	lsls	r3, r3, #8
 80029fe:	495b      	ldr	r1, [pc, #364]	; (8002b6c <HAL_RCC_OscConfig+0x270>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d109      	bne.n	8002a1e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f000 fd14 	bl	800343c <RCC_SetFlashLatencyFromMSIRange>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e37a      	b.n	8003114 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a1e:	f000 fc81 	bl	8003324 <HAL_RCC_GetSysClockFreq>
 8002a22:	4602      	mov	r2, r0
 8002a24:	4b51      	ldr	r3, [pc, #324]	; (8002b6c <HAL_RCC_OscConfig+0x270>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	091b      	lsrs	r3, r3, #4
 8002a2a:	f003 030f 	and.w	r3, r3, #15
 8002a2e:	4950      	ldr	r1, [pc, #320]	; (8002b70 <HAL_RCC_OscConfig+0x274>)
 8002a30:	5ccb      	ldrb	r3, [r1, r3]
 8002a32:	f003 031f 	and.w	r3, r3, #31
 8002a36:	fa22 f303 	lsr.w	r3, r2, r3
 8002a3a:	4a4e      	ldr	r2, [pc, #312]	; (8002b74 <HAL_RCC_OscConfig+0x278>)
 8002a3c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a3e:	4b4e      	ldr	r3, [pc, #312]	; (8002b78 <HAL_RCC_OscConfig+0x27c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fe fdae 	bl	80015a4 <HAL_InitTick>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d052      	beq.n	8002af8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002a52:	7bfb      	ldrb	r3, [r7, #15]
 8002a54:	e35e      	b.n	8003114 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d032      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a5e:	4b43      	ldr	r3, [pc, #268]	; (8002b6c <HAL_RCC_OscConfig+0x270>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a42      	ldr	r2, [pc, #264]	; (8002b6c <HAL_RCC_OscConfig+0x270>)
 8002a64:	f043 0301 	orr.w	r3, r3, #1
 8002a68:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a6a:	f7fe fdeb 	bl	8001644 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a72:	f7fe fde7 	bl	8001644 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e347      	b.n	8003114 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a84:	4b39      	ldr	r3, [pc, #228]	; (8002b6c <HAL_RCC_OscConfig+0x270>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0f0      	beq.n	8002a72 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a90:	4b36      	ldr	r3, [pc, #216]	; (8002b6c <HAL_RCC_OscConfig+0x270>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a35      	ldr	r2, [pc, #212]	; (8002b6c <HAL_RCC_OscConfig+0x270>)
 8002a96:	f043 0308 	orr.w	r3, r3, #8
 8002a9a:	6013      	str	r3, [r2, #0]
 8002a9c:	4b33      	ldr	r3, [pc, #204]	; (8002b6c <HAL_RCC_OscConfig+0x270>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	4930      	ldr	r1, [pc, #192]	; (8002b6c <HAL_RCC_OscConfig+0x270>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aae:	4b2f      	ldr	r3, [pc, #188]	; (8002b6c <HAL_RCC_OscConfig+0x270>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	021b      	lsls	r3, r3, #8
 8002abc:	492b      	ldr	r1, [pc, #172]	; (8002b6c <HAL_RCC_OscConfig+0x270>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	604b      	str	r3, [r1, #4]
 8002ac2:	e01a      	b.n	8002afa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ac4:	4b29      	ldr	r3, [pc, #164]	; (8002b6c <HAL_RCC_OscConfig+0x270>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a28      	ldr	r2, [pc, #160]	; (8002b6c <HAL_RCC_OscConfig+0x270>)
 8002aca:	f023 0301 	bic.w	r3, r3, #1
 8002ace:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ad0:	f7fe fdb8 	bl	8001644 <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ad8:	f7fe fdb4 	bl	8001644 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e314      	b.n	8003114 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002aea:	4b20      	ldr	r3, [pc, #128]	; (8002b6c <HAL_RCC_OscConfig+0x270>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1f0      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x1dc>
 8002af6:	e000      	b.n	8002afa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002af8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d073      	beq.n	8002bee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	d005      	beq.n	8002b18 <HAL_RCC_OscConfig+0x21c>
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	2b0c      	cmp	r3, #12
 8002b10:	d10e      	bne.n	8002b30 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	2b03      	cmp	r3, #3
 8002b16:	d10b      	bne.n	8002b30 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b18:	4b14      	ldr	r3, [pc, #80]	; (8002b6c <HAL_RCC_OscConfig+0x270>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d063      	beq.n	8002bec <HAL_RCC_OscConfig+0x2f0>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d15f      	bne.n	8002bec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e2f1      	b.n	8003114 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b38:	d106      	bne.n	8002b48 <HAL_RCC_OscConfig+0x24c>
 8002b3a:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <HAL_RCC_OscConfig+0x270>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a0b      	ldr	r2, [pc, #44]	; (8002b6c <HAL_RCC_OscConfig+0x270>)
 8002b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	e025      	b.n	8002b94 <HAL_RCC_OscConfig+0x298>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b50:	d114      	bne.n	8002b7c <HAL_RCC_OscConfig+0x280>
 8002b52:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <HAL_RCC_OscConfig+0x270>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a05      	ldr	r2, [pc, #20]	; (8002b6c <HAL_RCC_OscConfig+0x270>)
 8002b58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	4b03      	ldr	r3, [pc, #12]	; (8002b6c <HAL_RCC_OscConfig+0x270>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a02      	ldr	r2, [pc, #8]	; (8002b6c <HAL_RCC_OscConfig+0x270>)
 8002b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	e013      	b.n	8002b94 <HAL_RCC_OscConfig+0x298>
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	08004e4c 	.word	0x08004e4c
 8002b74:	20000004 	.word	0x20000004
 8002b78:	20000008 	.word	0x20000008
 8002b7c:	4ba0      	ldr	r3, [pc, #640]	; (8002e00 <HAL_RCC_OscConfig+0x504>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a9f      	ldr	r2, [pc, #636]	; (8002e00 <HAL_RCC_OscConfig+0x504>)
 8002b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b86:	6013      	str	r3, [r2, #0]
 8002b88:	4b9d      	ldr	r3, [pc, #628]	; (8002e00 <HAL_RCC_OscConfig+0x504>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a9c      	ldr	r2, [pc, #624]	; (8002e00 <HAL_RCC_OscConfig+0x504>)
 8002b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d013      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9c:	f7fe fd52 	bl	8001644 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ba4:	f7fe fd4e 	bl	8001644 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b64      	cmp	r3, #100	; 0x64
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e2ae      	b.n	8003114 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bb6:	4b92      	ldr	r3, [pc, #584]	; (8002e00 <HAL_RCC_OscConfig+0x504>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0f0      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x2a8>
 8002bc2:	e014      	b.n	8002bee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc4:	f7fe fd3e 	bl	8001644 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bcc:	f7fe fd3a 	bl	8001644 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b64      	cmp	r3, #100	; 0x64
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e29a      	b.n	8003114 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bde:	4b88      	ldr	r3, [pc, #544]	; (8002e00 <HAL_RCC_OscConfig+0x504>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1f0      	bne.n	8002bcc <HAL_RCC_OscConfig+0x2d0>
 8002bea:	e000      	b.n	8002bee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d060      	beq.n	8002cbc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d005      	beq.n	8002c0c <HAL_RCC_OscConfig+0x310>
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	2b0c      	cmp	r3, #12
 8002c04:	d119      	bne.n	8002c3a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d116      	bne.n	8002c3a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c0c:	4b7c      	ldr	r3, [pc, #496]	; (8002e00 <HAL_RCC_OscConfig+0x504>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d005      	beq.n	8002c24 <HAL_RCC_OscConfig+0x328>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e277      	b.n	8003114 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c24:	4b76      	ldr	r3, [pc, #472]	; (8002e00 <HAL_RCC_OscConfig+0x504>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	061b      	lsls	r3, r3, #24
 8002c32:	4973      	ldr	r1, [pc, #460]	; (8002e00 <HAL_RCC_OscConfig+0x504>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c38:	e040      	b.n	8002cbc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d023      	beq.n	8002c8a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c42:	4b6f      	ldr	r3, [pc, #444]	; (8002e00 <HAL_RCC_OscConfig+0x504>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a6e      	ldr	r2, [pc, #440]	; (8002e00 <HAL_RCC_OscConfig+0x504>)
 8002c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4e:	f7fe fcf9 	bl	8001644 <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c54:	e008      	b.n	8002c68 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c56:	f7fe fcf5 	bl	8001644 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e255      	b.n	8003114 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c68:	4b65      	ldr	r3, [pc, #404]	; (8002e00 <HAL_RCC_OscConfig+0x504>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0f0      	beq.n	8002c56 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c74:	4b62      	ldr	r3, [pc, #392]	; (8002e00 <HAL_RCC_OscConfig+0x504>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	061b      	lsls	r3, r3, #24
 8002c82:	495f      	ldr	r1, [pc, #380]	; (8002e00 <HAL_RCC_OscConfig+0x504>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	604b      	str	r3, [r1, #4]
 8002c88:	e018      	b.n	8002cbc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c8a:	4b5d      	ldr	r3, [pc, #372]	; (8002e00 <HAL_RCC_OscConfig+0x504>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a5c      	ldr	r2, [pc, #368]	; (8002e00 <HAL_RCC_OscConfig+0x504>)
 8002c90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c96:	f7fe fcd5 	bl	8001644 <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c9e:	f7fe fcd1 	bl	8001644 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e231      	b.n	8003114 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cb0:	4b53      	ldr	r3, [pc, #332]	; (8002e00 <HAL_RCC_OscConfig+0x504>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1f0      	bne.n	8002c9e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0308 	and.w	r3, r3, #8
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d03c      	beq.n	8002d42 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d01c      	beq.n	8002d0a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cd0:	4b4b      	ldr	r3, [pc, #300]	; (8002e00 <HAL_RCC_OscConfig+0x504>)
 8002cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cd6:	4a4a      	ldr	r2, [pc, #296]	; (8002e00 <HAL_RCC_OscConfig+0x504>)
 8002cd8:	f043 0301 	orr.w	r3, r3, #1
 8002cdc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce0:	f7fe fcb0 	bl	8001644 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ce8:	f7fe fcac 	bl	8001644 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e20c      	b.n	8003114 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cfa:	4b41      	ldr	r3, [pc, #260]	; (8002e00 <HAL_RCC_OscConfig+0x504>)
 8002cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0ef      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x3ec>
 8002d08:	e01b      	b.n	8002d42 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d0a:	4b3d      	ldr	r3, [pc, #244]	; (8002e00 <HAL_RCC_OscConfig+0x504>)
 8002d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d10:	4a3b      	ldr	r2, [pc, #236]	; (8002e00 <HAL_RCC_OscConfig+0x504>)
 8002d12:	f023 0301 	bic.w	r3, r3, #1
 8002d16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d1a:	f7fe fc93 	bl	8001644 <HAL_GetTick>
 8002d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d20:	e008      	b.n	8002d34 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d22:	f7fe fc8f 	bl	8001644 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e1ef      	b.n	8003114 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d34:	4b32      	ldr	r3, [pc, #200]	; (8002e00 <HAL_RCC_OscConfig+0x504>)
 8002d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1ef      	bne.n	8002d22 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0304 	and.w	r3, r3, #4
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 80a6 	beq.w	8002e9c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d50:	2300      	movs	r3, #0
 8002d52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d54:	4b2a      	ldr	r3, [pc, #168]	; (8002e00 <HAL_RCC_OscConfig+0x504>)
 8002d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10d      	bne.n	8002d7c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d60:	4b27      	ldr	r3, [pc, #156]	; (8002e00 <HAL_RCC_OscConfig+0x504>)
 8002d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d64:	4a26      	ldr	r2, [pc, #152]	; (8002e00 <HAL_RCC_OscConfig+0x504>)
 8002d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d6a:	6593      	str	r3, [r2, #88]	; 0x58
 8002d6c:	4b24      	ldr	r3, [pc, #144]	; (8002e00 <HAL_RCC_OscConfig+0x504>)
 8002d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d74:	60bb      	str	r3, [r7, #8]
 8002d76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d7c:	4b21      	ldr	r3, [pc, #132]	; (8002e04 <HAL_RCC_OscConfig+0x508>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d118      	bne.n	8002dba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d88:	4b1e      	ldr	r3, [pc, #120]	; (8002e04 <HAL_RCC_OscConfig+0x508>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a1d      	ldr	r2, [pc, #116]	; (8002e04 <HAL_RCC_OscConfig+0x508>)
 8002d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d94:	f7fe fc56 	bl	8001644 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d9c:	f7fe fc52 	bl	8001644 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e1b2      	b.n	8003114 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dae:	4b15      	ldr	r3, [pc, #84]	; (8002e04 <HAL_RCC_OscConfig+0x508>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0f0      	beq.n	8002d9c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d108      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x4d8>
 8002dc2:	4b0f      	ldr	r3, [pc, #60]	; (8002e00 <HAL_RCC_OscConfig+0x504>)
 8002dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc8:	4a0d      	ldr	r2, [pc, #52]	; (8002e00 <HAL_RCC_OscConfig+0x504>)
 8002dca:	f043 0301 	orr.w	r3, r3, #1
 8002dce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dd2:	e029      	b.n	8002e28 <HAL_RCC_OscConfig+0x52c>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	2b05      	cmp	r3, #5
 8002dda:	d115      	bne.n	8002e08 <HAL_RCC_OscConfig+0x50c>
 8002ddc:	4b08      	ldr	r3, [pc, #32]	; (8002e00 <HAL_RCC_OscConfig+0x504>)
 8002dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de2:	4a07      	ldr	r2, [pc, #28]	; (8002e00 <HAL_RCC_OscConfig+0x504>)
 8002de4:	f043 0304 	orr.w	r3, r3, #4
 8002de8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dec:	4b04      	ldr	r3, [pc, #16]	; (8002e00 <HAL_RCC_OscConfig+0x504>)
 8002dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df2:	4a03      	ldr	r2, [pc, #12]	; (8002e00 <HAL_RCC_OscConfig+0x504>)
 8002df4:	f043 0301 	orr.w	r3, r3, #1
 8002df8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dfc:	e014      	b.n	8002e28 <HAL_RCC_OscConfig+0x52c>
 8002dfe:	bf00      	nop
 8002e00:	40021000 	.word	0x40021000
 8002e04:	40007000 	.word	0x40007000
 8002e08:	4b9a      	ldr	r3, [pc, #616]	; (8003074 <HAL_RCC_OscConfig+0x778>)
 8002e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0e:	4a99      	ldr	r2, [pc, #612]	; (8003074 <HAL_RCC_OscConfig+0x778>)
 8002e10:	f023 0301 	bic.w	r3, r3, #1
 8002e14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e18:	4b96      	ldr	r3, [pc, #600]	; (8003074 <HAL_RCC_OscConfig+0x778>)
 8002e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1e:	4a95      	ldr	r2, [pc, #596]	; (8003074 <HAL_RCC_OscConfig+0x778>)
 8002e20:	f023 0304 	bic.w	r3, r3, #4
 8002e24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d016      	beq.n	8002e5e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e30:	f7fe fc08 	bl	8001644 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e36:	e00a      	b.n	8002e4e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e38:	f7fe fc04 	bl	8001644 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e162      	b.n	8003114 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e4e:	4b89      	ldr	r3, [pc, #548]	; (8003074 <HAL_RCC_OscConfig+0x778>)
 8002e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0ed      	beq.n	8002e38 <HAL_RCC_OscConfig+0x53c>
 8002e5c:	e015      	b.n	8002e8a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e5e:	f7fe fbf1 	bl	8001644 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e64:	e00a      	b.n	8002e7c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e66:	f7fe fbed 	bl	8001644 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e14b      	b.n	8003114 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e7c:	4b7d      	ldr	r3, [pc, #500]	; (8003074 <HAL_RCC_OscConfig+0x778>)
 8002e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1ed      	bne.n	8002e66 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e8a:	7ffb      	ldrb	r3, [r7, #31]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d105      	bne.n	8002e9c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e90:	4b78      	ldr	r3, [pc, #480]	; (8003074 <HAL_RCC_OscConfig+0x778>)
 8002e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e94:	4a77      	ldr	r2, [pc, #476]	; (8003074 <HAL_RCC_OscConfig+0x778>)
 8002e96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e9a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0320 	and.w	r3, r3, #32
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d03c      	beq.n	8002f22 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d01c      	beq.n	8002eea <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002eb0:	4b70      	ldr	r3, [pc, #448]	; (8003074 <HAL_RCC_OscConfig+0x778>)
 8002eb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002eb6:	4a6f      	ldr	r2, [pc, #444]	; (8003074 <HAL_RCC_OscConfig+0x778>)
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec0:	f7fe fbc0 	bl	8001644 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ec8:	f7fe fbbc 	bl	8001644 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e11c      	b.n	8003114 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002eda:	4b66      	ldr	r3, [pc, #408]	; (8003074 <HAL_RCC_OscConfig+0x778>)
 8002edc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0ef      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x5cc>
 8002ee8:	e01b      	b.n	8002f22 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002eea:	4b62      	ldr	r3, [pc, #392]	; (8003074 <HAL_RCC_OscConfig+0x778>)
 8002eec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ef0:	4a60      	ldr	r2, [pc, #384]	; (8003074 <HAL_RCC_OscConfig+0x778>)
 8002ef2:	f023 0301 	bic.w	r3, r3, #1
 8002ef6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efa:	f7fe fba3 	bl	8001644 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f02:	f7fe fb9f 	bl	8001644 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e0ff      	b.n	8003114 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f14:	4b57      	ldr	r3, [pc, #348]	; (8003074 <HAL_RCC_OscConfig+0x778>)
 8002f16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1ef      	bne.n	8002f02 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f000 80f3 	beq.w	8003112 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	f040 80c9 	bne.w	80030c8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f36:	4b4f      	ldr	r3, [pc, #316]	; (8003074 <HAL_RCC_OscConfig+0x778>)
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	f003 0203 	and.w	r2, r3, #3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d12c      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f54:	3b01      	subs	r3, #1
 8002f56:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d123      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f66:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d11b      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f76:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d113      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f86:	085b      	lsrs	r3, r3, #1
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d109      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	085b      	lsrs	r3, r3, #1
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d06b      	beq.n	800307c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	2b0c      	cmp	r3, #12
 8002fa8:	d062      	beq.n	8003070 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002faa:	4b32      	ldr	r3, [pc, #200]	; (8003074 <HAL_RCC_OscConfig+0x778>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e0ac      	b.n	8003114 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002fba:	4b2e      	ldr	r3, [pc, #184]	; (8003074 <HAL_RCC_OscConfig+0x778>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a2d      	ldr	r2, [pc, #180]	; (8003074 <HAL_RCC_OscConfig+0x778>)
 8002fc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fc4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fc6:	f7fe fb3d 	bl	8001644 <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fce:	f7fe fb39 	bl	8001644 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e099      	b.n	8003114 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fe0:	4b24      	ldr	r3, [pc, #144]	; (8003074 <HAL_RCC_OscConfig+0x778>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1f0      	bne.n	8002fce <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fec:	4b21      	ldr	r3, [pc, #132]	; (8003074 <HAL_RCC_OscConfig+0x778>)
 8002fee:	68da      	ldr	r2, [r3, #12]
 8002ff0:	4b21      	ldr	r3, [pc, #132]	; (8003078 <HAL_RCC_OscConfig+0x77c>)
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ffc:	3a01      	subs	r2, #1
 8002ffe:	0112      	lsls	r2, r2, #4
 8003000:	4311      	orrs	r1, r2
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003006:	0212      	lsls	r2, r2, #8
 8003008:	4311      	orrs	r1, r2
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800300e:	0852      	lsrs	r2, r2, #1
 8003010:	3a01      	subs	r2, #1
 8003012:	0552      	lsls	r2, r2, #21
 8003014:	4311      	orrs	r1, r2
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800301a:	0852      	lsrs	r2, r2, #1
 800301c:	3a01      	subs	r2, #1
 800301e:	0652      	lsls	r2, r2, #25
 8003020:	4311      	orrs	r1, r2
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003026:	06d2      	lsls	r2, r2, #27
 8003028:	430a      	orrs	r2, r1
 800302a:	4912      	ldr	r1, [pc, #72]	; (8003074 <HAL_RCC_OscConfig+0x778>)
 800302c:	4313      	orrs	r3, r2
 800302e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003030:	4b10      	ldr	r3, [pc, #64]	; (8003074 <HAL_RCC_OscConfig+0x778>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a0f      	ldr	r2, [pc, #60]	; (8003074 <HAL_RCC_OscConfig+0x778>)
 8003036:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800303a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800303c:	4b0d      	ldr	r3, [pc, #52]	; (8003074 <HAL_RCC_OscConfig+0x778>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	4a0c      	ldr	r2, [pc, #48]	; (8003074 <HAL_RCC_OscConfig+0x778>)
 8003042:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003046:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003048:	f7fe fafc 	bl	8001644 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003050:	f7fe faf8 	bl	8001644 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e058      	b.n	8003114 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003062:	4b04      	ldr	r3, [pc, #16]	; (8003074 <HAL_RCC_OscConfig+0x778>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d0f0      	beq.n	8003050 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800306e:	e050      	b.n	8003112 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e04f      	b.n	8003114 <HAL_RCC_OscConfig+0x818>
 8003074:	40021000 	.word	0x40021000
 8003078:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800307c:	4b27      	ldr	r3, [pc, #156]	; (800311c <HAL_RCC_OscConfig+0x820>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d144      	bne.n	8003112 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003088:	4b24      	ldr	r3, [pc, #144]	; (800311c <HAL_RCC_OscConfig+0x820>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a23      	ldr	r2, [pc, #140]	; (800311c <HAL_RCC_OscConfig+0x820>)
 800308e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003092:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003094:	4b21      	ldr	r3, [pc, #132]	; (800311c <HAL_RCC_OscConfig+0x820>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	4a20      	ldr	r2, [pc, #128]	; (800311c <HAL_RCC_OscConfig+0x820>)
 800309a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800309e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030a0:	f7fe fad0 	bl	8001644 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a8:	f7fe facc 	bl	8001644 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e02c      	b.n	8003114 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ba:	4b18      	ldr	r3, [pc, #96]	; (800311c <HAL_RCC_OscConfig+0x820>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0f0      	beq.n	80030a8 <HAL_RCC_OscConfig+0x7ac>
 80030c6:	e024      	b.n	8003112 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	2b0c      	cmp	r3, #12
 80030cc:	d01f      	beq.n	800310e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ce:	4b13      	ldr	r3, [pc, #76]	; (800311c <HAL_RCC_OscConfig+0x820>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a12      	ldr	r2, [pc, #72]	; (800311c <HAL_RCC_OscConfig+0x820>)
 80030d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030da:	f7fe fab3 	bl	8001644 <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e2:	f7fe faaf 	bl	8001644 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e00f      	b.n	8003114 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030f4:	4b09      	ldr	r3, [pc, #36]	; (800311c <HAL_RCC_OscConfig+0x820>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1f0      	bne.n	80030e2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003100:	4b06      	ldr	r3, [pc, #24]	; (800311c <HAL_RCC_OscConfig+0x820>)
 8003102:	68da      	ldr	r2, [r3, #12]
 8003104:	4905      	ldr	r1, [pc, #20]	; (800311c <HAL_RCC_OscConfig+0x820>)
 8003106:	4b06      	ldr	r3, [pc, #24]	; (8003120 <HAL_RCC_OscConfig+0x824>)
 8003108:	4013      	ands	r3, r2
 800310a:	60cb      	str	r3, [r1, #12]
 800310c:	e001      	b.n	8003112 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3720      	adds	r7, #32
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40021000 	.word	0x40021000
 8003120:	feeefffc 	.word	0xfeeefffc

08003124 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e0e7      	b.n	8003308 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003138:	4b75      	ldr	r3, [pc, #468]	; (8003310 <HAL_RCC_ClockConfig+0x1ec>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	d910      	bls.n	8003168 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003146:	4b72      	ldr	r3, [pc, #456]	; (8003310 <HAL_RCC_ClockConfig+0x1ec>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f023 0207 	bic.w	r2, r3, #7
 800314e:	4970      	ldr	r1, [pc, #448]	; (8003310 <HAL_RCC_ClockConfig+0x1ec>)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	4313      	orrs	r3, r2
 8003154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003156:	4b6e      	ldr	r3, [pc, #440]	; (8003310 <HAL_RCC_ClockConfig+0x1ec>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	429a      	cmp	r2, r3
 8003162:	d001      	beq.n	8003168 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e0cf      	b.n	8003308 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d010      	beq.n	8003196 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	4b66      	ldr	r3, [pc, #408]	; (8003314 <HAL_RCC_ClockConfig+0x1f0>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003180:	429a      	cmp	r2, r3
 8003182:	d908      	bls.n	8003196 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003184:	4b63      	ldr	r3, [pc, #396]	; (8003314 <HAL_RCC_ClockConfig+0x1f0>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	4960      	ldr	r1, [pc, #384]	; (8003314 <HAL_RCC_ClockConfig+0x1f0>)
 8003192:	4313      	orrs	r3, r2
 8003194:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d04c      	beq.n	800323c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2b03      	cmp	r3, #3
 80031a8:	d107      	bne.n	80031ba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031aa:	4b5a      	ldr	r3, [pc, #360]	; (8003314 <HAL_RCC_ClockConfig+0x1f0>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d121      	bne.n	80031fa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e0a6      	b.n	8003308 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d107      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031c2:	4b54      	ldr	r3, [pc, #336]	; (8003314 <HAL_RCC_ClockConfig+0x1f0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d115      	bne.n	80031fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e09a      	b.n	8003308 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d107      	bne.n	80031ea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031da:	4b4e      	ldr	r3, [pc, #312]	; (8003314 <HAL_RCC_ClockConfig+0x1f0>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d109      	bne.n	80031fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e08e      	b.n	8003308 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031ea:	4b4a      	ldr	r3, [pc, #296]	; (8003314 <HAL_RCC_ClockConfig+0x1f0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e086      	b.n	8003308 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031fa:	4b46      	ldr	r3, [pc, #280]	; (8003314 <HAL_RCC_ClockConfig+0x1f0>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f023 0203 	bic.w	r2, r3, #3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	4943      	ldr	r1, [pc, #268]	; (8003314 <HAL_RCC_ClockConfig+0x1f0>)
 8003208:	4313      	orrs	r3, r2
 800320a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800320c:	f7fe fa1a 	bl	8001644 <HAL_GetTick>
 8003210:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003212:	e00a      	b.n	800322a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003214:	f7fe fa16 	bl	8001644 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003222:	4293      	cmp	r3, r2
 8003224:	d901      	bls.n	800322a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e06e      	b.n	8003308 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800322a:	4b3a      	ldr	r3, [pc, #232]	; (8003314 <HAL_RCC_ClockConfig+0x1f0>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 020c 	and.w	r2, r3, #12
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	429a      	cmp	r2, r3
 800323a:	d1eb      	bne.n	8003214 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d010      	beq.n	800326a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	4b31      	ldr	r3, [pc, #196]	; (8003314 <HAL_RCC_ClockConfig+0x1f0>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003254:	429a      	cmp	r2, r3
 8003256:	d208      	bcs.n	800326a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003258:	4b2e      	ldr	r3, [pc, #184]	; (8003314 <HAL_RCC_ClockConfig+0x1f0>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	492b      	ldr	r1, [pc, #172]	; (8003314 <HAL_RCC_ClockConfig+0x1f0>)
 8003266:	4313      	orrs	r3, r2
 8003268:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800326a:	4b29      	ldr	r3, [pc, #164]	; (8003310 <HAL_RCC_ClockConfig+0x1ec>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	429a      	cmp	r2, r3
 8003276:	d210      	bcs.n	800329a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003278:	4b25      	ldr	r3, [pc, #148]	; (8003310 <HAL_RCC_ClockConfig+0x1ec>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f023 0207 	bic.w	r2, r3, #7
 8003280:	4923      	ldr	r1, [pc, #140]	; (8003310 <HAL_RCC_ClockConfig+0x1ec>)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	4313      	orrs	r3, r2
 8003286:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003288:	4b21      	ldr	r3, [pc, #132]	; (8003310 <HAL_RCC_ClockConfig+0x1ec>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	429a      	cmp	r2, r3
 8003294:	d001      	beq.n	800329a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e036      	b.n	8003308 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0304 	and.w	r3, r3, #4
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d008      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032a6:	4b1b      	ldr	r3, [pc, #108]	; (8003314 <HAL_RCC_ClockConfig+0x1f0>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	4918      	ldr	r1, [pc, #96]	; (8003314 <HAL_RCC_ClockConfig+0x1f0>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0308 	and.w	r3, r3, #8
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d009      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032c4:	4b13      	ldr	r3, [pc, #76]	; (8003314 <HAL_RCC_ClockConfig+0x1f0>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	4910      	ldr	r1, [pc, #64]	; (8003314 <HAL_RCC_ClockConfig+0x1f0>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032d8:	f000 f824 	bl	8003324 <HAL_RCC_GetSysClockFreq>
 80032dc:	4602      	mov	r2, r0
 80032de:	4b0d      	ldr	r3, [pc, #52]	; (8003314 <HAL_RCC_ClockConfig+0x1f0>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	091b      	lsrs	r3, r3, #4
 80032e4:	f003 030f 	and.w	r3, r3, #15
 80032e8:	490b      	ldr	r1, [pc, #44]	; (8003318 <HAL_RCC_ClockConfig+0x1f4>)
 80032ea:	5ccb      	ldrb	r3, [r1, r3]
 80032ec:	f003 031f 	and.w	r3, r3, #31
 80032f0:	fa22 f303 	lsr.w	r3, r2, r3
 80032f4:	4a09      	ldr	r2, [pc, #36]	; (800331c <HAL_RCC_ClockConfig+0x1f8>)
 80032f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032f8:	4b09      	ldr	r3, [pc, #36]	; (8003320 <HAL_RCC_ClockConfig+0x1fc>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7fe f951 	bl	80015a4 <HAL_InitTick>
 8003302:	4603      	mov	r3, r0
 8003304:	72fb      	strb	r3, [r7, #11]

  return status;
 8003306:	7afb      	ldrb	r3, [r7, #11]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40022000 	.word	0x40022000
 8003314:	40021000 	.word	0x40021000
 8003318:	08004e4c 	.word	0x08004e4c
 800331c:	20000004 	.word	0x20000004
 8003320:	20000008 	.word	0x20000008

08003324 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003324:	b480      	push	{r7}
 8003326:	b089      	sub	sp, #36	; 0x24
 8003328:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800332a:	2300      	movs	r3, #0
 800332c:	61fb      	str	r3, [r7, #28]
 800332e:	2300      	movs	r3, #0
 8003330:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003332:	4b3e      	ldr	r3, [pc, #248]	; (800342c <HAL_RCC_GetSysClockFreq+0x108>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 030c 	and.w	r3, r3, #12
 800333a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800333c:	4b3b      	ldr	r3, [pc, #236]	; (800342c <HAL_RCC_GetSysClockFreq+0x108>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	f003 0303 	and.w	r3, r3, #3
 8003344:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d005      	beq.n	8003358 <HAL_RCC_GetSysClockFreq+0x34>
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	2b0c      	cmp	r3, #12
 8003350:	d121      	bne.n	8003396 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d11e      	bne.n	8003396 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003358:	4b34      	ldr	r3, [pc, #208]	; (800342c <HAL_RCC_GetSysClockFreq+0x108>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0308 	and.w	r3, r3, #8
 8003360:	2b00      	cmp	r3, #0
 8003362:	d107      	bne.n	8003374 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003364:	4b31      	ldr	r3, [pc, #196]	; (800342c <HAL_RCC_GetSysClockFreq+0x108>)
 8003366:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800336a:	0a1b      	lsrs	r3, r3, #8
 800336c:	f003 030f 	and.w	r3, r3, #15
 8003370:	61fb      	str	r3, [r7, #28]
 8003372:	e005      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003374:	4b2d      	ldr	r3, [pc, #180]	; (800342c <HAL_RCC_GetSysClockFreq+0x108>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	091b      	lsrs	r3, r3, #4
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003380:	4a2b      	ldr	r2, [pc, #172]	; (8003430 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003388:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10d      	bne.n	80033ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003394:	e00a      	b.n	80033ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	2b04      	cmp	r3, #4
 800339a:	d102      	bne.n	80033a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800339c:	4b25      	ldr	r3, [pc, #148]	; (8003434 <HAL_RCC_GetSysClockFreq+0x110>)
 800339e:	61bb      	str	r3, [r7, #24]
 80033a0:	e004      	b.n	80033ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	2b08      	cmp	r3, #8
 80033a6:	d101      	bne.n	80033ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033a8:	4b23      	ldr	r3, [pc, #140]	; (8003438 <HAL_RCC_GetSysClockFreq+0x114>)
 80033aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	2b0c      	cmp	r3, #12
 80033b0:	d134      	bne.n	800341c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033b2:	4b1e      	ldr	r3, [pc, #120]	; (800342c <HAL_RCC_GetSysClockFreq+0x108>)
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d003      	beq.n	80033ca <HAL_RCC_GetSysClockFreq+0xa6>
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	2b03      	cmp	r3, #3
 80033c6:	d003      	beq.n	80033d0 <HAL_RCC_GetSysClockFreq+0xac>
 80033c8:	e005      	b.n	80033d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80033ca:	4b1a      	ldr	r3, [pc, #104]	; (8003434 <HAL_RCC_GetSysClockFreq+0x110>)
 80033cc:	617b      	str	r3, [r7, #20]
      break;
 80033ce:	e005      	b.n	80033dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80033d0:	4b19      	ldr	r3, [pc, #100]	; (8003438 <HAL_RCC_GetSysClockFreq+0x114>)
 80033d2:	617b      	str	r3, [r7, #20]
      break;
 80033d4:	e002      	b.n	80033dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	617b      	str	r3, [r7, #20]
      break;
 80033da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033dc:	4b13      	ldr	r3, [pc, #76]	; (800342c <HAL_RCC_GetSysClockFreq+0x108>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	091b      	lsrs	r3, r3, #4
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	3301      	adds	r3, #1
 80033e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80033ea:	4b10      	ldr	r3, [pc, #64]	; (800342c <HAL_RCC_GetSysClockFreq+0x108>)
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	0a1b      	lsrs	r3, r3, #8
 80033f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	fb03 f202 	mul.w	r2, r3, r2
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003400:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003402:	4b0a      	ldr	r3, [pc, #40]	; (800342c <HAL_RCC_GetSysClockFreq+0x108>)
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	0e5b      	lsrs	r3, r3, #25
 8003408:	f003 0303 	and.w	r3, r3, #3
 800340c:	3301      	adds	r3, #1
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	fbb2 f3f3 	udiv	r3, r2, r3
 800341a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800341c:	69bb      	ldr	r3, [r7, #24]
}
 800341e:	4618      	mov	r0, r3
 8003420:	3724      	adds	r7, #36	; 0x24
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	40021000 	.word	0x40021000
 8003430:	08004e5c 	.word	0x08004e5c
 8003434:	00f42400 	.word	0x00f42400
 8003438:	007a1200 	.word	0x007a1200

0800343c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003444:	2300      	movs	r3, #0
 8003446:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003448:	4b2a      	ldr	r3, [pc, #168]	; (80034f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800344a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003454:	f7ff f9ee 	bl	8002834 <HAL_PWREx_GetVoltageRange>
 8003458:	6178      	str	r0, [r7, #20]
 800345a:	e014      	b.n	8003486 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800345c:	4b25      	ldr	r3, [pc, #148]	; (80034f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800345e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003460:	4a24      	ldr	r2, [pc, #144]	; (80034f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003466:	6593      	str	r3, [r2, #88]	; 0x58
 8003468:	4b22      	ldr	r3, [pc, #136]	; (80034f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800346a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003474:	f7ff f9de 	bl	8002834 <HAL_PWREx_GetVoltageRange>
 8003478:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800347a:	4b1e      	ldr	r3, [pc, #120]	; (80034f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800347c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347e:	4a1d      	ldr	r2, [pc, #116]	; (80034f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003480:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003484:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800348c:	d10b      	bne.n	80034a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b80      	cmp	r3, #128	; 0x80
 8003492:	d919      	bls.n	80034c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2ba0      	cmp	r3, #160	; 0xa0
 8003498:	d902      	bls.n	80034a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800349a:	2302      	movs	r3, #2
 800349c:	613b      	str	r3, [r7, #16]
 800349e:	e013      	b.n	80034c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034a0:	2301      	movs	r3, #1
 80034a2:	613b      	str	r3, [r7, #16]
 80034a4:	e010      	b.n	80034c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b80      	cmp	r3, #128	; 0x80
 80034aa:	d902      	bls.n	80034b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80034ac:	2303      	movs	r3, #3
 80034ae:	613b      	str	r3, [r7, #16]
 80034b0:	e00a      	b.n	80034c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b80      	cmp	r3, #128	; 0x80
 80034b6:	d102      	bne.n	80034be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034b8:	2302      	movs	r3, #2
 80034ba:	613b      	str	r3, [r7, #16]
 80034bc:	e004      	b.n	80034c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b70      	cmp	r3, #112	; 0x70
 80034c2:	d101      	bne.n	80034c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034c4:	2301      	movs	r3, #1
 80034c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80034c8:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f023 0207 	bic.w	r2, r3, #7
 80034d0:	4909      	ldr	r1, [pc, #36]	; (80034f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80034d8:	4b07      	ldr	r3, [pc, #28]	; (80034f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d001      	beq.n	80034ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e000      	b.n	80034ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3718      	adds	r7, #24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40021000 	.word	0x40021000
 80034f8:	40022000 	.word	0x40022000

080034fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003504:	2300      	movs	r3, #0
 8003506:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003508:	2300      	movs	r3, #0
 800350a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003514:	2b00      	cmp	r3, #0
 8003516:	d031      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003520:	d01a      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003522:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003526:	d814      	bhi.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003528:	2b00      	cmp	r3, #0
 800352a:	d009      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800352c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003530:	d10f      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003532:	4b5d      	ldr	r3, [pc, #372]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	4a5c      	ldr	r2, [pc, #368]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800353c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800353e:	e00c      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3304      	adds	r3, #4
 8003544:	2100      	movs	r1, #0
 8003546:	4618      	mov	r0, r3
 8003548:	f000 f9f0 	bl	800392c <RCCEx_PLLSAI1_Config>
 800354c:	4603      	mov	r3, r0
 800354e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003550:	e003      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	74fb      	strb	r3, [r7, #19]
      break;
 8003556:	e000      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003558:	bf00      	nop
    }

    if(ret == HAL_OK)
 800355a:	7cfb      	ldrb	r3, [r7, #19]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10b      	bne.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003560:	4b51      	ldr	r3, [pc, #324]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003566:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356e:	494e      	ldr	r1, [pc, #312]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003570:	4313      	orrs	r3, r2
 8003572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003576:	e001      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003578:	7cfb      	ldrb	r3, [r7, #19]
 800357a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 809e 	beq.w	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800358a:	2300      	movs	r3, #0
 800358c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800358e:	4b46      	ldr	r3, [pc, #280]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800359a:	2301      	movs	r3, #1
 800359c:	e000      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800359e:	2300      	movs	r3, #0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00d      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035a4:	4b40      	ldr	r3, [pc, #256]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a8:	4a3f      	ldr	r2, [pc, #252]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ae:	6593      	str	r3, [r2, #88]	; 0x58
 80035b0:	4b3d      	ldr	r3, [pc, #244]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b8:	60bb      	str	r3, [r7, #8]
 80035ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035bc:	2301      	movs	r3, #1
 80035be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035c0:	4b3a      	ldr	r3, [pc, #232]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a39      	ldr	r2, [pc, #228]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80035c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035cc:	f7fe f83a 	bl	8001644 <HAL_GetTick>
 80035d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035d2:	e009      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035d4:	f7fe f836 	bl	8001644 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d902      	bls.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	74fb      	strb	r3, [r7, #19]
        break;
 80035e6:	e005      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035e8:	4b30      	ldr	r3, [pc, #192]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0ef      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80035f4:	7cfb      	ldrb	r3, [r7, #19]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d15a      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035fa:	4b2b      	ldr	r3, [pc, #172]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003600:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003604:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d01e      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	429a      	cmp	r2, r3
 8003614:	d019      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003616:	4b24      	ldr	r3, [pc, #144]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003620:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003622:	4b21      	ldr	r3, [pc, #132]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003628:	4a1f      	ldr	r2, [pc, #124]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800362a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800362e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003632:	4b1d      	ldr	r3, [pc, #116]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003638:	4a1b      	ldr	r2, [pc, #108]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800363a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800363e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003642:	4a19      	ldr	r2, [pc, #100]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	2b00      	cmp	r3, #0
 8003652:	d016      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003654:	f7fd fff6 	bl	8001644 <HAL_GetTick>
 8003658:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800365a:	e00b      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800365c:	f7fd fff2 	bl	8001644 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	f241 3288 	movw	r2, #5000	; 0x1388
 800366a:	4293      	cmp	r3, r2
 800366c:	d902      	bls.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	74fb      	strb	r3, [r7, #19]
            break;
 8003672:	e006      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003674:	4b0c      	ldr	r3, [pc, #48]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0ec      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003682:	7cfb      	ldrb	r3, [r7, #19]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10b      	bne.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003688:	4b07      	ldr	r3, [pc, #28]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800368a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003696:	4904      	ldr	r1, [pc, #16]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003698:	4313      	orrs	r3, r2
 800369a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800369e:	e009      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036a0:	7cfb      	ldrb	r3, [r7, #19]
 80036a2:	74bb      	strb	r3, [r7, #18]
 80036a4:	e006      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80036a6:	bf00      	nop
 80036a8:	40021000 	.word	0x40021000
 80036ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b0:	7cfb      	ldrb	r3, [r7, #19]
 80036b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036b4:	7c7b      	ldrb	r3, [r7, #17]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d105      	bne.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ba:	4b9b      	ldr	r3, [pc, #620]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80036bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036be:	4a9a      	ldr	r2, [pc, #616]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80036c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00a      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036d2:	4b95      	ldr	r3, [pc, #596]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80036d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d8:	f023 0203 	bic.w	r2, r3, #3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	4991      	ldr	r1, [pc, #580]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00a      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036f4:	4b8c      	ldr	r3, [pc, #560]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80036f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fa:	f023 020c 	bic.w	r2, r3, #12
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	4989      	ldr	r1, [pc, #548]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003704:	4313      	orrs	r3, r2
 8003706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0304 	and.w	r3, r3, #4
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00a      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003716:	4b84      	ldr	r3, [pc, #528]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003724:	4980      	ldr	r1, [pc, #512]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003726:	4313      	orrs	r3, r2
 8003728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0320 	and.w	r3, r3, #32
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00a      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003738:	4b7b      	ldr	r3, [pc, #492]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800373a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003746:	4978      	ldr	r1, [pc, #480]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003748:	4313      	orrs	r3, r2
 800374a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00a      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800375a:	4b73      	ldr	r3, [pc, #460]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800375c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003760:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003768:	496f      	ldr	r1, [pc, #444]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800376a:	4313      	orrs	r3, r2
 800376c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800377c:	4b6a      	ldr	r3, [pc, #424]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800377e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003782:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	4967      	ldr	r1, [pc, #412]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800378c:	4313      	orrs	r3, r2
 800378e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00a      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800379e:	4b62      	ldr	r3, [pc, #392]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80037a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ac:	495e      	ldr	r1, [pc, #376]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00a      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037c0:	4b59      	ldr	r3, [pc, #356]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80037c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ce:	4956      	ldr	r1, [pc, #344]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00a      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037e2:	4b51      	ldr	r3, [pc, #324]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80037e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f0:	494d      	ldr	r1, [pc, #308]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d028      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003804:	4b48      	ldr	r3, [pc, #288]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003812:	4945      	ldr	r1, [pc, #276]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003814:	4313      	orrs	r3, r2
 8003816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800381e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003822:	d106      	bne.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003824:	4b40      	ldr	r3, [pc, #256]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	4a3f      	ldr	r2, [pc, #252]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800382a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800382e:	60d3      	str	r3, [r2, #12]
 8003830:	e011      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003836:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800383a:	d10c      	bne.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3304      	adds	r3, #4
 8003840:	2101      	movs	r1, #1
 8003842:	4618      	mov	r0, r3
 8003844:	f000 f872 	bl	800392c <RCCEx_PLLSAI1_Config>
 8003848:	4603      	mov	r3, r0
 800384a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800384c:	7cfb      	ldrb	r3, [r7, #19]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8003852:	7cfb      	ldrb	r3, [r7, #19]
 8003854:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d028      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003862:	4b31      	ldr	r3, [pc, #196]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003868:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003870:	492d      	ldr	r1, [pc, #180]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003872:	4313      	orrs	r3, r2
 8003874:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800387c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003880:	d106      	bne.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003882:	4b29      	ldr	r3, [pc, #164]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	4a28      	ldr	r2, [pc, #160]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003888:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800388c:	60d3      	str	r3, [r2, #12]
 800388e:	e011      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003894:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003898:	d10c      	bne.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	3304      	adds	r3, #4
 800389e:	2101      	movs	r1, #1
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 f843 	bl	800392c <RCCEx_PLLSAI1_Config>
 80038a6:	4603      	mov	r3, r0
 80038a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038aa:	7cfb      	ldrb	r3, [r7, #19]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80038b0:	7cfb      	ldrb	r3, [r7, #19]
 80038b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d01c      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038c0:	4b19      	ldr	r3, [pc, #100]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80038c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ce:	4916      	ldr	r1, [pc, #88]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038de:	d10c      	bne.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3304      	adds	r3, #4
 80038e4:	2102      	movs	r1, #2
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 f820 	bl	800392c <RCCEx_PLLSAI1_Config>
 80038ec:	4603      	mov	r3, r0
 80038ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038f0:	7cfb      	ldrb	r3, [r7, #19]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 80038f6:	7cfb      	ldrb	r3, [r7, #19]
 80038f8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00a      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003906:	4b08      	ldr	r3, [pc, #32]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003914:	4904      	ldr	r1, [pc, #16]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003916:	4313      	orrs	r3, r2
 8003918:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800391c:	7cbb      	ldrb	r3, [r7, #18]
}
 800391e:	4618      	mov	r0, r3
 8003920:	3718      	adds	r7, #24
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	40021000 	.word	0x40021000

0800392c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003936:	2300      	movs	r3, #0
 8003938:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800393a:	4b74      	ldr	r3, [pc, #464]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d018      	beq.n	8003978 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003946:	4b71      	ldr	r3, [pc, #452]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f003 0203 	and.w	r2, r3, #3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	429a      	cmp	r2, r3
 8003954:	d10d      	bne.n	8003972 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
       ||
 800395a:	2b00      	cmp	r3, #0
 800395c:	d009      	beq.n	8003972 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800395e:	4b6b      	ldr	r3, [pc, #428]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	091b      	lsrs	r3, r3, #4
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	1c5a      	adds	r2, r3, #1
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
       ||
 800396e:	429a      	cmp	r2, r3
 8003970:	d047      	beq.n	8003a02 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	73fb      	strb	r3, [r7, #15]
 8003976:	e044      	b.n	8003a02 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2b03      	cmp	r3, #3
 800397e:	d018      	beq.n	80039b2 <RCCEx_PLLSAI1_Config+0x86>
 8003980:	2b03      	cmp	r3, #3
 8003982:	d825      	bhi.n	80039d0 <RCCEx_PLLSAI1_Config+0xa4>
 8003984:	2b01      	cmp	r3, #1
 8003986:	d002      	beq.n	800398e <RCCEx_PLLSAI1_Config+0x62>
 8003988:	2b02      	cmp	r3, #2
 800398a:	d009      	beq.n	80039a0 <RCCEx_PLLSAI1_Config+0x74>
 800398c:	e020      	b.n	80039d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800398e:	4b5f      	ldr	r3, [pc, #380]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d11d      	bne.n	80039d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800399e:	e01a      	b.n	80039d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039a0:	4b5a      	ldr	r3, [pc, #360]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d116      	bne.n	80039da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039b0:	e013      	b.n	80039da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039b2:	4b56      	ldr	r3, [pc, #344]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10f      	bne.n	80039de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039be:	4b53      	ldr	r3, [pc, #332]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d109      	bne.n	80039de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039ce:	e006      	b.n	80039de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	73fb      	strb	r3, [r7, #15]
      break;
 80039d4:	e004      	b.n	80039e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039d6:	bf00      	nop
 80039d8:	e002      	b.n	80039e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039da:	bf00      	nop
 80039dc:	e000      	b.n	80039e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039de:	bf00      	nop
    }

    if(status == HAL_OK)
 80039e0:	7bfb      	ldrb	r3, [r7, #15]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10d      	bne.n	8003a02 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039e6:	4b49      	ldr	r3, [pc, #292]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6819      	ldr	r1, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	3b01      	subs	r3, #1
 80039f8:	011b      	lsls	r3, r3, #4
 80039fa:	430b      	orrs	r3, r1
 80039fc:	4943      	ldr	r1, [pc, #268]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d17c      	bne.n	8003b02 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a08:	4b40      	ldr	r3, [pc, #256]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a3f      	ldr	r2, [pc, #252]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a0e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a14:	f7fd fe16 	bl	8001644 <HAL_GetTick>
 8003a18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a1a:	e009      	b.n	8003a30 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a1c:	f7fd fe12 	bl	8001644 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d902      	bls.n	8003a30 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	73fb      	strb	r3, [r7, #15]
        break;
 8003a2e:	e005      	b.n	8003a3c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a30:	4b36      	ldr	r3, [pc, #216]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1ef      	bne.n	8003a1c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a3c:	7bfb      	ldrb	r3, [r7, #15]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d15f      	bne.n	8003b02 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d110      	bne.n	8003a6a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a48:	4b30      	ldr	r3, [pc, #192]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003a50:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6892      	ldr	r2, [r2, #8]
 8003a58:	0211      	lsls	r1, r2, #8
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	68d2      	ldr	r2, [r2, #12]
 8003a5e:	06d2      	lsls	r2, r2, #27
 8003a60:	430a      	orrs	r2, r1
 8003a62:	492a      	ldr	r1, [pc, #168]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	610b      	str	r3, [r1, #16]
 8003a68:	e027      	b.n	8003aba <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d112      	bne.n	8003a96 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a70:	4b26      	ldr	r3, [pc, #152]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003a78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6892      	ldr	r2, [r2, #8]
 8003a80:	0211      	lsls	r1, r2, #8
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	6912      	ldr	r2, [r2, #16]
 8003a86:	0852      	lsrs	r2, r2, #1
 8003a88:	3a01      	subs	r2, #1
 8003a8a:	0552      	lsls	r2, r2, #21
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	491f      	ldr	r1, [pc, #124]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	610b      	str	r3, [r1, #16]
 8003a94:	e011      	b.n	8003aba <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a96:	4b1d      	ldr	r3, [pc, #116]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a9e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	6892      	ldr	r2, [r2, #8]
 8003aa6:	0211      	lsls	r1, r2, #8
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6952      	ldr	r2, [r2, #20]
 8003aac:	0852      	lsrs	r2, r2, #1
 8003aae:	3a01      	subs	r2, #1
 8003ab0:	0652      	lsls	r2, r2, #25
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	4915      	ldr	r1, [pc, #84]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003aba:	4b14      	ldr	r3, [pc, #80]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a13      	ldr	r2, [pc, #76]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ac0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ac4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac6:	f7fd fdbd 	bl	8001644 <HAL_GetTick>
 8003aca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003acc:	e009      	b.n	8003ae2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ace:	f7fd fdb9 	bl	8001644 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d902      	bls.n	8003ae2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	73fb      	strb	r3, [r7, #15]
          break;
 8003ae0:	e005      	b.n	8003aee <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ae2:	4b0a      	ldr	r3, [pc, #40]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0ef      	beq.n	8003ace <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003aee:	7bfb      	ldrb	r3, [r7, #15]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d106      	bne.n	8003b02 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003af4:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003af6:	691a      	ldr	r2, [r3, #16]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	4903      	ldr	r1, [pc, #12]	; (8003b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40021000 	.word	0x40021000

08003b10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e049      	b.n	8003bb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d106      	bne.n	8003b3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7fd fc30 	bl	800139c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2202      	movs	r2, #2
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3304      	adds	r3, #4
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	4610      	mov	r0, r2
 8003b50:	f000 fd1e 	bl	8004590 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
	...

08003bc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d001      	beq.n	8003bd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e03b      	b.n	8003c50 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68da      	ldr	r2, [r3, #12]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f042 0201 	orr.w	r2, r2, #1
 8003bee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a19      	ldr	r2, [pc, #100]	; (8003c5c <HAL_TIM_Base_Start_IT+0x9c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d009      	beq.n	8003c0e <HAL_TIM_Base_Start_IT+0x4e>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c02:	d004      	beq.n	8003c0e <HAL_TIM_Base_Start_IT+0x4e>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a15      	ldr	r2, [pc, #84]	; (8003c60 <HAL_TIM_Base_Start_IT+0xa0>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d115      	bne.n	8003c3a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	689a      	ldr	r2, [r3, #8]
 8003c14:	4b13      	ldr	r3, [pc, #76]	; (8003c64 <HAL_TIM_Base_Start_IT+0xa4>)
 8003c16:	4013      	ands	r3, r2
 8003c18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2b06      	cmp	r3, #6
 8003c1e:	d015      	beq.n	8003c4c <HAL_TIM_Base_Start_IT+0x8c>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c26:	d011      	beq.n	8003c4c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 0201 	orr.w	r2, r2, #1
 8003c36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c38:	e008      	b.n	8003c4c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f042 0201 	orr.w	r2, r2, #1
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	e000      	b.n	8003c4e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c4c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3714      	adds	r7, #20
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	40012c00 	.word	0x40012c00
 8003c60:	40014000 	.word	0x40014000
 8003c64:	00010007 	.word	0x00010007

08003c68 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0201 	bic.w	r2, r2, #1
 8003c7e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6a1a      	ldr	r2, [r3, #32]
 8003c86:	f241 1311 	movw	r3, #4369	; 0x1111
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10f      	bne.n	8003cb0 <HAL_TIM_Base_Stop_IT+0x48>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6a1a      	ldr	r2, [r3, #32]
 8003c96:	f240 4344 	movw	r3, #1092	; 0x444
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d107      	bne.n	8003cb0 <HAL_TIM_Base_Stop_IT+0x48>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0201 	bic.w	r2, r2, #1
 8003cae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b082      	sub	sp, #8
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e049      	b.n	8003d6c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d106      	bne.n	8003cf2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f841 	bl	8003d74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2202      	movs	r2, #2
 8003cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	3304      	adds	r3, #4
 8003d02:	4619      	mov	r1, r3
 8003d04:	4610      	mov	r0, r2
 8003d06:	f000 fc43 	bl	8004590 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3708      	adds	r7, #8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d109      	bne.n	8003dac <HAL_TIM_PWM_Start+0x24>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	bf14      	ite	ne
 8003da4:	2301      	movne	r3, #1
 8003da6:	2300      	moveq	r3, #0
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	e03c      	b.n	8003e26 <HAL_TIM_PWM_Start+0x9e>
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d109      	bne.n	8003dc6 <HAL_TIM_PWM_Start+0x3e>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	bf14      	ite	ne
 8003dbe:	2301      	movne	r3, #1
 8003dc0:	2300      	moveq	r3, #0
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	e02f      	b.n	8003e26 <HAL_TIM_PWM_Start+0x9e>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d109      	bne.n	8003de0 <HAL_TIM_PWM_Start+0x58>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	bf14      	ite	ne
 8003dd8:	2301      	movne	r3, #1
 8003dda:	2300      	moveq	r3, #0
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	e022      	b.n	8003e26 <HAL_TIM_PWM_Start+0x9e>
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	2b0c      	cmp	r3, #12
 8003de4:	d109      	bne.n	8003dfa <HAL_TIM_PWM_Start+0x72>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	bf14      	ite	ne
 8003df2:	2301      	movne	r3, #1
 8003df4:	2300      	moveq	r3, #0
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	e015      	b.n	8003e26 <HAL_TIM_PWM_Start+0x9e>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2b10      	cmp	r3, #16
 8003dfe:	d109      	bne.n	8003e14 <HAL_TIM_PWM_Start+0x8c>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	bf14      	ite	ne
 8003e0c:	2301      	movne	r3, #1
 8003e0e:	2300      	moveq	r3, #0
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	e008      	b.n	8003e26 <HAL_TIM_PWM_Start+0x9e>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	bf14      	ite	ne
 8003e20:	2301      	movne	r3, #1
 8003e22:	2300      	moveq	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e07e      	b.n	8003f2c <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d104      	bne.n	8003e3e <HAL_TIM_PWM_Start+0xb6>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e3c:	e023      	b.n	8003e86 <HAL_TIM_PWM_Start+0xfe>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2b04      	cmp	r3, #4
 8003e42:	d104      	bne.n	8003e4e <HAL_TIM_PWM_Start+0xc6>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2202      	movs	r2, #2
 8003e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e4c:	e01b      	b.n	8003e86 <HAL_TIM_PWM_Start+0xfe>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d104      	bne.n	8003e5e <HAL_TIM_PWM_Start+0xd6>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2202      	movs	r2, #2
 8003e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e5c:	e013      	b.n	8003e86 <HAL_TIM_PWM_Start+0xfe>
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2b0c      	cmp	r3, #12
 8003e62:	d104      	bne.n	8003e6e <HAL_TIM_PWM_Start+0xe6>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e6c:	e00b      	b.n	8003e86 <HAL_TIM_PWM_Start+0xfe>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2b10      	cmp	r3, #16
 8003e72:	d104      	bne.n	8003e7e <HAL_TIM_PWM_Start+0xf6>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2202      	movs	r2, #2
 8003e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e7c:	e003      	b.n	8003e86 <HAL_TIM_PWM_Start+0xfe>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2202      	movs	r2, #2
 8003e82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	6839      	ldr	r1, [r7, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 fefa 	bl	8004c88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a26      	ldr	r2, [pc, #152]	; (8003f34 <HAL_TIM_PWM_Start+0x1ac>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d009      	beq.n	8003eb2 <HAL_TIM_PWM_Start+0x12a>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a25      	ldr	r2, [pc, #148]	; (8003f38 <HAL_TIM_PWM_Start+0x1b0>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d004      	beq.n	8003eb2 <HAL_TIM_PWM_Start+0x12a>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a23      	ldr	r2, [pc, #140]	; (8003f3c <HAL_TIM_PWM_Start+0x1b4>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d101      	bne.n	8003eb6 <HAL_TIM_PWM_Start+0x12e>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e000      	b.n	8003eb8 <HAL_TIM_PWM_Start+0x130>
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d007      	beq.n	8003ecc <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003eca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a18      	ldr	r2, [pc, #96]	; (8003f34 <HAL_TIM_PWM_Start+0x1ac>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d009      	beq.n	8003eea <HAL_TIM_PWM_Start+0x162>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ede:	d004      	beq.n	8003eea <HAL_TIM_PWM_Start+0x162>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a14      	ldr	r2, [pc, #80]	; (8003f38 <HAL_TIM_PWM_Start+0x1b0>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d115      	bne.n	8003f16 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	4b13      	ldr	r3, [pc, #76]	; (8003f40 <HAL_TIM_PWM_Start+0x1b8>)
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2b06      	cmp	r3, #6
 8003efa:	d015      	beq.n	8003f28 <HAL_TIM_PWM_Start+0x1a0>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f02:	d011      	beq.n	8003f28 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f042 0201 	orr.w	r2, r2, #1
 8003f12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f14:	e008      	b.n	8003f28 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f042 0201 	orr.w	r2, r2, #1
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	e000      	b.n	8003f2a <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	40012c00 	.word	0x40012c00
 8003f38:	40014000 	.word	0x40014000
 8003f3c:	40014400 	.word	0x40014400
 8003f40:	00010007 	.word	0x00010007

08003f44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d122      	bne.n	8003fa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d11b      	bne.n	8003fa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f06f 0202 	mvn.w	r2, #2
 8003f70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	f003 0303 	and.w	r3, r3, #3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 fae3 	bl	8004552 <HAL_TIM_IC_CaptureCallback>
 8003f8c:	e005      	b.n	8003f9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 fad5 	bl	800453e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 fae6 	bl	8004566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	f003 0304 	and.w	r3, r3, #4
 8003faa:	2b04      	cmp	r3, #4
 8003fac:	d122      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b04      	cmp	r3, #4
 8003fba:	d11b      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f06f 0204 	mvn.w	r2, #4
 8003fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2202      	movs	r2, #2
 8003fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 fab9 	bl	8004552 <HAL_TIM_IC_CaptureCallback>
 8003fe0:	e005      	b.n	8003fee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 faab 	bl	800453e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 fabc 	bl	8004566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	f003 0308 	and.w	r3, r3, #8
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d122      	bne.n	8004048 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f003 0308 	and.w	r3, r3, #8
 800400c:	2b08      	cmp	r3, #8
 800400e:	d11b      	bne.n	8004048 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f06f 0208 	mvn.w	r2, #8
 8004018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2204      	movs	r2, #4
 800401e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 fa8f 	bl	8004552 <HAL_TIM_IC_CaptureCallback>
 8004034:	e005      	b.n	8004042 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 fa81 	bl	800453e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 fa92 	bl	8004566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	f003 0310 	and.w	r3, r3, #16
 8004052:	2b10      	cmp	r3, #16
 8004054:	d122      	bne.n	800409c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f003 0310 	and.w	r3, r3, #16
 8004060:	2b10      	cmp	r3, #16
 8004062:	d11b      	bne.n	800409c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f06f 0210 	mvn.w	r2, #16
 800406c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2208      	movs	r2, #8
 8004072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 fa65 	bl	8004552 <HAL_TIM_IC_CaptureCallback>
 8004088:	e005      	b.n	8004096 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 fa57 	bl	800453e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 fa68 	bl	8004566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d10e      	bne.n	80040c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d107      	bne.n	80040c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f06f 0201 	mvn.w	r2, #1
 80040c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7fc fa66 	bl	8000594 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d2:	2b80      	cmp	r3, #128	; 0x80
 80040d4:	d10e      	bne.n	80040f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e0:	2b80      	cmp	r3, #128	; 0x80
 80040e2:	d107      	bne.n	80040f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 fe60 	bl	8004db4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004102:	d10e      	bne.n	8004122 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800410e:	2b80      	cmp	r3, #128	; 0x80
 8004110:	d107      	bne.n	8004122 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800411a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 fe53 	bl	8004dc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412c:	2b40      	cmp	r3, #64	; 0x40
 800412e:	d10e      	bne.n	800414e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413a:	2b40      	cmp	r3, #64	; 0x40
 800413c:	d107      	bne.n	800414e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004146:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 fa16 	bl	800457a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	f003 0320 	and.w	r3, r3, #32
 8004158:	2b20      	cmp	r3, #32
 800415a:	d10e      	bne.n	800417a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f003 0320 	and.w	r3, r3, #32
 8004166:	2b20      	cmp	r3, #32
 8004168:	d107      	bne.n	800417a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f06f 0220 	mvn.w	r2, #32
 8004172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 fe13 	bl	8004da0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800417a:	bf00      	nop
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
	...

08004184 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004190:	2300      	movs	r3, #0
 8004192:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800419a:	2b01      	cmp	r3, #1
 800419c:	d101      	bne.n	80041a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800419e:	2302      	movs	r3, #2
 80041a0:	e0ff      	b.n	80043a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2b14      	cmp	r3, #20
 80041ae:	f200 80f0 	bhi.w	8004392 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80041b2:	a201      	add	r2, pc, #4	; (adr r2, 80041b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80041b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b8:	0800420d 	.word	0x0800420d
 80041bc:	08004393 	.word	0x08004393
 80041c0:	08004393 	.word	0x08004393
 80041c4:	08004393 	.word	0x08004393
 80041c8:	0800424d 	.word	0x0800424d
 80041cc:	08004393 	.word	0x08004393
 80041d0:	08004393 	.word	0x08004393
 80041d4:	08004393 	.word	0x08004393
 80041d8:	0800428f 	.word	0x0800428f
 80041dc:	08004393 	.word	0x08004393
 80041e0:	08004393 	.word	0x08004393
 80041e4:	08004393 	.word	0x08004393
 80041e8:	080042cf 	.word	0x080042cf
 80041ec:	08004393 	.word	0x08004393
 80041f0:	08004393 	.word	0x08004393
 80041f4:	08004393 	.word	0x08004393
 80041f8:	08004311 	.word	0x08004311
 80041fc:	08004393 	.word	0x08004393
 8004200:	08004393 	.word	0x08004393
 8004204:	08004393 	.word	0x08004393
 8004208:	08004351 	.word	0x08004351
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68b9      	ldr	r1, [r7, #8]
 8004212:	4618      	mov	r0, r3
 8004214:	f000 fa20 	bl	8004658 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	699a      	ldr	r2, [r3, #24]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0208 	orr.w	r2, r2, #8
 8004226:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	699a      	ldr	r2, [r3, #24]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 0204 	bic.w	r2, r2, #4
 8004236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6999      	ldr	r1, [r3, #24]
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	691a      	ldr	r2, [r3, #16]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	430a      	orrs	r2, r1
 8004248:	619a      	str	r2, [r3, #24]
      break;
 800424a:	e0a5      	b.n	8004398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68b9      	ldr	r1, [r7, #8]
 8004252:	4618      	mov	r0, r3
 8004254:	f000 fa7c 	bl	8004750 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	699a      	ldr	r2, [r3, #24]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004266:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	699a      	ldr	r2, [r3, #24]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004276:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6999      	ldr	r1, [r3, #24]
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	021a      	lsls	r2, r3, #8
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	430a      	orrs	r2, r1
 800428a:	619a      	str	r2, [r3, #24]
      break;
 800428c:	e084      	b.n	8004398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68b9      	ldr	r1, [r7, #8]
 8004294:	4618      	mov	r0, r3
 8004296:	f000 fad5 	bl	8004844 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	69da      	ldr	r2, [r3, #28]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f042 0208 	orr.w	r2, r2, #8
 80042a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	69da      	ldr	r2, [r3, #28]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 0204 	bic.w	r2, r2, #4
 80042b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	69d9      	ldr	r1, [r3, #28]
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	691a      	ldr	r2, [r3, #16]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	430a      	orrs	r2, r1
 80042ca:	61da      	str	r2, [r3, #28]
      break;
 80042cc:	e064      	b.n	8004398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68b9      	ldr	r1, [r7, #8]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f000 fb2d 	bl	8004934 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	69da      	ldr	r2, [r3, #28]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	69da      	ldr	r2, [r3, #28]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	69d9      	ldr	r1, [r3, #28]
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	021a      	lsls	r2, r3, #8
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	61da      	str	r2, [r3, #28]
      break;
 800430e:	e043      	b.n	8004398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68b9      	ldr	r1, [r7, #8]
 8004316:	4618      	mov	r0, r3
 8004318:	f000 fb6a 	bl	80049f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0208 	orr.w	r2, r2, #8
 800432a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 0204 	bic.w	r2, r2, #4
 800433a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	691a      	ldr	r2, [r3, #16]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800434e:	e023      	b.n	8004398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68b9      	ldr	r1, [r7, #8]
 8004356:	4618      	mov	r0, r3
 8004358:	f000 fba2 	bl	8004aa0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800436a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800437a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	021a      	lsls	r2, r3, #8
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	430a      	orrs	r2, r1
 800438e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004390:	e002      	b.n	8004398 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	75fb      	strb	r3, [r7, #23]
      break;
 8004396:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop

080043ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043b6:	2300      	movs	r3, #0
 80043b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d101      	bne.n	80043c8 <HAL_TIM_ConfigClockSource+0x1c>
 80043c4:	2302      	movs	r3, #2
 80043c6:	e0b6      	b.n	8004536 <HAL_TIM_ConfigClockSource+0x18a>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2202      	movs	r2, #2
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004404:	d03e      	beq.n	8004484 <HAL_TIM_ConfigClockSource+0xd8>
 8004406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800440a:	f200 8087 	bhi.w	800451c <HAL_TIM_ConfigClockSource+0x170>
 800440e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004412:	f000 8086 	beq.w	8004522 <HAL_TIM_ConfigClockSource+0x176>
 8004416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800441a:	d87f      	bhi.n	800451c <HAL_TIM_ConfigClockSource+0x170>
 800441c:	2b70      	cmp	r3, #112	; 0x70
 800441e:	d01a      	beq.n	8004456 <HAL_TIM_ConfigClockSource+0xaa>
 8004420:	2b70      	cmp	r3, #112	; 0x70
 8004422:	d87b      	bhi.n	800451c <HAL_TIM_ConfigClockSource+0x170>
 8004424:	2b60      	cmp	r3, #96	; 0x60
 8004426:	d050      	beq.n	80044ca <HAL_TIM_ConfigClockSource+0x11e>
 8004428:	2b60      	cmp	r3, #96	; 0x60
 800442a:	d877      	bhi.n	800451c <HAL_TIM_ConfigClockSource+0x170>
 800442c:	2b50      	cmp	r3, #80	; 0x50
 800442e:	d03c      	beq.n	80044aa <HAL_TIM_ConfigClockSource+0xfe>
 8004430:	2b50      	cmp	r3, #80	; 0x50
 8004432:	d873      	bhi.n	800451c <HAL_TIM_ConfigClockSource+0x170>
 8004434:	2b40      	cmp	r3, #64	; 0x40
 8004436:	d058      	beq.n	80044ea <HAL_TIM_ConfigClockSource+0x13e>
 8004438:	2b40      	cmp	r3, #64	; 0x40
 800443a:	d86f      	bhi.n	800451c <HAL_TIM_ConfigClockSource+0x170>
 800443c:	2b30      	cmp	r3, #48	; 0x30
 800443e:	d064      	beq.n	800450a <HAL_TIM_ConfigClockSource+0x15e>
 8004440:	2b30      	cmp	r3, #48	; 0x30
 8004442:	d86b      	bhi.n	800451c <HAL_TIM_ConfigClockSource+0x170>
 8004444:	2b20      	cmp	r3, #32
 8004446:	d060      	beq.n	800450a <HAL_TIM_ConfigClockSource+0x15e>
 8004448:	2b20      	cmp	r3, #32
 800444a:	d867      	bhi.n	800451c <HAL_TIM_ConfigClockSource+0x170>
 800444c:	2b00      	cmp	r3, #0
 800444e:	d05c      	beq.n	800450a <HAL_TIM_ConfigClockSource+0x15e>
 8004450:	2b10      	cmp	r3, #16
 8004452:	d05a      	beq.n	800450a <HAL_TIM_ConfigClockSource+0x15e>
 8004454:	e062      	b.n	800451c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6818      	ldr	r0, [r3, #0]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	6899      	ldr	r1, [r3, #8]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	685a      	ldr	r2, [r3, #4]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	f000 fbef 	bl	8004c48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004478:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	609a      	str	r2, [r3, #8]
      break;
 8004482:	e04f      	b.n	8004524 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6818      	ldr	r0, [r3, #0]
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	6899      	ldr	r1, [r3, #8]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	f000 fbd8 	bl	8004c48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044a6:	609a      	str	r2, [r3, #8]
      break;
 80044a8:	e03c      	b.n	8004524 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6818      	ldr	r0, [r3, #0]
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	6859      	ldr	r1, [r3, #4]
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	461a      	mov	r2, r3
 80044b8:	f000 fb4c 	bl	8004b54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2150      	movs	r1, #80	; 0x50
 80044c2:	4618      	mov	r0, r3
 80044c4:	f000 fba5 	bl	8004c12 <TIM_ITRx_SetConfig>
      break;
 80044c8:	e02c      	b.n	8004524 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6818      	ldr	r0, [r3, #0]
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	6859      	ldr	r1, [r3, #4]
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	461a      	mov	r2, r3
 80044d8:	f000 fb6b 	bl	8004bb2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2160      	movs	r1, #96	; 0x60
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 fb95 	bl	8004c12 <TIM_ITRx_SetConfig>
      break;
 80044e8:	e01c      	b.n	8004524 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6818      	ldr	r0, [r3, #0]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	6859      	ldr	r1, [r3, #4]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	461a      	mov	r2, r3
 80044f8:	f000 fb2c 	bl	8004b54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2140      	movs	r1, #64	; 0x40
 8004502:	4618      	mov	r0, r3
 8004504:	f000 fb85 	bl	8004c12 <TIM_ITRx_SetConfig>
      break;
 8004508:	e00c      	b.n	8004524 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4619      	mov	r1, r3
 8004514:	4610      	mov	r0, r2
 8004516:	f000 fb7c 	bl	8004c12 <TIM_ITRx_SetConfig>
      break;
 800451a:	e003      	b.n	8004524 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	73fb      	strb	r3, [r7, #15]
      break;
 8004520:	e000      	b.n	8004524 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004522:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004534:	7bfb      	ldrb	r3, [r7, #15]
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800453e:	b480      	push	{r7}
 8004540:	b083      	sub	sp, #12
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004546:	bf00      	nop
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr

08004552 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004552:	b480      	push	{r7}
 8004554:	b083      	sub	sp, #12
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800455a:	bf00      	nop
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr

08004566 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004566:	b480      	push	{r7}
 8004568:	b083      	sub	sp, #12
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800456e:	bf00      	nop
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800457a:	b480      	push	{r7}
 800457c:	b083      	sub	sp, #12
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004582:	bf00      	nop
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
	...

08004590 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a2a      	ldr	r2, [pc, #168]	; (800464c <TIM_Base_SetConfig+0xbc>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d003      	beq.n	80045b0 <TIM_Base_SetConfig+0x20>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ae:	d108      	bne.n	80045c2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	4313      	orrs	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a21      	ldr	r2, [pc, #132]	; (800464c <TIM_Base_SetConfig+0xbc>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d00b      	beq.n	80045e2 <TIM_Base_SetConfig+0x52>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d0:	d007      	beq.n	80045e2 <TIM_Base_SetConfig+0x52>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a1e      	ldr	r2, [pc, #120]	; (8004650 <TIM_Base_SetConfig+0xc0>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d003      	beq.n	80045e2 <TIM_Base_SetConfig+0x52>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a1d      	ldr	r2, [pc, #116]	; (8004654 <TIM_Base_SetConfig+0xc4>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d108      	bne.n	80045f4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	4313      	orrs	r3, r2
 8004600:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a0c      	ldr	r2, [pc, #48]	; (800464c <TIM_Base_SetConfig+0xbc>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d007      	beq.n	8004630 <TIM_Base_SetConfig+0xa0>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a0b      	ldr	r2, [pc, #44]	; (8004650 <TIM_Base_SetConfig+0xc0>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d003      	beq.n	8004630 <TIM_Base_SetConfig+0xa0>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a0a      	ldr	r2, [pc, #40]	; (8004654 <TIM_Base_SetConfig+0xc4>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d103      	bne.n	8004638 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	691a      	ldr	r2, [r3, #16]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	615a      	str	r2, [r3, #20]
}
 800463e:	bf00      	nop
 8004640:	3714      	adds	r7, #20
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	40012c00 	.word	0x40012c00
 8004650:	40014000 	.word	0x40014000
 8004654:	40014400 	.word	0x40014400

08004658 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004658:	b480      	push	{r7}
 800465a:	b087      	sub	sp, #28
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	f023 0201 	bic.w	r2, r3, #1
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800468a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f023 0303 	bic.w	r3, r3, #3
 8004692:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	4313      	orrs	r3, r2
 800469c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f023 0302 	bic.w	r3, r3, #2
 80046a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a24      	ldr	r2, [pc, #144]	; (8004744 <TIM_OC1_SetConfig+0xec>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d007      	beq.n	80046c8 <TIM_OC1_SetConfig+0x70>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a23      	ldr	r2, [pc, #140]	; (8004748 <TIM_OC1_SetConfig+0xf0>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d003      	beq.n	80046c8 <TIM_OC1_SetConfig+0x70>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a22      	ldr	r2, [pc, #136]	; (800474c <TIM_OC1_SetConfig+0xf4>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d10c      	bne.n	80046e2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	f023 0308 	bic.w	r3, r3, #8
 80046ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	697a      	ldr	r2, [r7, #20]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	f023 0304 	bic.w	r3, r3, #4
 80046e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a17      	ldr	r2, [pc, #92]	; (8004744 <TIM_OC1_SetConfig+0xec>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d007      	beq.n	80046fa <TIM_OC1_SetConfig+0xa2>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a16      	ldr	r2, [pc, #88]	; (8004748 <TIM_OC1_SetConfig+0xf0>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d003      	beq.n	80046fa <TIM_OC1_SetConfig+0xa2>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a15      	ldr	r2, [pc, #84]	; (800474c <TIM_OC1_SetConfig+0xf4>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d111      	bne.n	800471e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004700:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004708:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	4313      	orrs	r3, r2
 8004712:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	4313      	orrs	r3, r2
 800471c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	621a      	str	r2, [r3, #32]
}
 8004738:	bf00      	nop
 800473a:	371c      	adds	r7, #28
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	40012c00 	.word	0x40012c00
 8004748:	40014000 	.word	0x40014000
 800474c:	40014400 	.word	0x40014400

08004750 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004750:	b480      	push	{r7}
 8004752:	b087      	sub	sp, #28
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	f023 0210 	bic.w	r2, r3, #16
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800477e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800478a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	021b      	lsls	r3, r3, #8
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	4313      	orrs	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	f023 0320 	bic.w	r3, r3, #32
 800479e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	011b      	lsls	r3, r3, #4
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a22      	ldr	r2, [pc, #136]	; (8004838 <TIM_OC2_SetConfig+0xe8>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d10d      	bne.n	80047d0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	011b      	lsls	r3, r3, #4
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a19      	ldr	r2, [pc, #100]	; (8004838 <TIM_OC2_SetConfig+0xe8>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d007      	beq.n	80047e8 <TIM_OC2_SetConfig+0x98>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a18      	ldr	r2, [pc, #96]	; (800483c <TIM_OC2_SetConfig+0xec>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d003      	beq.n	80047e8 <TIM_OC2_SetConfig+0x98>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a17      	ldr	r2, [pc, #92]	; (8004840 <TIM_OC2_SetConfig+0xf0>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d113      	bne.n	8004810 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	4313      	orrs	r3, r2
 8004802:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	4313      	orrs	r3, r2
 800480e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	621a      	str	r2, [r3, #32]
}
 800482a:	bf00      	nop
 800482c:	371c      	adds	r7, #28
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	40012c00 	.word	0x40012c00
 800483c:	40014000 	.word	0x40014000
 8004840:	40014400 	.word	0x40014400

08004844 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	69db      	ldr	r3, [r3, #28]
 800486a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 0303 	bic.w	r3, r3, #3
 800487e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	4313      	orrs	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004890:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	021b      	lsls	r3, r3, #8
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	4313      	orrs	r3, r2
 800489c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a21      	ldr	r2, [pc, #132]	; (8004928 <TIM_OC3_SetConfig+0xe4>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d10d      	bne.n	80048c2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	021b      	lsls	r3, r3, #8
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a18      	ldr	r2, [pc, #96]	; (8004928 <TIM_OC3_SetConfig+0xe4>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d007      	beq.n	80048da <TIM_OC3_SetConfig+0x96>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a17      	ldr	r2, [pc, #92]	; (800492c <TIM_OC3_SetConfig+0xe8>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d003      	beq.n	80048da <TIM_OC3_SetConfig+0x96>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a16      	ldr	r2, [pc, #88]	; (8004930 <TIM_OC3_SetConfig+0xec>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d113      	bne.n	8004902 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	011b      	lsls	r3, r3, #4
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	011b      	lsls	r3, r3, #4
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	4313      	orrs	r3, r2
 8004900:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	621a      	str	r2, [r3, #32]
}
 800491c:	bf00      	nop
 800491e:	371c      	adds	r7, #28
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr
 8004928:	40012c00 	.word	0x40012c00
 800492c:	40014000 	.word	0x40014000
 8004930:	40014400 	.word	0x40014400

08004934 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004934:	b480      	push	{r7}
 8004936:	b087      	sub	sp, #28
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	69db      	ldr	r3, [r3, #28]
 800495a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800496e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	021b      	lsls	r3, r3, #8
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	4313      	orrs	r3, r2
 800497a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004982:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	031b      	lsls	r3, r3, #12
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	4313      	orrs	r3, r2
 800498e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a14      	ldr	r2, [pc, #80]	; (80049e4 <TIM_OC4_SetConfig+0xb0>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d007      	beq.n	80049a8 <TIM_OC4_SetConfig+0x74>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a13      	ldr	r2, [pc, #76]	; (80049e8 <TIM_OC4_SetConfig+0xb4>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d003      	beq.n	80049a8 <TIM_OC4_SetConfig+0x74>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a12      	ldr	r2, [pc, #72]	; (80049ec <TIM_OC4_SetConfig+0xb8>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d109      	bne.n	80049bc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	019b      	lsls	r3, r3, #6
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	621a      	str	r2, [r3, #32]
}
 80049d6:	bf00      	nop
 80049d8:	371c      	adds	r7, #28
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	40012c00 	.word	0x40012c00
 80049e8:	40014000 	.word	0x40014000
 80049ec:	40014400 	.word	0x40014400

080049f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004a34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	041b      	lsls	r3, r3, #16
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a13      	ldr	r2, [pc, #76]	; (8004a94 <TIM_OC5_SetConfig+0xa4>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d007      	beq.n	8004a5a <TIM_OC5_SetConfig+0x6a>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a12      	ldr	r2, [pc, #72]	; (8004a98 <TIM_OC5_SetConfig+0xa8>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d003      	beq.n	8004a5a <TIM_OC5_SetConfig+0x6a>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a11      	ldr	r2, [pc, #68]	; (8004a9c <TIM_OC5_SetConfig+0xac>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d109      	bne.n	8004a6e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	021b      	lsls	r3, r3, #8
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	621a      	str	r2, [r3, #32]
}
 8004a88:	bf00      	nop
 8004a8a:	371c      	adds	r7, #28
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	40012c00 	.word	0x40012c00
 8004a98:	40014000 	.word	0x40014000
 8004a9c:	40014400 	.word	0x40014400

08004aa0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b087      	sub	sp, #28
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a1b      	ldr	r3, [r3, #32]
 8004aae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ad2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	021b      	lsls	r3, r3, #8
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ae6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	051b      	lsls	r3, r3, #20
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a14      	ldr	r2, [pc, #80]	; (8004b48 <TIM_OC6_SetConfig+0xa8>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d007      	beq.n	8004b0c <TIM_OC6_SetConfig+0x6c>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a13      	ldr	r2, [pc, #76]	; (8004b4c <TIM_OC6_SetConfig+0xac>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d003      	beq.n	8004b0c <TIM_OC6_SetConfig+0x6c>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a12      	ldr	r2, [pc, #72]	; (8004b50 <TIM_OC6_SetConfig+0xb0>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d109      	bne.n	8004b20 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	029b      	lsls	r3, r3, #10
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	621a      	str	r2, [r3, #32]
}
 8004b3a:	bf00      	nop
 8004b3c:	371c      	adds	r7, #28
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	40012c00 	.word	0x40012c00
 8004b4c:	40014000 	.word	0x40014000
 8004b50:	40014400 	.word	0x40014400

08004b54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b087      	sub	sp, #28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6a1b      	ldr	r3, [r3, #32]
 8004b64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	f023 0201 	bic.w	r2, r3, #1
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	011b      	lsls	r3, r3, #4
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f023 030a 	bic.w	r3, r3, #10
 8004b90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	621a      	str	r2, [r3, #32]
}
 8004ba6:	bf00      	nop
 8004ba8:	371c      	adds	r7, #28
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b087      	sub	sp, #28
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	60f8      	str	r0, [r7, #12]
 8004bba:	60b9      	str	r1, [r7, #8]
 8004bbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	f023 0210 	bic.w	r2, r3, #16
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6a1b      	ldr	r3, [r3, #32]
 8004bd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	031b      	lsls	r3, r3, #12
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	011b      	lsls	r3, r3, #4
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	621a      	str	r2, [r3, #32]
}
 8004c06:	bf00      	nop
 8004c08:	371c      	adds	r7, #28
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c12:	b480      	push	{r7}
 8004c14:	b085      	sub	sp, #20
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
 8004c1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	f043 0307 	orr.w	r3, r3, #7
 8004c34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	609a      	str	r2, [r3, #8]
}
 8004c3c:	bf00      	nop
 8004c3e:	3714      	adds	r7, #20
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b087      	sub	sp, #28
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
 8004c54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	021a      	lsls	r2, r3, #8
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	609a      	str	r2, [r3, #8]
}
 8004c7c:	bf00      	nop
 8004c7e:	371c      	adds	r7, #28
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	f003 031f 	and.w	r3, r3, #31
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6a1a      	ldr	r2, [r3, #32]
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	43db      	mvns	r3, r3
 8004caa:	401a      	ands	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6a1a      	ldr	r2, [r3, #32]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	f003 031f 	and.w	r3, r3, #31
 8004cba:	6879      	ldr	r1, [r7, #4]
 8004cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	621a      	str	r2, [r3, #32]
}
 8004cc6:	bf00      	nop
 8004cc8:	371c      	adds	r7, #28
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
	...

08004cd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d101      	bne.n	8004cec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ce8:	2302      	movs	r3, #2
 8004cea:	e04f      	b.n	8004d8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a21      	ldr	r2, [pc, #132]	; (8004d98 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d108      	bne.n	8004d28 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004d1c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a14      	ldr	r2, [pc, #80]	; (8004d98 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d009      	beq.n	8004d60 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d54:	d004      	beq.n	8004d60 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a10      	ldr	r2, [pc, #64]	; (8004d9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d10c      	bne.n	8004d7a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3714      	adds	r7, #20
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	40012c00 	.word	0x40012c00
 8004d9c:	40014000 	.word	0x40014000

08004da0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <__libc_init_array>:
 8004ddc:	b570      	push	{r4, r5, r6, lr}
 8004dde:	4d0d      	ldr	r5, [pc, #52]	; (8004e14 <__libc_init_array+0x38>)
 8004de0:	4c0d      	ldr	r4, [pc, #52]	; (8004e18 <__libc_init_array+0x3c>)
 8004de2:	1b64      	subs	r4, r4, r5
 8004de4:	10a4      	asrs	r4, r4, #2
 8004de6:	2600      	movs	r6, #0
 8004de8:	42a6      	cmp	r6, r4
 8004dea:	d109      	bne.n	8004e00 <__libc_init_array+0x24>
 8004dec:	4d0b      	ldr	r5, [pc, #44]	; (8004e1c <__libc_init_array+0x40>)
 8004dee:	4c0c      	ldr	r4, [pc, #48]	; (8004e20 <__libc_init_array+0x44>)
 8004df0:	f000 f820 	bl	8004e34 <_init>
 8004df4:	1b64      	subs	r4, r4, r5
 8004df6:	10a4      	asrs	r4, r4, #2
 8004df8:	2600      	movs	r6, #0
 8004dfa:	42a6      	cmp	r6, r4
 8004dfc:	d105      	bne.n	8004e0a <__libc_init_array+0x2e>
 8004dfe:	bd70      	pop	{r4, r5, r6, pc}
 8004e00:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e04:	4798      	blx	r3
 8004e06:	3601      	adds	r6, #1
 8004e08:	e7ee      	b.n	8004de8 <__libc_init_array+0xc>
 8004e0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e0e:	4798      	blx	r3
 8004e10:	3601      	adds	r6, #1
 8004e12:	e7f2      	b.n	8004dfa <__libc_init_array+0x1e>
 8004e14:	08004e8c 	.word	0x08004e8c
 8004e18:	08004e8c 	.word	0x08004e8c
 8004e1c:	08004e8c 	.word	0x08004e8c
 8004e20:	08004e90 	.word	0x08004e90

08004e24 <memset>:
 8004e24:	4402      	add	r2, r0
 8004e26:	4603      	mov	r3, r0
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d100      	bne.n	8004e2e <memset+0xa>
 8004e2c:	4770      	bx	lr
 8004e2e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e32:	e7f9      	b.n	8004e28 <memset+0x4>

08004e34 <_init>:
 8004e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e36:	bf00      	nop
 8004e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e3a:	bc08      	pop	{r3}
 8004e3c:	469e      	mov	lr, r3
 8004e3e:	4770      	bx	lr

08004e40 <_fini>:
 8004e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e42:	bf00      	nop
 8004e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e46:	bc08      	pop	{r3}
 8004e48:	469e      	mov	lr, r3
 8004e4a:	4770      	bx	lr
