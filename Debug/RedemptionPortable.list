
RedemptionPortable.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002074  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002200  08002200  00012200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002240  08002240  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002240  08002240  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002240  08002240  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002240  08002240  00012240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002244  08002244  00012244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08002254  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08002254  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ddd  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b2d  00000000  00000000  00029e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  0002b948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000918  00000000  00000000  0002c348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001d84  00000000  00000000  0002cc60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bfb8  00000000  00000000  0002e9e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0a71  00000000  00000000  0003a99c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fb40d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002768  00000000  00000000  000fb460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080021e8 	.word	0x080021e8

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080021e8 	.word	0x080021e8

080001cc <PIDController_Init>:
#include "PID.h"

void PIDController_Init(PIDController *pid) {
 80001cc:	b480      	push	{r7}
 80001ce:	b083      	sub	sp, #12
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0.0f;
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	f04f 0200 	mov.w	r2, #0
 80001da:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevError  = 0.0f;
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	f04f 0200 	mov.w	r2, #0
 80001e2:	629a      	str	r2, [r3, #40]	; 0x28

	pid->differentiator  = 0.0f;
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	f04f 0200 	mov.w	r2, #0
 80001ea:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->prevMeasurement = 0.0f;
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	f04f 0200 	mov.w	r2, #0
 80001f2:	631a      	str	r2, [r3, #48]	; 0x30

	pid->out = 0.0f;
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f04f 0200 	mov.w	r2, #0
 80001fa:	635a      	str	r2, [r3, #52]	; 0x34

}
 80001fc:	bf00      	nop
 80001fe:	370c      	adds	r7, #12
 8000200:	46bd      	mov	sp, r7
 8000202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000206:	4770      	bx	lr

08000208 <InitializePIDController>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

#if (ENABLEPID)	//Region ENABLEPID

	void InitializePIDController() {
 8000208:	b580      	push	{r7, lr}
 800020a:	b08e      	sub	sp, #56	; 0x38
 800020c:	af00      	add	r7, sp, #0
		/* USER CODE BEGIN 2 */
		PIDController pid = {   PID_KP, PID_KI, PID_KD, PID_TAU, PID_LIM_MIN,
 800020e:	463b      	mov	r3, r7
 8000210:	2238      	movs	r2, #56	; 0x38
 8000212:	2100      	movs	r1, #0
 8000214:	4618      	mov	r0, r3
 8000216:	f001 ffdf 	bl	80021d8 <memset>
 800021a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800021e:	603b      	str	r3, [r7, #0]
 8000220:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8000224:	607b      	str	r3, [r7, #4]
 8000226:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 800022a:	60bb      	str	r3, [r7, #8]
 800022c:	4b09      	ldr	r3, [pc, #36]	; (8000254 <InitializePIDController+0x4c>)
 800022e:	60fb      	str	r3, [r7, #12]
 8000230:	4b09      	ldr	r3, [pc, #36]	; (8000258 <InitializePIDController+0x50>)
 8000232:	613b      	str	r3, [r7, #16]
 8000234:	4b09      	ldr	r3, [pc, #36]	; (800025c <InitializePIDController+0x54>)
 8000236:	617b      	str	r3, [r7, #20]
 8000238:	4b09      	ldr	r3, [pc, #36]	; (8000260 <InitializePIDController+0x58>)
 800023a:	61bb      	str	r3, [r7, #24]
 800023c:	4b09      	ldr	r3, [pc, #36]	; (8000264 <InitializePIDController+0x5c>)
 800023e:	61fb      	str	r3, [r7, #28]
 8000240:	4b09      	ldr	r3, [pc, #36]	; (8000268 <InitializePIDController+0x60>)
 8000242:	623b      	str	r3, [r7, #32]
								PID_LIM_MAX, PID_LIM_MIN_INT, PID_LIM_MAX_INT,
								SAMPLE_TIME_S };
		PIDController_Init(&pid);
 8000244:	463b      	mov	r3, r7
 8000246:	4618      	mov	r0, r3
 8000248:	f7ff ffc0 	bl	80001cc <PIDController_Init>
	}
 800024c:	bf00      	nop
 800024e:	3738      	adds	r7, #56	; 0x38
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	3ca3d70a 	.word	0x3ca3d70a
 8000258:	c1200000 	.word	0xc1200000
 800025c:	41200000 	.word	0x41200000
 8000260:	c0a00000 	.word	0xc0a00000
 8000264:	40a00000 	.word	0x40a00000
 8000268:	3c23d70a 	.word	0x3c23d70a

0800026c <EnterSleepMode>:

#endif			//End Region ENABLEPID


#if (ENABLESLEEPMODE)
	void EnterSleepMode() {
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
		HAL_SuspendTick();
 8000270:	f000 fa0e 	bl	8000690 <HAL_SuspendTick>
		HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000274:	2101      	movs	r1, #1
 8000276:	2000      	movs	r0, #0
 8000278:	f000 fda0 	bl	8000dbc <HAL_PWR_EnterSLEEPMode>
	}
 800027c:	bf00      	nop
 800027e:	bd80      	pop	{r7, pc}

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000284:	f000 f98f 	bl	80005a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000288:	f000 f809 	bl	800029e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028c:	f000 f88c 	bl	80003a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000290:	f000 f84c 	bl	800032c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

#if (ENABLEPID)	//Region ENABLEPID
  InitializePIDController();
 8000294:	f7ff ffb8 	bl	8000208 <InitializePIDController>



	  #if (ENABLESLEEPMODE)

	  	  EnterSleepMode();
 8000298:	f7ff ffe8 	bl	800026c <EnterSleepMode>
 800029c:	e7fc      	b.n	8000298 <main+0x18>

0800029e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800029e:	b580      	push	{r7, lr}
 80002a0:	b096      	sub	sp, #88	; 0x58
 80002a2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a4:	f107 0314 	add.w	r3, r7, #20
 80002a8:	2244      	movs	r2, #68	; 0x44
 80002aa:	2100      	movs	r1, #0
 80002ac:	4618      	mov	r0, r3
 80002ae:	f001 ff93 	bl	80021d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b2:	463b      	mov	r3, r7
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	605a      	str	r2, [r3, #4]
 80002ba:	609a      	str	r2, [r3, #8]
 80002bc:	60da      	str	r2, [r3, #12]
 80002be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002c0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002c4:	f000 fdbc 	bl	8000e40 <HAL_PWREx_ControlVoltageScaling>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002ce:	f000 f883 	bl	80003d8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002d2:	2310      	movs	r3, #16
 80002d4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002d6:	2301      	movs	r3, #1
 80002d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002da:	2300      	movs	r3, #0
 80002dc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002de:	2360      	movs	r3, #96	; 0x60
 80002e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002e2:	2300      	movs	r3, #0
 80002e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e6:	f107 0314 	add.w	r3, r7, #20
 80002ea:	4618      	mov	r0, r3
 80002ec:	f000 fe46 	bl	8000f7c <HAL_RCC_OscConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80002f6:	f000 f86f 	bl	80003d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fa:	230f      	movs	r3, #15
 80002fc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002fe:	2300      	movs	r3, #0
 8000300:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000302:	2300      	movs	r3, #0
 8000304:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800030e:	463b      	mov	r3, r7
 8000310:	2100      	movs	r1, #0
 8000312:	4618      	mov	r0, r3
 8000314:	f001 fa46 	bl	80017a4 <HAL_RCC_ClockConfig>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800031e:	f000 f85b 	bl	80003d8 <Error_Handler>
  }
}
 8000322:	bf00      	nop
 8000324:	3758      	adds	r7, #88	; 0x58
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
	...

0800032c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000330:	4b1b      	ldr	r3, [pc, #108]	; (80003a0 <MX_I2C1_Init+0x74>)
 8000332:	4a1c      	ldr	r2, [pc, #112]	; (80003a4 <MX_I2C1_Init+0x78>)
 8000334:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000004;
 8000336:	4b1a      	ldr	r3, [pc, #104]	; (80003a0 <MX_I2C1_Init+0x74>)
 8000338:	2204      	movs	r2, #4
 800033a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800033c:	4b18      	ldr	r3, [pc, #96]	; (80003a0 <MX_I2C1_Init+0x74>)
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000342:	4b17      	ldr	r3, [pc, #92]	; (80003a0 <MX_I2C1_Init+0x74>)
 8000344:	2201      	movs	r2, #1
 8000346:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000348:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <MX_I2C1_Init+0x74>)
 800034a:	2200      	movs	r2, #0
 800034c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800034e:	4b14      	ldr	r3, [pc, #80]	; (80003a0 <MX_I2C1_Init+0x74>)
 8000350:	2200      	movs	r2, #0
 8000352:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000354:	4b12      	ldr	r3, [pc, #72]	; (80003a0 <MX_I2C1_Init+0x74>)
 8000356:	2200      	movs	r2, #0
 8000358:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800035a:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <MX_I2C1_Init+0x74>)
 800035c:	2200      	movs	r2, #0
 800035e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000360:	4b0f      	ldr	r3, [pc, #60]	; (80003a0 <MX_I2C1_Init+0x74>)
 8000362:	2200      	movs	r2, #0
 8000364:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000366:	480e      	ldr	r0, [pc, #56]	; (80003a0 <MX_I2C1_Init+0x74>)
 8000368:	f000 fc02 	bl	8000b70 <HAL_I2C_Init>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000372:	f000 f831 	bl	80003d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000376:	2100      	movs	r1, #0
 8000378:	4809      	ldr	r0, [pc, #36]	; (80003a0 <MX_I2C1_Init+0x74>)
 800037a:	f000 fc88 	bl	8000c8e <HAL_I2CEx_ConfigAnalogFilter>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000384:	f000 f828 	bl	80003d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000388:	2100      	movs	r1, #0
 800038a:	4805      	ldr	r0, [pc, #20]	; (80003a0 <MX_I2C1_Init+0x74>)
 800038c:	f000 fcca 	bl	8000d24 <HAL_I2CEx_ConfigDigitalFilter>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000396:	f000 f81f 	bl	80003d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	20000028 	.word	0x20000028
 80003a4:	40005400 	.word	0x40005400

080003a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ae:	4b09      	ldr	r3, [pc, #36]	; (80003d4 <MX_GPIO_Init+0x2c>)
 80003b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003b2:	4a08      	ldr	r2, [pc, #32]	; (80003d4 <MX_GPIO_Init+0x2c>)
 80003b4:	f043 0301 	orr.w	r3, r3, #1
 80003b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003ba:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <MX_GPIO_Init+0x2c>)
 80003bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003be:	f003 0301 	and.w	r3, r3, #1
 80003c2:	607b      	str	r3, [r7, #4]
 80003c4:	687b      	ldr	r3, [r7, #4]

}
 80003c6:	bf00      	nop
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	40021000 	.word	0x40021000

080003d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003dc:	b672      	cpsid	i
}
 80003de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003e0:	e7fe      	b.n	80003e0 <Error_Handler+0x8>
	...

080003e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003ea:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <HAL_MspInit+0x44>)
 80003ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003ee:	4a0e      	ldr	r2, [pc, #56]	; (8000428 <HAL_MspInit+0x44>)
 80003f0:	f043 0301 	orr.w	r3, r3, #1
 80003f4:	6613      	str	r3, [r2, #96]	; 0x60
 80003f6:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <HAL_MspInit+0x44>)
 80003f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003fa:	f003 0301 	and.w	r3, r3, #1
 80003fe:	607b      	str	r3, [r7, #4]
 8000400:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000402:	4b09      	ldr	r3, [pc, #36]	; (8000428 <HAL_MspInit+0x44>)
 8000404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000406:	4a08      	ldr	r2, [pc, #32]	; (8000428 <HAL_MspInit+0x44>)
 8000408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800040c:	6593      	str	r3, [r2, #88]	; 0x58
 800040e:	4b06      	ldr	r3, [pc, #24]	; (8000428 <HAL_MspInit+0x44>)
 8000410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000416:	603b      	str	r3, [r7, #0]
 8000418:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800041a:	bf00      	nop
 800041c:	370c      	adds	r7, #12
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	40021000 	.word	0x40021000

0800042c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b0a0      	sub	sp, #128	; 0x80
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000434:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000438:	2200      	movs	r2, #0
 800043a:	601a      	str	r2, [r3, #0]
 800043c:	605a      	str	r2, [r3, #4]
 800043e:	609a      	str	r2, [r3, #8]
 8000440:	60da      	str	r2, [r3, #12]
 8000442:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000444:	f107 0310 	add.w	r3, r7, #16
 8000448:	225c      	movs	r2, #92	; 0x5c
 800044a:	2100      	movs	r1, #0
 800044c:	4618      	mov	r0, r3
 800044e:	f001 fec3 	bl	80021d8 <memset>
  if(hi2c->Instance==I2C1)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4a1f      	ldr	r2, [pc, #124]	; (80004d4 <HAL_I2C_MspInit+0xa8>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d137      	bne.n	80004cc <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800045c:	2340      	movs	r3, #64	; 0x40
 800045e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000460:	2300      	movs	r3, #0
 8000462:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000464:	f107 0310 	add.w	r3, r7, #16
 8000468:	4618      	mov	r0, r3
 800046a:	f001 fb87 	bl	8001b7c <HAL_RCCEx_PeriphCLKConfig>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000474:	f7ff ffb0 	bl	80003d8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000478:	4b17      	ldr	r3, [pc, #92]	; (80004d8 <HAL_I2C_MspInit+0xac>)
 800047a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800047c:	4a16      	ldr	r2, [pc, #88]	; (80004d8 <HAL_I2C_MspInit+0xac>)
 800047e:	f043 0301 	orr.w	r3, r3, #1
 8000482:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000484:	4b14      	ldr	r3, [pc, #80]	; (80004d8 <HAL_I2C_MspInit+0xac>)
 8000486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000488:	f003 0301 	and.w	r3, r3, #1
 800048c:	60fb      	str	r3, [r7, #12]
 800048e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000490:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000494:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000496:	2312      	movs	r3, #18
 8000498:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049a:	2300      	movs	r3, #0
 800049c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800049e:	2303      	movs	r3, #3
 80004a0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80004a2:	2304      	movs	r3, #4
 80004a4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80004aa:	4619      	mov	r1, r3
 80004ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b0:	f000 f9e4 	bl	800087c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004b4:	4b08      	ldr	r3, [pc, #32]	; (80004d8 <HAL_I2C_MspInit+0xac>)
 80004b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004b8:	4a07      	ldr	r2, [pc, #28]	; (80004d8 <HAL_I2C_MspInit+0xac>)
 80004ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004be:	6593      	str	r3, [r2, #88]	; 0x58
 80004c0:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <HAL_I2C_MspInit+0xac>)
 80004c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004c8:	60bb      	str	r3, [r7, #8]
 80004ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80004cc:	bf00      	nop
 80004ce:	3780      	adds	r7, #128	; 0x80
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	40005400 	.word	0x40005400
 80004d8:	40021000 	.word	0x40021000

080004dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <NMI_Handler+0x4>

080004e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004e2:	b480      	push	{r7}
 80004e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004e6:	e7fe      	b.n	80004e6 <HardFault_Handler+0x4>

080004e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004ec:	e7fe      	b.n	80004ec <MemManage_Handler+0x4>

080004ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004f2:	e7fe      	b.n	80004f2 <BusFault_Handler+0x4>

080004f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004f8:	e7fe      	b.n	80004f8 <UsageFault_Handler+0x4>

080004fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004fe:	bf00      	nop
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr

08000508 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr

08000516 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000516:	b480      	push	{r7}
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800051a:	bf00      	nop
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr

08000524 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000528:	f000 f892 	bl	8000650 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800052c:	bf00      	nop
 800052e:	bd80      	pop	{r7, pc}

08000530 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <SystemInit+0x20>)
 8000536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800053a:	4a05      	ldr	r2, [pc, #20]	; (8000550 <SystemInit+0x20>)
 800053c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000540:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	e000ed00 	.word	0xe000ed00

08000554 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000554:	f8df d034 	ldr.w	sp, [pc, #52]	; 800058c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000558:	f7ff ffea 	bl	8000530 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800055c:	480c      	ldr	r0, [pc, #48]	; (8000590 <LoopForever+0x6>)
  ldr r1, =_edata
 800055e:	490d      	ldr	r1, [pc, #52]	; (8000594 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000560:	4a0d      	ldr	r2, [pc, #52]	; (8000598 <LoopForever+0xe>)
  movs r3, #0
 8000562:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000564:	e002      	b.n	800056c <LoopCopyDataInit>

08000566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800056a:	3304      	adds	r3, #4

0800056c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800056c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800056e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000570:	d3f9      	bcc.n	8000566 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000572:	4a0a      	ldr	r2, [pc, #40]	; (800059c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000574:	4c0a      	ldr	r4, [pc, #40]	; (80005a0 <LoopForever+0x16>)
  movs r3, #0
 8000576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000578:	e001      	b.n	800057e <LoopFillZerobss>

0800057a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800057a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800057c:	3204      	adds	r2, #4

0800057e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800057e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000580:	d3fb      	bcc.n	800057a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000582:	f001 fe05 	bl	8002190 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000586:	f7ff fe7b 	bl	8000280 <main>

0800058a <LoopForever>:

LoopForever:
    b LoopForever
 800058a:	e7fe      	b.n	800058a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800058c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000594:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000598:	08002248 	.word	0x08002248
  ldr r2, =_sbss
 800059c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005a0:	20000080 	.word	0x20000080

080005a4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005a4:	e7fe      	b.n	80005a4 <ADC1_IRQHandler>

080005a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a6:	b580      	push	{r7, lr}
 80005a8:	b082      	sub	sp, #8
 80005aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005ac:	2300      	movs	r3, #0
 80005ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b0:	2003      	movs	r0, #3
 80005b2:	f000 f92f 	bl	8000814 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005b6:	200f      	movs	r0, #15
 80005b8:	f000 f80e 	bl	80005d8 <HAL_InitTick>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d002      	beq.n	80005c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005c2:	2301      	movs	r3, #1
 80005c4:	71fb      	strb	r3, [r7, #7]
 80005c6:	e001      	b.n	80005cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005c8:	f7ff ff0c 	bl	80003e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005cc:	79fb      	ldrb	r3, [r7, #7]
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
	...

080005d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005e0:	2300      	movs	r3, #0
 80005e2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80005e4:	4b17      	ldr	r3, [pc, #92]	; (8000644 <HAL_InitTick+0x6c>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d023      	beq.n	8000634 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80005ec:	4b16      	ldr	r3, [pc, #88]	; (8000648 <HAL_InitTick+0x70>)
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	4b14      	ldr	r3, [pc, #80]	; (8000644 <HAL_InitTick+0x6c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	4619      	mov	r1, r3
 80005f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80005fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000602:	4618      	mov	r0, r3
 8000604:	f000 f92d 	bl	8000862 <HAL_SYSTICK_Config>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d10f      	bne.n	800062e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2b0f      	cmp	r3, #15
 8000612:	d809      	bhi.n	8000628 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000614:	2200      	movs	r2, #0
 8000616:	6879      	ldr	r1, [r7, #4]
 8000618:	f04f 30ff 	mov.w	r0, #4294967295
 800061c:	f000 f905 	bl	800082a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000620:	4a0a      	ldr	r2, [pc, #40]	; (800064c <HAL_InitTick+0x74>)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	6013      	str	r3, [r2, #0]
 8000626:	e007      	b.n	8000638 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000628:	2301      	movs	r3, #1
 800062a:	73fb      	strb	r3, [r7, #15]
 800062c:	e004      	b.n	8000638 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800062e:	2301      	movs	r3, #1
 8000630:	73fb      	strb	r3, [r7, #15]
 8000632:	e001      	b.n	8000638 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000634:	2301      	movs	r3, #1
 8000636:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000638:	7bfb      	ldrb	r3, [r7, #15]
}
 800063a:	4618      	mov	r0, r3
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000008 	.word	0x20000008
 8000648:	20000000 	.word	0x20000000
 800064c:	20000004 	.word	0x20000004

08000650 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <HAL_IncTick+0x20>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	461a      	mov	r2, r3
 800065a:	4b06      	ldr	r3, [pc, #24]	; (8000674 <HAL_IncTick+0x24>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4413      	add	r3, r2
 8000660:	4a04      	ldr	r2, [pc, #16]	; (8000674 <HAL_IncTick+0x24>)
 8000662:	6013      	str	r3, [r2, #0]
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20000008 	.word	0x20000008
 8000674:	2000007c 	.word	0x2000007c

08000678 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  return uwTick;
 800067c:	4b03      	ldr	r3, [pc, #12]	; (800068c <HAL_GetTick+0x14>)
 800067e:	681b      	ldr	r3, [r3, #0]
}
 8000680:	4618      	mov	r0, r3
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	2000007c 	.word	0x2000007c

08000690 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <HAL_SuspendTick+0x1c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a04      	ldr	r2, [pc, #16]	; (80006ac <HAL_SuspendTick+0x1c>)
 800069a:	f023 0302 	bic.w	r3, r3, #2
 800069e:	6013      	str	r3, [r2, #0]
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	e000e010 	.word	0xe000e010

080006b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	f003 0307 	and.w	r3, r3, #7
 80006be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <__NVIC_SetPriorityGrouping+0x44>)
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006c6:	68ba      	ldr	r2, [r7, #8]
 80006c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006cc:	4013      	ands	r3, r2
 80006ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006e2:	4a04      	ldr	r2, [pc, #16]	; (80006f4 <__NVIC_SetPriorityGrouping+0x44>)
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	60d3      	str	r3, [r2, #12]
}
 80006e8:	bf00      	nop
 80006ea:	3714      	adds	r7, #20
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006fc:	4b04      	ldr	r3, [pc, #16]	; (8000710 <__NVIC_GetPriorityGrouping+0x18>)
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	0a1b      	lsrs	r3, r3, #8
 8000702:	f003 0307 	and.w	r3, r3, #7
}
 8000706:	4618      	mov	r0, r3
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	6039      	str	r1, [r7, #0]
 800071e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000724:	2b00      	cmp	r3, #0
 8000726:	db0a      	blt.n	800073e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	b2da      	uxtb	r2, r3
 800072c:	490c      	ldr	r1, [pc, #48]	; (8000760 <__NVIC_SetPriority+0x4c>)
 800072e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000732:	0112      	lsls	r2, r2, #4
 8000734:	b2d2      	uxtb	r2, r2
 8000736:	440b      	add	r3, r1
 8000738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800073c:	e00a      	b.n	8000754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4908      	ldr	r1, [pc, #32]	; (8000764 <__NVIC_SetPriority+0x50>)
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	f003 030f 	and.w	r3, r3, #15
 800074a:	3b04      	subs	r3, #4
 800074c:	0112      	lsls	r2, r2, #4
 800074e:	b2d2      	uxtb	r2, r2
 8000750:	440b      	add	r3, r1
 8000752:	761a      	strb	r2, [r3, #24]
}
 8000754:	bf00      	nop
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	e000e100 	.word	0xe000e100
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000768:	b480      	push	{r7}
 800076a:	b089      	sub	sp, #36	; 0x24
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	f003 0307 	and.w	r3, r3, #7
 800077a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	f1c3 0307 	rsb	r3, r3, #7
 8000782:	2b04      	cmp	r3, #4
 8000784:	bf28      	it	cs
 8000786:	2304      	movcs	r3, #4
 8000788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	3304      	adds	r3, #4
 800078e:	2b06      	cmp	r3, #6
 8000790:	d902      	bls.n	8000798 <NVIC_EncodePriority+0x30>
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	3b03      	subs	r3, #3
 8000796:	e000      	b.n	800079a <NVIC_EncodePriority+0x32>
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800079c:	f04f 32ff 	mov.w	r2, #4294967295
 80007a0:	69bb      	ldr	r3, [r7, #24]
 80007a2:	fa02 f303 	lsl.w	r3, r2, r3
 80007a6:	43da      	mvns	r2, r3
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	401a      	ands	r2, r3
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007b0:	f04f 31ff 	mov.w	r1, #4294967295
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ba:	43d9      	mvns	r1, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c0:	4313      	orrs	r3, r2
         );
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3724      	adds	r7, #36	; 0x24
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
	...

080007d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	3b01      	subs	r3, #1
 80007dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007e0:	d301      	bcc.n	80007e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007e2:	2301      	movs	r3, #1
 80007e4:	e00f      	b.n	8000806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007e6:	4a0a      	ldr	r2, [pc, #40]	; (8000810 <SysTick_Config+0x40>)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	3b01      	subs	r3, #1
 80007ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007ee:	210f      	movs	r1, #15
 80007f0:	f04f 30ff 	mov.w	r0, #4294967295
 80007f4:	f7ff ff8e 	bl	8000714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <SysTick_Config+0x40>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007fe:	4b04      	ldr	r3, [pc, #16]	; (8000810 <SysTick_Config+0x40>)
 8000800:	2207      	movs	r2, #7
 8000802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000804:	2300      	movs	r3, #0
}
 8000806:	4618      	mov	r0, r3
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	e000e010 	.word	0xe000e010

08000814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f7ff ff47 	bl	80006b0 <__NVIC_SetPriorityGrouping>
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	b086      	sub	sp, #24
 800082e:	af00      	add	r7, sp, #0
 8000830:	4603      	mov	r3, r0
 8000832:	60b9      	str	r1, [r7, #8]
 8000834:	607a      	str	r2, [r7, #4]
 8000836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800083c:	f7ff ff5c 	bl	80006f8 <__NVIC_GetPriorityGrouping>
 8000840:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	68b9      	ldr	r1, [r7, #8]
 8000846:	6978      	ldr	r0, [r7, #20]
 8000848:	f7ff ff8e 	bl	8000768 <NVIC_EncodePriority>
 800084c:	4602      	mov	r2, r0
 800084e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000852:	4611      	mov	r1, r2
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ff5d 	bl	8000714 <__NVIC_SetPriority>
}
 800085a:	bf00      	nop
 800085c:	3718      	adds	r7, #24
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b082      	sub	sp, #8
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff ffb0 	bl	80007d0 <SysTick_Config>
 8000870:	4603      	mov	r3, r0
}
 8000872:	4618      	mov	r0, r3
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800087c:	b480      	push	{r7}
 800087e:	b087      	sub	sp, #28
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800088a:	e154      	b.n	8000b36 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	2101      	movs	r1, #1
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	fa01 f303 	lsl.w	r3, r1, r3
 8000898:	4013      	ands	r3, r2
 800089a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	f000 8146 	beq.w	8000b30 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	f003 0303 	and.w	r3, r3, #3
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d005      	beq.n	80008bc <HAL_GPIO_Init+0x40>
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	f003 0303 	and.w	r3, r3, #3
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	d130      	bne.n	800091e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	689b      	ldr	r3, [r3, #8]
 80008c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	2203      	movs	r2, #3
 80008c8:	fa02 f303 	lsl.w	r3, r2, r3
 80008cc:	43db      	mvns	r3, r3
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	4013      	ands	r3, r2
 80008d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	68da      	ldr	r2, [r3, #12]
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	693a      	ldr	r2, [r7, #16]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	693a      	ldr	r2, [r7, #16]
 80008ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008f2:	2201      	movs	r2, #1
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	fa02 f303 	lsl.w	r3, r2, r3
 80008fa:	43db      	mvns	r3, r3
 80008fc:	693a      	ldr	r2, [r7, #16]
 80008fe:	4013      	ands	r3, r2
 8000900:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	091b      	lsrs	r3, r3, #4
 8000908:	f003 0201 	and.w	r2, r3, #1
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	4313      	orrs	r3, r2
 8000916:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	f003 0303 	and.w	r3, r3, #3
 8000926:	2b03      	cmp	r3, #3
 8000928:	d017      	beq.n	800095a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	68db      	ldr	r3, [r3, #12]
 800092e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	2203      	movs	r2, #3
 8000936:	fa02 f303 	lsl.w	r3, r2, r3
 800093a:	43db      	mvns	r3, r3
 800093c:	693a      	ldr	r2, [r7, #16]
 800093e:	4013      	ands	r3, r2
 8000940:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	689a      	ldr	r2, [r3, #8]
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	fa02 f303 	lsl.w	r3, r2, r3
 800094e:	693a      	ldr	r2, [r7, #16]
 8000950:	4313      	orrs	r3, r2
 8000952:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	f003 0303 	and.w	r3, r3, #3
 8000962:	2b02      	cmp	r3, #2
 8000964:	d123      	bne.n	80009ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	08da      	lsrs	r2, r3, #3
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	3208      	adds	r2, #8
 800096e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000972:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	f003 0307 	and.w	r3, r3, #7
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	220f      	movs	r2, #15
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	43db      	mvns	r3, r3
 8000984:	693a      	ldr	r2, [r7, #16]
 8000986:	4013      	ands	r3, r2
 8000988:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	691a      	ldr	r2, [r3, #16]
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	f003 0307 	and.w	r3, r3, #7
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	4313      	orrs	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	08da      	lsrs	r2, r3, #3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3208      	adds	r2, #8
 80009a8:	6939      	ldr	r1, [r7, #16]
 80009aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	2203      	movs	r2, #3
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	43db      	mvns	r3, r3
 80009c0:	693a      	ldr	r2, [r7, #16]
 80009c2:	4013      	ands	r3, r2
 80009c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	f003 0203 	and.w	r2, r3, #3
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	4313      	orrs	r3, r2
 80009da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	f000 80a0 	beq.w	8000b30 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f0:	4b58      	ldr	r3, [pc, #352]	; (8000b54 <HAL_GPIO_Init+0x2d8>)
 80009f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009f4:	4a57      	ldr	r2, [pc, #348]	; (8000b54 <HAL_GPIO_Init+0x2d8>)
 80009f6:	f043 0301 	orr.w	r3, r3, #1
 80009fa:	6613      	str	r3, [r2, #96]	; 0x60
 80009fc:	4b55      	ldr	r3, [pc, #340]	; (8000b54 <HAL_GPIO_Init+0x2d8>)
 80009fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a00:	f003 0301 	and.w	r3, r3, #1
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a08:	4a53      	ldr	r2, [pc, #332]	; (8000b58 <HAL_GPIO_Init+0x2dc>)
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	089b      	lsrs	r3, r3, #2
 8000a0e:	3302      	adds	r3, #2
 8000a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	f003 0303 	and.w	r3, r3, #3
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	220f      	movs	r2, #15
 8000a20:	fa02 f303 	lsl.w	r3, r2, r3
 8000a24:	43db      	mvns	r3, r3
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	4013      	ands	r3, r2
 8000a2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a32:	d019      	beq.n	8000a68 <HAL_GPIO_Init+0x1ec>
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4a49      	ldr	r2, [pc, #292]	; (8000b5c <HAL_GPIO_Init+0x2e0>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d013      	beq.n	8000a64 <HAL_GPIO_Init+0x1e8>
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4a48      	ldr	r2, [pc, #288]	; (8000b60 <HAL_GPIO_Init+0x2e4>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d00d      	beq.n	8000a60 <HAL_GPIO_Init+0x1e4>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a47      	ldr	r2, [pc, #284]	; (8000b64 <HAL_GPIO_Init+0x2e8>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d007      	beq.n	8000a5c <HAL_GPIO_Init+0x1e0>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4a46      	ldr	r2, [pc, #280]	; (8000b68 <HAL_GPIO_Init+0x2ec>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d101      	bne.n	8000a58 <HAL_GPIO_Init+0x1dc>
 8000a54:	2304      	movs	r3, #4
 8000a56:	e008      	b.n	8000a6a <HAL_GPIO_Init+0x1ee>
 8000a58:	2307      	movs	r3, #7
 8000a5a:	e006      	b.n	8000a6a <HAL_GPIO_Init+0x1ee>
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	e004      	b.n	8000a6a <HAL_GPIO_Init+0x1ee>
 8000a60:	2302      	movs	r3, #2
 8000a62:	e002      	b.n	8000a6a <HAL_GPIO_Init+0x1ee>
 8000a64:	2301      	movs	r3, #1
 8000a66:	e000      	b.n	8000a6a <HAL_GPIO_Init+0x1ee>
 8000a68:	2300      	movs	r3, #0
 8000a6a:	697a      	ldr	r2, [r7, #20]
 8000a6c:	f002 0203 	and.w	r2, r2, #3
 8000a70:	0092      	lsls	r2, r2, #2
 8000a72:	4093      	lsls	r3, r2
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a7a:	4937      	ldr	r1, [pc, #220]	; (8000b58 <HAL_GPIO_Init+0x2dc>)
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	089b      	lsrs	r3, r3, #2
 8000a80:	3302      	adds	r3, #2
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a88:	4b38      	ldr	r3, [pc, #224]	; (8000b6c <HAL_GPIO_Init+0x2f0>)
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	43db      	mvns	r3, r3
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4013      	ands	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d003      	beq.n	8000aac <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000aac:	4a2f      	ldr	r2, [pc, #188]	; (8000b6c <HAL_GPIO_Init+0x2f0>)
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ab2:	4b2e      	ldr	r3, [pc, #184]	; (8000b6c <HAL_GPIO_Init+0x2f0>)
 8000ab4:	68db      	ldr	r3, [r3, #12]
 8000ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	43db      	mvns	r3, r3
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d003      	beq.n	8000ad6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ad6:	4a25      	ldr	r2, [pc, #148]	; (8000b6c <HAL_GPIO_Init+0x2f0>)
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000adc:	4b23      	ldr	r3, [pc, #140]	; (8000b6c <HAL_GPIO_Init+0x2f0>)
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	4013      	ands	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d003      	beq.n	8000b00 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b00:	4a1a      	ldr	r2, [pc, #104]	; (8000b6c <HAL_GPIO_Init+0x2f0>)
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000b06:	4b19      	ldr	r3, [pc, #100]	; (8000b6c <HAL_GPIO_Init+0x2f0>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	43db      	mvns	r3, r3
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	4013      	ands	r3, r2
 8000b14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d003      	beq.n	8000b2a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	4313      	orrs	r3, r2
 8000b28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b2a:	4a10      	ldr	r2, [pc, #64]	; (8000b6c <HAL_GPIO_Init+0x2f0>)
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	3301      	adds	r3, #1
 8000b34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	f47f aea3 	bne.w	800088c <HAL_GPIO_Init+0x10>
  }
}
 8000b46:	bf00      	nop
 8000b48:	bf00      	nop
 8000b4a:	371c      	adds	r7, #28
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	40021000 	.word	0x40021000
 8000b58:	40010000 	.word	0x40010000
 8000b5c:	48000400 	.word	0x48000400
 8000b60:	48000800 	.word	0x48000800
 8000b64:	48000c00 	.word	0x48000c00
 8000b68:	48001000 	.word	0x48001000
 8000b6c:	40010400 	.word	0x40010400

08000b70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d101      	bne.n	8000b82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e081      	b.n	8000c86 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d106      	bne.n	8000b9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2200      	movs	r2, #0
 8000b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f7ff fc48 	bl	800042c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2224      	movs	r2, #36	; 0x24
 8000ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f022 0201 	bic.w	r2, r2, #1
 8000bb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	685a      	ldr	r2, [r3, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000bc0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	689a      	ldr	r2, [r3, #8]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000bd0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	68db      	ldr	r3, [r3, #12]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d107      	bne.n	8000bea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	689a      	ldr	r2, [r3, #8]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	e006      	b.n	8000bf8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	689a      	ldr	r2, [r3, #8]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000bf6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d104      	bne.n	8000c0a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c08:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	687a      	ldr	r2, [r7, #4]
 8000c12:	6812      	ldr	r2, [r2, #0]
 8000c14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c1c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	68da      	ldr	r2, [r3, #12]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	691a      	ldr	r2, [r3, #16]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	695b      	ldr	r3, [r3, #20]
 8000c36:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	699b      	ldr	r3, [r3, #24]
 8000c3e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	430a      	orrs	r2, r1
 8000c46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	69d9      	ldr	r1, [r3, #28]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6a1a      	ldr	r2, [r3, #32]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	430a      	orrs	r2, r1
 8000c56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f042 0201 	orr.w	r2, r2, #1
 8000c66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2220      	movs	r2, #32
 8000c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	b083      	sub	sp, #12
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
 8000c96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	2b20      	cmp	r3, #32
 8000ca2:	d138      	bne.n	8000d16 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d101      	bne.n	8000cb2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000cae:	2302      	movs	r3, #2
 8000cb0:	e032      	b.n	8000d18 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2224      	movs	r2, #36	; 0x24
 8000cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f022 0201 	bic.w	r2, r2, #1
 8000cd0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000ce0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	6819      	ldr	r1, [r3, #0]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	683a      	ldr	r2, [r7, #0]
 8000cee:	430a      	orrs	r2, r1
 8000cf0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f042 0201 	orr.w	r2, r2, #1
 8000d00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2220      	movs	r2, #32
 8000d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000d12:	2300      	movs	r3, #0
 8000d14:	e000      	b.n	8000d18 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000d16:	2302      	movs	r3, #2
  }
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	2b20      	cmp	r3, #32
 8000d38:	d139      	bne.n	8000dae <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d101      	bne.n	8000d48 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000d44:	2302      	movs	r3, #2
 8000d46:	e033      	b.n	8000db0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2224      	movs	r2, #36	; 0x24
 8000d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f022 0201 	bic.w	r2, r2, #1
 8000d66:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000d76:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	021b      	lsls	r3, r3, #8
 8000d7c:	68fa      	ldr	r2, [r7, #12]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	68fa      	ldr	r2, [r7, #12]
 8000d88:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f042 0201 	orr.w	r2, r2, #1
 8000d98:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2220      	movs	r2, #32
 8000d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2200      	movs	r2, #0
 8000da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000daa:	2300      	movs	r3, #0
 8000dac:	e000      	b.n	8000db0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000dae:	2302      	movs	r3, #2
  }
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d10c      	bne.n	8000de8 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8000dce:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <HAL_PWR_EnterSLEEPMode+0x60>)
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000dda:	d10e      	bne.n	8000dfa <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8000ddc:	f000 f896 	bl	8000f0c <HAL_PWREx_DisableLowPowerRunMode>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d009      	beq.n	8000dfa <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8000de6:	e016      	b.n	8000e16 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8000de8:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <HAL_PWR_EnterSLEEPMode+0x60>)
 8000dea:	695b      	ldr	r3, [r3, #20]
 8000dec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000df0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000df4:	d001      	beq.n	8000dfa <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8000df6:	f000 f879 	bl	8000eec <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <HAL_PWR_EnterSLEEPMode+0x64>)
 8000dfc:	691b      	ldr	r3, [r3, #16]
 8000dfe:	4a08      	ldr	r2, [pc, #32]	; (8000e20 <HAL_PWR_EnterSLEEPMode+0x64>)
 8000e00:	f023 0304 	bic.w	r3, r3, #4
 8000e04:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8000e06:	78fb      	ldrb	r3, [r7, #3]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d101      	bne.n	8000e10 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8000e0c:	bf30      	wfi
 8000e0e:	e002      	b.n	8000e16 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8000e10:	bf40      	sev
    __WFE();
 8000e12:	bf20      	wfe
    __WFE();
 8000e14:	bf20      	wfe
  }

}
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40007000 	.word	0x40007000
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000e28:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <HAL_PWREx_GetVoltageRange+0x18>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	40007000 	.word	0x40007000

08000e40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e4e:	d130      	bne.n	8000eb2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e50:	4b23      	ldr	r3, [pc, #140]	; (8000ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e5c:	d038      	beq.n	8000ed0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e5e:	4b20      	ldr	r3, [pc, #128]	; (8000ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e66:	4a1e      	ldr	r2, [pc, #120]	; (8000ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e6c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2232      	movs	r2, #50	; 0x32
 8000e74:	fb02 f303 	mul.w	r3, r2, r3
 8000e78:	4a1b      	ldr	r2, [pc, #108]	; (8000ee8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e7e:	0c9b      	lsrs	r3, r3, #18
 8000e80:	3301      	adds	r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e84:	e002      	b.n	8000e8c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	3b01      	subs	r3, #1
 8000e8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e8c:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e8e:	695b      	ldr	r3, [r3, #20]
 8000e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e98:	d102      	bne.n	8000ea0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d1f2      	bne.n	8000e86 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ea2:	695b      	ldr	r3, [r3, #20]
 8000ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000eac:	d110      	bne.n	8000ed0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e00f      	b.n	8000ed2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ebe:	d007      	beq.n	8000ed0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ec0:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ec8:	4a05      	ldr	r2, [pc, #20]	; (8000ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ece:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3714      	adds	r7, #20
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40007000 	.word	0x40007000
 8000ee4:	20000000 	.word	0x20000000
 8000ee8:	431bde83 	.word	0x431bde83

08000eec <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8000ef6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000efa:	6013      	str	r3, [r2, #0]
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	40007000 	.word	0x40007000

08000f0c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8000f12:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a16      	ldr	r2, [pc, #88]	; (8000f70 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8000f18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f1c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2232      	movs	r2, #50	; 0x32
 8000f24:	fb02 f303 	mul.w	r3, r2, r3
 8000f28:	4a13      	ldr	r2, [pc, #76]	; (8000f78 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8000f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f2e:	0c9b      	lsrs	r3, r3, #18
 8000f30:	3301      	adds	r3, #1
 8000f32:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8000f34:	e002      	b.n	8000f3c <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8000f3e:	695b      	ldr	r3, [r3, #20]
 8000f40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f48:	d102      	bne.n	8000f50 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d1f2      	bne.n	8000f36 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8000f50:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8000f52:	695b      	ldr	r3, [r3, #20]
 8000f54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f5c:	d101      	bne.n	8000f62 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e000      	b.n	8000f64 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 8000f62:	2300      	movs	r3, #0
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	40007000 	.word	0x40007000
 8000f74:	20000000 	.word	0x20000000
 8000f78:	431bde83 	.word	0x431bde83

08000f7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b088      	sub	sp, #32
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d102      	bne.n	8000f90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	f000 bc02 	b.w	8001794 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f90:	4b96      	ldr	r3, [pc, #600]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f003 030c 	and.w	r3, r3, #12
 8000f98:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f9a:	4b94      	ldr	r3, [pc, #592]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f003 0310 	and.w	r3, r3, #16
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f000 80e4 	beq.w	800117a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d007      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x4c>
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	2b0c      	cmp	r3, #12
 8000fbc:	f040 808b 	bne.w	80010d6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	f040 8087 	bne.w	80010d6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000fc8:	4b88      	ldr	r3, [pc, #544]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d005      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x64>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d101      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e3d9      	b.n	8001794 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a1a      	ldr	r2, [r3, #32]
 8000fe4:	4b81      	ldr	r3, [pc, #516]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f003 0308 	and.w	r3, r3, #8
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d004      	beq.n	8000ffa <HAL_RCC_OscConfig+0x7e>
 8000ff0:	4b7e      	ldr	r3, [pc, #504]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ff8:	e005      	b.n	8001006 <HAL_RCC_OscConfig+0x8a>
 8000ffa:	4b7c      	ldr	r3, [pc, #496]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 8000ffc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001000:	091b      	lsrs	r3, r3, #4
 8001002:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001006:	4293      	cmp	r3, r2
 8001008:	d223      	bcs.n	8001052 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6a1b      	ldr	r3, [r3, #32]
 800100e:	4618      	mov	r0, r3
 8001010:	f000 fd54 	bl	8001abc <RCC_SetFlashLatencyFromMSIRange>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e3ba      	b.n	8001794 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800101e:	4b73      	ldr	r3, [pc, #460]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a72      	ldr	r2, [pc, #456]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 8001024:	f043 0308 	orr.w	r3, r3, #8
 8001028:	6013      	str	r3, [r2, #0]
 800102a:	4b70      	ldr	r3, [pc, #448]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a1b      	ldr	r3, [r3, #32]
 8001036:	496d      	ldr	r1, [pc, #436]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 8001038:	4313      	orrs	r3, r2
 800103a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800103c:	4b6b      	ldr	r3, [pc, #428]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	69db      	ldr	r3, [r3, #28]
 8001048:	021b      	lsls	r3, r3, #8
 800104a:	4968      	ldr	r1, [pc, #416]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 800104c:	4313      	orrs	r3, r2
 800104e:	604b      	str	r3, [r1, #4]
 8001050:	e025      	b.n	800109e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001052:	4b66      	ldr	r3, [pc, #408]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a65      	ldr	r2, [pc, #404]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 8001058:	f043 0308 	orr.w	r3, r3, #8
 800105c:	6013      	str	r3, [r2, #0]
 800105e:	4b63      	ldr	r3, [pc, #396]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a1b      	ldr	r3, [r3, #32]
 800106a:	4960      	ldr	r1, [pc, #384]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 800106c:	4313      	orrs	r3, r2
 800106e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001070:	4b5e      	ldr	r3, [pc, #376]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	69db      	ldr	r3, [r3, #28]
 800107c:	021b      	lsls	r3, r3, #8
 800107e:	495b      	ldr	r1, [pc, #364]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 8001080:	4313      	orrs	r3, r2
 8001082:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d109      	bne.n	800109e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6a1b      	ldr	r3, [r3, #32]
 800108e:	4618      	mov	r0, r3
 8001090:	f000 fd14 	bl	8001abc <RCC_SetFlashLatencyFromMSIRange>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e37a      	b.n	8001794 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800109e:	f000 fc81 	bl	80019a4 <HAL_RCC_GetSysClockFreq>
 80010a2:	4602      	mov	r2, r0
 80010a4:	4b51      	ldr	r3, [pc, #324]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	091b      	lsrs	r3, r3, #4
 80010aa:	f003 030f 	and.w	r3, r3, #15
 80010ae:	4950      	ldr	r1, [pc, #320]	; (80011f0 <HAL_RCC_OscConfig+0x274>)
 80010b0:	5ccb      	ldrb	r3, [r1, r3]
 80010b2:	f003 031f 	and.w	r3, r3, #31
 80010b6:	fa22 f303 	lsr.w	r3, r2, r3
 80010ba:	4a4e      	ldr	r2, [pc, #312]	; (80011f4 <HAL_RCC_OscConfig+0x278>)
 80010bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80010be:	4b4e      	ldr	r3, [pc, #312]	; (80011f8 <HAL_RCC_OscConfig+0x27c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fa88 	bl	80005d8 <HAL_InitTick>
 80010c8:	4603      	mov	r3, r0
 80010ca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d052      	beq.n	8001178 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	e35e      	b.n	8001794 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d032      	beq.n	8001144 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80010de:	4b43      	ldr	r3, [pc, #268]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a42      	ldr	r2, [pc, #264]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010ea:	f7ff fac5 	bl	8000678 <HAL_GetTick>
 80010ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010f0:	e008      	b.n	8001104 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010f2:	f7ff fac1 	bl	8000678 <HAL_GetTick>
 80010f6:	4602      	mov	r2, r0
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d901      	bls.n	8001104 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	e347      	b.n	8001794 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001104:	4b39      	ldr	r3, [pc, #228]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d0f0      	beq.n	80010f2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001110:	4b36      	ldr	r3, [pc, #216]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a35      	ldr	r2, [pc, #212]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 8001116:	f043 0308 	orr.w	r3, r3, #8
 800111a:	6013      	str	r3, [r2, #0]
 800111c:	4b33      	ldr	r3, [pc, #204]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a1b      	ldr	r3, [r3, #32]
 8001128:	4930      	ldr	r1, [pc, #192]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 800112a:	4313      	orrs	r3, r2
 800112c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800112e:	4b2f      	ldr	r3, [pc, #188]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	021b      	lsls	r3, r3, #8
 800113c:	492b      	ldr	r1, [pc, #172]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 800113e:	4313      	orrs	r3, r2
 8001140:	604b      	str	r3, [r1, #4]
 8001142:	e01a      	b.n	800117a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001144:	4b29      	ldr	r3, [pc, #164]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a28      	ldr	r2, [pc, #160]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 800114a:	f023 0301 	bic.w	r3, r3, #1
 800114e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001150:	f7ff fa92 	bl	8000678 <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001158:	f7ff fa8e 	bl	8000678 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e314      	b.n	8001794 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800116a:	4b20      	ldr	r3, [pc, #128]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f0      	bne.n	8001158 <HAL_RCC_OscConfig+0x1dc>
 8001176:	e000      	b.n	800117a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001178:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	2b00      	cmp	r3, #0
 8001184:	d073      	beq.n	800126e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	2b08      	cmp	r3, #8
 800118a:	d005      	beq.n	8001198 <HAL_RCC_OscConfig+0x21c>
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	2b0c      	cmp	r3, #12
 8001190:	d10e      	bne.n	80011b0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	2b03      	cmp	r3, #3
 8001196:	d10b      	bne.n	80011b0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001198:	4b14      	ldr	r3, [pc, #80]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d063      	beq.n	800126c <HAL_RCC_OscConfig+0x2f0>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d15f      	bne.n	800126c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e2f1      	b.n	8001794 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011b8:	d106      	bne.n	80011c8 <HAL_RCC_OscConfig+0x24c>
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a0b      	ldr	r2, [pc, #44]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 80011c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c4:	6013      	str	r3, [r2, #0]
 80011c6:	e025      	b.n	8001214 <HAL_RCC_OscConfig+0x298>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011d0:	d114      	bne.n	80011fc <HAL_RCC_OscConfig+0x280>
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a05      	ldr	r2, [pc, #20]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 80011d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011dc:	6013      	str	r3, [r2, #0]
 80011de:	4b03      	ldr	r3, [pc, #12]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a02      	ldr	r2, [pc, #8]	; (80011ec <HAL_RCC_OscConfig+0x270>)
 80011e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	e013      	b.n	8001214 <HAL_RCC_OscConfig+0x298>
 80011ec:	40021000 	.word	0x40021000
 80011f0:	08002200 	.word	0x08002200
 80011f4:	20000000 	.word	0x20000000
 80011f8:	20000004 	.word	0x20000004
 80011fc:	4ba0      	ldr	r3, [pc, #640]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a9f      	ldr	r2, [pc, #636]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 8001202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001206:	6013      	str	r3, [r2, #0]
 8001208:	4b9d      	ldr	r3, [pc, #628]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a9c      	ldr	r2, [pc, #624]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 800120e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001212:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d013      	beq.n	8001244 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800121c:	f7ff fa2c 	bl	8000678 <HAL_GetTick>
 8001220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001222:	e008      	b.n	8001236 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001224:	f7ff fa28 	bl	8000678 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b64      	cmp	r3, #100	; 0x64
 8001230:	d901      	bls.n	8001236 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e2ae      	b.n	8001794 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001236:	4b92      	ldr	r3, [pc, #584]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d0f0      	beq.n	8001224 <HAL_RCC_OscConfig+0x2a8>
 8001242:	e014      	b.n	800126e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001244:	f7ff fa18 	bl	8000678 <HAL_GetTick>
 8001248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800124c:	f7ff fa14 	bl	8000678 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b64      	cmp	r3, #100	; 0x64
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e29a      	b.n	8001794 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800125e:	4b88      	ldr	r3, [pc, #544]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1f0      	bne.n	800124c <HAL_RCC_OscConfig+0x2d0>
 800126a:	e000      	b.n	800126e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800126c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d060      	beq.n	800133c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	2b04      	cmp	r3, #4
 800127e:	d005      	beq.n	800128c <HAL_RCC_OscConfig+0x310>
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	2b0c      	cmp	r3, #12
 8001284:	d119      	bne.n	80012ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	2b02      	cmp	r3, #2
 800128a:	d116      	bne.n	80012ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800128c:	4b7c      	ldr	r3, [pc, #496]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001294:	2b00      	cmp	r3, #0
 8001296:	d005      	beq.n	80012a4 <HAL_RCC_OscConfig+0x328>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d101      	bne.n	80012a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e277      	b.n	8001794 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a4:	4b76      	ldr	r3, [pc, #472]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	691b      	ldr	r3, [r3, #16]
 80012b0:	061b      	lsls	r3, r3, #24
 80012b2:	4973      	ldr	r1, [pc, #460]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 80012b4:	4313      	orrs	r3, r2
 80012b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012b8:	e040      	b.n	800133c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d023      	beq.n	800130a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012c2:	4b6f      	ldr	r3, [pc, #444]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a6e      	ldr	r2, [pc, #440]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 80012c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ce:	f7ff f9d3 	bl	8000678 <HAL_GetTick>
 80012d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012d4:	e008      	b.n	80012e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012d6:	f7ff f9cf 	bl	8000678 <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d901      	bls.n	80012e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e255      	b.n	8001794 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012e8:	4b65      	ldr	r3, [pc, #404]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d0f0      	beq.n	80012d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f4:	4b62      	ldr	r3, [pc, #392]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	061b      	lsls	r3, r3, #24
 8001302:	495f      	ldr	r1, [pc, #380]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 8001304:	4313      	orrs	r3, r2
 8001306:	604b      	str	r3, [r1, #4]
 8001308:	e018      	b.n	800133c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800130a:	4b5d      	ldr	r3, [pc, #372]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a5c      	ldr	r2, [pc, #368]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 8001310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001314:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001316:	f7ff f9af 	bl	8000678 <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800131e:	f7ff f9ab 	bl	8000678 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e231      	b.n	8001794 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001330:	4b53      	ldr	r3, [pc, #332]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1f0      	bne.n	800131e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0308 	and.w	r3, r3, #8
 8001344:	2b00      	cmp	r3, #0
 8001346:	d03c      	beq.n	80013c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	695b      	ldr	r3, [r3, #20]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d01c      	beq.n	800138a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001350:	4b4b      	ldr	r3, [pc, #300]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 8001352:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001356:	4a4a      	ldr	r2, [pc, #296]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001360:	f7ff f98a 	bl	8000678 <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001368:	f7ff f986 	bl	8000678 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e20c      	b.n	8001794 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800137a:	4b41      	ldr	r3, [pc, #260]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 800137c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d0ef      	beq.n	8001368 <HAL_RCC_OscConfig+0x3ec>
 8001388:	e01b      	b.n	80013c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800138a:	4b3d      	ldr	r3, [pc, #244]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 800138c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001390:	4a3b      	ldr	r2, [pc, #236]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 8001392:	f023 0301 	bic.w	r3, r3, #1
 8001396:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800139a:	f7ff f96d 	bl	8000678 <HAL_GetTick>
 800139e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013a2:	f7ff f969 	bl	8000678 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e1ef      	b.n	8001794 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013b4:	4b32      	ldr	r3, [pc, #200]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 80013b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1ef      	bne.n	80013a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0304 	and.w	r3, r3, #4
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f000 80a6 	beq.w	800151c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013d0:	2300      	movs	r3, #0
 80013d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80013d4:	4b2a      	ldr	r3, [pc, #168]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 80013d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d10d      	bne.n	80013fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013e0:	4b27      	ldr	r3, [pc, #156]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 80013e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e4:	4a26      	ldr	r2, [pc, #152]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 80013e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ea:	6593      	str	r3, [r2, #88]	; 0x58
 80013ec:	4b24      	ldr	r3, [pc, #144]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 80013ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013f8:	2301      	movs	r3, #1
 80013fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013fc:	4b21      	ldr	r3, [pc, #132]	; (8001484 <HAL_RCC_OscConfig+0x508>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001404:	2b00      	cmp	r3, #0
 8001406:	d118      	bne.n	800143a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001408:	4b1e      	ldr	r3, [pc, #120]	; (8001484 <HAL_RCC_OscConfig+0x508>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a1d      	ldr	r2, [pc, #116]	; (8001484 <HAL_RCC_OscConfig+0x508>)
 800140e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001412:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001414:	f7ff f930 	bl	8000678 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800141c:	f7ff f92c 	bl	8000678 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e1b2      	b.n	8001794 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800142e:	4b15      	ldr	r3, [pc, #84]	; (8001484 <HAL_RCC_OscConfig+0x508>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0f0      	beq.n	800141c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d108      	bne.n	8001454 <HAL_RCC_OscConfig+0x4d8>
 8001442:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 8001444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001448:	4a0d      	ldr	r2, [pc, #52]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001452:	e029      	b.n	80014a8 <HAL_RCC_OscConfig+0x52c>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	2b05      	cmp	r3, #5
 800145a:	d115      	bne.n	8001488 <HAL_RCC_OscConfig+0x50c>
 800145c:	4b08      	ldr	r3, [pc, #32]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 800145e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001462:	4a07      	ldr	r2, [pc, #28]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 8001464:	f043 0304 	orr.w	r3, r3, #4
 8001468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800146c:	4b04      	ldr	r3, [pc, #16]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 800146e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001472:	4a03      	ldr	r2, [pc, #12]	; (8001480 <HAL_RCC_OscConfig+0x504>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800147c:	e014      	b.n	80014a8 <HAL_RCC_OscConfig+0x52c>
 800147e:	bf00      	nop
 8001480:	40021000 	.word	0x40021000
 8001484:	40007000 	.word	0x40007000
 8001488:	4b9a      	ldr	r3, [pc, #616]	; (80016f4 <HAL_RCC_OscConfig+0x778>)
 800148a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800148e:	4a99      	ldr	r2, [pc, #612]	; (80016f4 <HAL_RCC_OscConfig+0x778>)
 8001490:	f023 0301 	bic.w	r3, r3, #1
 8001494:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001498:	4b96      	ldr	r3, [pc, #600]	; (80016f4 <HAL_RCC_OscConfig+0x778>)
 800149a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800149e:	4a95      	ldr	r2, [pc, #596]	; (80016f4 <HAL_RCC_OscConfig+0x778>)
 80014a0:	f023 0304 	bic.w	r3, r3, #4
 80014a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d016      	beq.n	80014de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b0:	f7ff f8e2 	bl	8000678 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014b6:	e00a      	b.n	80014ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014b8:	f7ff f8de 	bl	8000678 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e162      	b.n	8001794 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014ce:	4b89      	ldr	r3, [pc, #548]	; (80016f4 <HAL_RCC_OscConfig+0x778>)
 80014d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0ed      	beq.n	80014b8 <HAL_RCC_OscConfig+0x53c>
 80014dc:	e015      	b.n	800150a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014de:	f7ff f8cb 	bl	8000678 <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014e4:	e00a      	b.n	80014fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014e6:	f7ff f8c7 	bl	8000678 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e14b      	b.n	8001794 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014fc:	4b7d      	ldr	r3, [pc, #500]	; (80016f4 <HAL_RCC_OscConfig+0x778>)
 80014fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1ed      	bne.n	80014e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800150a:	7ffb      	ldrb	r3, [r7, #31]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d105      	bne.n	800151c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001510:	4b78      	ldr	r3, [pc, #480]	; (80016f4 <HAL_RCC_OscConfig+0x778>)
 8001512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001514:	4a77      	ldr	r2, [pc, #476]	; (80016f4 <HAL_RCC_OscConfig+0x778>)
 8001516:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800151a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0320 	and.w	r3, r3, #32
 8001524:	2b00      	cmp	r3, #0
 8001526:	d03c      	beq.n	80015a2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152c:	2b00      	cmp	r3, #0
 800152e:	d01c      	beq.n	800156a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001530:	4b70      	ldr	r3, [pc, #448]	; (80016f4 <HAL_RCC_OscConfig+0x778>)
 8001532:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001536:	4a6f      	ldr	r2, [pc, #444]	; (80016f4 <HAL_RCC_OscConfig+0x778>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001540:	f7ff f89a 	bl	8000678 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001548:	f7ff f896 	bl	8000678 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e11c      	b.n	8001794 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800155a:	4b66      	ldr	r3, [pc, #408]	; (80016f4 <HAL_RCC_OscConfig+0x778>)
 800155c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d0ef      	beq.n	8001548 <HAL_RCC_OscConfig+0x5cc>
 8001568:	e01b      	b.n	80015a2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800156a:	4b62      	ldr	r3, [pc, #392]	; (80016f4 <HAL_RCC_OscConfig+0x778>)
 800156c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001570:	4a60      	ldr	r2, [pc, #384]	; (80016f4 <HAL_RCC_OscConfig+0x778>)
 8001572:	f023 0301 	bic.w	r3, r3, #1
 8001576:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800157a:	f7ff f87d 	bl	8000678 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001582:	f7ff f879 	bl	8000678 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e0ff      	b.n	8001794 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001594:	4b57      	ldr	r3, [pc, #348]	; (80016f4 <HAL_RCC_OscConfig+0x778>)
 8001596:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1ef      	bne.n	8001582 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f000 80f3 	beq.w	8001792 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	f040 80c9 	bne.w	8001748 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80015b6:	4b4f      	ldr	r3, [pc, #316]	; (80016f4 <HAL_RCC_OscConfig+0x778>)
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	f003 0203 	and.w	r2, r3, #3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d12c      	bne.n	8001624 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d4:	3b01      	subs	r3, #1
 80015d6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015d8:	429a      	cmp	r2, r3
 80015da:	d123      	bne.n	8001624 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015e6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d11b      	bne.n	8001624 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015f6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d113      	bne.n	8001624 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001606:	085b      	lsrs	r3, r3, #1
 8001608:	3b01      	subs	r3, #1
 800160a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800160c:	429a      	cmp	r2, r3
 800160e:	d109      	bne.n	8001624 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	085b      	lsrs	r3, r3, #1
 800161c:	3b01      	subs	r3, #1
 800161e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001620:	429a      	cmp	r2, r3
 8001622:	d06b      	beq.n	80016fc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	2b0c      	cmp	r3, #12
 8001628:	d062      	beq.n	80016f0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800162a:	4b32      	ldr	r3, [pc, #200]	; (80016f4 <HAL_RCC_OscConfig+0x778>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e0ac      	b.n	8001794 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800163a:	4b2e      	ldr	r3, [pc, #184]	; (80016f4 <HAL_RCC_OscConfig+0x778>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a2d      	ldr	r2, [pc, #180]	; (80016f4 <HAL_RCC_OscConfig+0x778>)
 8001640:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001644:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001646:	f7ff f817 	bl	8000678 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800164e:	f7ff f813 	bl	8000678 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e099      	b.n	8001794 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001660:	4b24      	ldr	r3, [pc, #144]	; (80016f4 <HAL_RCC_OscConfig+0x778>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1f0      	bne.n	800164e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800166c:	4b21      	ldr	r3, [pc, #132]	; (80016f4 <HAL_RCC_OscConfig+0x778>)
 800166e:	68da      	ldr	r2, [r3, #12]
 8001670:	4b21      	ldr	r3, [pc, #132]	; (80016f8 <HAL_RCC_OscConfig+0x77c>)
 8001672:	4013      	ands	r3, r2
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800167c:	3a01      	subs	r2, #1
 800167e:	0112      	lsls	r2, r2, #4
 8001680:	4311      	orrs	r1, r2
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001686:	0212      	lsls	r2, r2, #8
 8001688:	4311      	orrs	r1, r2
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800168e:	0852      	lsrs	r2, r2, #1
 8001690:	3a01      	subs	r2, #1
 8001692:	0552      	lsls	r2, r2, #21
 8001694:	4311      	orrs	r1, r2
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800169a:	0852      	lsrs	r2, r2, #1
 800169c:	3a01      	subs	r2, #1
 800169e:	0652      	lsls	r2, r2, #25
 80016a0:	4311      	orrs	r1, r2
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80016a6:	06d2      	lsls	r2, r2, #27
 80016a8:	430a      	orrs	r2, r1
 80016aa:	4912      	ldr	r1, [pc, #72]	; (80016f4 <HAL_RCC_OscConfig+0x778>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80016b0:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <HAL_RCC_OscConfig+0x778>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a0f      	ldr	r2, [pc, #60]	; (80016f4 <HAL_RCC_OscConfig+0x778>)
 80016b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016bc:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <HAL_RCC_OscConfig+0x778>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	4a0c      	ldr	r2, [pc, #48]	; (80016f4 <HAL_RCC_OscConfig+0x778>)
 80016c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016c8:	f7fe ffd6 	bl	8000678 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d0:	f7fe ffd2 	bl	8000678 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e058      	b.n	8001794 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016e2:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <HAL_RCC_OscConfig+0x778>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0f0      	beq.n	80016d0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016ee:	e050      	b.n	8001792 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e04f      	b.n	8001794 <HAL_RCC_OscConfig+0x818>
 80016f4:	40021000 	.word	0x40021000
 80016f8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016fc:	4b27      	ldr	r3, [pc, #156]	; (800179c <HAL_RCC_OscConfig+0x820>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d144      	bne.n	8001792 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001708:	4b24      	ldr	r3, [pc, #144]	; (800179c <HAL_RCC_OscConfig+0x820>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a23      	ldr	r2, [pc, #140]	; (800179c <HAL_RCC_OscConfig+0x820>)
 800170e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001712:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001714:	4b21      	ldr	r3, [pc, #132]	; (800179c <HAL_RCC_OscConfig+0x820>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	4a20      	ldr	r2, [pc, #128]	; (800179c <HAL_RCC_OscConfig+0x820>)
 800171a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800171e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001720:	f7fe ffaa 	bl	8000678 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001728:	f7fe ffa6 	bl	8000678 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e02c      	b.n	8001794 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800173a:	4b18      	ldr	r3, [pc, #96]	; (800179c <HAL_RCC_OscConfig+0x820>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0f0      	beq.n	8001728 <HAL_RCC_OscConfig+0x7ac>
 8001746:	e024      	b.n	8001792 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	2b0c      	cmp	r3, #12
 800174c:	d01f      	beq.n	800178e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800174e:	4b13      	ldr	r3, [pc, #76]	; (800179c <HAL_RCC_OscConfig+0x820>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a12      	ldr	r2, [pc, #72]	; (800179c <HAL_RCC_OscConfig+0x820>)
 8001754:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175a:	f7fe ff8d 	bl	8000678 <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001762:	f7fe ff89 	bl	8000678 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e00f      	b.n	8001794 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001774:	4b09      	ldr	r3, [pc, #36]	; (800179c <HAL_RCC_OscConfig+0x820>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1f0      	bne.n	8001762 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_RCC_OscConfig+0x820>)
 8001782:	68da      	ldr	r2, [r3, #12]
 8001784:	4905      	ldr	r1, [pc, #20]	; (800179c <HAL_RCC_OscConfig+0x820>)
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <HAL_RCC_OscConfig+0x824>)
 8001788:	4013      	ands	r3, r2
 800178a:	60cb      	str	r3, [r1, #12]
 800178c:	e001      	b.n	8001792 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e000      	b.n	8001794 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	3720      	adds	r7, #32
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40021000 	.word	0x40021000
 80017a0:	feeefffc 	.word	0xfeeefffc

080017a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e0e7      	b.n	8001988 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017b8:	4b75      	ldr	r3, [pc, #468]	; (8001990 <HAL_RCC_ClockConfig+0x1ec>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d910      	bls.n	80017e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c6:	4b72      	ldr	r3, [pc, #456]	; (8001990 <HAL_RCC_ClockConfig+0x1ec>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f023 0207 	bic.w	r2, r3, #7
 80017ce:	4970      	ldr	r1, [pc, #448]	; (8001990 <HAL_RCC_ClockConfig+0x1ec>)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d6:	4b6e      	ldr	r3, [pc, #440]	; (8001990 <HAL_RCC_ClockConfig+0x1ec>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d001      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e0cf      	b.n	8001988 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d010      	beq.n	8001816 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	4b66      	ldr	r3, [pc, #408]	; (8001994 <HAL_RCC_ClockConfig+0x1f0>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001800:	429a      	cmp	r2, r3
 8001802:	d908      	bls.n	8001816 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001804:	4b63      	ldr	r3, [pc, #396]	; (8001994 <HAL_RCC_ClockConfig+0x1f0>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	4960      	ldr	r1, [pc, #384]	; (8001994 <HAL_RCC_ClockConfig+0x1f0>)
 8001812:	4313      	orrs	r3, r2
 8001814:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	d04c      	beq.n	80018bc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b03      	cmp	r3, #3
 8001828:	d107      	bne.n	800183a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800182a:	4b5a      	ldr	r3, [pc, #360]	; (8001994 <HAL_RCC_ClockConfig+0x1f0>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d121      	bne.n	800187a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e0a6      	b.n	8001988 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b02      	cmp	r3, #2
 8001840:	d107      	bne.n	8001852 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001842:	4b54      	ldr	r3, [pc, #336]	; (8001994 <HAL_RCC_ClockConfig+0x1f0>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d115      	bne.n	800187a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e09a      	b.n	8001988 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d107      	bne.n	800186a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800185a:	4b4e      	ldr	r3, [pc, #312]	; (8001994 <HAL_RCC_ClockConfig+0x1f0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d109      	bne.n	800187a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e08e      	b.n	8001988 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800186a:	4b4a      	ldr	r3, [pc, #296]	; (8001994 <HAL_RCC_ClockConfig+0x1f0>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e086      	b.n	8001988 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800187a:	4b46      	ldr	r3, [pc, #280]	; (8001994 <HAL_RCC_ClockConfig+0x1f0>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f023 0203 	bic.w	r2, r3, #3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	4943      	ldr	r1, [pc, #268]	; (8001994 <HAL_RCC_ClockConfig+0x1f0>)
 8001888:	4313      	orrs	r3, r2
 800188a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800188c:	f7fe fef4 	bl	8000678 <HAL_GetTick>
 8001890:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001892:	e00a      	b.n	80018aa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001894:	f7fe fef0 	bl	8000678 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e06e      	b.n	8001988 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018aa:	4b3a      	ldr	r3, [pc, #232]	; (8001994 <HAL_RCC_ClockConfig+0x1f0>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 020c 	and.w	r2, r3, #12
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d1eb      	bne.n	8001894 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d010      	beq.n	80018ea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	4b31      	ldr	r3, [pc, #196]	; (8001994 <HAL_RCC_ClockConfig+0x1f0>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d208      	bcs.n	80018ea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d8:	4b2e      	ldr	r3, [pc, #184]	; (8001994 <HAL_RCC_ClockConfig+0x1f0>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	492b      	ldr	r1, [pc, #172]	; (8001994 <HAL_RCC_ClockConfig+0x1f0>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018ea:	4b29      	ldr	r3, [pc, #164]	; (8001990 <HAL_RCC_ClockConfig+0x1ec>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d210      	bcs.n	800191a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018f8:	4b25      	ldr	r3, [pc, #148]	; (8001990 <HAL_RCC_ClockConfig+0x1ec>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f023 0207 	bic.w	r2, r3, #7
 8001900:	4923      	ldr	r1, [pc, #140]	; (8001990 <HAL_RCC_ClockConfig+0x1ec>)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	4313      	orrs	r3, r2
 8001906:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001908:	4b21      	ldr	r3, [pc, #132]	; (8001990 <HAL_RCC_ClockConfig+0x1ec>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	429a      	cmp	r2, r3
 8001914:	d001      	beq.n	800191a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e036      	b.n	8001988 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0304 	and.w	r3, r3, #4
 8001922:	2b00      	cmp	r3, #0
 8001924:	d008      	beq.n	8001938 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001926:	4b1b      	ldr	r3, [pc, #108]	; (8001994 <HAL_RCC_ClockConfig+0x1f0>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	4918      	ldr	r1, [pc, #96]	; (8001994 <HAL_RCC_ClockConfig+0x1f0>)
 8001934:	4313      	orrs	r3, r2
 8001936:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0308 	and.w	r3, r3, #8
 8001940:	2b00      	cmp	r3, #0
 8001942:	d009      	beq.n	8001958 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001944:	4b13      	ldr	r3, [pc, #76]	; (8001994 <HAL_RCC_ClockConfig+0x1f0>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	4910      	ldr	r1, [pc, #64]	; (8001994 <HAL_RCC_ClockConfig+0x1f0>)
 8001954:	4313      	orrs	r3, r2
 8001956:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001958:	f000 f824 	bl	80019a4 <HAL_RCC_GetSysClockFreq>
 800195c:	4602      	mov	r2, r0
 800195e:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <HAL_RCC_ClockConfig+0x1f0>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	091b      	lsrs	r3, r3, #4
 8001964:	f003 030f 	and.w	r3, r3, #15
 8001968:	490b      	ldr	r1, [pc, #44]	; (8001998 <HAL_RCC_ClockConfig+0x1f4>)
 800196a:	5ccb      	ldrb	r3, [r1, r3]
 800196c:	f003 031f 	and.w	r3, r3, #31
 8001970:	fa22 f303 	lsr.w	r3, r2, r3
 8001974:	4a09      	ldr	r2, [pc, #36]	; (800199c <HAL_RCC_ClockConfig+0x1f8>)
 8001976:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001978:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <HAL_RCC_ClockConfig+0x1fc>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe fe2b 	bl	80005d8 <HAL_InitTick>
 8001982:	4603      	mov	r3, r0
 8001984:	72fb      	strb	r3, [r7, #11]

  return status;
 8001986:	7afb      	ldrb	r3, [r7, #11]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40022000 	.word	0x40022000
 8001994:	40021000 	.word	0x40021000
 8001998:	08002200 	.word	0x08002200
 800199c:	20000000 	.word	0x20000000
 80019a0:	20000004 	.word	0x20000004

080019a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b089      	sub	sp, #36	; 0x24
 80019a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	61fb      	str	r3, [r7, #28]
 80019ae:	2300      	movs	r3, #0
 80019b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019b2:	4b3e      	ldr	r3, [pc, #248]	; (8001aac <HAL_RCC_GetSysClockFreq+0x108>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 030c 	and.w	r3, r3, #12
 80019ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019bc:	4b3b      	ldr	r3, [pc, #236]	; (8001aac <HAL_RCC_GetSysClockFreq+0x108>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	f003 0303 	and.w	r3, r3, #3
 80019c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d005      	beq.n	80019d8 <HAL_RCC_GetSysClockFreq+0x34>
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	2b0c      	cmp	r3, #12
 80019d0:	d121      	bne.n	8001a16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d11e      	bne.n	8001a16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80019d8:	4b34      	ldr	r3, [pc, #208]	; (8001aac <HAL_RCC_GetSysClockFreq+0x108>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0308 	and.w	r3, r3, #8
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d107      	bne.n	80019f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80019e4:	4b31      	ldr	r3, [pc, #196]	; (8001aac <HAL_RCC_GetSysClockFreq+0x108>)
 80019e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ea:	0a1b      	lsrs	r3, r3, #8
 80019ec:	f003 030f 	and.w	r3, r3, #15
 80019f0:	61fb      	str	r3, [r7, #28]
 80019f2:	e005      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80019f4:	4b2d      	ldr	r3, [pc, #180]	; (8001aac <HAL_RCC_GetSysClockFreq+0x108>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	091b      	lsrs	r3, r3, #4
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a00:	4a2b      	ldr	r2, [pc, #172]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d10d      	bne.n	8001a2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a14:	e00a      	b.n	8001a2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	2b04      	cmp	r3, #4
 8001a1a:	d102      	bne.n	8001a22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a1c:	4b25      	ldr	r3, [pc, #148]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a1e:	61bb      	str	r3, [r7, #24]
 8001a20:	e004      	b.n	8001a2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	2b08      	cmp	r3, #8
 8001a26:	d101      	bne.n	8001a2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a28:	4b23      	ldr	r3, [pc, #140]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	2b0c      	cmp	r3, #12
 8001a30:	d134      	bne.n	8001a9c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a32:	4b1e      	ldr	r3, [pc, #120]	; (8001aac <HAL_RCC_GetSysClockFreq+0x108>)
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d003      	beq.n	8001a4a <HAL_RCC_GetSysClockFreq+0xa6>
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	2b03      	cmp	r3, #3
 8001a46:	d003      	beq.n	8001a50 <HAL_RCC_GetSysClockFreq+0xac>
 8001a48:	e005      	b.n	8001a56 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a4a:	4b1a      	ldr	r3, [pc, #104]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a4c:	617b      	str	r3, [r7, #20]
      break;
 8001a4e:	e005      	b.n	8001a5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a50:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a52:	617b      	str	r3, [r7, #20]
      break;
 8001a54:	e002      	b.n	8001a5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	617b      	str	r3, [r7, #20]
      break;
 8001a5a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a5c:	4b13      	ldr	r3, [pc, #76]	; (8001aac <HAL_RCC_GetSysClockFreq+0x108>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	091b      	lsrs	r3, r3, #4
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	3301      	adds	r3, #1
 8001a68:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <HAL_RCC_GetSysClockFreq+0x108>)
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	0a1b      	lsrs	r3, r3, #8
 8001a70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	fb03 f202 	mul.w	r2, r3, r2
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a80:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a82:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <HAL_RCC_GetSysClockFreq+0x108>)
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	0e5b      	lsrs	r3, r3, #25
 8001a88:	f003 0303 	and.w	r3, r3, #3
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001a9c:	69bb      	ldr	r3, [r7, #24]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3724      	adds	r7, #36	; 0x24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	08002210 	.word	0x08002210
 8001ab4:	00f42400 	.word	0x00f42400
 8001ab8:	007a1200 	.word	0x007a1200

08001abc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ac8:	4b2a      	ldr	r3, [pc, #168]	; (8001b74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d003      	beq.n	8001adc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ad4:	f7ff f9a6 	bl	8000e24 <HAL_PWREx_GetVoltageRange>
 8001ad8:	6178      	str	r0, [r7, #20]
 8001ada:	e014      	b.n	8001b06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001adc:	4b25      	ldr	r3, [pc, #148]	; (8001b74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae0:	4a24      	ldr	r2, [pc, #144]	; (8001b74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ae8:	4b22      	ldr	r3, [pc, #136]	; (8001b74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001af4:	f7ff f996 	bl	8000e24 <HAL_PWREx_GetVoltageRange>
 8001af8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001afa:	4b1e      	ldr	r3, [pc, #120]	; (8001b74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afe:	4a1d      	ldr	r2, [pc, #116]	; (8001b74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b04:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b0c:	d10b      	bne.n	8001b26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2b80      	cmp	r3, #128	; 0x80
 8001b12:	d919      	bls.n	8001b48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2ba0      	cmp	r3, #160	; 0xa0
 8001b18:	d902      	bls.n	8001b20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	e013      	b.n	8001b48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b20:	2301      	movs	r3, #1
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	e010      	b.n	8001b48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b80      	cmp	r3, #128	; 0x80
 8001b2a:	d902      	bls.n	8001b32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	613b      	str	r3, [r7, #16]
 8001b30:	e00a      	b.n	8001b48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b80      	cmp	r3, #128	; 0x80
 8001b36:	d102      	bne.n	8001b3e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b38:	2302      	movs	r3, #2
 8001b3a:	613b      	str	r3, [r7, #16]
 8001b3c:	e004      	b.n	8001b48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b70      	cmp	r3, #112	; 0x70
 8001b42:	d101      	bne.n	8001b48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b44:	2301      	movs	r3, #1
 8001b46:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b48:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f023 0207 	bic.w	r2, r3, #7
 8001b50:	4909      	ldr	r1, [pc, #36]	; (8001b78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b58:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d001      	beq.n	8001b6a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40021000 	.word	0x40021000
 8001b78:	40022000 	.word	0x40022000

08001b7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001b84:	2300      	movs	r3, #0
 8001b86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001b88:	2300      	movs	r3, #0
 8001b8a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d031      	beq.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ba0:	d01a      	beq.n	8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001ba2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ba6:	d814      	bhi.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d009      	beq.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001bac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001bb0:	d10f      	bne.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001bb2:	4b5d      	ldr	r3, [pc, #372]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	4a5c      	ldr	r2, [pc, #368]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bbc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001bbe:	e00c      	b.n	8001bda <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3304      	adds	r3, #4
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 f9f0 	bl	8001fac <RCCEx_PLLSAI1_Config>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001bd0:	e003      	b.n	8001bda <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	74fb      	strb	r3, [r7, #19]
      break;
 8001bd6:	e000      	b.n	8001bda <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001bd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001bda:	7cfb      	ldrb	r3, [r7, #19]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d10b      	bne.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001be0:	4b51      	ldr	r3, [pc, #324]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001be6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bee:	494e      	ldr	r1, [pc, #312]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001bf6:	e001      	b.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001bf8:	7cfb      	ldrb	r3, [r7, #19]
 8001bfa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f000 809e 	beq.w	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c0e:	4b46      	ldr	r3, [pc, #280]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001c1e:	2300      	movs	r3, #0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d00d      	beq.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c24:	4b40      	ldr	r3, [pc, #256]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c28:	4a3f      	ldr	r2, [pc, #252]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c2e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c30:	4b3d      	ldr	r3, [pc, #244]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c40:	4b3a      	ldr	r3, [pc, #232]	; (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a39      	ldr	r2, [pc, #228]	; (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c4c:	f7fe fd14 	bl	8000678 <HAL_GetTick>
 8001c50:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001c52:	e009      	b.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c54:	f7fe fd10 	bl	8000678 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d902      	bls.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	74fb      	strb	r3, [r7, #19]
        break;
 8001c66:	e005      	b.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001c68:	4b30      	ldr	r3, [pc, #192]	; (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0ef      	beq.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001c74:	7cfb      	ldrb	r3, [r7, #19]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d15a      	bne.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001c7a:	4b2b      	ldr	r3, [pc, #172]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c84:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d01e      	beq.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d019      	beq.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001c96:	4b24      	ldr	r3, [pc, #144]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ca0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ca2:	4b21      	ldr	r3, [pc, #132]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca8:	4a1f      	ldr	r2, [pc, #124]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001caa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001cb2:	4b1d      	ldr	r3, [pc, #116]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb8:	4a1b      	ldr	r2, [pc, #108]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001cc2:	4a19      	ldr	r2, [pc, #100]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d016      	beq.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd4:	f7fe fcd0 	bl	8000678 <HAL_GetTick>
 8001cd8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cda:	e00b      	b.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cdc:	f7fe fccc 	bl	8000678 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d902      	bls.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	74fb      	strb	r3, [r7, #19]
            break;
 8001cf2:	e006      	b.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0ec      	beq.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8001d02:	7cfb      	ldrb	r3, [r7, #19]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d10b      	bne.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d08:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d16:	4904      	ldr	r1, [pc, #16]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001d1e:	e009      	b.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d20:	7cfb      	ldrb	r3, [r7, #19]
 8001d22:	74bb      	strb	r3, [r7, #18]
 8001d24:	e006      	b.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8001d26:	bf00      	nop
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d30:	7cfb      	ldrb	r3, [r7, #19]
 8001d32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d34:	7c7b      	ldrb	r3, [r7, #17]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d105      	bne.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d3a:	4b9b      	ldr	r3, [pc, #620]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3e:	4a9a      	ldr	r2, [pc, #616]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001d40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d44:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00a      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d52:	4b95      	ldr	r3, [pc, #596]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d58:	f023 0203 	bic.w	r2, r3, #3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	4991      	ldr	r1, [pc, #580]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00a      	beq.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d74:	4b8c      	ldr	r3, [pc, #560]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d7a:	f023 020c 	bic.w	r2, r3, #12
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	4989      	ldr	r1, [pc, #548]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0304 	and.w	r3, r3, #4
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00a      	beq.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d96:	4b84      	ldr	r3, [pc, #528]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da4:	4980      	ldr	r1, [pc, #512]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0320 	and.w	r3, r3, #32
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00a      	beq.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001db8:	4b7b      	ldr	r3, [pc, #492]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dbe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc6:	4978      	ldr	r1, [pc, #480]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00a      	beq.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001dda:	4b73      	ldr	r3, [pc, #460]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001de0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de8:	496f      	ldr	r1, [pc, #444]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00a      	beq.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001dfc:	4b6a      	ldr	r3, [pc, #424]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	4967      	ldr	r1, [pc, #412]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00a      	beq.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e1e:	4b62      	ldr	r3, [pc, #392]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e24:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2c:	495e      	ldr	r1, [pc, #376]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00a      	beq.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e40:	4b59      	ldr	r3, [pc, #356]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e46:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e4e:	4956      	ldr	r1, [pc, #344]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00a      	beq.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e62:	4b51      	ldr	r3, [pc, #324]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e70:	494d      	ldr	r1, [pc, #308]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d028      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001e84:	4b48      	ldr	r3, [pc, #288]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e92:	4945      	ldr	r1, [pc, #276]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ea2:	d106      	bne.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ea4:	4b40      	ldr	r3, [pc, #256]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	4a3f      	ldr	r2, [pc, #252]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001eaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001eae:	60d3      	str	r3, [r2, #12]
 8001eb0:	e011      	b.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001eba:	d10c      	bne.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3304      	adds	r3, #4
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 f872 	bl	8001fac <RCCEx_PLLSAI1_Config>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001ecc:	7cfb      	ldrb	r3, [r7, #19]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8001ed2:	7cfb      	ldrb	r3, [r7, #19]
 8001ed4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d028      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001ee2:	4b31      	ldr	r3, [pc, #196]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef0:	492d      	ldr	r1, [pc, #180]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f00:	d106      	bne.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f02:	4b29      	ldr	r3, [pc, #164]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	4a28      	ldr	r2, [pc, #160]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001f08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f0c:	60d3      	str	r3, [r2, #12]
 8001f0e:	e011      	b.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f18:	d10c      	bne.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	2101      	movs	r1, #1
 8001f20:	4618      	mov	r0, r3
 8001f22:	f000 f843 	bl	8001fac <RCCEx_PLLSAI1_Config>
 8001f26:	4603      	mov	r3, r0
 8001f28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001f2a:	7cfb      	ldrb	r3, [r7, #19]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8001f30:	7cfb      	ldrb	r3, [r7, #19]
 8001f32:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d01c      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f40:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f46:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f4e:	4916      	ldr	r1, [pc, #88]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f5e:	d10c      	bne.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3304      	adds	r3, #4
 8001f64:	2102      	movs	r1, #2
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 f820 	bl	8001fac <RCCEx_PLLSAI1_Config>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001f70:	7cfb      	ldrb	r3, [r7, #19]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8001f76:	7cfb      	ldrb	r3, [r7, #19]
 8001f78:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00a      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001f86:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f8c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f94:	4904      	ldr	r1, [pc, #16]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001f9c:	7cbb      	ldrb	r3, [r7, #18]
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40021000 	.word	0x40021000

08001fac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001fba:	4b74      	ldr	r3, [pc, #464]	; (800218c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d018      	beq.n	8001ff8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001fc6:	4b71      	ldr	r3, [pc, #452]	; (800218c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	f003 0203 	and.w	r2, r3, #3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d10d      	bne.n	8001ff2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
       ||
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d009      	beq.n	8001ff2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001fde:	4b6b      	ldr	r3, [pc, #428]	; (800218c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	091b      	lsrs	r3, r3, #4
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	1c5a      	adds	r2, r3, #1
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
       ||
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d047      	beq.n	8002082 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	73fb      	strb	r3, [r7, #15]
 8001ff6:	e044      	b.n	8002082 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b03      	cmp	r3, #3
 8001ffe:	d018      	beq.n	8002032 <RCCEx_PLLSAI1_Config+0x86>
 8002000:	2b03      	cmp	r3, #3
 8002002:	d825      	bhi.n	8002050 <RCCEx_PLLSAI1_Config+0xa4>
 8002004:	2b01      	cmp	r3, #1
 8002006:	d002      	beq.n	800200e <RCCEx_PLLSAI1_Config+0x62>
 8002008:	2b02      	cmp	r3, #2
 800200a:	d009      	beq.n	8002020 <RCCEx_PLLSAI1_Config+0x74>
 800200c:	e020      	b.n	8002050 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800200e:	4b5f      	ldr	r3, [pc, #380]	; (800218c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d11d      	bne.n	8002056 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800201e:	e01a      	b.n	8002056 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002020:	4b5a      	ldr	r3, [pc, #360]	; (800218c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002028:	2b00      	cmp	r3, #0
 800202a:	d116      	bne.n	800205a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002030:	e013      	b.n	800205a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002032:	4b56      	ldr	r3, [pc, #344]	; (800218c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10f      	bne.n	800205e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800203e:	4b53      	ldr	r3, [pc, #332]	; (800218c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d109      	bne.n	800205e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800204e:	e006      	b.n	800205e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	73fb      	strb	r3, [r7, #15]
      break;
 8002054:	e004      	b.n	8002060 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002056:	bf00      	nop
 8002058:	e002      	b.n	8002060 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800205a:	bf00      	nop
 800205c:	e000      	b.n	8002060 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800205e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002060:	7bfb      	ldrb	r3, [r7, #15]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10d      	bne.n	8002082 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002066:	4b49      	ldr	r3, [pc, #292]	; (800218c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6819      	ldr	r1, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	3b01      	subs	r3, #1
 8002078:	011b      	lsls	r3, r3, #4
 800207a:	430b      	orrs	r3, r1
 800207c:	4943      	ldr	r1, [pc, #268]	; (800218c <RCCEx_PLLSAI1_Config+0x1e0>)
 800207e:	4313      	orrs	r3, r2
 8002080:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002082:	7bfb      	ldrb	r3, [r7, #15]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d17c      	bne.n	8002182 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002088:	4b40      	ldr	r3, [pc, #256]	; (800218c <RCCEx_PLLSAI1_Config+0x1e0>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a3f      	ldr	r2, [pc, #252]	; (800218c <RCCEx_PLLSAI1_Config+0x1e0>)
 800208e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002092:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002094:	f7fe faf0 	bl	8000678 <HAL_GetTick>
 8002098:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800209a:	e009      	b.n	80020b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800209c:	f7fe faec 	bl	8000678 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d902      	bls.n	80020b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	73fb      	strb	r3, [r7, #15]
        break;
 80020ae:	e005      	b.n	80020bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80020b0:	4b36      	ldr	r3, [pc, #216]	; (800218c <RCCEx_PLLSAI1_Config+0x1e0>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1ef      	bne.n	800209c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d15f      	bne.n	8002182 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d110      	bne.n	80020ea <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80020c8:	4b30      	ldr	r3, [pc, #192]	; (800218c <RCCEx_PLLSAI1_Config+0x1e0>)
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80020d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	6892      	ldr	r2, [r2, #8]
 80020d8:	0211      	lsls	r1, r2, #8
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	68d2      	ldr	r2, [r2, #12]
 80020de:	06d2      	lsls	r2, r2, #27
 80020e0:	430a      	orrs	r2, r1
 80020e2:	492a      	ldr	r1, [pc, #168]	; (800218c <RCCEx_PLLSAI1_Config+0x1e0>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	610b      	str	r3, [r1, #16]
 80020e8:	e027      	b.n	800213a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d112      	bne.n	8002116 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80020f0:	4b26      	ldr	r3, [pc, #152]	; (800218c <RCCEx_PLLSAI1_Config+0x1e0>)
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80020f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	6892      	ldr	r2, [r2, #8]
 8002100:	0211      	lsls	r1, r2, #8
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	6912      	ldr	r2, [r2, #16]
 8002106:	0852      	lsrs	r2, r2, #1
 8002108:	3a01      	subs	r2, #1
 800210a:	0552      	lsls	r2, r2, #21
 800210c:	430a      	orrs	r2, r1
 800210e:	491f      	ldr	r1, [pc, #124]	; (800218c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002110:	4313      	orrs	r3, r2
 8002112:	610b      	str	r3, [r1, #16]
 8002114:	e011      	b.n	800213a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002116:	4b1d      	ldr	r3, [pc, #116]	; (800218c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800211e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	6892      	ldr	r2, [r2, #8]
 8002126:	0211      	lsls	r1, r2, #8
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6952      	ldr	r2, [r2, #20]
 800212c:	0852      	lsrs	r2, r2, #1
 800212e:	3a01      	subs	r2, #1
 8002130:	0652      	lsls	r2, r2, #25
 8002132:	430a      	orrs	r2, r1
 8002134:	4915      	ldr	r1, [pc, #84]	; (800218c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002136:	4313      	orrs	r3, r2
 8002138:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800213a:	4b14      	ldr	r3, [pc, #80]	; (800218c <RCCEx_PLLSAI1_Config+0x1e0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a13      	ldr	r2, [pc, #76]	; (800218c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002140:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002144:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002146:	f7fe fa97 	bl	8000678 <HAL_GetTick>
 800214a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800214c:	e009      	b.n	8002162 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800214e:	f7fe fa93 	bl	8000678 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d902      	bls.n	8002162 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	73fb      	strb	r3, [r7, #15]
          break;
 8002160:	e005      	b.n	800216e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002162:	4b0a      	ldr	r3, [pc, #40]	; (800218c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0ef      	beq.n	800214e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800216e:	7bfb      	ldrb	r3, [r7, #15]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d106      	bne.n	8002182 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002174:	4b05      	ldr	r3, [pc, #20]	; (800218c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002176:	691a      	ldr	r2, [r3, #16]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	4903      	ldr	r1, [pc, #12]	; (800218c <RCCEx_PLLSAI1_Config+0x1e0>)
 800217e:	4313      	orrs	r3, r2
 8002180:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002182:	7bfb      	ldrb	r3, [r7, #15]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40021000 	.word	0x40021000

08002190 <__libc_init_array>:
 8002190:	b570      	push	{r4, r5, r6, lr}
 8002192:	4d0d      	ldr	r5, [pc, #52]	; (80021c8 <__libc_init_array+0x38>)
 8002194:	4c0d      	ldr	r4, [pc, #52]	; (80021cc <__libc_init_array+0x3c>)
 8002196:	1b64      	subs	r4, r4, r5
 8002198:	10a4      	asrs	r4, r4, #2
 800219a:	2600      	movs	r6, #0
 800219c:	42a6      	cmp	r6, r4
 800219e:	d109      	bne.n	80021b4 <__libc_init_array+0x24>
 80021a0:	4d0b      	ldr	r5, [pc, #44]	; (80021d0 <__libc_init_array+0x40>)
 80021a2:	4c0c      	ldr	r4, [pc, #48]	; (80021d4 <__libc_init_array+0x44>)
 80021a4:	f000 f820 	bl	80021e8 <_init>
 80021a8:	1b64      	subs	r4, r4, r5
 80021aa:	10a4      	asrs	r4, r4, #2
 80021ac:	2600      	movs	r6, #0
 80021ae:	42a6      	cmp	r6, r4
 80021b0:	d105      	bne.n	80021be <__libc_init_array+0x2e>
 80021b2:	bd70      	pop	{r4, r5, r6, pc}
 80021b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80021b8:	4798      	blx	r3
 80021ba:	3601      	adds	r6, #1
 80021bc:	e7ee      	b.n	800219c <__libc_init_array+0xc>
 80021be:	f855 3b04 	ldr.w	r3, [r5], #4
 80021c2:	4798      	blx	r3
 80021c4:	3601      	adds	r6, #1
 80021c6:	e7f2      	b.n	80021ae <__libc_init_array+0x1e>
 80021c8:	08002240 	.word	0x08002240
 80021cc:	08002240 	.word	0x08002240
 80021d0:	08002240 	.word	0x08002240
 80021d4:	08002244 	.word	0x08002244

080021d8 <memset>:
 80021d8:	4402      	add	r2, r0
 80021da:	4603      	mov	r3, r0
 80021dc:	4293      	cmp	r3, r2
 80021de:	d100      	bne.n	80021e2 <memset+0xa>
 80021e0:	4770      	bx	lr
 80021e2:	f803 1b01 	strb.w	r1, [r3], #1
 80021e6:	e7f9      	b.n	80021dc <memset+0x4>

080021e8 <_init>:
 80021e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ea:	bf00      	nop
 80021ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ee:	bc08      	pop	{r3}
 80021f0:	469e      	mov	lr, r3
 80021f2:	4770      	bx	lr

080021f4 <_fini>:
 80021f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021f6:	bf00      	nop
 80021f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021fa:	bc08      	pop	{r3}
 80021fc:	469e      	mov	lr, r3
 80021fe:	4770      	bx	lr
