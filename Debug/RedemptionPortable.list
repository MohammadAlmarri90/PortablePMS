
RedemptionPortable.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc24  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  0800cdb8  0800cdb8  0001cdb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d29c  0800d29c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800d29c  0800d29c  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d29c  0800d29c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d29c  0800d29c  0001d29c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d2a0  0800d2a0  0001d2a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800d2a4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  200001f0  0800d490  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  0800d490  00020450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001657f  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f24  00000000  00000000  0003679b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001570  00000000  00000000  000396c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001408  00000000  00000000  0003ac30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024c2c  00000000  00000000  0003c038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001782d  00000000  00000000  00060c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dfae0  00000000  00000000  00078491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00157f71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007128  00000000  00000000  00157fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cd9c 	.word	0x0800cd9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0800cd9c 	.word	0x0800cd9c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <BQ_Write>:
};




void BQ_Write(uint8_t reg, uint8_t data) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af04      	add	r7, sp, #16
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	460a      	mov	r2, r1
 8000cfe:	71fb      	strb	r3, [r7, #7]
 8000d00:	4613      	mov	r3, r2
 8000d02:	71bb      	strb	r3, [r7, #6]

	if ( HAL_I2C_Mem_Write( &hi2c1, BQ_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 10 ) != HAL_OK)
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	b29a      	uxth	r2, r3
 8000d08:	230a      	movs	r3, #10
 8000d0a:	9302      	str	r3, [sp, #8]
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	9301      	str	r3, [sp, #4]
 8000d10:	1dbb      	adds	r3, r7, #6
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	2301      	movs	r3, #1
 8000d16:	21d6      	movs	r1, #214	; 0xd6
 8000d18:	4806      	ldr	r0, [pc, #24]	; (8000d34 <BQ_Write+0x40>)
 8000d1a:	f003 ffe5 	bl	8004ce8 <HAL_I2C_Mem_Write>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d002      	beq.n	8000d2a <BQ_Write+0x36>
	{
		GLOBAL_errors = I2CErrorWrite;
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <BQ_Write+0x44>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]
	}

}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	200002f4 	.word	0x200002f4
 8000d38:	2000042c 	.word	0x2000042c

08000d3c <BQ_Read>:

uint8_t BQ_Read(uint8_t reg) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b088      	sub	sp, #32
 8000d40:	af04      	add	r7, sp, #16
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

	if ( HAL_I2C_Mem_Read( &hi2c1, BQ_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 10 ) != HAL_OK)
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	b29a      	uxth	r2, r3
 8000d4a:	230a      	movs	r3, #10
 8000d4c:	9302      	str	r3, [sp, #8]
 8000d4e:	2301      	movs	r3, #1
 8000d50:	9301      	str	r3, [sp, #4]
 8000d52:	f107 030f 	add.w	r3, r7, #15
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	2301      	movs	r3, #1
 8000d5a:	21d6      	movs	r1, #214	; 0xd6
 8000d5c:	4806      	ldr	r0, [pc, #24]	; (8000d78 <BQ_Read+0x3c>)
 8000d5e:	f004 f8d7 	bl	8004f10 <HAL_I2C_Mem_Read>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d002      	beq.n	8000d6e <BQ_Read+0x32>
	{
		GLOBAL_errors = I2CErrorRead;
 8000d68:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <BQ_Read+0x40>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	701a      	strb	r2, [r3, #0]
	}

    return data;
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]

}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	200002f4 	.word	0x200002f4
 8000d7c:	2000042c 	.word	0x2000042c

08000d80 <BQ_Init>:

bool BQ_Init()
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
	struct BQ_Register_fields BQ;

	//REG00
	BQ.REG00.IINLIM = 0b111;	//3A input
 8000d86:	783b      	ldrb	r3, [r7, #0]
 8000d88:	f043 0307 	orr.w	r3, r3, #7
 8000d8c:	703b      	strb	r3, [r7, #0]
	BQ.REG00.VINDPM = 0b1011;	//4.76V
 8000d8e:	783b      	ldrb	r3, [r7, #0]
 8000d90:	220b      	movs	r2, #11
 8000d92:	f362 03c6 	bfi	r3, r2, #3, #4
 8000d96:	703b      	strb	r3, [r7, #0]
	BQ.REG00.EN_HIZ = 1;
 8000d98:	783b      	ldrb	r3, [r7, #0]
 8000d9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d9e:	703b      	strb	r3, [r7, #0]

	//REG01
	BQ.REG01.SYS_MIN = 0b011;	//3.3V minimum voltage cutoff
 8000da0:	787b      	ldrb	r3, [r7, #1]
 8000da2:	2203      	movs	r2, #3
 8000da4:	f362 0343 	bfi	r3, r2, #1, #3
 8000da8:	707b      	strb	r3, [r7, #1]
	BQ.REG01.CHG_CONFIG = 1;	//enable charge
 8000daa:	787b      	ldrb	r3, [r7, #1]
 8000dac:	f043 0310 	orr.w	r3, r3, #16
 8000db0:	707b      	strb	r3, [r7, #1]
	BQ.REG01.OTG_CONFIG = 0;
 8000db2:	787b      	ldrb	r3, [r7, #1]
 8000db4:	f36f 1345 	bfc	r3, #5, #1
 8000db8:	707b      	strb	r3, [r7, #1]
	BQ.REG01.I2CWDTIMER = 0;	//disable WD
 8000dba:	787b      	ldrb	r3, [r7, #1]
 8000dbc:	f36f 1386 	bfc	r3, #6, #1
 8000dc0:	707b      	strb	r3, [r7, #1]
	BQ.REG01.RegisterReset = 0;
 8000dc2:	787b      	ldrb	r3, [r7, #1]
 8000dc4:	f36f 13c7 	bfc	r3, #7, #1
 8000dc8:	707b      	strb	r3, [r7, #1]

	//REG02
	BQ.REG02.FORCE_20PCT = 0;
 8000dca:	78bb      	ldrb	r3, [r7, #2]
 8000dcc:	f36f 0300 	bfc	r3, #0, #1
 8000dd0:	70bb      	strb	r3, [r7, #2]
	BQ.REG02.BCOLD = 0;
 8000dd2:	78bb      	ldrb	r3, [r7, #2]
 8000dd4:	f36f 0341 	bfc	r3, #1, #1
 8000dd8:	70bb      	strb	r3, [r7, #2]
	BQ.REG02.ICHG = 0b101111;	//Fast Charging current is 3008mAh
 8000dda:	78bb      	ldrb	r3, [r7, #2]
 8000ddc:	222f      	movs	r2, #47	; 0x2f
 8000dde:	f362 0387 	bfi	r3, r2, #2, #6
 8000de2:	70bb      	strb	r3, [r7, #2]

	//REG03
	BQ.REG03.ITERM = 0b0011;	//Termination current is 384mAh
 8000de4:	78fb      	ldrb	r3, [r7, #3]
 8000de6:	2203      	movs	r2, #3
 8000de8:	f362 0303 	bfi	r3, r2, #0, #4
 8000dec:	70fb      	strb	r3, [r7, #3]
	BQ.REG03.IPRECHG = 0b0001;	//Precharge current is 128mAh
 8000dee:	78fb      	ldrb	r3, [r7, #3]
 8000df0:	2201      	movs	r2, #1
 8000df2:	f362 1307 	bfi	r3, r2, #4, #4
 8000df6:	70fb      	strb	r3, [r7, #3]

	//REG04
	BQ.REG04.VRECHG = 0;
 8000df8:	793b      	ldrb	r3, [r7, #4]
 8000dfa:	f36f 0300 	bfc	r3, #0, #1
 8000dfe:	713b      	strb	r3, [r7, #4]
	BQ.REG04.BATLOWV = 1;		//Battery is precharged until 3.0v then changed to fast charge
 8000e00:	793b      	ldrb	r3, [r7, #4]
 8000e02:	f043 0302 	orr.w	r3, r3, #2
 8000e06:	713b      	strb	r3, [r7, #4]
	BQ.REG04.VREG = 0b101100;	//Battery is full at 4.208v
 8000e08:	793b      	ldrb	r3, [r7, #4]
 8000e0a:	222c      	movs	r2, #44	; 0x2c
 8000e0c:	f362 0387 	bfi	r3, r2, #2, #6
 8000e10:	713b      	strb	r3, [r7, #4]

	//REG05
	BQ.REG05.CHG_TIMER = 0b01;	//If enabled, it will charge for 8 hours
 8000e12:	797b      	ldrb	r3, [r7, #5]
 8000e14:	2201      	movs	r2, #1
 8000e16:	f362 0342 	bfi	r3, r2, #1, #2
 8000e1a:	717b      	strb	r3, [r7, #5]
	BQ.REG05.EN_TIMER = 0;		//disable charging safety timer
 8000e1c:	797b      	ldrb	r3, [r7, #5]
 8000e1e:	f36f 03c3 	bfc	r3, #3, #1
 8000e22:	717b      	strb	r3, [r7, #5]
	BQ.REG05.WATCHDOG = 0b00;	//disable watchdog
 8000e24:	797b      	ldrb	r3, [r7, #5]
 8000e26:	f36f 1305 	bfc	r3, #4, #2
 8000e2a:	717b      	strb	r3, [r7, #5]
	BQ.REG05.EN_TERM = 1;
 8000e2c:	797b      	ldrb	r3, [r7, #5]
 8000e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e32:	717b      	strb	r3, [r7, #5]

	//REG06
	BQ.REG06.TREG = 0b00;		//Thermal reg at 60C degrees
 8000e34:	79bb      	ldrb	r3, [r7, #6]
 8000e36:	f36f 0301 	bfc	r3, #0, #2
 8000e3a:	71bb      	strb	r3, [r7, #6]
	BQ.REG06.BHOT = 0b00;
 8000e3c:	79bb      	ldrb	r3, [r7, #6]
 8000e3e:	f36f 0383 	bfc	r3, #2, #2
 8000e42:	71bb      	strb	r3, [r7, #6]
	BQ.REG06.BOOSTV= 0b1001;	//not needed
 8000e44:	79bb      	ldrb	r3, [r7, #6]
 8000e46:	2209      	movs	r2, #9
 8000e48:	f362 1307 	bfi	r3, r2, #4, #4
 8000e4c:	71bb      	strb	r3, [r7, #6]

	//REG07
	BQ.REG07.INT_MASK = 0b11;	//Enable pin Inturrupts
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	f043 0303 	orr.w	r3, r3, #3
 8000e54:	71fb      	strb	r3, [r7, #7]
	BQ.REG07.BATFET_Disable = 0;//to Force BATFET off, turn this ON
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	f36f 1345 	bfc	r3, #5, #1
 8000e5c:	71fb      	strb	r3, [r7, #7]
	BQ.REG07.TMR2X_EN = 1;
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e64:	71fb      	strb	r3, [r7, #7]
	BQ.REG07.DPDM_EN = 0;
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	f36f 13c7 	bfc	r3, #7, #1
 8000e6c:	71fb      	strb	r3, [r7, #7]

	if(!BQ_IsPresent())
 8000e6e:	f000 f845 	bl	8000efc <BQ_IsPresent>
 8000e72:	4603      	mov	r3, r0
 8000e74:	f083 0301 	eor.w	r3, r3, #1
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <BQ_Init+0x102>
	{
		return false;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e037      	b.n	8000ef2 <BQ_Init+0x172>
	}
	BQ_Write((uint8_t *)InputSourceControlReg, *(uint8_t *)&BQ.REG00);
 8000e82:	463b      	mov	r3, r7
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	4619      	mov	r1, r3
 8000e88:	2000      	movs	r0, #0
 8000e8a:	f7ff ff33 	bl	8000cf4 <BQ_Write>
	BQ_Write((uint8_t *)PowerOnConfigReg, *(uint8_t *)&BQ.REG01);
 8000e8e:	463b      	mov	r3, r7
 8000e90:	3301      	adds	r3, #1
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4619      	mov	r1, r3
 8000e96:	2001      	movs	r0, #1
 8000e98:	f7ff ff2c 	bl	8000cf4 <BQ_Write>
	BQ_Write((uint8_t *)ChargeCurrentControlReg, *(uint8_t *)&BQ.REG02);
 8000e9c:	463b      	mov	r3, r7
 8000e9e:	3302      	adds	r3, #2
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	2002      	movs	r0, #2
 8000ea6:	f7ff ff25 	bl	8000cf4 <BQ_Write>
	BQ_Write((uint8_t *)PrechargeTerminationCurrentControlReg, *(uint8_t *)&BQ.REG03);
 8000eaa:	463b      	mov	r3, r7
 8000eac:	3303      	adds	r3, #3
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	2003      	movs	r0, #3
 8000eb4:	f7ff ff1e 	bl	8000cf4 <BQ_Write>
	BQ_Write((uint8_t *)ChargeVoltageControlReg, *(uint8_t *)&BQ.REG04);
 8000eb8:	463b      	mov	r3, r7
 8000eba:	3304      	adds	r3, #4
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	2004      	movs	r0, #4
 8000ec2:	f7ff ff17 	bl	8000cf4 <BQ_Write>
	BQ_Write((uint8_t *)ChargeTerminationTimerControlReg, *(uint8_t *)&BQ.REG05);
 8000ec6:	463b      	mov	r3, r7
 8000ec8:	3305      	adds	r3, #5
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	2005      	movs	r0, #5
 8000ed0:	f7ff ff10 	bl	8000cf4 <BQ_Write>
	BQ_Write((uint8_t *)BoostVoltageThermalRegulationControlReg, *(uint8_t *)&BQ.REG06);
 8000ed4:	463b      	mov	r3, r7
 8000ed6:	3306      	adds	r3, #6
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	4619      	mov	r1, r3
 8000edc:	2006      	movs	r0, #6
 8000ede:	f7ff ff09 	bl	8000cf4 <BQ_Write>
	BQ_Write((uint8_t *)MiscOperationControlReg, *(uint8_t *)&BQ.REG07);
 8000ee2:	463b      	mov	r3, r7
 8000ee4:	3307      	adds	r3, #7
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	2007      	movs	r0, #7
 8000eec:	f7ff ff02 	bl	8000cf4 <BQ_Write>

	return true;
 8000ef0:	2301      	movs	r3, #1
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <BQ_IsPresent>:

bool BQ_IsPresent()
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
	if(GLOBAL_errors != 0)
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <BQ_IsPresent+0x44>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <BQ_IsPresent+0x12>
	{
		return false;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	e013      	b.n	8000f36 <BQ_IsPresent+0x3a>
	}

	uint8_t reg = BQ_Read(PartStatusReg);
 8000f0e:	200a      	movs	r0, #10
 8000f10:	f7ff ff14 	bl	8000d3c <BQ_Read>
 8000f14:	4603      	mov	r3, r0
 8000f16:	71fb      	strb	r3, [r7, #7]

	reg = (reg >>5);
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	095b      	lsrs	r3, r3, #5
 8000f1c:	71fb      	strb	r3, [r7, #7]

	if(BQ_Read(PartStatusReg) == 0b110)
 8000f1e:	200a      	movs	r0, #10
 8000f20:	f7ff ff0c 	bl	8000d3c <BQ_Read>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b06      	cmp	r3, #6
 8000f28:	d101      	bne.n	8000f2e <BQ_IsPresent+0x32>
	{
		return true;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e003      	b.n	8000f36 <BQ_IsPresent+0x3a>
	}else
	{
		GLOBAL_errors = BQNotPresentOrNotCorrectPart;
 8000f2e:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <BQ_IsPresent+0x44>)
 8000f30:	2202      	movs	r2, #2
 8000f32:	701a      	strb	r2, [r3, #0]
		return false;
 8000f34:	2300      	movs	r3, #0
	}
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	2000042c 	.word	0x2000042c

08000f44 <BQ_IsCharging>:


bool BQ_IsCharging()
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
	uint8_t SystemStatus 	= BQ_Read(SystemStatusReg);
 8000f4a:	2008      	movs	r0, #8
 8000f4c:	f7ff fef6 	bl	8000d3c <BQ_Read>
 8000f50:	4603      	mov	r3, r0
 8000f52:	71fb      	strb	r3, [r7, #7]
	uint8_t chargeStatus 	= (SystemStatus >> 4) & 0b11;
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	091b      	lsrs	r3, r3, #4
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	f003 0303 	and.w	r3, r3, #3
 8000f5e:	71bb      	strb	r3, [r7, #6]
	if(chargeStatus == 0b01 || chargeStatus == 0b10)	//Pre-Charging or Fast-Charging
 8000f60:	79bb      	ldrb	r3, [r7, #6]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d002      	beq.n	8000f6c <BQ_IsCharging+0x28>
 8000f66:	79bb      	ldrb	r3, [r7, #6]
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d101      	bne.n	8000f70 <BQ_IsCharging+0x2c>
	{
		return true;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e000      	b.n	8000f72 <BQ_IsCharging+0x2e>
	}
	return false;
 8000f70:	2300      	movs	r3, #0

}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <PID_Init>:
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f98:	6879      	ldr	r1, [r7, #4]
 8000f9a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8000faa:	f7ff fdb5 	bl	8000b18 <__aeabi_dcmpgt>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d006      	beq.n	8000fc2 <PID_Init+0x48>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8000fc0:	e011      	b.n	8000fe6 <PID_Init+0x6c>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8000fce:	f7ff fd85 	bl	8000adc <__aeabi_dcmplt>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d100      	bne.n	8000fda <PID_Init+0x60>
 8000fd8:	e005      	b.n	8000fe6 <PID_Init+0x6c>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8000fe0:	6879      	ldr	r1, [r7, #4]
 8000fe2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <PID>:
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6278      	str	r0, [r7, #36]	; 0x24
 8000ff8:	6239      	str	r1, [r7, #32]
 8000ffa:	61fa      	str	r2, [r7, #28]
 8000ffc:	61bb      	str	r3, [r7, #24]
 8000ffe:	ed87 0b04 	vstr	d0, [r7, #16]
 8001002:	ed87 1b02 	vstr	d1, [r7, #8]
 8001006:	ed87 2b00 	vstr	d2, [r7]
 800100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100c:	69fa      	ldr	r2, [r7, #28]
 800100e:	645a      	str	r2, [r3, #68]	; 0x44
 8001010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001012:	6a3a      	ldr	r2, [r7, #32]
 8001014:	641a      	str	r2, [r3, #64]	; 0x40
 8001016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	649a      	str	r2, [r3, #72]	; 0x48
 800101c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101e:	2200      	movs	r2, #0
 8001020:	705a      	strb	r2, [r3, #1]
 8001022:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8001078 <PID+0x88>
 8001026:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8001080 <PID+0x90>
 800102a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800102c:	f000 f934 	bl	8001298 <PID_SetOutputLimits>
 8001030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001032:	2264      	movs	r2, #100	; 0x64
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800103a:	4619      	mov	r1, r3
 800103c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800103e:	f000 fa41 	bl	80014c4 <PID_SetControllerDirection>
 8001042:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001046:	4619      	mov	r1, r3
 8001048:	ed97 2b00 	vldr	d2, [r7]
 800104c:	ed97 1b02 	vldr	d1, [r7, #8]
 8001050:	ed97 0b04 	vldr	d0, [r7, #16]
 8001054:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001056:	f000 f98d 	bl	8001374 <PID_SetTunings2>
 800105a:	f001 fff3 	bl	8003044 <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	1ad2      	subs	r2, r2, r3
 8001066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	bf00      	nop
 800106c:	3728      	adds	r7, #40	; 0x28
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	f3af 8000 	nop.w
 8001078:	00000000 	.word	0x00000000
 800107c:	406fe000 	.word	0x406fe000
	...

08001088 <PID_Compute>:
 8001088:	b5b0      	push	{r4, r5, r7, lr}
 800108a:	b08c      	sub	sp, #48	; 0x30
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	785b      	ldrb	r3, [r3, #1]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d101      	bne.n	800109c <PID_Compute+0x14>
 8001098:	2300      	movs	r3, #0
 800109a:	e0db      	b.n	8001254 <PID_Compute+0x1cc>
 800109c:	f001 ffd2 	bl	8003044 <HAL_GetTick>
 80010a0:	6278      	str	r0, [r7, #36]	; 0x24
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	623b      	str	r3, [r7, #32]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	6a3a      	ldr	r2, [r7, #32]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	f0c0 80cd 	bcc.w	8001252 <PID_Compute+0x1ca>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80010d0:	f7ff f8da 	bl	8000288 <__aeabi_dsub>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80010e2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010e6:	f7ff f8cf 	bl	8000288 <__aeabi_dsub>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80010fe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001102:	f7ff fa79 	bl	80005f8 <__aeabi_dmul>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	4620      	mov	r0, r4
 800110c:	4629      	mov	r1, r5
 800110e:	f7ff f8bd 	bl	800028c <__adddf3>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d114      	bne.n	800114e <PID_Compute+0xc6>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001130:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001134:	f7ff fa60 	bl	80005f8 <__aeabi_dmul>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4620      	mov	r0, r4
 800113e:	4629      	mov	r1, r5
 8001140:	f7ff f8a2 	bl	8000288 <__aeabi_dsub>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	6879      	ldr	r1, [r7, #4]
 800114a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800115a:	f7ff fcdd 	bl	8000b18 <__aeabi_dcmpgt>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d006      	beq.n	8001172 <PID_Compute+0xea>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001170:	e010      	b.n	8001194 <PID_Compute+0x10c>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800117e:	f7ff fcad 	bl	8000adc <__aeabi_dcmplt>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d005      	beq.n	8001194 <PID_Compute+0x10c>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d00b      	beq.n	80011b4 <PID_Compute+0x12c>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80011a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011a6:	f7ff fa27 	bl	80005f8 <__aeabi_dmul>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80011b2:	e005      	b.n	80011c0 <PID_Compute+0x138>
 80011b4:	f04f 0200 	mov.w	r2, #0
 80011b8:	f04f 0300 	mov.w	r3, #0
 80011bc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80011cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011d0:	f7ff fa12 	bl	80005f8 <__aeabi_dmul>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4620      	mov	r0, r4
 80011da:	4629      	mov	r1, r5
 80011dc:	f7ff f854 	bl	8000288 <__aeabi_dsub>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80011e8:	f7ff f850 	bl	800028c <__adddf3>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80011fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80011fe:	f7ff fc8b 	bl	8000b18 <__aeabi_dcmpgt>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d005      	beq.n	8001214 <PID_Compute+0x18c>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800120e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001212:	e00e      	b.n	8001232 <PID_Compute+0x1aa>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800121a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800121e:	f7ff fc5d 	bl	8000adc <__aeabi_dcmplt>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d004      	beq.n	8001232 <PID_Compute+0x1aa>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800122e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001236:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800123a:	e9c1 2300 	strd	r2, r3, [r1]
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001244:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	2301      	movs	r3, #1
 8001250:	e000      	b.n	8001254 <PID_Compute+0x1cc>
 8001252:	2300      	movs	r3, #0
 8001254:	4618      	mov	r0, r3
 8001256:	3730      	adds	r7, #48	; 0x30
 8001258:	46bd      	mov	sp, r7
 800125a:	bdb0      	pop	{r4, r5, r7, pc}

0800125c <PID_SetMode>:
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	70fb      	strb	r3, [r7, #3]
 8001268:	78fb      	ldrb	r3, [r7, #3]
 800126a:	2b01      	cmp	r3, #1
 800126c:	bf0c      	ite	eq
 800126e:	2301      	moveq	r3, #1
 8001270:	2300      	movne	r3, #0
 8001272:	b2db      	uxtb	r3, r3
 8001274:	73fb      	strb	r3, [r7, #15]
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d006      	beq.n	800128a <PID_SetMode+0x2e>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	785b      	ldrb	r3, [r3, #1]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d102      	bne.n	800128a <PID_SetMode+0x2e>
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff fe78 	bl	8000f7a <PID_Init>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	7bfa      	ldrb	r2, [r7, #15]
 800128e:	705a      	strb	r2, [r3, #1]
 8001290:	bf00      	nop
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <PID_SetOutputLimits>:
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6178      	str	r0, [r7, #20]
 80012a0:	ed87 0b02 	vstr	d0, [r7, #8]
 80012a4:	ed87 1b00 	vstr	d1, [r7]
 80012a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012b0:	f7ff fc28 	bl	8000b04 <__aeabi_dcmpge>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d158      	bne.n	800136c <PID_SetOutputLimits+0xd4>
 80012ba:	6979      	ldr	r1, [r7, #20]
 80012bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012c0:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 80012c4:	6979      	ldr	r1, [r7, #20]
 80012c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012ca:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	785b      	ldrb	r3, [r3, #1]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d04b      	beq.n	800136e <PID_SetOutputLimits+0xd6>
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80012e4:	f7ff fc18 	bl	8000b18 <__aeabi_dcmpgt>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d007      	beq.n	80012fe <PID_SetOutputLimits+0x66>
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80012f8:	e9c1 2300 	strd	r2, r3, [r1]
 80012fc:	e012      	b.n	8001324 <PID_SetOutputLimits+0x8c>
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800130c:	f7ff fbe6 	bl	8000adc <__aeabi_dcmplt>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d006      	beq.n	8001324 <PID_SetOutputLimits+0x8c>
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001320:	e9c1 2300 	strd	r2, r3, [r1]
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001330:	f7ff fbf2 	bl	8000b18 <__aeabi_dcmpgt>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d006      	beq.n	8001348 <PID_SetOutputLimits+0xb0>
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001340:	6979      	ldr	r1, [r7, #20]
 8001342:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001346:	e012      	b.n	800136e <PID_SetOutputLimits+0xd6>
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001354:	f7ff fbc2 	bl	8000adc <__aeabi_dcmplt>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d007      	beq.n	800136e <PID_SetOutputLimits+0xd6>
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001364:	6979      	ldr	r1, [r7, #20]
 8001366:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800136a:	e000      	b.n	800136e <PID_SetOutputLimits+0xd6>
 800136c:	bf00      	nop
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <PID_SetTunings2>:
 8001374:	b580      	push	{r7, lr}
 8001376:	b08a      	sub	sp, #40	; 0x28
 8001378:	af00      	add	r7, sp, #0
 800137a:	61f8      	str	r0, [r7, #28]
 800137c:	ed87 0b04 	vstr	d0, [r7, #16]
 8001380:	ed87 1b02 	vstr	d1, [r7, #8]
 8001384:	ed87 2b00 	vstr	d2, [r7]
 8001388:	460b      	mov	r3, r1
 800138a:	76fb      	strb	r3, [r7, #27]
 800138c:	f04f 0200 	mov.w	r2, #0
 8001390:	f04f 0300 	mov.w	r3, #0
 8001394:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001398:	f7ff fba0 	bl	8000adc <__aeabi_dcmplt>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f040 8089 	bne.w	80014b6 <PID_SetTunings2+0x142>
 80013a4:	f04f 0200 	mov.w	r2, #0
 80013a8:	f04f 0300 	mov.w	r3, #0
 80013ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013b0:	f7ff fb94 	bl	8000adc <__aeabi_dcmplt>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d17d      	bne.n	80014b6 <PID_SetTunings2+0x142>
 80013ba:	f04f 0200 	mov.w	r2, #0
 80013be:	f04f 0300 	mov.w	r3, #0
 80013c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013c6:	f7ff fb89 	bl	8000adc <__aeabi_dcmplt>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d172      	bne.n	80014b6 <PID_SetTunings2+0x142>
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	7efa      	ldrb	r2, [r7, #27]
 80013d4:	709a      	strb	r2, [r3, #2]
 80013d6:	7efb      	ldrb	r3, [r7, #27]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	bf0c      	ite	eq
 80013dc:	2301      	moveq	r3, #1
 80013de:	2300      	movne	r3, #0
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	461a      	mov	r2, r3
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	701a      	strb	r2, [r3, #0]
 80013e8:	69f9      	ldr	r1, [r7, #28]
 80013ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013ee:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80013f2:	69f9      	ldr	r1, [r7, #28]
 80013f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013f8:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80013fc:	69f9      	ldr	r1, [r7, #28]
 80013fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001402:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff f87a 	bl	8000504 <__aeabi_ui2d>
 8001410:	f04f 0200 	mov.w	r2, #0
 8001414:	4b2a      	ldr	r3, [pc, #168]	; (80014c0 <PID_SetTunings2+0x14c>)
 8001416:	f7ff fa19 	bl	800084c <__aeabi_ddiv>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001422:	69f9      	ldr	r1, [r7, #28]
 8001424:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001428:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 800142c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001430:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001434:	f7ff f8e0 	bl	80005f8 <__aeabi_dmul>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	69f9      	ldr	r1, [r7, #28]
 800143e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8001442:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001446:	e9d7 0100 	ldrd	r0, r1, [r7]
 800144a:	f7ff f9ff 	bl	800084c <__aeabi_ddiv>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	69f9      	ldr	r1, [r7, #28]
 8001454:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	78db      	ldrb	r3, [r3, #3]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d12b      	bne.n	80014b8 <PID_SetTunings2+0x144>
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001466:	f04f 0000 	mov.w	r0, #0
 800146a:	f04f 0100 	mov.w	r1, #0
 800146e:	f7fe ff0b 	bl	8000288 <__aeabi_dsub>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	69f9      	ldr	r1, [r7, #28]
 8001478:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001482:	f04f 0000 	mov.w	r0, #0
 8001486:	f04f 0100 	mov.w	r1, #0
 800148a:	f7fe fefd 	bl	8000288 <__aeabi_dsub>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	69f9      	ldr	r1, [r7, #28]
 8001494:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800149e:	f04f 0000 	mov.w	r0, #0
 80014a2:	f04f 0100 	mov.w	r1, #0
 80014a6:	f7fe feef 	bl	8000288 <__aeabi_dsub>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	69f9      	ldr	r1, [r7, #28]
 80014b0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 80014b4:	e000      	b.n	80014b8 <PID_SetTunings2+0x144>
 80014b6:	bf00      	nop
 80014b8:	3728      	adds	r7, #40	; 0x28
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	408f4000 	.word	0x408f4000

080014c4 <PID_SetControllerDirection>:
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	460b      	mov	r3, r1
 80014ce:	70fb      	strb	r3, [r7, #3]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	785b      	ldrb	r3, [r3, #1]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d02e      	beq.n	8001536 <PID_SetControllerDirection+0x72>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	78db      	ldrb	r3, [r3, #3]
 80014dc:	78fa      	ldrb	r2, [r7, #3]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d029      	beq.n	8001536 <PID_SetControllerDirection+0x72>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80014e8:	f04f 0000 	mov.w	r0, #0
 80014ec:	f04f 0100 	mov.w	r1, #0
 80014f0:	f7fe feca 	bl	8000288 <__aeabi_dsub>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001504:	f04f 0000 	mov.w	r0, #0
 8001508:	f04f 0100 	mov.w	r1, #0
 800150c:	f7fe febc 	bl	8000288 <__aeabi_dsub>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	6879      	ldr	r1, [r7, #4]
 8001516:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001520:	f04f 0000 	mov.w	r0, #0
 8001524:	f04f 0100 	mov.w	r1, #0
 8001528:	f7fe feae 	bl	8000288 <__aeabi_dsub>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	6879      	ldr	r1, [r7, #4]
 8001532:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	78fa      	ldrb	r2, [r7, #3]
 800153a:	70da      	strb	r2, [r3, #3]
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <PID_SetSampleTime>:
 8001544:	b5b0      	push	{r4, r5, r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	dd2e      	ble.n	80015b2 <PID_SetSampleTime+0x6e>
 8001554:	6838      	ldr	r0, [r7, #0]
 8001556:	f7fe ffe5 	bl	8000524 <__aeabi_i2d>
 800155a:	4604      	mov	r4, r0
 800155c:	460d      	mov	r5, r1
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	4618      	mov	r0, r3
 8001564:	f7fe ffce 	bl	8000504 <__aeabi_ui2d>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4620      	mov	r0, r4
 800156e:	4629      	mov	r1, r5
 8001570:	f7ff f96c 	bl	800084c <__aeabi_ddiv>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001582:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001586:	f7ff f837 	bl	80005f8 <__aeabi_dmul>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800159a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800159e:	f7ff f955 	bl	800084c <__aeabi_ddiv>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	bf00      	nop
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bdb0      	pop	{r4, r5, r7, pc}

080015ba <EnterSleepModeWakeOnInturrupt>:
/* USER CODE BEGIN 0 */



#if (ENABLESLEEPMODE)
	void EnterSleepModeWakeOnInturrupt() {
 80015ba:	b580      	push	{r7, lr}
 80015bc:	af00      	add	r7, sp, #0
		HAL_SuspendTick();
 80015be:	f001 fd71 	bl	80030a4 <HAL_SuspendTick>
		HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80015c2:	2101      	movs	r1, #1
 80015c4:	2000      	movs	r0, #0
 80015c6:	f004 f8fb 	bl	80057c0 <HAL_PWR_EnterSLEEPMode>
	}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}

080015ce <WakeUpFromSleepMode>:
	void WakeUpFromSleepMode(){
 80015ce:	b580      	push	{r7, lr}
 80015d0:	af00      	add	r7, sp, #0
		HAL_ResumeTick();
 80015d2:	f001 fd77 	bl	80030c4 <HAL_ResumeTick>
	}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <HAL_GPIO_EXTI_Callback>:



/*		INURRUPT CODE		*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BQ_INT_Pin) // BQ INT pin wake up
 80015e6:	88fb      	ldrh	r3, [r7, #6]
 80015e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015ec:	d104      	bne.n	80015f8 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		WakeUpFromSleepMode();
 80015ee:	f7ff ffee 	bl	80015ce <WakeUpFromSleepMode>
		BQ_FLAG = true;
 80015f2:	4b4c      	ldr	r3, [pc, #304]	; (8001724 <HAL_GPIO_EXTI_Callback+0x148>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == MAX_ALRT_Pin)
 80015f8:	88fb      	ldrh	r3, [r7, #6]
 80015fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015fe:	d104      	bne.n	800160a <HAL_GPIO_EXTI_Callback+0x2e>
	{
		WakeUpFromSleepMode();
 8001600:	f7ff ffe5 	bl	80015ce <WakeUpFromSleepMode>
		MAX_FLAG = true;
 8001604:	4b48      	ldr	r3, [pc, #288]	; (8001728 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001606:	2201      	movs	r2, #1
 8001608:	701a      	strb	r2, [r3, #0]

	}
	if(GPIO_Pin == Power_Button_Pin)
 800160a:	88fb      	ldrh	r3, [r7, #6]
 800160c:	2b80      	cmp	r3, #128	; 0x80
 800160e:	f040 8084 	bne.w	800171a <HAL_GPIO_EXTI_Callback+0x13e>
	{
		if(HAL_GPIO_ReadPin(Power_Button_GPIO_Port, Power_Button_Pin) == GPIO_PIN_RESET
 8001612:	2180      	movs	r1, #128	; 0x80
 8001614:	4845      	ldr	r0, [pc, #276]	; (800172c <HAL_GPIO_EXTI_Callback+0x150>)
 8001616:	f003 fa8f 	bl	8004b38 <HAL_GPIO_ReadPin>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d110      	bne.n	8001642 <HAL_GPIO_EXTI_Callback+0x66>
				&& PowerButtonDebounced && !IsPressPeriodStart)
 8001620:	4b43      	ldr	r3, [pc, #268]	; (8001730 <HAL_GPIO_EXTI_Callback+0x154>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d00c      	beq.n	8001642 <HAL_GPIO_EXTI_Callback+0x66>
 8001628:	4b42      	ldr	r3, [pc, #264]	; (8001734 <HAL_GPIO_EXTI_Callback+0x158>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	f083 0301 	eor.w	r3, r3, #1
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d005      	beq.n	8001642 <HAL_GPIO_EXTI_Callback+0x66>
		{
			HAL_TIM_Base_Start_IT(&htim15);	//Start Debounce
 8001636:	4840      	ldr	r0, [pc, #256]	; (8001738 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001638:	f005 fb04 	bl	8006c44 <HAL_TIM_Base_Start_IT>
			PowerButtonDebounced = false;
 800163c:	4b3c      	ldr	r3, [pc, #240]	; (8001730 <HAL_GPIO_EXTI_Callback+0x154>)
 800163e:	2200      	movs	r2, #0
 8001640:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(Power_Button_GPIO_Port, Power_Button_Pin) == GPIO_PIN_SET &&
 8001642:	2180      	movs	r1, #128	; 0x80
 8001644:	4839      	ldr	r0, [pc, #228]	; (800172c <HAL_GPIO_EXTI_Callback+0x150>)
 8001646:	f003 fa77 	bl	8004b38 <HAL_GPIO_ReadPin>
 800164a:	4603      	mov	r3, r0
 800164c:	2b01      	cmp	r3, #1
 800164e:	d130      	bne.n	80016b2 <HAL_GPIO_EXTI_Callback+0xd6>
 8001650:	4b37      	ldr	r3, [pc, #220]	; (8001730 <HAL_GPIO_EXTI_Callback+0x154>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d02c      	beq.n	80016b2 <HAL_GPIO_EXTI_Callback+0xd6>
				PowerButtonDebounced && IsPressPeriodStart && PowerButtonShortPress &&
 8001658:	4b36      	ldr	r3, [pc, #216]	; (8001734 <HAL_GPIO_EXTI_Callback+0x158>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d028      	beq.n	80016b2 <HAL_GPIO_EXTI_Callback+0xd6>
 8001660:	4b36      	ldr	r3, [pc, #216]	; (800173c <HAL_GPIO_EXTI_Callback+0x160>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d024      	beq.n	80016b2 <HAL_GPIO_EXTI_Callback+0xd6>
 8001668:	4b35      	ldr	r3, [pc, #212]	; (8001740 <HAL_GPIO_EXTI_Callback+0x164>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d020      	beq.n	80016b2 <HAL_GPIO_EXTI_Callback+0xd6>
				PowerButtonLongPress && !SystemPowerState)
 8001670:	4b34      	ldr	r3, [pc, #208]	; (8001744 <HAL_GPIO_EXTI_Callback+0x168>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	f083 0301 	eor.w	r3, r3, #1
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d019      	beq.n	80016b2 <HAL_GPIO_EXTI_Callback+0xd6>
		{
			//All conditions met turn ON system and clear for next button
			HAL_TIM_Base_Stop_IT(&htim15);
 800167e:	482e      	ldr	r0, [pc, #184]	; (8001738 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001680:	f005 fb34 	bl	8006cec <HAL_TIM_Base_Stop_IT>
			__HAL_TIM_SET_AUTORELOAD(&htim15, BUTTON_DEBOUNCE_MS);	//Reset power button debounce period
 8001684:	4b2c      	ldr	r3, [pc, #176]	; (8001738 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2264      	movs	r2, #100	; 0x64
 800168a:	62da      	str	r2, [r3, #44]	; 0x2c
 800168c:	4b2a      	ldr	r3, [pc, #168]	; (8001738 <HAL_GPIO_EXTI_Callback+0x15c>)
 800168e:	2264      	movs	r2, #100	; 0x64
 8001690:	60da      	str	r2, [r3, #12]
			SystemPowerState = true;
 8001692:	4b2c      	ldr	r3, [pc, #176]	; (8001744 <HAL_GPIO_EXTI_Callback+0x168>)
 8001694:	2201      	movs	r2, #1
 8001696:	701a      	strb	r2, [r3, #0]
			PowerButtonDebounced = true;
 8001698:	4b25      	ldr	r3, [pc, #148]	; (8001730 <HAL_GPIO_EXTI_Callback+0x154>)
 800169a:	2201      	movs	r2, #1
 800169c:	701a      	strb	r2, [r3, #0]
			IsPressPeriodStart = false;
 800169e:	4b25      	ldr	r3, [pc, #148]	; (8001734 <HAL_GPIO_EXTI_Callback+0x158>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	701a      	strb	r2, [r3, #0]
			PowerButtonShortPress = false;
 80016a4:	4b25      	ldr	r3, [pc, #148]	; (800173c <HAL_GPIO_EXTI_Callback+0x160>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	701a      	strb	r2, [r3, #0]
			PowerButtonLongPress = false;
 80016aa:	4b25      	ldr	r3, [pc, #148]	; (8001740 <HAL_GPIO_EXTI_Callback+0x164>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	701a      	strb	r2, [r3, #0]
		}


	}

}
 80016b0:	e033      	b.n	800171a <HAL_GPIO_EXTI_Callback+0x13e>
		else if(HAL_GPIO_ReadPin(Power_Button_GPIO_Port, Power_Button_Pin) == GPIO_PIN_SET &&
 80016b2:	2180      	movs	r1, #128	; 0x80
 80016b4:	481d      	ldr	r0, [pc, #116]	; (800172c <HAL_GPIO_EXTI_Callback+0x150>)
 80016b6:	f003 fa3f 	bl	8004b38 <HAL_GPIO_ReadPin>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d12c      	bne.n	800171a <HAL_GPIO_EXTI_Callback+0x13e>
 80016c0:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <HAL_GPIO_EXTI_Callback+0x154>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d028      	beq.n	800171a <HAL_GPIO_EXTI_Callback+0x13e>
				PowerButtonDebounced && IsPressPeriodStart && PowerButtonShortPress &&
 80016c8:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <HAL_GPIO_EXTI_Callback+0x158>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d024      	beq.n	800171a <HAL_GPIO_EXTI_Callback+0x13e>
 80016d0:	4b1a      	ldr	r3, [pc, #104]	; (800173c <HAL_GPIO_EXTI_Callback+0x160>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d020      	beq.n	800171a <HAL_GPIO_EXTI_Callback+0x13e>
 80016d8:	4b19      	ldr	r3, [pc, #100]	; (8001740 <HAL_GPIO_EXTI_Callback+0x164>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d01c      	beq.n	800171a <HAL_GPIO_EXTI_Callback+0x13e>
				PowerButtonLongPress && SystemPowerState)
 80016e0:	4b18      	ldr	r3, [pc, #96]	; (8001744 <HAL_GPIO_EXTI_Callback+0x168>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d018      	beq.n	800171a <HAL_GPIO_EXTI_Callback+0x13e>
			HAL_TIM_Base_Stop_IT(&htim15);
 80016e8:	4813      	ldr	r0, [pc, #76]	; (8001738 <HAL_GPIO_EXTI_Callback+0x15c>)
 80016ea:	f005 faff 	bl	8006cec <HAL_TIM_Base_Stop_IT>
			__HAL_TIM_SET_AUTORELOAD(&htim15, BUTTON_DEBOUNCE_MS);	//Reset power button debounce period
 80016ee:	4b12      	ldr	r3, [pc, #72]	; (8001738 <HAL_GPIO_EXTI_Callback+0x15c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2264      	movs	r2, #100	; 0x64
 80016f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80016f6:	4b10      	ldr	r3, [pc, #64]	; (8001738 <HAL_GPIO_EXTI_Callback+0x15c>)
 80016f8:	2264      	movs	r2, #100	; 0x64
 80016fa:	60da      	str	r2, [r3, #12]
			SystemPowerState = false;
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <HAL_GPIO_EXTI_Callback+0x168>)
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
			PowerButtonDebounced = true;
 8001702:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <HAL_GPIO_EXTI_Callback+0x154>)
 8001704:	2201      	movs	r2, #1
 8001706:	701a      	strb	r2, [r3, #0]
			IsPressPeriodStart = false;
 8001708:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <HAL_GPIO_EXTI_Callback+0x158>)
 800170a:	2200      	movs	r2, #0
 800170c:	701a      	strb	r2, [r3, #0]
			PowerButtonShortPress = false;
 800170e:	4b0b      	ldr	r3, [pc, #44]	; (800173c <HAL_GPIO_EXTI_Callback+0x160>)
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]
			PowerButtonLongPress = false;
 8001714:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <HAL_GPIO_EXTI_Callback+0x164>)
 8001716:	2200      	movs	r2, #0
 8001718:	701a      	strb	r2, [r3, #0]
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	2000042d 	.word	0x2000042d
 8001728:	2000042e 	.word	0x2000042e
 800172c:	48000800 	.word	0x48000800
 8001730:	20000008 	.word	0x20000008
 8001734:	2000042f 	.word	0x2000042f
 8001738:	200003e0 	.word	0x200003e0
 800173c:	20000430 	.word	0x20000430
 8001740:	20000431 	.word	0x20000431
 8001744:	20000433 	.word	0x20000433

08001748 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
	if(HAL_GPIO_ReadPin(Power_Button_GPIO_Port, Power_Button_Pin) == GPIO_PIN_RESET && !PowerButtonDebounced){
 8001750:	2180      	movs	r1, #128	; 0x80
 8001752:	4864      	ldr	r0, [pc, #400]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001754:	f003 f9f0 	bl	8004b38 <HAL_GPIO_ReadPin>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10c      	bne.n	8001778 <HAL_TIM_PeriodElapsedCallback+0x30>
 800175e:	4b62      	ldr	r3, [pc, #392]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	f083 0301 	eor.w	r3, r3, #1
 8001766:	b2db      	uxtb	r3, r3
 8001768:	2b00      	cmp	r3, #0
 800176a:	d005      	beq.n	8001778 <HAL_TIM_PeriodElapsedCallback+0x30>
		HAL_TIM_Base_Stop_IT(&htim15);
 800176c:	485f      	ldr	r0, [pc, #380]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800176e:	f005 fabd 	bl	8006cec <HAL_TIM_Base_Stop_IT>
		PowerButtonDebounced = true;
 8001772:	4b5d      	ldr	r3, [pc, #372]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001774:	2201      	movs	r2, #1
 8001776:	701a      	strb	r2, [r3, #0]

	}
	if(HAL_GPIO_ReadPin(Power_Button_GPIO_Port, Power_Button_Pin) == GPIO_PIN_RESET && !IsPressPeriodStart){
 8001778:	2180      	movs	r1, #128	; 0x80
 800177a:	485a      	ldr	r0, [pc, #360]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800177c:	f003 f9dc 	bl	8004b38 <HAL_GPIO_ReadPin>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d119      	bne.n	80017ba <HAL_TIM_PeriodElapsedCallback+0x72>
 8001786:	4b5a      	ldr	r3, [pc, #360]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	f083 0301 	eor.w	r3, r3, #1
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2b00      	cmp	r3, #0
 8001792:	d012      	beq.n	80017ba <HAL_TIM_PeriodElapsedCallback+0x72>

		__HAL_TIM_SET_AUTORELOAD(&htim15, BUTTON_SHORTPRESS_PERIOD);
 8001794:	4b55      	ldr	r3, [pc, #340]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800179c:	62da      	str	r2, [r3, #44]	; 0x2c
 800179e:	4b53      	ldr	r3, [pc, #332]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80017a0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80017a4:	60da      	str	r2, [r3, #12]
		HAL_TIM_Base_Start_IT(&htim15);
 80017a6:	4851      	ldr	r0, [pc, #324]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80017a8:	f005 fa4c 	bl	8006c44 <HAL_TIM_Base_Start_IT>
		IsPressPeriodStart = true;
 80017ac:	4b50      	ldr	r3, [pc, #320]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	701a      	strb	r2, [r3, #0]
		PowerButtonShortPress = false;
 80017b2:	4b50      	ldr	r3, [pc, #320]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]
 80017b8:	e06b      	b.n	8001892 <HAL_TIM_PeriodElapsedCallback+0x14a>
	}
	else if(HAL_GPIO_ReadPin(Power_Button_GPIO_Port, Power_Button_Pin) == GPIO_PIN_RESET && !PowerButtonShortPress){
 80017ba:	2180      	movs	r1, #128	; 0x80
 80017bc:	4849      	ldr	r0, [pc, #292]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80017be:	f003 f9bb 	bl	8004b38 <HAL_GPIO_ReadPin>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d11c      	bne.n	8001802 <HAL_TIM_PeriodElapsedCallback+0xba>
 80017c8:	4b4a      	ldr	r3, [pc, #296]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	f083 0301 	eor.w	r3, r3, #1
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d015      	beq.n	8001802 <HAL_TIM_PeriodElapsedCallback+0xba>
		HAL_TIM_Base_Stop_IT(&htim15);
 80017d6:	4845      	ldr	r0, [pc, #276]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80017d8:	f005 fa88 	bl	8006cec <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_SET_AUTORELOAD(&htim15, BUTTON_LONGPRESS_PERIOD);
 80017dc:	4b43      	ldr	r3, [pc, #268]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80017e6:	4b41      	ldr	r3, [pc, #260]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80017e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017ec:	60da      	str	r2, [r3, #12]
		HAL_TIM_Base_Start_IT(&htim15);
 80017ee:	483f      	ldr	r0, [pc, #252]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80017f0:	f005 fa28 	bl	8006c44 <HAL_TIM_Base_Start_IT>
		PowerButtonShortPress = true;
 80017f4:	4b3f      	ldr	r3, [pc, #252]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	701a      	strb	r2, [r3, #0]
		PowerButtonLongPress = false;
 80017fa:	4b3f      	ldr	r3, [pc, #252]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	701a      	strb	r2, [r3, #0]
 8001800:	e047      	b.n	8001892 <HAL_TIM_PeriodElapsedCallback+0x14a>
	}
	else if(HAL_GPIO_ReadPin(Power_Button_GPIO_Port, Power_Button_Pin) == GPIO_PIN_RESET && !PowerButtonLongPress){
 8001802:	2180      	movs	r1, #128	; 0x80
 8001804:	4837      	ldr	r0, [pc, #220]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001806:	f003 f997 	bl	8004b38 <HAL_GPIO_ReadPin>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d11c      	bne.n	800184a <HAL_TIM_PeriodElapsedCallback+0x102>
 8001810:	4b39      	ldr	r3, [pc, #228]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	f083 0301 	eor.w	r3, r3, #1
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d015      	beq.n	800184a <HAL_TIM_PeriodElapsedCallback+0x102>
		HAL_TIM_Base_Stop_IT(&htim15);
 800181e:	4833      	ldr	r0, [pc, #204]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001820:	f005 fa64 	bl	8006cec <HAL_TIM_Base_Stop_IT>
		PowerButtonLongPress = true;
 8001824:	4b34      	ldr	r3, [pc, #208]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001826:	2201      	movs	r2, #1
 8001828:	701a      	strb	r2, [r3, #0]
		PowerButtonUnintentionalPress = false;
 800182a:	4b34      	ldr	r3, [pc, #208]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_AUTORELOAD(&htim15, BUTTON_UNINTENTIONAL_PERIOD);
 8001830:	4b2e      	ldr	r3, [pc, #184]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001838:	62da      	str	r2, [r3, #44]	; 0x2c
 800183a:	4b2c      	ldr	r3, [pc, #176]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800183c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001840:	60da      	str	r2, [r3, #12]
		HAL_TIM_Base_Start_IT(&htim15);
 8001842:	482a      	ldr	r0, [pc, #168]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001844:	f005 f9fe 	bl	8006c44 <HAL_TIM_Base_Start_IT>
 8001848:	e023      	b.n	8001892 <HAL_TIM_PeriodElapsedCallback+0x14a>
	}
	else if(HAL_GPIO_ReadPin(Power_Button_GPIO_Port, Power_Button_Pin) == GPIO_PIN_RESET && !PowerButtonUnintentionalPress)
 800184a:	2180      	movs	r1, #128	; 0x80
 800184c:	4825      	ldr	r0, [pc, #148]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800184e:	f003 f973 	bl	8004b38 <HAL_GPIO_ReadPin>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d11c      	bne.n	8001892 <HAL_TIM_PeriodElapsedCallback+0x14a>
 8001858:	4b28      	ldr	r3, [pc, #160]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	f083 0301 	eor.w	r3, r3, #1
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d015      	beq.n	8001892 <HAL_TIM_PeriodElapsedCallback+0x14a>
	{
		//unintentional button press so clear everything for next press
		HAL_TIM_Base_Stop_IT(&htim15);
 8001866:	4821      	ldr	r0, [pc, #132]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001868:	f005 fa40 	bl	8006cec <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_SET_AUTORELOAD(&htim15, BUTTON_DEBOUNCE_MS);	//Reset power button debounce period
 800186c:	4b1f      	ldr	r3, [pc, #124]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2264      	movs	r2, #100	; 0x64
 8001872:	62da      	str	r2, [r3, #44]	; 0x2c
 8001874:	4b1d      	ldr	r3, [pc, #116]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001876:	2264      	movs	r2, #100	; 0x64
 8001878:	60da      	str	r2, [r3, #12]
		PowerButtonDebounced = true;
 800187a:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800187c:	2201      	movs	r2, #1
 800187e:	701a      	strb	r2, [r3, #0]
		IsPressPeriodStart = false;
 8001880:	4b1b      	ldr	r3, [pc, #108]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001882:	2200      	movs	r2, #0
 8001884:	701a      	strb	r2, [r3, #0]
		PowerButtonShortPress = false;
 8001886:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001888:	2200      	movs	r2, #0
 800188a:	701a      	strb	r2, [r3, #0]
		PowerButtonLongPress = false;
 800188c:	4b1a      	ldr	r3, [pc, #104]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]
	}

	if(HAL_GPIO_ReadPin(Power_Button_GPIO_Port, Power_Button_Pin) == GPIO_PIN_SET && IsPressPeriodStart)
 8001892:	2180      	movs	r1, #128	; 0x80
 8001894:	4813      	ldr	r0, [pc, #76]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001896:	f003 f94f 	bl	8004b38 <HAL_GPIO_ReadPin>
 800189a:	4603      	mov	r3, r0
 800189c:	2b01      	cmp	r3, #1
 800189e:	d11c      	bne.n	80018da <HAL_TIM_PeriodElapsedCallback+0x192>
 80018a0:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d018      	beq.n	80018da <HAL_TIM_PeriodElapsedCallback+0x192>
	{
		//Cancelled press so clear everything for next press
		HAL_TIM_Base_Stop_IT(&htim15);
 80018a8:	4810      	ldr	r0, [pc, #64]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80018aa:	f005 fa1f 	bl	8006cec <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_SET_AUTORELOAD(&htim15, BUTTON_DEBOUNCE_MS);	//Reset power button debounce period
 80018ae:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2264      	movs	r2, #100	; 0x64
 80018b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80018b6:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80018b8:	2264      	movs	r2, #100	; 0x64
 80018ba:	60da      	str	r2, [r3, #12]
		PowerButtonDebounced = true;
 80018bc:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80018be:	2201      	movs	r2, #1
 80018c0:	701a      	strb	r2, [r3, #0]
		IsPressPeriodStart = false;
 80018c2:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]
		PowerButtonShortPress = false;
 80018c8:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
		PowerButtonLongPress = false;
 80018ce:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
		PowerButtonUnintentionalPress = false;
 80018d4:	4b09      	ldr	r3, [pc, #36]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	701a      	strb	r2, [r3, #0]
	}




}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	48000800 	.word	0x48000800
 80018e8:	20000008 	.word	0x20000008
 80018ec:	200003e0 	.word	0x200003e0
 80018f0:	2000042f 	.word	0x2000042f
 80018f4:	20000430 	.word	0x20000430
 80018f8:	20000431 	.word	0x20000431
 80018fc:	20000432 	.word	0x20000432

08001900 <MAX17048_Init>:
#if (USINGMAX17048)

uint8_t CurrentBatteryPercentage;

	bool MAX17048_Init()
	{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
		bool ok = true;
 8001906:	2301      	movs	r3, #1
 8001908:	71fb      	strb	r3, [r7, #7]
		if (ok) ok = max17048_is_present(&hi2c1);
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d004      	beq.n	800191a <MAX17048_Init+0x1a>
 8001910:	4825      	ldr	r0, [pc, #148]	; (80019a8 <MAX17048_Init+0xa8>)
 8001912:	f000 ff50 	bl	80027b6 <max17048_is_present>
 8001916:	4603      	mov	r3, r0
 8001918:	71fb      	strb	r3, [r7, #7]
		if (ok) ok = max17048_set_undervolted_voltage(&hi2c1, Battery_UnderVoltage);
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d006      	beq.n	800192e <MAX17048_Init+0x2e>
 8001920:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8001924:	4820      	ldr	r0, [pc, #128]	; (80019a8 <MAX17048_Init+0xa8>)
 8001926:	f000 ffab 	bl	8002880 <max17048_set_undervolted_voltage>
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
		if (ok) ok = max17048_set_overvolted_voltage(&hi2c1, Battery_OverVoltage);
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d006      	beq.n	8001942 <MAX17048_Init+0x42>
 8001934:	f241 0168 	movw	r1, #4200	; 0x1068
 8001938:	481b      	ldr	r0, [pc, #108]	; (80019a8 <MAX17048_Init+0xa8>)
 800193a:	f000 ffc1 	bl	80028c0 <max17048_set_overvolted_voltage>
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
		if (ok) ok = max17048_set_reset_voltage(&hi2c1, Battery_ResetVoltage);
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d006      	beq.n	8001956 <MAX17048_Init+0x56>
 8001948:	f640 11c4 	movw	r1, #2500	; 0x9c4
 800194c:	4816      	ldr	r0, [pc, #88]	; (80019a8 <MAX17048_Init+0xa8>)
 800194e:	f000 ffd3 	bl	80028f8 <max17048_set_reset_voltage>
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
		if (ok) ok = max17048_set_bat_low_soc(&hi2c1, Battery_LowSOCAlert);
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d005      	beq.n	8001968 <MAX17048_Init+0x68>
 800195c:	211e      	movs	r1, #30
 800195e:	4812      	ldr	r0, [pc, #72]	; (80019a8 <MAX17048_Init+0xa8>)
 8001960:	f000 ff69 	bl	8002836 <max17048_set_bat_low_soc>
 8001964:	4603      	mov	r3, r0
 8001966:	71fb      	strb	r3, [r7, #7]
		if (ok) ok = max17048_set_voltage_reset_alert(&hi2c1, false);
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d005      	beq.n	800197a <MAX17048_Init+0x7a>
 800196e:	2100      	movs	r1, #0
 8001970:	480d      	ldr	r0, [pc, #52]	; (80019a8 <MAX17048_Init+0xa8>)
 8001972:	f000 fffa 	bl	800296a <max17048_set_voltage_reset_alert>
 8001976:	4603      	mov	r3, r0
 8001978:	71fb      	strb	r3, [r7, #7]
		if (ok) ok = max17048_set_soc_change_alert(&hi2c1, false);
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d005      	beq.n	800198c <MAX17048_Init+0x8c>
 8001980:	2100      	movs	r1, #0
 8001982:	4809      	ldr	r0, [pc, #36]	; (80019a8 <MAX17048_Init+0xa8>)
 8001984:	f000 ffda 	bl	800293c <max17048_set_soc_change_alert>
 8001988:	4603      	mov	r3, r0
 800198a:	71fb      	strb	r3, [r7, #7]
		if (ok) ok = max17048_clear_alerts(&hi2c1);
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d004      	beq.n	800199c <MAX17048_Init+0x9c>
 8001992:	4805      	ldr	r0, [pc, #20]	; (80019a8 <MAX17048_Init+0xa8>)
 8001994:	f001 f801 	bl	800299a <max17048_clear_alerts>
 8001998:	4603      	mov	r3, r0
 800199a:	71fb      	strb	r3, [r7, #7]
		return ok;
 800199c:	79fb      	ldrb	r3, [r7, #7]
	}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	200002f4 	.word	0x200002f4

080019ac <Remap>:
#endif

static int Remap (float value, float from1, float to1, float from2, float to2) {
 80019ac:	b480      	push	{r7}
 80019ae:	b087      	sub	sp, #28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	ed87 0a05 	vstr	s0, [r7, #20]
 80019b6:	edc7 0a04 	vstr	s1, [r7, #16]
 80019ba:	ed87 1a03 	vstr	s2, [r7, #12]
 80019be:	edc7 1a02 	vstr	s3, [r7, #8]
 80019c2:	ed87 2a01 	vstr	s4, [r7, #4]
	return ((value - from1) / (to1 - from1) * (to2 - from2)) + from2;
 80019c6:	ed97 7a05 	vldr	s14, [r7, #20]
 80019ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80019ce:	ee77 6a67 	vsub.f32	s13, s14, s15
 80019d2:	ed97 7a03 	vldr	s14, [r7, #12]
 80019d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80019da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80019e2:	edd7 6a01 	vldr	s13, [r7, #4]
 80019e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80019ea:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80019ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80019f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019fe:	ee17 3a90 	vmov	r3, s15
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	371c      	adds	r7, #28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
	...

08001a10 <Set_RGB>:

void Set_RGB(uint8_t Red,uint8_t Green,uint8_t Blue) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	71fb      	strb	r3, [r7, #7]
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	71bb      	strb	r3, [r7, #6]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	717b      	strb	r3, [r7, #5]
	//invert 0-100 -> 100-0 in case LED is common Anode and grounded to STM's GPIO's
	Red = Remap(Red, 0, 100, 100, 0);
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	ee07 3a90 	vmov	s15, r3
 8001a28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a2c:	ed9f 2a21 	vldr	s4, [pc, #132]	; 8001ab4 <Set_RGB+0xa4>
 8001a30:	eddf 1a21 	vldr	s3, [pc, #132]	; 8001ab8 <Set_RGB+0xa8>
 8001a34:	ed9f 1a20 	vldr	s2, [pc, #128]	; 8001ab8 <Set_RGB+0xa8>
 8001a38:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8001ab4 <Set_RGB+0xa4>
 8001a3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a40:	f7ff ffb4 	bl	80019ac <Remap>
 8001a44:	4603      	mov	r3, r0
 8001a46:	71fb      	strb	r3, [r7, #7]
	Green = Remap(Green, 0, 100, 100, 0);
 8001a48:	79bb      	ldrb	r3, [r7, #6]
 8001a4a:	ee07 3a90 	vmov	s15, r3
 8001a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a52:	ed9f 2a18 	vldr	s4, [pc, #96]	; 8001ab4 <Set_RGB+0xa4>
 8001a56:	eddf 1a18 	vldr	s3, [pc, #96]	; 8001ab8 <Set_RGB+0xa8>
 8001a5a:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8001ab8 <Set_RGB+0xa8>
 8001a5e:	eddf 0a15 	vldr	s1, [pc, #84]	; 8001ab4 <Set_RGB+0xa4>
 8001a62:	eeb0 0a67 	vmov.f32	s0, s15
 8001a66:	f7ff ffa1 	bl	80019ac <Remap>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71bb      	strb	r3, [r7, #6]
	Blue = Remap(Blue, 0, 100, 100, 0);
 8001a6e:	797b      	ldrb	r3, [r7, #5]
 8001a70:	ee07 3a90 	vmov	s15, r3
 8001a74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a78:	ed9f 2a0e 	vldr	s4, [pc, #56]	; 8001ab4 <Set_RGB+0xa4>
 8001a7c:	eddf 1a0e 	vldr	s3, [pc, #56]	; 8001ab8 <Set_RGB+0xa8>
 8001a80:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 8001ab8 <Set_RGB+0xa8>
 8001a84:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8001ab4 <Set_RGB+0xa4>
 8001a88:	eeb0 0a67 	vmov.f32	s0, s15
 8001a8c:	f7ff ff8e 	bl	80019ac <Remap>
 8001a90:	4603      	mov	r3, r0
 8001a92:	717b      	strb	r3, [r7, #5]
	TIM2->CCR1 = Red;
 8001a94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	6353      	str	r3, [r2, #52]	; 0x34
	TIM2->CCR2 = Green;
 8001a9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001aa0:	79bb      	ldrb	r3, [r7, #6]
 8001aa2:	6393      	str	r3, [r2, #56]	; 0x38
	TIM2->CCR3 = Blue;
 8001aa4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001aa8:	797b      	ldrb	r3, [r7, #5]
 8001aaa:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	00000000 	.word	0x00000000
 8001ab8:	42c80000 	.word	0x42c80000

08001abc <GetADCValue>:


float GetADCValue(float numberOfSamples)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	ed87 0a01 	vstr	s0, [r7, #4]
	float averageRaw = 0;
 8001ac6:	f04f 0300 	mov.w	r3, #0
 8001aca:	60fb      	str	r3, [r7, #12]
	float i = 0;
 8001acc:	f04f 0300 	mov.w	r3, #0
 8001ad0:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < numberOfSamples; ++i)
 8001ad2:	f04f 0300 	mov.w	r3, #0
 8001ad6:	60bb      	str	r3, [r7, #8]
 8001ad8:	e01e      	b.n	8001b18 <GetADCValue+0x5c>
	{
		HAL_ADC_Start(&hadc1);
 8001ada:	481a      	ldr	r0, [pc, #104]	; (8001b44 <GetADCValue+0x88>)
 8001adc:	f001 fe60 	bl	80037a0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 10);
 8001ae0:	210a      	movs	r1, #10
 8001ae2:	4818      	ldr	r0, [pc, #96]	; (8001b44 <GetADCValue+0x88>)
 8001ae4:	f001 fef2 	bl	80038cc <HAL_ADC_PollForConversion>
		averageRaw += HAL_ADC_GetValue(&hadc1);
 8001ae8:	4816      	ldr	r0, [pc, #88]	; (8001b44 <GetADCValue+0x88>)
 8001aea:	f001 ff7e 	bl	80039ea <HAL_ADC_GetValue>
 8001aee:	ee07 0a90 	vmov	s15, r0
 8001af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001af6:	ed97 7a03 	vldr	s14, [r7, #12]
 8001afa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001afe:	edc7 7a03 	vstr	s15, [r7, #12]
		HAL_ADC_Stop(&hadc1);
 8001b02:	4810      	ldr	r0, [pc, #64]	; (8001b44 <GetADCValue+0x88>)
 8001b04:	f001 feaf 	bl	8003866 <HAL_ADC_Stop>
	for (i = 0; i < numberOfSamples; ++i)
 8001b08:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b14:	edc7 7a02 	vstr	s15, [r7, #8]
 8001b18:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b28:	d4d7      	bmi.n	8001ada <GetADCValue+0x1e>
	}

	return (averageRaw/numberOfSamples);
 8001b2a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b32:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001b36:	eef0 7a66 	vmov.f32	s15, s13

}
 8001b3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000290 	.word	0x20000290

08001b48 <readThermistor>:
const double BETA               = 3974.0;
const double ROOM_TEMP          = 298.15;   // room temperature in Kelvin
const double RESISTOR_ROOM_TEMP = 10000.0;

double readThermistor()
{
 8001b48:	b5b0      	push	{r4, r5, r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af00      	add	r7, sp, #0

 double rThermistor = 0;            // Holds thermistor resistance value
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	f04f 0300 	mov.w	r3, #0
 8001b56:	e9c7 2306 	strd	r2, r3, [r7, #24]
 double tKelvin     = 0;            // Holds calculated temperature
 8001b5a:	f04f 0200 	mov.w	r2, #0
 8001b5e:	f04f 0300 	mov.w	r3, #0
 8001b62:	e9c7 2304 	strd	r2, r3, [r7, #16]
 double tCelsius    = 0;            // Hold temperature in celsius
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	f04f 0300 	mov.w	r3, #0
 8001b6e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 double adcAverage  = 0;            // Holds the average voltage measurement
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	f04f 0300 	mov.w	r3, #0
 8001b7a:	e9c7 2300 	strd	r2, r3, [r7]

 adcAverage = GetADCValue(200);
 8001b7e:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8001ca0 <readThermistor+0x158>
 8001b82:	f7ff ff9b 	bl	8001abc <GetADCValue>
 8001b86:	ee10 3a10 	vmov	r3, s0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fcdc 	bl	8000548 <__aeabi_f2d>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	e9c7 2300 	strd	r2, r3, [r7]

 rThermistor = BALANCE_RESISTOR * ( (MAX_ADC / adcAverage) - 1);
 8001b98:	a135      	add	r1, pc, #212	; (adr r1, 8001c70 <readThermistor+0x128>)
 8001b9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ba2:	f7fe fe53 	bl	800084c <__aeabi_ddiv>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4610      	mov	r0, r2
 8001bac:	4619      	mov	r1, r3
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	4b3c      	ldr	r3, [pc, #240]	; (8001ca4 <readThermistor+0x15c>)
 8001bb4:	f7fe fb68 	bl	8000288 <__aeabi_dsub>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	a32d      	add	r3, pc, #180	; (adr r3, 8001c78 <readThermistor+0x130>)
 8001bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc6:	f7fe fd17 	bl	80005f8 <__aeabi_dmul>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	e9c7 2306 	strd	r2, r3, [r7, #24]

 tKelvin = (BETA * ROOM_TEMP) /
 8001bd2:	a12b      	add	r1, pc, #172	; (adr r1, 8001c80 <readThermistor+0x138>)
 8001bd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001bd8:	a32b      	add	r3, pc, #172	; (adr r3, 8001c88 <readThermistor+0x140>)
 8001bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bde:	f7fe fd0b 	bl	80005f8 <__aeabi_dmul>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4614      	mov	r4, r2
 8001be8:	461d      	mov	r5, r3
           (BETA + (ROOM_TEMP * log(rThermistor / RESISTOR_ROOM_TEMP)));
 8001bea:	a329      	add	r3, pc, #164	; (adr r3, 8001c90 <readThermistor+0x148>)
 8001bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bf4:	f7fe fe2a 	bl	800084c <__aeabi_ddiv>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	ec43 2b17 	vmov	d7, r2, r3
 8001c00:	eeb0 0a47 	vmov.f32	s0, s14
 8001c04:	eef0 0a67 	vmov.f32	s1, s15
 8001c08:	f00a fece 	bl	800c9a8 <log>
 8001c0c:	ec51 0b10 	vmov	r0, r1, d0
 8001c10:	a31d      	add	r3, pc, #116	; (adr r3, 8001c88 <readThermistor+0x140>)
 8001c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c16:	f7fe fcef 	bl	80005f8 <__aeabi_dmul>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4610      	mov	r0, r2
 8001c20:	4619      	mov	r1, r3
 8001c22:	a317      	add	r3, pc, #92	; (adr r3, 8001c80 <readThermistor+0x138>)
 8001c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c28:	f7fe fb30 	bl	800028c <__adddf3>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 tKelvin = (BETA * ROOM_TEMP) /
 8001c30:	4620      	mov	r0, r4
 8001c32:	4629      	mov	r1, r5
 8001c34:	f7fe fe0a 	bl	800084c <__aeabi_ddiv>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	e9c7 2304 	strd	r2, r3, [r7, #16]

 tCelsius = tKelvin - 273.15;  // convert kelvin to celsius
 8001c40:	a315      	add	r3, pc, #84	; (adr r3, 8001c98 <readThermistor+0x150>)
 8001c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c46:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c4a:	f7fe fb1d 	bl	8000288 <__aeabi_dsub>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	e9c7 2302 	strd	r2, r3, [r7, #8]

 return tCelsius;    // Return the temperature in Celsius
 8001c56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c5a:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c5e:	eeb0 0a47 	vmov.f32	s0, s14
 8001c62:	eef0 0a67 	vmov.f32	s1, s15
 8001c66:	3720      	adds	r7, #32
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c6c:	f3af 8000 	nop.w
 8001c70:	00000000 	.word	0x00000000
 8001c74:	40affe00 	.word	0x40affe00
 8001c78:	00000000 	.word	0x00000000
 8001c7c:	40c2f700 	.word	0x40c2f700
 8001c80:	00000000 	.word	0x00000000
 8001c84:	40af0c00 	.word	0x40af0c00
 8001c88:	66666666 	.word	0x66666666
 8001c8c:	4072a266 	.word	0x4072a266
 8001c90:	00000000 	.word	0x00000000
 8001c94:	40c38800 	.word	0x40c38800
 8001c98:	66666666 	.word	0x66666666
 8001c9c:	40711266 	.word	0x40711266
 8001ca0:	43480000 	.word	0x43480000
 8001ca4:	3ff00000 	.word	0x3ff00000

08001ca8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ca8:	b590      	push	{r4, r7, lr}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cae:	f001 f960 	bl	8002f72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cb2:	f000 f9d1 	bl	8002058 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cb6:	f000 fc3f 	bl	8002538 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001cba:	f000 fa77 	bl	80021ac <MX_I2C1_Init>
  MX_TIM2_Init();
 8001cbe:	f000 fb5d 	bl	800237c <MX_TIM2_Init>
  MX_TIM15_Init();
 8001cc2:	f000 fbe7 	bl	8002494 <MX_TIM15_Init>
  MX_ADC1_Init();
 8001cc6:	f000 fa0d 	bl	80020e4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001cca:	f000 faad 	bl	8002228 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
#endif


  __HAL_TIM_SET_AUTORELOAD(&htim15, BUTTON_DEBOUNCE_MS);	//Set power button debounce period
 8001cce:	4bc6      	ldr	r3, [pc, #792]	; (8001fe8 <main+0x340>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2264      	movs	r2, #100	; 0x64
 8001cd4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001cd6:	4bc4      	ldr	r3, [pc, #784]	; (8001fe8 <main+0x340>)
 8001cd8:	2264      	movs	r2, #100	; 0x64
 8001cda:	60da      	str	r2, [r3, #12]

  PID(&Fan_PID, &MeasuredTemperature, &PIDOut, &Temperautre_SetPoint, 2, 5, 1, _PID_P_ON_E, _PID_CD_DIRECT);
 8001cdc:	2300      	movs	r3, #0
 8001cde:	9301      	str	r3, [sp, #4]
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	ed9f 2bb6 	vldr	d2, [pc, #728]	; 8001fc0 <main+0x318>
 8001ce8:	ed9f 1bb7 	vldr	d1, [pc, #732]	; 8001fc8 <main+0x320>
 8001cec:	ed9f 0bb8 	vldr	d0, [pc, #736]	; 8001fd0 <main+0x328>
 8001cf0:	4bbe      	ldr	r3, [pc, #760]	; (8001fec <main+0x344>)
 8001cf2:	4abf      	ldr	r2, [pc, #764]	; (8001ff0 <main+0x348>)
 8001cf4:	49bf      	ldr	r1, [pc, #764]	; (8001ff4 <main+0x34c>)
 8001cf6:	48c0      	ldr	r0, [pc, #768]	; (8001ff8 <main+0x350>)
 8001cf8:	f7ff f97a 	bl	8000ff0 <PID>
  PID_SetMode(&Fan_PID, _PID_MODE_AUTOMATIC);
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	48be      	ldr	r0, [pc, #760]	; (8001ff8 <main+0x350>)
 8001d00:	f7ff faac 	bl	800125c <PID_SetMode>
  PID_SetSampleTime(&Fan_PID, 500);
 8001d04:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001d08:	48bb      	ldr	r0, [pc, #748]	; (8001ff8 <main+0x350>)
 8001d0a:	f7ff fc1b 	bl	8001544 <PID_SetSampleTime>
  PID_SetOutputLimits(&Fan_PID, 40, 100);
 8001d0e:	ed9f 1bb2 	vldr	d1, [pc, #712]	; 8001fd8 <main+0x330>
 8001d12:	ed9f 0bb3 	vldr	d0, [pc, #716]	; 8001fe0 <main+0x338>
 8001d16:	48b8      	ldr	r0, [pc, #736]	; (8001ff8 <main+0x350>)
 8001d18:	f7ff fabe 	bl	8001298 <PID_SetOutputLimits>

  HAL_Delay(70);	// For stability
 8001d1c:	2046      	movs	r0, #70	; 0x46
 8001d1e:	f001 f99d 	bl	800305c <HAL_Delay>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);	//Calibrate ADC for better temperature reading
 8001d22:	217f      	movs	r1, #127	; 0x7f
 8001d24:	48b5      	ldr	r0, [pc, #724]	; (8001ffc <main+0x354>)
 8001d26:	f002 fc1b 	bl	8004560 <HAL_ADCEx_Calibration_Start>

#if (USINGMAX17048)
  MAX17048_Init();
 8001d2a:	f7ff fde9 	bl	8001900 <MAX17048_Init>
#endif

  if(!BQ_Init())
 8001d2e:	f7ff f827 	bl	8000d80 <BQ_Init>
 8001d32:	4603      	mov	r3, r0
 8001d34:	f083 0301 	eor.w	r3, r3, #1
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d01c      	beq.n	8001d78 <main+0xd0>
  {
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001d3e:	2100      	movs	r1, #0
 8001d40:	48af      	ldr	r0, [pc, #700]	; (8002000 <main+0x358>)
 8001d42:	f005 f863 	bl	8006e0c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001d46:	2104      	movs	r1, #4
 8001d48:	48ad      	ldr	r0, [pc, #692]	; (8002000 <main+0x358>)
 8001d4a:	f005 f85f 	bl	8006e0c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001d4e:	2108      	movs	r1, #8
 8001d50:	48ab      	ldr	r0, [pc, #684]	; (8002000 <main+0x358>)
 8001d52:	f005 f85b 	bl	8006e0c <HAL_TIM_PWM_Start>

	  while(1)		//if BQ not present, then warn using that it's not finding it by flashing red
	  {
		  Set_RGB(100, 0, 0);
 8001d56:	2200      	movs	r2, #0
 8001d58:	2100      	movs	r1, #0
 8001d5a:	2064      	movs	r0, #100	; 0x64
 8001d5c:	f7ff fe58 	bl	8001a10 <Set_RGB>
		  HAL_Delay(250);
 8001d60:	20fa      	movs	r0, #250	; 0xfa
 8001d62:	f001 f97b 	bl	800305c <HAL_Delay>
		  Set_RGB(0, 0, 0);
 8001d66:	2200      	movs	r2, #0
 8001d68:	2100      	movs	r1, #0
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	f7ff fe50 	bl	8001a10 <Set_RGB>
		  HAL_Delay(250);
 8001d70:	20fa      	movs	r0, #250	; 0xfa
 8001d72:	f001 f973 	bl	800305c <HAL_Delay>
		  Set_RGB(100, 0, 0);
 8001d76:	e7ee      	b.n	8001d56 <main+0xae>
	  }

  }

  HAL_Delay(70);	// For stability
 8001d78:	2046      	movs	r0, #70	; 0x46
 8001d7a:	f001 f96f 	bl	800305c <HAL_Delay>

  max17048_get_soc(&hi2c1, &CurrentBatteryPercentage);	//Get current Battery Percentage
 8001d7e:	49a1      	ldr	r1, [pc, #644]	; (8002004 <main+0x35c>)
 8001d80:	48a1      	ldr	r0, [pc, #644]	; (8002008 <main+0x360>)
 8001d82:	f000 fd39 	bl	80027f8 <max17048_get_soc>
  Set_RGB( 100, 100, 100 );
 8001d86:	2264      	movs	r2, #100	; 0x64
 8001d88:	2164      	movs	r1, #100	; 0x64
 8001d8a:	2064      	movs	r0, #100	; 0x64
 8001d8c:	f7ff fe40 	bl	8001a10 <Set_RGB>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(BQ_FLAG)
 8001d90:	4b9e      	ldr	r3, [pc, #632]	; (800200c <main+0x364>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d008      	beq.n	8001daa <main+0x102>
	  {
		  BQ_FLAG = false;	//clear flag
 8001d98:	4b9c      	ldr	r3, [pc, #624]	; (800200c <main+0x364>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	701a      	strb	r2, [r3, #0]
		  /*
		   * TODO:
		   * something with the BQ INT
		   */
		  IsSystemCharging = BQ_IsCharging();
 8001d9e:	f7ff f8d1 	bl	8000f44 <BQ_IsCharging>
 8001da2:	4603      	mov	r3, r0
 8001da4:	461a      	mov	r2, r3
 8001da6:	4b9a      	ldr	r3, [pc, #616]	; (8002010 <main+0x368>)
 8001da8:	701a      	strb	r2, [r3, #0]
	  }

#if (USINGMAX17048)
	  if(MAX_FLAG)
 8001daa:	4b9a      	ldr	r3, [pc, #616]	; (8002014 <main+0x36c>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d002      	beq.n	8001db8 <main+0x110>
	  {
		  MAX_FLAG = false;	//clear flag
 8001db2:	4b98      	ldr	r3, [pc, #608]	; (8002014 <main+0x36c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	701a      	strb	r2, [r3, #0]
	  }

#endif

	  if(SystemPowerState)
 8001db8:	4b97      	ldr	r3, [pc, #604]	; (8002018 <main+0x370>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 80a1 	beq.w	8001f04 <main+0x25c>
	  {
		  /*
		   * While system is running,the code below will always run
		   */

		  if(!InitialSystemBoot)	//Start a boot sequence once
 8001dc2:	4b96      	ldr	r3, [pc, #600]	; (800201c <main+0x374>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	f083 0301 	eor.w	r3, r3, #1
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d02f      	beq.n	8001e30 <main+0x188>
		  {
			  InitialSystemBoot = true;	//Do it once
 8001dd0:	4b92      	ldr	r3, [pc, #584]	; (800201c <main+0x374>)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	701a      	strb	r2, [r3, #0]
			  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);	//R
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4889      	ldr	r0, [pc, #548]	; (8002000 <main+0x358>)
 8001dda:	f005 f817 	bl	8006e0c <HAL_TIM_PWM_Start>
			  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);	//G
 8001dde:	2104      	movs	r1, #4
 8001de0:	4887      	ldr	r0, [pc, #540]	; (8002000 <main+0x358>)
 8001de2:	f005 f813 	bl	8006e0c <HAL_TIM_PWM_Start>
			  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);	//B
 8001de6:	2108      	movs	r1, #8
 8001de8:	4885      	ldr	r0, [pc, #532]	; (8002000 <main+0x358>)
 8001dea:	f005 f80f 	bl	8006e0c <HAL_TIM_PWM_Start>
			  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);	//Fan PWM
 8001dee:	210c      	movs	r1, #12
 8001df0:	488b      	ldr	r0, [pc, #556]	; (8002020 <main+0x378>)
 8001df2:	f005 f80b 	bl	8006e0c <HAL_TIM_PWM_Start>
			  Set_RGB( 100, 0, 0 );
 8001df6:	2200      	movs	r2, #0
 8001df8:	2100      	movs	r1, #0
 8001dfa:	2064      	movs	r0, #100	; 0x64
 8001dfc:	f7ff fe08 	bl	8001a10 <Set_RGB>
			  HAL_Delay(100);
 8001e00:	2064      	movs	r0, #100	; 0x64
 8001e02:	f001 f92b 	bl	800305c <HAL_Delay>
			  Set_RGB(0, 100, 0);
 8001e06:	2200      	movs	r2, #0
 8001e08:	2164      	movs	r1, #100	; 0x64
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	f7ff fe00 	bl	8001a10 <Set_RGB>
			  HAL_Delay(100);
 8001e10:	2064      	movs	r0, #100	; 0x64
 8001e12:	f001 f923 	bl	800305c <HAL_Delay>
			  Set_RGB(0, 0, 100);
 8001e16:	2264      	movs	r2, #100	; 0x64
 8001e18:	2100      	movs	r1, #0
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	f7ff fdf8 	bl	8001a10 <Set_RGB>
			  HAL_Delay(200);
 8001e20:	20c8      	movs	r0, #200	; 0xc8
 8001e22:	f001 f91b 	bl	800305c <HAL_Delay>
			  HAL_GPIO_WritePin(En_Regulators_GPIO_Port, En_Regulators_Pin, GPIO_PIN_SET);	//Turn on Regulators
 8001e26:	2201      	movs	r2, #1
 8001e28:	2140      	movs	r1, #64	; 0x40
 8001e2a:	487e      	ldr	r0, [pc, #504]	; (8002024 <main+0x37c>)
 8001e2c:	f002 fe9c 	bl	8004b68 <HAL_GPIO_WritePin>
		  }


		  if(IsSystemCharging)
 8001e30:	4b77      	ldr	r3, [pc, #476]	; (8002010 <main+0x368>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d021      	beq.n	8001e7c <main+0x1d4>
		  {
			  max17048_get_soc(&hi2c1, &CurrentBatteryPercentage);	//Get current Battery Percentage
 8001e38:	4972      	ldr	r1, [pc, #456]	; (8002004 <main+0x35c>)
 8001e3a:	4873      	ldr	r0, [pc, #460]	; (8002008 <main+0x360>)
 8001e3c:	f000 fcdc 	bl	80027f8 <max17048_get_soc>
			  if(CurrentBatteryPercentage < 75)
 8001e40:	4b70      	ldr	r3, [pc, #448]	; (8002004 <main+0x35c>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b4a      	cmp	r3, #74	; 0x4a
 8001e46:	d805      	bhi.n	8001e54 <main+0x1ac>
			  {
				  Set_RGB(100, 64, 0);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2140      	movs	r1, #64	; 0x40
 8001e4c:	2064      	movs	r0, #100	; 0x64
 8001e4e:	f7ff fddf 	bl	8001a10 <Set_RGB>
 8001e52:	e040      	b.n	8001ed6 <main+0x22e>
			  }
			  else if(CurrentBatteryPercentage >= 75 && CurrentBatteryPercentage < 90)
 8001e54:	4b6b      	ldr	r3, [pc, #428]	; (8002004 <main+0x35c>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b4a      	cmp	r3, #74	; 0x4a
 8001e5a:	d909      	bls.n	8001e70 <main+0x1c8>
 8001e5c:	4b69      	ldr	r3, [pc, #420]	; (8002004 <main+0x35c>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b59      	cmp	r3, #89	; 0x59
 8001e62:	d805      	bhi.n	8001e70 <main+0x1c8>
			  {
				  Set_RGB(0, 100, 0);
 8001e64:	2200      	movs	r2, #0
 8001e66:	2164      	movs	r1, #100	; 0x64
 8001e68:	2000      	movs	r0, #0
 8001e6a:	f7ff fdd1 	bl	8001a10 <Set_RGB>
 8001e6e:	e032      	b.n	8001ed6 <main+0x22e>
			  }else
			  {
				  Set_RGB(0, 0, 100);
 8001e70:	2264      	movs	r2, #100	; 0x64
 8001e72:	2100      	movs	r1, #0
 8001e74:	2000      	movs	r0, #0
 8001e76:	f7ff fdcb 	bl	8001a10 <Set_RGB>
 8001e7a:	e02c      	b.n	8001ed6 <main+0x22e>
			  }
		  }
		  else
		  {
			  Set_RGB(Remap(CurrentBatteryPercentage, 0, 100, 100, 0), 0, Remap(CurrentBatteryPercentage, 0, 100, 40, 100));
 8001e7c:	4b61      	ldr	r3, [pc, #388]	; (8002004 <main+0x35c>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	ee07 3a90 	vmov	s15, r3
 8001e84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e88:	ed9f 2a67 	vldr	s4, [pc, #412]	; 8002028 <main+0x380>
 8001e8c:	eddf 1a67 	vldr	s3, [pc, #412]	; 800202c <main+0x384>
 8001e90:	ed9f 1a66 	vldr	s2, [pc, #408]	; 800202c <main+0x384>
 8001e94:	eddf 0a64 	vldr	s1, [pc, #400]	; 8002028 <main+0x380>
 8001e98:	eeb0 0a67 	vmov.f32	s0, s15
 8001e9c:	f7ff fd86 	bl	80019ac <Remap>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	b2dc      	uxtb	r4, r3
 8001ea4:	4b57      	ldr	r3, [pc, #348]	; (8002004 <main+0x35c>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	ee07 3a90 	vmov	s15, r3
 8001eac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eb0:	ed9f 2a5e 	vldr	s4, [pc, #376]	; 800202c <main+0x384>
 8001eb4:	eddf 1a5e 	vldr	s3, [pc, #376]	; 8002030 <main+0x388>
 8001eb8:	ed9f 1a5c 	vldr	s2, [pc, #368]	; 800202c <main+0x384>
 8001ebc:	eddf 0a5a 	vldr	s1, [pc, #360]	; 8002028 <main+0x380>
 8001ec0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec4:	f7ff fd72 	bl	80019ac <Remap>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	461a      	mov	r2, r3
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4620      	mov	r0, r4
 8001ed2:	f7ff fd9d 	bl	8001a10 <Set_RGB>
		  }

		  //Get Temperature
		  MeasuredTemperature = readThermistor();
 8001ed6:	f7ff fe37 	bl	8001b48 <readThermistor>
 8001eda:	eeb0 7a40 	vmov.f32	s14, s0
 8001ede:	eef0 7a60 	vmov.f32	s15, s1
 8001ee2:	4b44      	ldr	r3, [pc, #272]	; (8001ff4 <main+0x34c>)
 8001ee4:	ed83 7b00 	vstr	d7, [r3]
		  /* Run PID controller with the new measured temperature */
		  PID_Compute(&Fan_PID);
 8001ee8:	4843      	ldr	r0, [pc, #268]	; (8001ff8 <main+0x350>)
 8001eea:	f7ff f8cd 	bl	8001088 <PID_Compute>
		  /* Set New Duty cycle output*/
		  TIM1->CCR4 =PIDOut;
 8001eee:	4b40      	ldr	r3, [pc, #256]	; (8001ff0 <main+0x348>)
 8001ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef4:	4c4f      	ldr	r4, [pc, #316]	; (8002034 <main+0x38c>)
 8001ef6:	4610      	mov	r0, r2
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f7fe fe55 	bl	8000ba8 <__aeabi_d2uiz>
 8001efe:	4603      	mov	r3, r0
 8001f00:	6423      	str	r3, [r4, #64]	; 0x40
 8001f02:	e09c      	b.n	800203e <main+0x396>
	  {
			/*
			* While system is Down,the code below will always run
			*/

			if(InitialSystemBoot)	//Start shutdown sequence
 8001f04:	4b45      	ldr	r3, [pc, #276]	; (800201c <main+0x374>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d030      	beq.n	8001f6e <main+0x2c6>
			{
				InitialSystemBoot = false;
 8001f0c:	4b43      	ldr	r3, [pc, #268]	; (800201c <main+0x374>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	701a      	strb	r2, [r3, #0]
				Set_RGB( 0, 100, 0 );
 8001f12:	2200      	movs	r2, #0
 8001f14:	2164      	movs	r1, #100	; 0x64
 8001f16:	2000      	movs	r0, #0
 8001f18:	f7ff fd7a 	bl	8001a10 <Set_RGB>
				HAL_Delay(200);
 8001f1c:	20c8      	movs	r0, #200	; 0xc8
 8001f1e:	f001 f89d 	bl	800305c <HAL_Delay>
				Set_RGB(0, 0, 100);
 8001f22:	2264      	movs	r2, #100	; 0x64
 8001f24:	2100      	movs	r1, #0
 8001f26:	2000      	movs	r0, #0
 8001f28:	f7ff fd72 	bl	8001a10 <Set_RGB>
				HAL_Delay(200);
 8001f2c:	20c8      	movs	r0, #200	; 0xc8
 8001f2e:	f001 f895 	bl	800305c <HAL_Delay>
				Set_RGB( 0, 100, 0 );
 8001f32:	2200      	movs	r2, #0
 8001f34:	2164      	movs	r1, #100	; 0x64
 8001f36:	2000      	movs	r0, #0
 8001f38:	f7ff fd6a 	bl	8001a10 <Set_RGB>
				HAL_Delay(200);
 8001f3c:	20c8      	movs	r0, #200	; 0xc8
 8001f3e:	f001 f88d 	bl	800305c <HAL_Delay>
				Set_RGB(0, 0, 100);
 8001f42:	2264      	movs	r2, #100	; 0x64
 8001f44:	2100      	movs	r1, #0
 8001f46:	2000      	movs	r0, #0
 8001f48:	f7ff fd62 	bl	8001a10 <Set_RGB>
				HAL_Delay(200);
 8001f4c:	20c8      	movs	r0, #200	; 0xc8
 8001f4e:	f001 f885 	bl	800305c <HAL_Delay>
				Set_RGB(0, 0, 0);
 8001f52:	2200      	movs	r2, #0
 8001f54:	2100      	movs	r1, #0
 8001f56:	2000      	movs	r0, #0
 8001f58:	f7ff fd5a 	bl	8001a10 <Set_RGB>
				HAL_GPIO_WritePin(En_Regulators_GPIO_Port, En_Regulators_Pin, GPIO_PIN_RESET);	//Turn off Regulators
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	2140      	movs	r1, #64	; 0x40
 8001f60:	4830      	ldr	r0, [pc, #192]	; (8002024 <main+0x37c>)
 8001f62:	f002 fe01 	bl	8004b68 <HAL_GPIO_WritePin>
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);	//Fan PWM
 8001f66:	210c      	movs	r1, #12
 8001f68:	482d      	ldr	r0, [pc, #180]	; (8002020 <main+0x378>)
 8001f6a:	f005 f82d 	bl	8006fc8 <HAL_TIM_PWM_Stop>
			}

			if(IsSystemCharging)
 8001f6e:	4b28      	ldr	r3, [pc, #160]	; (8002010 <main+0x368>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d060      	beq.n	8002038 <main+0x390>
			{
				max17048_get_soc(&hi2c1, &CurrentBatteryPercentage);	//Get current Battery Percentage
 8001f76:	4923      	ldr	r1, [pc, #140]	; (8002004 <main+0x35c>)
 8001f78:	4823      	ldr	r0, [pc, #140]	; (8002008 <main+0x360>)
 8001f7a:	f000 fc3d 	bl	80027f8 <max17048_get_soc>
				if(CurrentBatteryPercentage < 75)
 8001f7e:	4b21      	ldr	r3, [pc, #132]	; (8002004 <main+0x35c>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b4a      	cmp	r3, #74	; 0x4a
 8001f84:	d805      	bhi.n	8001f92 <main+0x2ea>
				{
					Set_RGB(100, 64, 0);
 8001f86:	2200      	movs	r2, #0
 8001f88:	2140      	movs	r1, #64	; 0x40
 8001f8a:	2064      	movs	r0, #100	; 0x64
 8001f8c:	f7ff fd40 	bl	8001a10 <Set_RGB>
 8001f90:	e055      	b.n	800203e <main+0x396>
				}
				else if(CurrentBatteryPercentage >= 75 && CurrentBatteryPercentage < 90)
 8001f92:	4b1c      	ldr	r3, [pc, #112]	; (8002004 <main+0x35c>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	2b4a      	cmp	r3, #74	; 0x4a
 8001f98:	d909      	bls.n	8001fae <main+0x306>
 8001f9a:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <main+0x35c>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b59      	cmp	r3, #89	; 0x59
 8001fa0:	d805      	bhi.n	8001fae <main+0x306>
				{
					Set_RGB(0, 100, 0);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2164      	movs	r1, #100	; 0x64
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	f7ff fd32 	bl	8001a10 <Set_RGB>
 8001fac:	e047      	b.n	800203e <main+0x396>
				}else
				{
					Set_RGB(0, 0, 100);
 8001fae:	2264      	movs	r2, #100	; 0x64
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	2000      	movs	r0, #0
 8001fb4:	f7ff fd2c 	bl	8001a10 <Set_RGB>
 8001fb8:	e041      	b.n	800203e <main+0x396>
 8001fba:	bf00      	nop
 8001fbc:	f3af 8000 	nop.w
 8001fc0:	00000000 	.word	0x00000000
 8001fc4:	3ff00000 	.word	0x3ff00000
 8001fc8:	00000000 	.word	0x00000000
 8001fcc:	40140000 	.word	0x40140000
 8001fd0:	00000000 	.word	0x00000000
 8001fd4:	40000000 	.word	0x40000000
 8001fd8:	00000000 	.word	0x00000000
 8001fdc:	40590000 	.word	0x40590000
 8001fe0:	00000000 	.word	0x00000000
 8001fe4:	40440000 	.word	0x40440000
 8001fe8:	200003e0 	.word	0x200003e0
 8001fec:	20000000 	.word	0x20000000
 8001ff0:	20000218 	.word	0x20000218
 8001ff4:	20000210 	.word	0x20000210
 8001ff8:	20000220 	.word	0x20000220
 8001ffc:	20000290 	.word	0x20000290
 8002000:	20000394 	.word	0x20000394
 8002004:	20000437 	.word	0x20000437
 8002008:	200002f4 	.word	0x200002f4
 800200c:	2000042d 	.word	0x2000042d
 8002010:	20000436 	.word	0x20000436
 8002014:	2000042e 	.word	0x2000042e
 8002018:	20000433 	.word	0x20000433
 800201c:	20000434 	.word	0x20000434
 8002020:	20000348 	.word	0x20000348
 8002024:	48000800 	.word	0x48000800
 8002028:	00000000 	.word	0x00000000
 800202c:	42c80000 	.word	0x42c80000
 8002030:	42200000 	.word	0x42200000
 8002034:	40012c00 	.word	0x40012c00
				}
			}else
			{
				RequestSleep = true;
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <main+0x3ac>)
 800203a:	2201      	movs	r2, #1
 800203c:	701a      	strb	r2, [r3, #0]
			}

	  }

	  if(RequestSleep)
 800203e:	4b05      	ldr	r3, [pc, #20]	; (8002054 <main+0x3ac>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	f43f aea4 	beq.w	8001d90 <main+0xe8>
	  {
		  EnterSleepModeWakeOnInturrupt();	//Will sleep here
 8002048:	f7ff fab7 	bl	80015ba <EnterSleepModeWakeOnInturrupt>

		  RequestSleep = false;				//will wakeup here
 800204c:	4b01      	ldr	r3, [pc, #4]	; (8002054 <main+0x3ac>)
 800204e:	2200      	movs	r2, #0
 8002050:	701a      	strb	r2, [r3, #0]
	  if(BQ_FLAG)
 8002052:	e69d      	b.n	8001d90 <main+0xe8>
 8002054:	20000435 	.word	0x20000435

08002058 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b096      	sub	sp, #88	; 0x58
 800205c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800205e:	f107 0314 	add.w	r3, r7, #20
 8002062:	2244      	movs	r2, #68	; 0x44
 8002064:	2100      	movs	r1, #0
 8002066:	4618      	mov	r0, r3
 8002068:	f006 f824 	bl	80080b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800206c:	463b      	mov	r3, r7
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	605a      	str	r2, [r3, #4]
 8002074:	609a      	str	r2, [r3, #8]
 8002076:	60da      	str	r2, [r3, #12]
 8002078:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800207a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800207e:	f003 fbe1 	bl	8005844 <HAL_PWREx_ControlVoltageScaling>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002088:	f000 fad2 	bl	8002630 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800208c:	2310      	movs	r3, #16
 800208e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002090:	2301      	movs	r3, #1
 8002092:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002098:	2360      	movs	r3, #96	; 0x60
 800209a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800209c:	2300      	movs	r3, #0
 800209e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020a0:	f107 0314 	add.w	r3, r7, #20
 80020a4:	4618      	mov	r0, r3
 80020a6:	f003 fc6b 	bl	8005980 <HAL_RCC_OscConfig>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80020b0:	f000 fabe 	bl	8002630 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020b4:	230f      	movs	r3, #15
 80020b6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80020b8:	2300      	movs	r3, #0
 80020ba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020bc:	2300      	movs	r3, #0
 80020be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80020c0:	2300      	movs	r3, #0
 80020c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020c4:	2300      	movs	r3, #0
 80020c6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80020c8:	463b      	mov	r3, r7
 80020ca:	2100      	movs	r1, #0
 80020cc:	4618      	mov	r0, r3
 80020ce:	f004 f86b 	bl	80061a8 <HAL_RCC_ClockConfig>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80020d8:	f000 faaa 	bl	8002630 <Error_Handler>
  }
}
 80020dc:	bf00      	nop
 80020de:	3758      	adds	r7, #88	; 0x58
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80020ea:	463b      	mov	r3, r7
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	611a      	str	r2, [r3, #16]
 80020f8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80020fa:	4b29      	ldr	r3, [pc, #164]	; (80021a0 <MX_ADC1_Init+0xbc>)
 80020fc:	4a29      	ldr	r2, [pc, #164]	; (80021a4 <MX_ADC1_Init+0xc0>)
 80020fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8002100:	4b27      	ldr	r3, [pc, #156]	; (80021a0 <MX_ADC1_Init+0xbc>)
 8002102:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002106:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002108:	4b25      	ldr	r3, [pc, #148]	; (80021a0 <MX_ADC1_Init+0xbc>)
 800210a:	2200      	movs	r2, #0
 800210c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800210e:	4b24      	ldr	r3, [pc, #144]	; (80021a0 <MX_ADC1_Init+0xbc>)
 8002110:	2200      	movs	r2, #0
 8002112:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002114:	4b22      	ldr	r3, [pc, #136]	; (80021a0 <MX_ADC1_Init+0xbc>)
 8002116:	2200      	movs	r2, #0
 8002118:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800211a:	4b21      	ldr	r3, [pc, #132]	; (80021a0 <MX_ADC1_Init+0xbc>)
 800211c:	2204      	movs	r2, #4
 800211e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002120:	4b1f      	ldr	r3, [pc, #124]	; (80021a0 <MX_ADC1_Init+0xbc>)
 8002122:	2200      	movs	r2, #0
 8002124:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002126:	4b1e      	ldr	r3, [pc, #120]	; (80021a0 <MX_ADC1_Init+0xbc>)
 8002128:	2200      	movs	r2, #0
 800212a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800212c:	4b1c      	ldr	r3, [pc, #112]	; (80021a0 <MX_ADC1_Init+0xbc>)
 800212e:	2201      	movs	r2, #1
 8002130:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002132:	4b1b      	ldr	r3, [pc, #108]	; (80021a0 <MX_ADC1_Init+0xbc>)
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800213a:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <MX_ADC1_Init+0xbc>)
 800213c:	2200      	movs	r2, #0
 800213e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002140:	4b17      	ldr	r3, [pc, #92]	; (80021a0 <MX_ADC1_Init+0xbc>)
 8002142:	2200      	movs	r2, #0
 8002144:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002146:	4b16      	ldr	r3, [pc, #88]	; (80021a0 <MX_ADC1_Init+0xbc>)
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800214e:	4b14      	ldr	r3, [pc, #80]	; (80021a0 <MX_ADC1_Init+0xbc>)
 8002150:	2200      	movs	r2, #0
 8002152:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002154:	4b12      	ldr	r3, [pc, #72]	; (80021a0 <MX_ADC1_Init+0xbc>)
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800215c:	4810      	ldr	r0, [pc, #64]	; (80021a0 <MX_ADC1_Init+0xbc>)
 800215e:	f001 f9d7 	bl	8003510 <HAL_ADC_Init>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8002168:	f000 fa62 	bl	8002630 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800216c:	4b0e      	ldr	r3, [pc, #56]	; (80021a8 <MX_ADC1_Init+0xc4>)
 800216e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002170:	2306      	movs	r3, #6
 8002172:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8002174:	2306      	movs	r3, #6
 8002176:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002178:	237f      	movs	r3, #127	; 0x7f
 800217a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800217c:	2304      	movs	r3, #4
 800217e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002184:	463b      	mov	r3, r7
 8002186:	4619      	mov	r1, r3
 8002188:	4805      	ldr	r0, [pc, #20]	; (80021a0 <MX_ADC1_Init+0xbc>)
 800218a:	f001 fc3b 	bl	8003a04 <HAL_ADC_ConfigChannel>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8002194:	f000 fa4c 	bl	8002630 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002198:	bf00      	nop
 800219a:	3718      	adds	r7, #24
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20000290 	.word	0x20000290
 80021a4:	50040000 	.word	0x50040000
 80021a8:	25b00200 	.word	0x25b00200

080021ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021b0:	4b1b      	ldr	r3, [pc, #108]	; (8002220 <MX_I2C1_Init+0x74>)
 80021b2:	4a1c      	ldr	r2, [pc, #112]	; (8002224 <MX_I2C1_Init+0x78>)
 80021b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000004;
 80021b6:	4b1a      	ldr	r3, [pc, #104]	; (8002220 <MX_I2C1_Init+0x74>)
 80021b8:	2204      	movs	r2, #4
 80021ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80021bc:	4b18      	ldr	r3, [pc, #96]	; (8002220 <MX_I2C1_Init+0x74>)
 80021be:	2200      	movs	r2, #0
 80021c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021c2:	4b17      	ldr	r3, [pc, #92]	; (8002220 <MX_I2C1_Init+0x74>)
 80021c4:	2201      	movs	r2, #1
 80021c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021c8:	4b15      	ldr	r3, [pc, #84]	; (8002220 <MX_I2C1_Init+0x74>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80021ce:	4b14      	ldr	r3, [pc, #80]	; (8002220 <MX_I2C1_Init+0x74>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80021d4:	4b12      	ldr	r3, [pc, #72]	; (8002220 <MX_I2C1_Init+0x74>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021da:	4b11      	ldr	r3, [pc, #68]	; (8002220 <MX_I2C1_Init+0x74>)
 80021dc:	2200      	movs	r2, #0
 80021de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021e0:	4b0f      	ldr	r3, [pc, #60]	; (8002220 <MX_I2C1_Init+0x74>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021e6:	480e      	ldr	r0, [pc, #56]	; (8002220 <MX_I2C1_Init+0x74>)
 80021e8:	f002 fcee 	bl	8004bc8 <HAL_I2C_Init>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80021f2:	f000 fa1d 	bl	8002630 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80021f6:	2100      	movs	r1, #0
 80021f8:	4809      	ldr	r0, [pc, #36]	; (8002220 <MX_I2C1_Init+0x74>)
 80021fa:	f003 fa49 	bl	8005690 <HAL_I2CEx_ConfigAnalogFilter>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002204:	f000 fa14 	bl	8002630 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002208:	2100      	movs	r1, #0
 800220a:	4805      	ldr	r0, [pc, #20]	; (8002220 <MX_I2C1_Init+0x74>)
 800220c:	f003 fa8b 	bl	8005726 <HAL_I2CEx_ConfigDigitalFilter>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002216:	f000 fa0b 	bl	8002630 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	200002f4 	.word	0x200002f4
 8002224:	40005400 	.word	0x40005400

08002228 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b09a      	sub	sp, #104	; 0x68
 800222c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800222e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	605a      	str	r2, [r3, #4]
 8002238:	609a      	str	r2, [r3, #8]
 800223a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800223c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002248:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	605a      	str	r2, [r3, #4]
 8002252:	609a      	str	r2, [r3, #8]
 8002254:	60da      	str	r2, [r3, #12]
 8002256:	611a      	str	r2, [r3, #16]
 8002258:	615a      	str	r2, [r3, #20]
 800225a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800225c:	1d3b      	adds	r3, r7, #4
 800225e:	222c      	movs	r2, #44	; 0x2c
 8002260:	2100      	movs	r1, #0
 8002262:	4618      	mov	r0, r3
 8002264:	f005 ff26 	bl	80080b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002268:	4b42      	ldr	r3, [pc, #264]	; (8002374 <MX_TIM1_Init+0x14c>)
 800226a:	4a43      	ldr	r2, [pc, #268]	; (8002378 <MX_TIM1_Init+0x150>)
 800226c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 800226e:	4b41      	ldr	r3, [pc, #260]	; (8002374 <MX_TIM1_Init+0x14c>)
 8002270:	2203      	movs	r2, #3
 8002272:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002274:	4b3f      	ldr	r3, [pc, #252]	; (8002374 <MX_TIM1_Init+0x14c>)
 8002276:	2200      	movs	r2, #0
 8002278:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 800227a:	4b3e      	ldr	r3, [pc, #248]	; (8002374 <MX_TIM1_Init+0x14c>)
 800227c:	2264      	movs	r2, #100	; 0x64
 800227e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002280:	4b3c      	ldr	r3, [pc, #240]	; (8002374 <MX_TIM1_Init+0x14c>)
 8002282:	2200      	movs	r2, #0
 8002284:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002286:	4b3b      	ldr	r3, [pc, #236]	; (8002374 <MX_TIM1_Init+0x14c>)
 8002288:	2200      	movs	r2, #0
 800228a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800228c:	4b39      	ldr	r3, [pc, #228]	; (8002374 <MX_TIM1_Init+0x14c>)
 800228e:	2200      	movs	r2, #0
 8002290:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002292:	4838      	ldr	r0, [pc, #224]	; (8002374 <MX_TIM1_Init+0x14c>)
 8002294:	f004 fc7e 	bl	8006b94 <HAL_TIM_Base_Init>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800229e:	f000 f9c7 	bl	8002630 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022a6:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80022ac:	4619      	mov	r1, r3
 80022ae:	4831      	ldr	r0, [pc, #196]	; (8002374 <MX_TIM1_Init+0x14c>)
 80022b0:	f005 f946 	bl	8007540 <HAL_TIM_ConfigClockSource>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80022ba:	f000 f9b9 	bl	8002630 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80022be:	482d      	ldr	r0, [pc, #180]	; (8002374 <MX_TIM1_Init+0x14c>)
 80022c0:	f004 fd43 	bl	8006d4a <HAL_TIM_PWM_Init>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80022ca:	f000 f9b1 	bl	8002630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ce:	2300      	movs	r3, #0
 80022d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80022d2:	2300      	movs	r3, #0
 80022d4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022d6:	2300      	movs	r3, #0
 80022d8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80022de:	4619      	mov	r1, r3
 80022e0:	4824      	ldr	r0, [pc, #144]	; (8002374 <MX_TIM1_Init+0x14c>)
 80022e2:	f005 fdc1 	bl	8007e68 <HAL_TIMEx_MasterConfigSynchronization>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80022ec:	f000 f9a0 	bl	8002630 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022f0:	2360      	movs	r3, #96	; 0x60
 80022f2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022f8:	2300      	movs	r3, #0
 80022fa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022fc:	2300      	movs	r3, #0
 80022fe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002300:	2300      	movs	r3, #0
 8002302:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002304:	2300      	movs	r3, #0
 8002306:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002308:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800230c:	220c      	movs	r2, #12
 800230e:	4619      	mov	r1, r3
 8002310:	4818      	ldr	r0, [pc, #96]	; (8002374 <MX_TIM1_Init+0x14c>)
 8002312:	f005 f801 	bl	8007318 <HAL_TIM_PWM_ConfigChannel>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800231c:	f000 f988 	bl	8002630 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002320:	2300      	movs	r3, #0
 8002322:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002324:	2300      	movs	r3, #0
 8002326:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002328:	2300      	movs	r3, #0
 800232a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800232c:	2300      	movs	r3, #0
 800232e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002334:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002338:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800233e:	2300      	movs	r3, #0
 8002340:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002342:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002346:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002348:	2300      	movs	r3, #0
 800234a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800234c:	2300      	movs	r3, #0
 800234e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002350:	1d3b      	adds	r3, r7, #4
 8002352:	4619      	mov	r1, r3
 8002354:	4807      	ldr	r0, [pc, #28]	; (8002374 <MX_TIM1_Init+0x14c>)
 8002356:	f005 fded 	bl	8007f34 <HAL_TIMEx_ConfigBreakDeadTime>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8002360:	f000 f966 	bl	8002630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002364:	4803      	ldr	r0, [pc, #12]	; (8002374 <MX_TIM1_Init+0x14c>)
 8002366:	f000 fc61 	bl	8002c2c <HAL_TIM_MspPostInit>

}
 800236a:	bf00      	nop
 800236c:	3768      	adds	r7, #104	; 0x68
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20000348 	.word	0x20000348
 8002378:	40012c00 	.word	0x40012c00

0800237c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08e      	sub	sp, #56	; 0x38
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002382:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	605a      	str	r2, [r3, #4]
 800238c:	609a      	str	r2, [r3, #8]
 800238e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002390:	f107 031c 	add.w	r3, r7, #28
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800239c:	463b      	mov	r3, r7
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	605a      	str	r2, [r3, #4]
 80023a4:	609a      	str	r2, [r3, #8]
 80023a6:	60da      	str	r2, [r3, #12]
 80023a8:	611a      	str	r2, [r3, #16]
 80023aa:	615a      	str	r2, [r3, #20]
 80023ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023ae:	4b38      	ldr	r3, [pc, #224]	; (8002490 <MX_TIM2_Init+0x114>)
 80023b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4-1;
 80023b6:	4b36      	ldr	r3, [pc, #216]	; (8002490 <MX_TIM2_Init+0x114>)
 80023b8:	2203      	movs	r2, #3
 80023ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023bc:	4b34      	ldr	r3, [pc, #208]	; (8002490 <MX_TIM2_Init+0x114>)
 80023be:	2200      	movs	r2, #0
 80023c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80023c2:	4b33      	ldr	r3, [pc, #204]	; (8002490 <MX_TIM2_Init+0x114>)
 80023c4:	2263      	movs	r2, #99	; 0x63
 80023c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023c8:	4b31      	ldr	r3, [pc, #196]	; (8002490 <MX_TIM2_Init+0x114>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ce:	4b30      	ldr	r3, [pc, #192]	; (8002490 <MX_TIM2_Init+0x114>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023d4:	482e      	ldr	r0, [pc, #184]	; (8002490 <MX_TIM2_Init+0x114>)
 80023d6:	f004 fbdd 	bl	8006b94 <HAL_TIM_Base_Init>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80023e0:	f000 f926 	bl	8002630 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023ee:	4619      	mov	r1, r3
 80023f0:	4827      	ldr	r0, [pc, #156]	; (8002490 <MX_TIM2_Init+0x114>)
 80023f2:	f005 f8a5 	bl	8007540 <HAL_TIM_ConfigClockSource>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80023fc:	f000 f918 	bl	8002630 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002400:	4823      	ldr	r0, [pc, #140]	; (8002490 <MX_TIM2_Init+0x114>)
 8002402:	f004 fca2 	bl	8006d4a <HAL_TIM_PWM_Init>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800240c:	f000 f910 	bl	8002630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002410:	2300      	movs	r3, #0
 8002412:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002414:	2300      	movs	r3, #0
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002418:	f107 031c 	add.w	r3, r7, #28
 800241c:	4619      	mov	r1, r3
 800241e:	481c      	ldr	r0, [pc, #112]	; (8002490 <MX_TIM2_Init+0x114>)
 8002420:	f005 fd22 	bl	8007e68 <HAL_TIMEx_MasterConfigSynchronization>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800242a:	f000 f901 	bl	8002630 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800242e:	2360      	movs	r3, #96	; 0x60
 8002430:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002432:	2300      	movs	r3, #0
 8002434:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002436:	2300      	movs	r3, #0
 8002438:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800243a:	2300      	movs	r3, #0
 800243c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800243e:	463b      	mov	r3, r7
 8002440:	2200      	movs	r2, #0
 8002442:	4619      	mov	r1, r3
 8002444:	4812      	ldr	r0, [pc, #72]	; (8002490 <MX_TIM2_Init+0x114>)
 8002446:	f004 ff67 	bl	8007318 <HAL_TIM_PWM_ConfigChannel>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002450:	f000 f8ee 	bl	8002630 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002454:	463b      	mov	r3, r7
 8002456:	2204      	movs	r2, #4
 8002458:	4619      	mov	r1, r3
 800245a:	480d      	ldr	r0, [pc, #52]	; (8002490 <MX_TIM2_Init+0x114>)
 800245c:	f004 ff5c 	bl	8007318 <HAL_TIM_PWM_ConfigChannel>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8002466:	f000 f8e3 	bl	8002630 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800246a:	463b      	mov	r3, r7
 800246c:	2208      	movs	r2, #8
 800246e:	4619      	mov	r1, r3
 8002470:	4807      	ldr	r0, [pc, #28]	; (8002490 <MX_TIM2_Init+0x114>)
 8002472:	f004 ff51 	bl	8007318 <HAL_TIM_PWM_ConfigChannel>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 800247c:	f000 f8d8 	bl	8002630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002480:	4803      	ldr	r0, [pc, #12]	; (8002490 <MX_TIM2_Init+0x114>)
 8002482:	f000 fbd3 	bl	8002c2c <HAL_TIM_MspPostInit>

}
 8002486:	bf00      	nop
 8002488:	3738      	adds	r7, #56	; 0x38
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	20000394 	.word	0x20000394

08002494 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800249a:	f107 0310 	add.w	r3, r7, #16
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	605a      	str	r2, [r3, #4]
 80024a4:	609a      	str	r2, [r3, #8]
 80024a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024a8:	1d3b      	adds	r3, r7, #4
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	605a      	str	r2, [r3, #4]
 80024b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80024b2:	4b1f      	ldr	r3, [pc, #124]	; (8002530 <MX_TIM15_Init+0x9c>)
 80024b4:	4a1f      	ldr	r2, [pc, #124]	; (8002534 <MX_TIM15_Init+0xa0>)
 80024b6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 4000;
 80024b8:	4b1d      	ldr	r3, [pc, #116]	; (8002530 <MX_TIM15_Init+0x9c>)
 80024ba:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80024be:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024c0:	4b1b      	ldr	r3, [pc, #108]	; (8002530 <MX_TIM15_Init+0x9c>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 50;
 80024c6:	4b1a      	ldr	r3, [pc, #104]	; (8002530 <MX_TIM15_Init+0x9c>)
 80024c8:	2232      	movs	r2, #50	; 0x32
 80024ca:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024cc:	4b18      	ldr	r3, [pc, #96]	; (8002530 <MX_TIM15_Init+0x9c>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80024d2:	4b17      	ldr	r3, [pc, #92]	; (8002530 <MX_TIM15_Init+0x9c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024d8:	4b15      	ldr	r3, [pc, #84]	; (8002530 <MX_TIM15_Init+0x9c>)
 80024da:	2200      	movs	r2, #0
 80024dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80024de:	4814      	ldr	r0, [pc, #80]	; (8002530 <MX_TIM15_Init+0x9c>)
 80024e0:	f004 fb58 	bl	8006b94 <HAL_TIM_Base_Init>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80024ea:	f000 f8a1 	bl	8002630 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80024f4:	f107 0310 	add.w	r3, r7, #16
 80024f8:	4619      	mov	r1, r3
 80024fa:	480d      	ldr	r0, [pc, #52]	; (8002530 <MX_TIM15_Init+0x9c>)
 80024fc:	f005 f820 	bl	8007540 <HAL_TIM_ConfigClockSource>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8002506:	f000 f893 	bl	8002630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800250a:	2300      	movs	r3, #0
 800250c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800250e:	2300      	movs	r3, #0
 8002510:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002512:	1d3b      	adds	r3, r7, #4
 8002514:	4619      	mov	r1, r3
 8002516:	4806      	ldr	r0, [pc, #24]	; (8002530 <MX_TIM15_Init+0x9c>)
 8002518:	f005 fca6 	bl	8007e68 <HAL_TIMEx_MasterConfigSynchronization>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8002522:	f000 f885 	bl	8002630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002526:	bf00      	nop
 8002528:	3720      	adds	r7, #32
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	200003e0 	.word	0x200003e0
 8002534:	40014000 	.word	0x40014000

08002538 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b088      	sub	sp, #32
 800253c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253e:	f107 030c 	add.w	r3, r7, #12
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	605a      	str	r2, [r3, #4]
 8002548:	609a      	str	r2, [r3, #8]
 800254a:	60da      	str	r2, [r3, #12]
 800254c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800254e:	4b36      	ldr	r3, [pc, #216]	; (8002628 <MX_GPIO_Init+0xf0>)
 8002550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002552:	4a35      	ldr	r2, [pc, #212]	; (8002628 <MX_GPIO_Init+0xf0>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800255a:	4b33      	ldr	r3, [pc, #204]	; (8002628 <MX_GPIO_Init+0xf0>)
 800255c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002566:	4b30      	ldr	r3, [pc, #192]	; (8002628 <MX_GPIO_Init+0xf0>)
 8002568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256a:	4a2f      	ldr	r2, [pc, #188]	; (8002628 <MX_GPIO_Init+0xf0>)
 800256c:	f043 0304 	orr.w	r3, r3, #4
 8002570:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002572:	4b2d      	ldr	r3, [pc, #180]	; (8002628 <MX_GPIO_Init+0xf0>)
 8002574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002576:	f003 0304 	and.w	r3, r3, #4
 800257a:	607b      	str	r3, [r7, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800257e:	4b2a      	ldr	r3, [pc, #168]	; (8002628 <MX_GPIO_Init+0xf0>)
 8002580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002582:	4a29      	ldr	r2, [pc, #164]	; (8002628 <MX_GPIO_Init+0xf0>)
 8002584:	f043 0302 	orr.w	r3, r3, #2
 8002588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800258a:	4b27      	ldr	r3, [pc, #156]	; (8002628 <MX_GPIO_Init+0xf0>)
 800258c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	603b      	str	r3, [r7, #0]
 8002594:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(En_Regulators_GPIO_Port, En_Regulators_Pin, GPIO_PIN_RESET);
 8002596:	2200      	movs	r2, #0
 8002598:	2140      	movs	r1, #64	; 0x40
 800259a:	4824      	ldr	r0, [pc, #144]	; (800262c <MX_GPIO_Init+0xf4>)
 800259c:	f002 fae4 	bl	8004b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : En_Regulators_Pin */
  GPIO_InitStruct.Pin = En_Regulators_Pin;
 80025a0:	2340      	movs	r3, #64	; 0x40
 80025a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025a4:	2301      	movs	r3, #1
 80025a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ac:	2300      	movs	r3, #0
 80025ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(En_Regulators_GPIO_Port, &GPIO_InitStruct);
 80025b0:	f107 030c 	add.w	r3, r7, #12
 80025b4:	4619      	mov	r1, r3
 80025b6:	481d      	ldr	r0, [pc, #116]	; (800262c <MX_GPIO_Init+0xf4>)
 80025b8:	f002 f944 	bl	8004844 <HAL_GPIO_Init>

  /*Configure GPIO pin : Power_Button_Pin */
  GPIO_InitStruct.Pin = Power_Button_Pin;
 80025bc:	2380      	movs	r3, #128	; 0x80
 80025be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80025c0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80025c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025c6:	2301      	movs	r3, #1
 80025c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Power_Button_GPIO_Port, &GPIO_InitStruct);
 80025ca:	f107 030c 	add.w	r3, r7, #12
 80025ce:	4619      	mov	r1, r3
 80025d0:	4816      	ldr	r0, [pc, #88]	; (800262c <MX_GPIO_Init+0xf4>)
 80025d2:	f002 f937 	bl	8004844 <HAL_GPIO_Init>

  /*Configure GPIO pin : MAX_ALRT_Pin */
  GPIO_InitStruct.Pin = MAX_ALRT_Pin;
 80025d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80025dc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80025e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025e2:	2301      	movs	r3, #1
 80025e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MAX_ALRT_GPIO_Port, &GPIO_InitStruct);
 80025e6:	f107 030c 	add.w	r3, r7, #12
 80025ea:	4619      	mov	r1, r3
 80025ec:	480f      	ldr	r0, [pc, #60]	; (800262c <MX_GPIO_Init+0xf4>)
 80025ee:	f002 f929 	bl	8004844 <HAL_GPIO_Init>

  /*Configure GPIO pin : BQ_INT_Pin */
  GPIO_InitStruct.Pin = BQ_INT_Pin;
 80025f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80025f8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80025fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025fe:	2301      	movs	r3, #1
 8002600:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BQ_INT_GPIO_Port, &GPIO_InitStruct);
 8002602:	f107 030c 	add.w	r3, r7, #12
 8002606:	4619      	mov	r1, r3
 8002608:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800260c:	f002 f91a 	bl	8004844 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002610:	2200      	movs	r2, #0
 8002612:	2100      	movs	r1, #0
 8002614:	2017      	movs	r0, #23
 8002616:	f002 f8de 	bl	80047d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800261a:	2017      	movs	r0, #23
 800261c:	f002 f8f7 	bl	800480e <HAL_NVIC_EnableIRQ>

}
 8002620:	bf00      	nop
 8002622:	3720      	adds	r7, #32
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40021000 	.word	0x40021000
 800262c:	48000800 	.word	0x48000800

08002630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002634:	b672      	cpsid	i
}
 8002636:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002638:	e7fe      	b.n	8002638 <Error_Handler+0x8>

0800263a <i2c_master_read_u16>:
 800263a:	b580      	push	{r7, lr}
 800263c:	b088      	sub	sp, #32
 800263e:	af04      	add	r7, sp, #16
 8002640:	60f8      	str	r0, [r7, #12]
 8002642:	607b      	str	r3, [r7, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	72fb      	strb	r3, [r7, #11]
 8002648:	4613      	mov	r3, r2
 800264a:	72bb      	strb	r3, [r7, #10]
 800264c:	7afb      	ldrb	r3, [r7, #11]
 800264e:	b299      	uxth	r1, r3
 8002650:	7abb      	ldrb	r3, [r7, #10]
 8002652:	b29a      	uxth	r2, r3
 8002654:	230a      	movs	r3, #10
 8002656:	9302      	str	r3, [sp, #8]
 8002658:	2302      	movs	r3, #2
 800265a:	9301      	str	r3, [sp, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	2302      	movs	r3, #2
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f002 fc54 	bl	8004f10 <HAL_I2C_Mem_Read>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <i2c_master_read_u16+0x38>
 800266e:	2300      	movs	r3, #0
 8002670:	e000      	b.n	8002674 <i2c_master_read_u16+0x3a>
 8002672:	2301      	movs	r3, #1
 8002674:	4618      	mov	r0, r3
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <i2c_master_write_u16>:
 800267c:	b580      	push	{r7, lr}
 800267e:	b088      	sub	sp, #32
 8002680:	af04      	add	r7, sp, #16
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	607b      	str	r3, [r7, #4]
 8002686:	460b      	mov	r3, r1
 8002688:	72fb      	strb	r3, [r7, #11]
 800268a:	4613      	mov	r3, r2
 800268c:	72bb      	strb	r3, [r7, #10]
 800268e:	7afb      	ldrb	r3, [r7, #11]
 8002690:	b299      	uxth	r1, r3
 8002692:	7abb      	ldrb	r3, [r7, #10]
 8002694:	b29a      	uxth	r2, r3
 8002696:	230a      	movs	r3, #10
 8002698:	9302      	str	r3, [sp, #8]
 800269a:	2302      	movs	r3, #2
 800269c:	9301      	str	r3, [sp, #4]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	2302      	movs	r3, #2
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f002 fb1f 	bl	8004ce8 <HAL_I2C_Mem_Write>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <i2c_master_write_u16+0x38>
 80026b0:	2300      	movs	r3, #0
 80026b2:	e000      	b.n	80026b6 <i2c_master_write_u16+0x3a>
 80026b4:	2301      	movs	r3, #1
 80026b6:	4618      	mov	r0, r3
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <read_reg>:
 80026be:	b580      	push	{r7, lr}
 80026c0:	b084      	sub	sp, #16
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	60f8      	str	r0, [r7, #12]
 80026c6:	460b      	mov	r3, r1
 80026c8:	607a      	str	r2, [r7, #4]
 80026ca:	72fb      	strb	r3, [r7, #11]
 80026cc:	7afa      	ldrb	r2, [r7, #11]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2136      	movs	r1, #54	; 0x36
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f7ff ffb1 	bl	800263a <i2c_master_read_u16>
 80026d8:	4603      	mov	r3, r0
 80026da:	f083 0301 	eor.w	r3, r3, #1
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <read_reg+0x2a>
 80026e4:	2300      	movs	r3, #0
 80026e6:	e00e      	b.n	8002706 <read_reg+0x48>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	881b      	ldrh	r3, [r3, #0]
 80026ec:	021b      	lsls	r3, r3, #8
 80026ee:	b21a      	sxth	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	0a1b      	lsrs	r3, r3, #8
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	b21b      	sxth	r3, r3
 80026fa:	4313      	orrs	r3, r2
 80026fc:	b21b      	sxth	r3, r3
 80026fe:	b29a      	uxth	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	801a      	strh	r2, [r3, #0]
 8002704:	2301      	movs	r3, #1
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <write_reg>:
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	460b      	mov	r3, r1
 8002718:	70fb      	strb	r3, [r7, #3]
 800271a:	4613      	mov	r3, r2
 800271c:	803b      	strh	r3, [r7, #0]
 800271e:	883b      	ldrh	r3, [r7, #0]
 8002720:	021b      	lsls	r3, r3, #8
 8002722:	b21a      	sxth	r2, r3
 8002724:	883b      	ldrh	r3, [r7, #0]
 8002726:	0a1b      	lsrs	r3, r3, #8
 8002728:	b29b      	uxth	r3, r3
 800272a:	b21b      	sxth	r3, r3
 800272c:	4313      	orrs	r3, r2
 800272e:	b21b      	sxth	r3, r3
 8002730:	b29b      	uxth	r3, r3
 8002732:	78fa      	ldrb	r2, [r7, #3]
 8002734:	2136      	movs	r1, #54	; 0x36
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7ff ffa0 	bl	800267c <i2c_master_write_u16>
 800273c:	4603      	mov	r3, r0
 800273e:	4618      	mov	r0, r3
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <modify_reg>:
 8002746:	b580      	push	{r7, lr}
 8002748:	b086      	sub	sp, #24
 800274a:	af00      	add	r7, sp, #0
 800274c:	60f8      	str	r0, [r7, #12]
 800274e:	4608      	mov	r0, r1
 8002750:	4611      	mov	r1, r2
 8002752:	461a      	mov	r2, r3
 8002754:	4603      	mov	r3, r0
 8002756:	72fb      	strb	r3, [r7, #11]
 8002758:	460b      	mov	r3, r1
 800275a:	813b      	strh	r3, [r7, #8]
 800275c:	4613      	mov	r3, r2
 800275e:	80fb      	strh	r3, [r7, #6]
 8002760:	f107 0216 	add.w	r2, r7, #22
 8002764:	7afb      	ldrb	r3, [r7, #11]
 8002766:	4619      	mov	r1, r3
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f7ff ffa8 	bl	80026be <read_reg>
 800276e:	4603      	mov	r3, r0
 8002770:	f083 0301 	eor.w	r3, r3, #1
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <modify_reg+0x38>
 800277a:	2300      	movs	r3, #0
 800277c:	e017      	b.n	80027ae <modify_reg+0x68>
 800277e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002782:	43db      	mvns	r3, r3
 8002784:	b21a      	sxth	r2, r3
 8002786:	8afb      	ldrh	r3, [r7, #22]
 8002788:	b21b      	sxth	r3, r3
 800278a:	4013      	ands	r3, r2
 800278c:	b21a      	sxth	r2, r3
 800278e:	8939      	ldrh	r1, [r7, #8]
 8002790:	88fb      	ldrh	r3, [r7, #6]
 8002792:	400b      	ands	r3, r1
 8002794:	b29b      	uxth	r3, r3
 8002796:	b21b      	sxth	r3, r3
 8002798:	4313      	orrs	r3, r2
 800279a:	b21b      	sxth	r3, r3
 800279c:	b29b      	uxth	r3, r3
 800279e:	82fb      	strh	r3, [r7, #22]
 80027a0:	8afa      	ldrh	r2, [r7, #22]
 80027a2:	7afb      	ldrb	r3, [r7, #11]
 80027a4:	4619      	mov	r1, r3
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f7ff ffb1 	bl	800270e <write_reg>
 80027ac:	4603      	mov	r3, r0
 80027ae:	4618      	mov	r0, r3
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <max17048_is_present>:
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b084      	sub	sp, #16
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
 80027be:	f107 030e 	add.w	r3, r7, #14
 80027c2:	461a      	mov	r2, r3
 80027c4:	2108      	movs	r1, #8
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7ff ff79 	bl	80026be <read_reg>
 80027cc:	4603      	mov	r3, r0
 80027ce:	f083 0301 	eor.w	r3, r3, #1
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <max17048_is_present+0x26>
 80027d8:	2300      	movs	r3, #0
 80027da:	e009      	b.n	80027f0 <max17048_is_present+0x3a>
 80027dc:	89fb      	ldrh	r3, [r7, #14]
 80027de:	461a      	mov	r2, r3
 80027e0:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80027e4:	4013      	ands	r3, r2
 80027e6:	2b10      	cmp	r3, #16
 80027e8:	bf0c      	ite	eq
 80027ea:	2301      	moveq	r3, #1
 80027ec:	2300      	movne	r3, #0
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	4618      	mov	r0, r3
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <max17048_get_soc>:
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
 8002802:	f107 030e 	add.w	r3, r7, #14
 8002806:	461a      	mov	r2, r3
 8002808:	2104      	movs	r1, #4
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7ff ff57 	bl	80026be <read_reg>
 8002810:	4603      	mov	r3, r0
 8002812:	f083 0301 	eor.w	r3, r3, #1
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <max17048_get_soc+0x28>
 800281c:	2300      	movs	r3, #0
 800281e:	e006      	b.n	800282e <max17048_get_soc+0x36>
 8002820:	89fb      	ldrh	r3, [r7, #14]
 8002822:	0a1b      	lsrs	r3, r3, #8
 8002824:	b29b      	uxth	r3, r3
 8002826:	b2da      	uxtb	r2, r3
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	701a      	strb	r2, [r3, #0]
 800282c:	2301      	movs	r3, #1
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <max17048_set_bat_low_soc>:
 8002836:	b580      	push	{r7, lr}
 8002838:	b084      	sub	sp, #16
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
 800283e:	460b      	mov	r3, r1
 8002840:	70fb      	strb	r3, [r7, #3]
 8002842:	78fb      	ldrb	r3, [r7, #3]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d002      	beq.n	800284e <max17048_set_bat_low_soc+0x18>
 8002848:	78fb      	ldrb	r3, [r7, #3]
 800284a:	2b20      	cmp	r3, #32
 800284c:	d901      	bls.n	8002852 <max17048_set_bat_low_soc+0x1c>
 800284e:	2300      	movs	r3, #0
 8002850:	e011      	b.n	8002876 <max17048_set_bat_low_soc+0x40>
 8002852:	78fb      	ldrb	r3, [r7, #3]
 8002854:	b29b      	uxth	r3, r3
 8002856:	f003 031f 	and.w	r3, r3, #31
 800285a:	b29b      	uxth	r3, r3
 800285c:	f1c3 0320 	rsb	r3, r3, #32
 8002860:	b29b      	uxth	r3, r3
 8002862:	f003 031f 	and.w	r3, r3, #31
 8002866:	81fb      	strh	r3, [r7, #14]
 8002868:	89fa      	ldrh	r2, [r7, #14]
 800286a:	231f      	movs	r3, #31
 800286c:	210c      	movs	r1, #12
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff ff69 	bl	8002746 <modify_reg>
 8002874:	4603      	mov	r3, r0
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
	...

08002880 <max17048_set_undervolted_voltage>:
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	807b      	strh	r3, [r7, #2]
 800288c:	887b      	ldrh	r3, [r7, #2]
 800288e:	4a0b      	ldr	r2, [pc, #44]	; (80028bc <max17048_set_undervolted_voltage+0x3c>)
 8002890:	fba2 2303 	umull	r2, r3, r2, r3
 8002894:	091b      	lsrs	r3, r3, #4
 8002896:	b29b      	uxth	r3, r3
 8002898:	021b      	lsls	r3, r3, #8
 800289a:	b29b      	uxth	r3, r3
 800289c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028a0:	81fb      	strh	r3, [r7, #14]
 80028a2:	89fa      	ldrh	r2, [r7, #14]
 80028a4:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80028a8:	2114      	movs	r1, #20
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7ff ff4b 	bl	8002746 <modify_reg>
 80028b0:	4603      	mov	r3, r0
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	cccccccd 	.word	0xcccccccd

080028c0 <max17048_set_overvolted_voltage>:
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	460b      	mov	r3, r1
 80028ca:	807b      	strh	r3, [r7, #2]
 80028cc:	887b      	ldrh	r3, [r7, #2]
 80028ce:	4a09      	ldr	r2, [pc, #36]	; (80028f4 <max17048_set_overvolted_voltage+0x34>)
 80028d0:	fba2 2303 	umull	r2, r3, r2, r3
 80028d4:	091b      	lsrs	r3, r3, #4
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	81fb      	strh	r3, [r7, #14]
 80028dc:	89fa      	ldrh	r2, [r7, #14]
 80028de:	23ff      	movs	r3, #255	; 0xff
 80028e0:	2114      	movs	r1, #20
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff ff2f 	bl	8002746 <modify_reg>
 80028e8:	4603      	mov	r3, r0
 80028ea:	4618      	mov	r0, r3
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	cccccccd 	.word	0xcccccccd

080028f8 <max17048_set_reset_voltage>:
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	460b      	mov	r3, r1
 8002902:	807b      	strh	r3, [r7, #2]
 8002904:	887b      	ldrh	r3, [r7, #2]
 8002906:	4a0c      	ldr	r2, [pc, #48]	; (8002938 <max17048_set_reset_voltage+0x40>)
 8002908:	fba2 2303 	umull	r2, r3, r2, r3
 800290c:	095b      	lsrs	r3, r3, #5
 800290e:	b29b      	uxth	r3, r3
 8002910:	025b      	lsls	r3, r3, #9
 8002912:	b29b      	uxth	r3, r3
 8002914:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002918:	f023 0301 	bic.w	r3, r3, #1
 800291c:	81fb      	strh	r3, [r7, #14]
 800291e:	89fa      	ldrh	r2, [r7, #14]
 8002920:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 8002924:	2118      	movs	r1, #24
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7ff ff0d 	bl	8002746 <modify_reg>
 800292c:	4603      	mov	r3, r0
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	cccccccd 	.word	0xcccccccd

0800293c <max17048_set_soc_change_alert>:
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	460b      	mov	r3, r1
 8002946:	70fb      	strb	r3, [r7, #3]
 8002948:	78fb      	ldrb	r3, [r7, #3]
 800294a:	019b      	lsls	r3, r3, #6
 800294c:	b29b      	uxth	r3, r3
 800294e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002952:	81fb      	strh	r3, [r7, #14]
 8002954:	89fa      	ldrh	r2, [r7, #14]
 8002956:	2340      	movs	r3, #64	; 0x40
 8002958:	210c      	movs	r1, #12
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7ff fef3 	bl	8002746 <modify_reg>
 8002960:	4603      	mov	r3, r0
 8002962:	4618      	mov	r0, r3
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <max17048_set_voltage_reset_alert>:
 800296a:	b580      	push	{r7, lr}
 800296c:	b084      	sub	sp, #16
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
 8002972:	460b      	mov	r3, r1
 8002974:	70fb      	strb	r3, [r7, #3]
 8002976:	78fb      	ldrb	r3, [r7, #3]
 8002978:	039b      	lsls	r3, r3, #14
 800297a:	b29b      	uxth	r3, r3
 800297c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002980:	81fb      	strh	r3, [r7, #14]
 8002982:	89fa      	ldrh	r2, [r7, #14]
 8002984:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002988:	211a      	movs	r1, #26
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7ff fedb 	bl	8002746 <modify_reg>
 8002990:	4603      	mov	r3, r0
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <max17048_clear_alerts>:
 800299a:	b580      	push	{r7, lr}
 800299c:	b084      	sub	sp, #16
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
 80029a2:	2301      	movs	r3, #1
 80029a4:	73fb      	strb	r3, [r7, #15]
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d008      	beq.n	80029be <max17048_clear_alerts+0x24>
 80029ac:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 80029b0:	2200      	movs	r2, #0
 80029b2:	211a      	movs	r1, #26
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f7ff fec6 	bl	8002746 <modify_reg>
 80029ba:	4603      	mov	r3, r0
 80029bc:	73fb      	strb	r3, [r7, #15]
 80029be:	7bfb      	ldrb	r3, [r7, #15]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d007      	beq.n	80029d4 <max17048_clear_alerts+0x3a>
 80029c4:	2320      	movs	r3, #32
 80029c6:	2200      	movs	r2, #0
 80029c8:	210c      	movs	r1, #12
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7ff febb 	bl	8002746 <modify_reg>
 80029d0:	4603      	mov	r3, r0
 80029d2:	73fb      	strb	r3, [r7, #15]
 80029d4:	7bfb      	ldrb	r3, [r7, #15]
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
	...

080029e0 <HAL_MspInit>:
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4b0f      	ldr	r3, [pc, #60]	; (8002a24 <HAL_MspInit+0x44>)
 80029e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ea:	4a0e      	ldr	r2, [pc, #56]	; (8002a24 <HAL_MspInit+0x44>)
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	6613      	str	r3, [r2, #96]	; 0x60
 80029f2:	4b0c      	ldr	r3, [pc, #48]	; (8002a24 <HAL_MspInit+0x44>)
 80029f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	607b      	str	r3, [r7, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <HAL_MspInit+0x44>)
 8002a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a02:	4a08      	ldr	r2, [pc, #32]	; (8002a24 <HAL_MspInit+0x44>)
 8002a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a08:	6593      	str	r3, [r2, #88]	; 0x58
 8002a0a:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <HAL_MspInit+0x44>)
 8002a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a12:	603b      	str	r3, [r7, #0]
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	40021000 	.word	0x40021000

08002a28 <HAL_ADC_MspInit>:
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b0a0      	sub	sp, #128	; 0x80
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	605a      	str	r2, [r3, #4]
 8002a3a:	609a      	str	r2, [r3, #8]
 8002a3c:	60da      	str	r2, [r3, #12]
 8002a3e:	611a      	str	r2, [r3, #16]
 8002a40:	f107 0310 	add.w	r3, r7, #16
 8002a44:	225c      	movs	r2, #92	; 0x5c
 8002a46:	2100      	movs	r1, #0
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f005 fb33 	bl	80080b4 <memset>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a1e      	ldr	r2, [pc, #120]	; (8002acc <HAL_ADC_MspInit+0xa4>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d134      	bne.n	8002ac2 <HAL_ADC_MspInit+0x9a>
 8002a58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a5c:	613b      	str	r3, [r7, #16]
 8002a5e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002a62:	663b      	str	r3, [r7, #96]	; 0x60
 8002a64:	f107 0310 	add.w	r3, r7, #16
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f003 fd89 	bl	8006580 <HAL_RCCEx_PeriphCLKConfig>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <HAL_ADC_MspInit+0x50>
 8002a74:	f7ff fddc 	bl	8002630 <Error_Handler>
 8002a78:	4b15      	ldr	r3, [pc, #84]	; (8002ad0 <HAL_ADC_MspInit+0xa8>)
 8002a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7c:	4a14      	ldr	r2, [pc, #80]	; (8002ad0 <HAL_ADC_MspInit+0xa8>)
 8002a7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a84:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <HAL_ADC_MspInit+0xa8>)
 8002a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	4b0f      	ldr	r3, [pc, #60]	; (8002ad0 <HAL_ADC_MspInit+0xa8>)
 8002a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a94:	4a0e      	ldr	r2, [pc, #56]	; (8002ad0 <HAL_ADC_MspInit+0xa8>)
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ad0 <HAL_ADC_MspInit+0xa8>)
 8002a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	2310      	movs	r3, #16
 8002aaa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002aac:	230b      	movs	r3, #11
 8002aae:	673b      	str	r3, [r7, #112]	; 0x70
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	677b      	str	r3, [r7, #116]	; 0x74
 8002ab4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ab8:	4619      	mov	r1, r3
 8002aba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002abe:	f001 fec1 	bl	8004844 <HAL_GPIO_Init>
 8002ac2:	bf00      	nop
 8002ac4:	3780      	adds	r7, #128	; 0x80
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	50040000 	.word	0x50040000
 8002ad0:	40021000 	.word	0x40021000

08002ad4 <HAL_I2C_MspInit>:
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b0a0      	sub	sp, #128	; 0x80
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	605a      	str	r2, [r3, #4]
 8002ae6:	609a      	str	r2, [r3, #8]
 8002ae8:	60da      	str	r2, [r3, #12]
 8002aea:	611a      	str	r2, [r3, #16]
 8002aec:	f107 0310 	add.w	r3, r7, #16
 8002af0:	225c      	movs	r2, #92	; 0x5c
 8002af2:	2100      	movs	r1, #0
 8002af4:	4618      	mov	r0, r3
 8002af6:	f005 fadd 	bl	80080b4 <memset>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a1f      	ldr	r2, [pc, #124]	; (8002b7c <HAL_I2C_MspInit+0xa8>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d137      	bne.n	8002b74 <HAL_I2C_MspInit+0xa0>
 8002b04:	2340      	movs	r3, #64	; 0x40
 8002b06:	613b      	str	r3, [r7, #16]
 8002b08:	2300      	movs	r3, #0
 8002b0a:	643b      	str	r3, [r7, #64]	; 0x40
 8002b0c:	f107 0310 	add.w	r3, r7, #16
 8002b10:	4618      	mov	r0, r3
 8002b12:	f003 fd35 	bl	8006580 <HAL_RCCEx_PeriphCLKConfig>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <HAL_I2C_MspInit+0x4c>
 8002b1c:	f7ff fd88 	bl	8002630 <Error_Handler>
 8002b20:	4b17      	ldr	r3, [pc, #92]	; (8002b80 <HAL_I2C_MspInit+0xac>)
 8002b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b24:	4a16      	ldr	r2, [pc, #88]	; (8002b80 <HAL_I2C_MspInit+0xac>)
 8002b26:	f043 0301 	orr.w	r3, r3, #1
 8002b2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b2c:	4b14      	ldr	r3, [pc, #80]	; (8002b80 <HAL_I2C_MspInit+0xac>)
 8002b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002b3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b3e:	2312      	movs	r3, #18
 8002b40:	673b      	str	r3, [r7, #112]	; 0x70
 8002b42:	2300      	movs	r3, #0
 8002b44:	677b      	str	r3, [r7, #116]	; 0x74
 8002b46:	2303      	movs	r3, #3
 8002b48:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b4a:	2304      	movs	r3, #4
 8002b4c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b4e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002b52:	4619      	mov	r1, r3
 8002b54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b58:	f001 fe74 	bl	8004844 <HAL_GPIO_Init>
 8002b5c:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <HAL_I2C_MspInit+0xac>)
 8002b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b60:	4a07      	ldr	r2, [pc, #28]	; (8002b80 <HAL_I2C_MspInit+0xac>)
 8002b62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b66:	6593      	str	r3, [r2, #88]	; 0x58
 8002b68:	4b05      	ldr	r3, [pc, #20]	; (8002b80 <HAL_I2C_MspInit+0xac>)
 8002b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b70:	60bb      	str	r3, [r7, #8]
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	bf00      	nop
 8002b76:	3780      	adds	r7, #128	; 0x80
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40005400 	.word	0x40005400
 8002b80:	40021000 	.word	0x40021000

08002b84 <HAL_TIM_Base_MspInit>:
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a23      	ldr	r2, [pc, #140]	; (8002c20 <HAL_TIM_Base_MspInit+0x9c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d114      	bne.n	8002bc0 <HAL_TIM_Base_MspInit+0x3c>
 8002b96:	4b23      	ldr	r3, [pc, #140]	; (8002c24 <HAL_TIM_Base_MspInit+0xa0>)
 8002b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b9a:	4a22      	ldr	r2, [pc, #136]	; (8002c24 <HAL_TIM_Base_MspInit+0xa0>)
 8002b9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ba0:	6613      	str	r3, [r2, #96]	; 0x60
 8002ba2:	4b20      	ldr	r3, [pc, #128]	; (8002c24 <HAL_TIM_Base_MspInit+0xa0>)
 8002ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ba6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002baa:	617b      	str	r3, [r7, #20]
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	2018      	movs	r0, #24
 8002bb4:	f001 fe0f 	bl	80047d6 <HAL_NVIC_SetPriority>
 8002bb8:	2018      	movs	r0, #24
 8002bba:	f001 fe28 	bl	800480e <HAL_NVIC_EnableIRQ>
 8002bbe:	e02a      	b.n	8002c16 <HAL_TIM_Base_MspInit+0x92>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bc8:	d10c      	bne.n	8002be4 <HAL_TIM_Base_MspInit+0x60>
 8002bca:	4b16      	ldr	r3, [pc, #88]	; (8002c24 <HAL_TIM_Base_MspInit+0xa0>)
 8002bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bce:	4a15      	ldr	r2, [pc, #84]	; (8002c24 <HAL_TIM_Base_MspInit+0xa0>)
 8002bd0:	f043 0301 	orr.w	r3, r3, #1
 8002bd4:	6593      	str	r3, [r2, #88]	; 0x58
 8002bd6:	4b13      	ldr	r3, [pc, #76]	; (8002c24 <HAL_TIM_Base_MspInit+0xa0>)
 8002bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	613b      	str	r3, [r7, #16]
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	e018      	b.n	8002c16 <HAL_TIM_Base_MspInit+0x92>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a0f      	ldr	r2, [pc, #60]	; (8002c28 <HAL_TIM_Base_MspInit+0xa4>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d113      	bne.n	8002c16 <HAL_TIM_Base_MspInit+0x92>
 8002bee:	4b0d      	ldr	r3, [pc, #52]	; (8002c24 <HAL_TIM_Base_MspInit+0xa0>)
 8002bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf2:	4a0c      	ldr	r2, [pc, #48]	; (8002c24 <HAL_TIM_Base_MspInit+0xa0>)
 8002bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf8:	6613      	str	r3, [r2, #96]	; 0x60
 8002bfa:	4b0a      	ldr	r3, [pc, #40]	; (8002c24 <HAL_TIM_Base_MspInit+0xa0>)
 8002bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	2100      	movs	r1, #0
 8002c0a:	2018      	movs	r0, #24
 8002c0c:	f001 fde3 	bl	80047d6 <HAL_NVIC_SetPriority>
 8002c10:	2018      	movs	r0, #24
 8002c12:	f001 fdfc 	bl	800480e <HAL_NVIC_EnableIRQ>
 8002c16:	bf00      	nop
 8002c18:	3718      	adds	r7, #24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40012c00 	.word	0x40012c00
 8002c24:	40021000 	.word	0x40021000
 8002c28:	40014000 	.word	0x40014000

08002c2c <HAL_TIM_MspPostInit>:
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b08a      	sub	sp, #40	; 0x28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	f107 0314 	add.w	r3, r7, #20
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	605a      	str	r2, [r3, #4]
 8002c3e:	609a      	str	r2, [r3, #8]
 8002c40:	60da      	str	r2, [r3, #12]
 8002c42:	611a      	str	r2, [r3, #16]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a23      	ldr	r2, [pc, #140]	; (8002cd8 <HAL_TIM_MspPostInit+0xac>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d11e      	bne.n	8002c8c <HAL_TIM_MspPostInit+0x60>
 8002c4e:	4b23      	ldr	r3, [pc, #140]	; (8002cdc <HAL_TIM_MspPostInit+0xb0>)
 8002c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c52:	4a22      	ldr	r2, [pc, #136]	; (8002cdc <HAL_TIM_MspPostInit+0xb0>)
 8002c54:	f043 0301 	orr.w	r3, r3, #1
 8002c58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c5a:	4b20      	ldr	r3, [pc, #128]	; (8002cdc <HAL_TIM_MspPostInit+0xb0>)
 8002c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	613b      	str	r3, [r7, #16]
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c6a:	617b      	str	r3, [r7, #20]
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	61bb      	str	r3, [r7, #24]
 8002c70:	2300      	movs	r3, #0
 8002c72:	61fb      	str	r3, [r7, #28]
 8002c74:	2300      	movs	r3, #0
 8002c76:	623b      	str	r3, [r7, #32]
 8002c78:	2301      	movs	r3, #1
 8002c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c7c:	f107 0314 	add.w	r3, r7, #20
 8002c80:	4619      	mov	r1, r3
 8002c82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c86:	f001 fddd 	bl	8004844 <HAL_GPIO_Init>
 8002c8a:	e021      	b.n	8002cd0 <HAL_TIM_MspPostInit+0xa4>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c94:	d11c      	bne.n	8002cd0 <HAL_TIM_MspPostInit+0xa4>
 8002c96:	4b11      	ldr	r3, [pc, #68]	; (8002cdc <HAL_TIM_MspPostInit+0xb0>)
 8002c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c9a:	4a10      	ldr	r2, [pc, #64]	; (8002cdc <HAL_TIM_MspPostInit+0xb0>)
 8002c9c:	f043 0301 	orr.w	r3, r3, #1
 8002ca0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ca2:	4b0e      	ldr	r3, [pc, #56]	; (8002cdc <HAL_TIM_MspPostInit+0xb0>)
 8002ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2307      	movs	r3, #7
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	61bb      	str	r3, [r7, #24]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61fb      	str	r3, [r7, #28]
 8002cba:	2300      	movs	r3, #0
 8002cbc:	623b      	str	r3, [r7, #32]
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002cc2:	f107 0314 	add.w	r3, r7, #20
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ccc:	f001 fdba 	bl	8004844 <HAL_GPIO_Init>
 8002cd0:	bf00      	nop
 8002cd2:	3728      	adds	r7, #40	; 0x28
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40012c00 	.word	0x40012c00
 8002cdc:	40021000 	.word	0x40021000

08002ce0 <NMI_Handler>:
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	e7fe      	b.n	8002ce4 <NMI_Handler+0x4>

08002ce6 <HardFault_Handler>:
 8002ce6:	b480      	push	{r7}
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	e7fe      	b.n	8002cea <HardFault_Handler+0x4>

08002cec <MemManage_Handler>:
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	e7fe      	b.n	8002cf0 <MemManage_Handler+0x4>

08002cf2 <BusFault_Handler>:
 8002cf2:	b480      	push	{r7}
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	e7fe      	b.n	8002cf6 <BusFault_Handler+0x4>

08002cf8 <UsageFault_Handler>:
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	e7fe      	b.n	8002cfc <UsageFault_Handler+0x4>

08002cfe <SVC_Handler>:
 8002cfe:	b480      	push	{r7}
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	bf00      	nop
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <DebugMon_Handler>:
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	bf00      	nop
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <PendSV_Handler>:
 8002d1a:	b480      	push	{r7}
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	bf00      	nop
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <SysTick_Handler>:
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	f000 f976 	bl	800301c <HAL_IncTick>
 8002d30:	bf00      	nop
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <EXTI9_5_IRQHandler>:
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	2080      	movs	r0, #128	; 0x80
 8002d3a:	f001 ff2d 	bl	8004b98 <HAL_GPIO_EXTI_IRQHandler>
 8002d3e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002d42:	f001 ff29 	bl	8004b98 <HAL_GPIO_EXTI_IRQHandler>
 8002d46:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002d4a:	f001 ff25 	bl	8004b98 <HAL_GPIO_EXTI_IRQHandler>
 8002d4e:	bf00      	nop
 8002d50:	bd80      	pop	{r7, pc}
	...

08002d54 <TIM1_BRK_TIM15_IRQHandler>:
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	4803      	ldr	r0, [pc, #12]	; (8002d68 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8002d5a:	f004 f9bd 	bl	80070d8 <HAL_TIM_IRQHandler>
 8002d5e:	4803      	ldr	r0, [pc, #12]	; (8002d6c <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8002d60:	f004 f9ba 	bl	80070d8 <HAL_TIM_IRQHandler>
 8002d64:	bf00      	nop
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	20000348 	.word	0x20000348
 8002d6c:	200003e0 	.word	0x200003e0

08002d70 <_getpid>:
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	2301      	movs	r3, #1
 8002d76:	4618      	mov	r0, r3
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <_kill>:
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
 8002d8a:	f005 f969 	bl	8008060 <__errno>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2216      	movs	r2, #22
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	f04f 33ff 	mov.w	r3, #4294967295
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <_exit>:
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f7ff ffe7 	bl	8002d80 <_kill>
 8002db2:	e7fe      	b.n	8002db2 <_exit+0x12>

08002db4 <_read>:
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	e00a      	b.n	8002ddc <_read+0x28>
 8002dc6:	f3af 8000 	nop.w
 8002dca:	4601      	mov	r1, r0
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	1c5a      	adds	r2, r3, #1
 8002dd0:	60ba      	str	r2, [r7, #8]
 8002dd2:	b2ca      	uxtb	r2, r1
 8002dd4:	701a      	strb	r2, [r3, #0]
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	617b      	str	r3, [r7, #20]
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	dbf0      	blt.n	8002dc6 <_read+0x12>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4618      	mov	r0, r3
 8002de8:	3718      	adds	r7, #24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <_write>:
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b086      	sub	sp, #24
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	60f8      	str	r0, [r7, #12]
 8002df6:	60b9      	str	r1, [r7, #8]
 8002df8:	607a      	str	r2, [r7, #4]
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	617b      	str	r3, [r7, #20]
 8002dfe:	e009      	b.n	8002e14 <_write+0x26>
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	60ba      	str	r2, [r7, #8]
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f3af 8000 	nop.w
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	3301      	adds	r3, #1
 8002e12:	617b      	str	r3, [r7, #20]
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	dbf1      	blt.n	8002e00 <_write+0x12>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <_close>:
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e32:	4618      	mov	r0, r3
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <_fstat>:
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	6039      	str	r1, [r7, #0]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e4e:	605a      	str	r2, [r3, #4]
 8002e50:	2300      	movs	r3, #0
 8002e52:	4618      	mov	r0, r3
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <_isatty>:
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
 8002e66:	2301      	movs	r3, #1
 8002e68:	4618      	mov	r0, r3
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <_lseek>:
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
 8002e80:	2300      	movs	r3, #0
 8002e82:	4618      	mov	r0, r3
 8002e84:	3714      	adds	r7, #20
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
	...

08002e90 <_sbrk>:
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	4a14      	ldr	r2, [pc, #80]	; (8002eec <_sbrk+0x5c>)
 8002e9a:	4b15      	ldr	r3, [pc, #84]	; (8002ef0 <_sbrk+0x60>)
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	617b      	str	r3, [r7, #20]
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	613b      	str	r3, [r7, #16]
 8002ea4:	4b13      	ldr	r3, [pc, #76]	; (8002ef4 <_sbrk+0x64>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d102      	bne.n	8002eb2 <_sbrk+0x22>
 8002eac:	4b11      	ldr	r3, [pc, #68]	; (8002ef4 <_sbrk+0x64>)
 8002eae:	4a12      	ldr	r2, [pc, #72]	; (8002ef8 <_sbrk+0x68>)
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	4b10      	ldr	r3, [pc, #64]	; (8002ef4 <_sbrk+0x64>)
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4413      	add	r3, r2
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d207      	bcs.n	8002ed0 <_sbrk+0x40>
 8002ec0:	f005 f8ce 	bl	8008060 <__errno>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	220c      	movs	r2, #12
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	f04f 33ff 	mov.w	r3, #4294967295
 8002ece:	e009      	b.n	8002ee4 <_sbrk+0x54>
 8002ed0:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <_sbrk+0x64>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	4b07      	ldr	r3, [pc, #28]	; (8002ef4 <_sbrk+0x64>)
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4413      	add	r3, r2
 8002ede:	4a05      	ldr	r2, [pc, #20]	; (8002ef4 <_sbrk+0x64>)
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3718      	adds	r7, #24
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	20010000 	.word	0x20010000
 8002ef0:	00000400 	.word	0x00000400
 8002ef4:	20000438 	.word	0x20000438
 8002ef8:	20000450 	.word	0x20000450

08002efc <SystemInit>:
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	4b06      	ldr	r3, [pc, #24]	; (8002f1c <SystemInit+0x20>)
 8002f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f06:	4a05      	ldr	r2, [pc, #20]	; (8002f1c <SystemInit+0x20>)
 8002f08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002f10:	bf00      	nop
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	e000ed00 	.word	0xe000ed00

08002f20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002f20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f58 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f24:	f7ff ffea 	bl	8002efc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f28:	480c      	ldr	r0, [pc, #48]	; (8002f5c <LoopForever+0x6>)
  ldr r1, =_edata
 8002f2a:	490d      	ldr	r1, [pc, #52]	; (8002f60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f2c:	4a0d      	ldr	r2, [pc, #52]	; (8002f64 <LoopForever+0xe>)
  movs r3, #0
 8002f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f30:	e002      	b.n	8002f38 <LoopCopyDataInit>

08002f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f36:	3304      	adds	r3, #4

08002f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f3c:	d3f9      	bcc.n	8002f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f3e:	4a0a      	ldr	r2, [pc, #40]	; (8002f68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f40:	4c0a      	ldr	r4, [pc, #40]	; (8002f6c <LoopForever+0x16>)
  movs r3, #0
 8002f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f44:	e001      	b.n	8002f4a <LoopFillZerobss>

08002f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f48:	3204      	adds	r2, #4

08002f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f4c:	d3fb      	bcc.n	8002f46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f4e:	f005 f88d 	bl	800806c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f52:	f7fe fea9 	bl	8001ca8 <main>

08002f56 <LoopForever>:

LoopForever:
    b LoopForever
 8002f56:	e7fe      	b.n	8002f56 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002f58:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f60:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002f64:	0800d2a4 	.word	0x0800d2a4
  ldr r2, =_sbss
 8002f68:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002f6c:	20000450 	.word	0x20000450

08002f70 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f70:	e7fe      	b.n	8002f70 <ADC1_IRQHandler>

08002f72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b082      	sub	sp, #8
 8002f76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f7c:	2003      	movs	r0, #3
 8002f7e:	f001 fc1f 	bl	80047c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f82:	200f      	movs	r0, #15
 8002f84:	f000 f80e 	bl	8002fa4 <HAL_InitTick>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d002      	beq.n	8002f94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	71fb      	strb	r3, [r7, #7]
 8002f92:	e001      	b.n	8002f98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f94:	f7ff fd24 	bl	80029e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f98:	79fb      	ldrb	r3, [r7, #7]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
	...

08002fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002fac:	2300      	movs	r3, #0
 8002fae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002fb0:	4b17      	ldr	r3, [pc, #92]	; (8003010 <HAL_InitTick+0x6c>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d023      	beq.n	8003000 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002fb8:	4b16      	ldr	r3, [pc, #88]	; (8003014 <HAL_InitTick+0x70>)
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	4b14      	ldr	r3, [pc, #80]	; (8003010 <HAL_InitTick+0x6c>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f001 fc2b 	bl	800482a <HAL_SYSTICK_Config>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10f      	bne.n	8002ffa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b0f      	cmp	r3, #15
 8002fde:	d809      	bhi.n	8002ff4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fe8:	f001 fbf5 	bl	80047d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002fec:	4a0a      	ldr	r2, [pc, #40]	; (8003018 <HAL_InitTick+0x74>)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6013      	str	r3, [r2, #0]
 8002ff2:	e007      	b.n	8003004 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	73fb      	strb	r3, [r7, #15]
 8002ff8:	e004      	b.n	8003004 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	73fb      	strb	r3, [r7, #15]
 8002ffe:	e001      	b.n	8003004 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003004:	7bfb      	ldrb	r3, [r7, #15]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	20000014 	.word	0x20000014
 8003014:	2000000c 	.word	0x2000000c
 8003018:	20000010 	.word	0x20000010

0800301c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003020:	4b06      	ldr	r3, [pc, #24]	; (800303c <HAL_IncTick+0x20>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	461a      	mov	r2, r3
 8003026:	4b06      	ldr	r3, [pc, #24]	; (8003040 <HAL_IncTick+0x24>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4413      	add	r3, r2
 800302c:	4a04      	ldr	r2, [pc, #16]	; (8003040 <HAL_IncTick+0x24>)
 800302e:	6013      	str	r3, [r2, #0]
}
 8003030:	bf00      	nop
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	20000014 	.word	0x20000014
 8003040:	2000043c 	.word	0x2000043c

08003044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  return uwTick;
 8003048:	4b03      	ldr	r3, [pc, #12]	; (8003058 <HAL_GetTick+0x14>)
 800304a:	681b      	ldr	r3, [r3, #0]
}
 800304c:	4618      	mov	r0, r3
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	2000043c 	.word	0x2000043c

0800305c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003064:	f7ff ffee 	bl	8003044 <HAL_GetTick>
 8003068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003074:	d005      	beq.n	8003082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003076:	4b0a      	ldr	r3, [pc, #40]	; (80030a0 <HAL_Delay+0x44>)
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	461a      	mov	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4413      	add	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003082:	bf00      	nop
 8003084:	f7ff ffde 	bl	8003044 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	429a      	cmp	r2, r3
 8003092:	d8f7      	bhi.n	8003084 <HAL_Delay+0x28>
  {
  }
}
 8003094:	bf00      	nop
 8003096:	bf00      	nop
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	20000014 	.word	0x20000014

080030a4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80030a8:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <HAL_SuspendTick+0x1c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a04      	ldr	r2, [pc, #16]	; (80030c0 <HAL_SuspendTick+0x1c>)
 80030ae:	f023 0302 	bic.w	r3, r3, #2
 80030b2:	6013      	str	r3, [r2, #0]
}
 80030b4:	bf00      	nop
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	e000e010 	.word	0xe000e010

080030c4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80030c8:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <HAL_ResumeTick+0x1c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a04      	ldr	r2, [pc, #16]	; (80030e0 <HAL_ResumeTick+0x1c>)
 80030ce:	f043 0302 	orr.w	r3, r3, #2
 80030d2:	6013      	str	r3, [r2, #0]
}
 80030d4:	bf00      	nop
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	e000e010 	.word	0xe000e010

080030e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	431a      	orrs	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	609a      	str	r2, [r3, #8]
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr

0800310a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800310a:	b480      	push	{r7}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
 8003112:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	609a      	str	r2, [r3, #8]
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003140:	4618      	mov	r0, r3
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800314c:	b480      	push	{r7}
 800314e:	b087      	sub	sp, #28
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
 8003158:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	3360      	adds	r3, #96	; 0x60
 800315e:	461a      	mov	r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	4b08      	ldr	r3, [pc, #32]	; (8003190 <LL_ADC_SetOffset+0x44>)
 800316e:	4013      	ands	r3, r2
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	4313      	orrs	r3, r2
 800317c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003184:	bf00      	nop
 8003186:	371c      	adds	r7, #28
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	03fff000 	.word	0x03fff000

08003194 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	3360      	adds	r3, #96	; 0x60
 80031a2:	461a      	mov	r2, r3
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b087      	sub	sp, #28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	3360      	adds	r3, #96	; 0x60
 80031d0:	461a      	mov	r2, r3
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	431a      	orrs	r2, r3
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80031ea:	bf00      	nop
 80031ec:	371c      	adds	r7, #28
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800321c:	b480      	push	{r7}
 800321e:	b087      	sub	sp, #28
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	3330      	adds	r3, #48	; 0x30
 800322c:	461a      	mov	r2, r3
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	0a1b      	lsrs	r3, r3, #8
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	f003 030c 	and.w	r3, r3, #12
 8003238:	4413      	add	r3, r2
 800323a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	f003 031f 	and.w	r3, r3, #31
 8003246:	211f      	movs	r1, #31
 8003248:	fa01 f303 	lsl.w	r3, r1, r3
 800324c:	43db      	mvns	r3, r3
 800324e:	401a      	ands	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	0e9b      	lsrs	r3, r3, #26
 8003254:	f003 011f 	and.w	r1, r3, #31
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	f003 031f 	and.w	r3, r3, #31
 800325e:	fa01 f303 	lsl.w	r3, r1, r3
 8003262:	431a      	orrs	r2, r3
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003268:	bf00      	nop
 800326a:	371c      	adds	r7, #28
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003274:	b480      	push	{r7}
 8003276:	b087      	sub	sp, #28
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	3314      	adds	r3, #20
 8003284:	461a      	mov	r2, r3
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	0e5b      	lsrs	r3, r3, #25
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	4413      	add	r3, r2
 8003292:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	0d1b      	lsrs	r3, r3, #20
 800329c:	f003 031f 	and.w	r3, r3, #31
 80032a0:	2107      	movs	r1, #7
 80032a2:	fa01 f303 	lsl.w	r3, r1, r3
 80032a6:	43db      	mvns	r3, r3
 80032a8:	401a      	ands	r2, r3
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	0d1b      	lsrs	r3, r3, #20
 80032ae:	f003 031f 	and.w	r3, r3, #31
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	fa01 f303 	lsl.w	r3, r1, r3
 80032b8:	431a      	orrs	r2, r3
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80032be:	bf00      	nop
 80032c0:	371c      	adds	r7, #28
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
	...

080032cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032e4:	43db      	mvns	r3, r3
 80032e6:	401a      	ands	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f003 0318 	and.w	r3, r3, #24
 80032ee:	4908      	ldr	r1, [pc, #32]	; (8003310 <LL_ADC_SetChannelSingleDiff+0x44>)
 80032f0:	40d9      	lsrs	r1, r3
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	400b      	ands	r3, r1
 80032f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032fa:	431a      	orrs	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003302:	bf00      	nop
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	0007ffff 	.word	0x0007ffff

08003314 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003324:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6093      	str	r3, [r2, #8]
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003348:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800334c:	d101      	bne.n	8003352 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800334e:	2301      	movs	r3, #1
 8003350:	e000      	b.n	8003354 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003370:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003374:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003398:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800339c:	d101      	bne.n	80033a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800339e:	2301      	movs	r3, #1
 80033a0:	e000      	b.n	80033a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80033c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033c4:	f043 0201 	orr.w	r2, r3, #1
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80033e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033ec:	f043 0202 	orr.w	r2, r3, #2
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b01      	cmp	r3, #1
 8003412:	d101      	bne.n	8003418 <LL_ADC_IsEnabled+0x18>
 8003414:	2301      	movs	r3, #1
 8003416:	e000      	b.n	800341a <LL_ADC_IsEnabled+0x1a>
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003426:	b480      	push	{r7}
 8003428:	b083      	sub	sp, #12
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b02      	cmp	r3, #2
 8003438:	d101      	bne.n	800343e <LL_ADC_IsDisableOngoing+0x18>
 800343a:	2301      	movs	r3, #1
 800343c:	e000      	b.n	8003440 <LL_ADC_IsDisableOngoing+0x1a>
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800345c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003460:	f043 0204 	orr.w	r2, r3, #4
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003484:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003488:	f043 0210 	orr.w	r2, r3, #16
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	d101      	bne.n	80034b4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80034b0:	2301      	movs	r3, #1
 80034b2:	e000      	b.n	80034b6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b083      	sub	sp, #12
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80034d6:	f043 0220 	orr.w	r2, r3, #32
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b083      	sub	sp, #12
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 0308 	and.w	r3, r3, #8
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d101      	bne.n	8003502 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80034fe:	2301      	movs	r3, #1
 8003500:	e000      	b.n	8003504 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003518:	2300      	movs	r3, #0
 800351a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800351c:	2300      	movs	r3, #0
 800351e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e12c      	b.n	8003784 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003534:	2b00      	cmp	r3, #0
 8003536:	d109      	bne.n	800354c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f7ff fa75 	bl	8002a28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4618      	mov	r0, r3
 8003552:	f7ff fef1 	bl	8003338 <LL_ADC_IsDeepPowerDownEnabled>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d004      	beq.n	8003566 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff fed7 	bl	8003314 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff ff0c 	bl	8003388 <LL_ADC_IsInternalRegulatorEnabled>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d115      	bne.n	80035a2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff fef0 	bl	8003360 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003580:	4b82      	ldr	r3, [pc, #520]	; (800378c <HAL_ADC_Init+0x27c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	099b      	lsrs	r3, r3, #6
 8003586:	4a82      	ldr	r2, [pc, #520]	; (8003790 <HAL_ADC_Init+0x280>)
 8003588:	fba2 2303 	umull	r2, r3, r2, r3
 800358c:	099b      	lsrs	r3, r3, #6
 800358e:	3301      	adds	r3, #1
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003594:	e002      	b.n	800359c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	3b01      	subs	r3, #1
 800359a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f9      	bne.n	8003596 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff feee 	bl	8003388 <LL_ADC_IsInternalRegulatorEnabled>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10d      	bne.n	80035ce <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b6:	f043 0210 	orr.w	r2, r3, #16
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c2:	f043 0201 	orr.w	r2, r3, #1
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff ff62 	bl	800349c <LL_ADC_REG_IsConversionOngoing>
 80035d8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035de:	f003 0310 	and.w	r3, r3, #16
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f040 80c5 	bne.w	8003772 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f040 80c1 	bne.w	8003772 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80035f8:	f043 0202 	orr.w	r2, r3, #2
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4618      	mov	r0, r3
 8003606:	f7ff fefb 	bl	8003400 <LL_ADC_IsEnabled>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d10b      	bne.n	8003628 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003610:	4860      	ldr	r0, [pc, #384]	; (8003794 <HAL_ADC_Init+0x284>)
 8003612:	f7ff fef5 	bl	8003400 <LL_ADC_IsEnabled>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d105      	bne.n	8003628 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	4619      	mov	r1, r3
 8003622:	485d      	ldr	r0, [pc, #372]	; (8003798 <HAL_ADC_Init+0x288>)
 8003624:	f7ff fd5e 	bl	80030e4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	7e5b      	ldrb	r3, [r3, #25]
 800362c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003632:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003638:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800363e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003646:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003648:	4313      	orrs	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d106      	bne.n	8003664 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	3b01      	subs	r3, #1
 800365c:	045b      	lsls	r3, r3, #17
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	4313      	orrs	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003668:	2b00      	cmp	r3, #0
 800366a:	d009      	beq.n	8003680 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003670:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003678:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	4313      	orrs	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68da      	ldr	r2, [r3, #12]
 8003686:	4b45      	ldr	r3, [pc, #276]	; (800379c <HAL_ADC_Init+0x28c>)
 8003688:	4013      	ands	r3, r2
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6812      	ldr	r2, [r2, #0]
 800368e:	69b9      	ldr	r1, [r7, #24]
 8003690:	430b      	orrs	r3, r1
 8003692:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff feff 	bl	800349c <LL_ADC_REG_IsConversionOngoing>
 800369e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff ff20 	bl	80034ea <LL_ADC_INJ_IsConversionOngoing>
 80036aa:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d13d      	bne.n	800372e <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d13a      	bne.n	800372e <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80036bc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80036c4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80036c6:	4313      	orrs	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036d4:	f023 0302 	bic.w	r3, r3, #2
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	6812      	ldr	r2, [r2, #0]
 80036dc:	69b9      	ldr	r1, [r7, #24]
 80036de:	430b      	orrs	r3, r1
 80036e0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d118      	bne.n	800371e <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80036f6:	f023 0304 	bic.w	r3, r3, #4
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003702:	4311      	orrs	r1, r2
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003708:	4311      	orrs	r1, r2
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800370e:	430a      	orrs	r2, r1
 8003710:	431a      	orrs	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f042 0201 	orr.w	r2, r2, #1
 800371a:	611a      	str	r2, [r3, #16]
 800371c:	e007      	b.n	800372e <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	691a      	ldr	r2, [r3, #16]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 0201 	bic.w	r2, r2, #1
 800372c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d10c      	bne.n	8003750 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373c:	f023 010f 	bic.w	r1, r3, #15
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	1e5a      	subs	r2, r3, #1
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	631a      	str	r2, [r3, #48]	; 0x30
 800374e:	e007      	b.n	8003760 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 020f 	bic.w	r2, r2, #15
 800375e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003764:	f023 0303 	bic.w	r3, r3, #3
 8003768:	f043 0201 	orr.w	r2, r3, #1
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	655a      	str	r2, [r3, #84]	; 0x54
 8003770:	e007      	b.n	8003782 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003776:	f043 0210 	orr.w	r2, r3, #16
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003782:	7ffb      	ldrb	r3, [r7, #31]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3720      	adds	r7, #32
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	2000000c 	.word	0x2000000c
 8003790:	053e2d63 	.word	0x053e2d63
 8003794:	50040000 	.word	0x50040000
 8003798:	50040300 	.word	0x50040300
 800379c:	fff0c007 	.word	0xfff0c007

080037a0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff fe75 	bl	800349c <LL_ADC_REG_IsConversionOngoing>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d14f      	bne.n	8003858 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d101      	bne.n	80037c6 <HAL_ADC_Start+0x26>
 80037c2:	2302      	movs	r3, #2
 80037c4:	e04b      	b.n	800385e <HAL_ADC_Start+0xbe>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 fdb4 	bl	800433c <ADC_Enable>
 80037d4:	4603      	mov	r3, r0
 80037d6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d137      	bne.n	800384e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037e6:	f023 0301 	bic.w	r3, r3, #1
 80037ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037fe:	d106      	bne.n	800380e <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003804:	f023 0206 	bic.w	r2, r3, #6
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	659a      	str	r2, [r3, #88]	; 0x58
 800380c:	e002      	b.n	8003814 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	221c      	movs	r2, #28
 800381a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d007      	beq.n	8003842 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003836:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800383a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	f7ff fe00 	bl	800344c <LL_ADC_REG_StartConversion>
 800384c:	e006      	b.n	800385c <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003856:	e001      	b.n	800385c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003858:	2302      	movs	r3, #2
 800385a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800385c:	7bfb      	ldrb	r3, [r7, #15]
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b084      	sub	sp, #16
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003874:	2b01      	cmp	r3, #1
 8003876:	d101      	bne.n	800387c <HAL_ADC_Stop+0x16>
 8003878:	2302      	movs	r3, #2
 800387a:	e023      	b.n	80038c4 <HAL_ADC_Stop+0x5e>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003884:	2103      	movs	r1, #3
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 fc9c 	bl	80041c4 <ADC_ConversionStop>
 800388c:	4603      	mov	r3, r0
 800388e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003890:	7bfb      	ldrb	r3, [r7, #15]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d111      	bne.n	80038ba <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 fdd6 	bl	8004448 <ADC_Disable>
 800389c:	4603      	mov	r3, r0
 800389e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d109      	bne.n	80038ba <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80038ae:	f023 0301 	bic.w	r3, r3, #1
 80038b2:	f043 0201 	orr.w	r2, r3, #1
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80038c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	2b08      	cmp	r3, #8
 80038dc:	d102      	bne.n	80038e4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80038de:	2308      	movs	r3, #8
 80038e0:	617b      	str	r3, [r7, #20]
 80038e2:	e010      	b.n	8003906 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d007      	beq.n	8003902 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f6:	f043 0220 	orr.w	r2, r3, #32
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e06f      	b.n	80039e2 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8003902:	2304      	movs	r3, #4
 8003904:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003906:	f7ff fb9d 	bl	8003044 <HAL_GetTick>
 800390a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800390c:	e021      	b.n	8003952 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003914:	d01d      	beq.n	8003952 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003916:	f7ff fb95 	bl	8003044 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d302      	bcc.n	800392c <HAL_ADC_PollForConversion+0x60>
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d112      	bne.n	8003952 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	4013      	ands	r3, r2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10b      	bne.n	8003952 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393e:	f043 0204 	orr.w	r2, r3, #4
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e047      	b.n	80039e2 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	4013      	ands	r3, r2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0d6      	beq.n	800390e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003964:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff fc40 	bl	80031f6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d01c      	beq.n	80039b6 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	7e5b      	ldrb	r3, [r3, #25]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d118      	bne.n	80039b6 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0308 	and.w	r3, r3, #8
 800398e:	2b08      	cmp	r3, #8
 8003990:	d111      	bne.n	80039b6 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003996:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d105      	bne.n	80039b6 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ae:	f043 0201 	orr.w	r2, r3, #1
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d104      	bne.n	80039ce <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2208      	movs	r2, #8
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	e008      	b.n	80039e0 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d103      	bne.n	80039e0 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	220c      	movs	r2, #12
 80039de:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3718      	adds	r7, #24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b083      	sub	sp, #12
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b0b6      	sub	sp, #216	; 0xd8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003a14:	2300      	movs	r3, #0
 8003a16:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d101      	bne.n	8003a26 <HAL_ADC_ConfigChannel+0x22>
 8003a22:	2302      	movs	r3, #2
 8003a24:	e3b9      	b.n	800419a <HAL_ADC_ConfigChannel+0x796>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff fd32 	bl	800349c <LL_ADC_REG_IsConversionOngoing>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f040 839e 	bne.w	800417c <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b05      	cmp	r3, #5
 8003a46:	d824      	bhi.n	8003a92 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	3b02      	subs	r3, #2
 8003a4e:	2b03      	cmp	r3, #3
 8003a50:	d81b      	bhi.n	8003a8a <HAL_ADC_ConfigChannel+0x86>
 8003a52:	a201      	add	r2, pc, #4	; (adr r2, 8003a58 <HAL_ADC_ConfigChannel+0x54>)
 8003a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a58:	08003a69 	.word	0x08003a69
 8003a5c:	08003a71 	.word	0x08003a71
 8003a60:	08003a79 	.word	0x08003a79
 8003a64:	08003a81 	.word	0x08003a81
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	220c      	movs	r2, #12
 8003a6c:	605a      	str	r2, [r3, #4]
          break;
 8003a6e:	e011      	b.n	8003a94 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	2212      	movs	r2, #18
 8003a74:	605a      	str	r2, [r3, #4]
          break;
 8003a76:	e00d      	b.n	8003a94 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	2218      	movs	r2, #24
 8003a7c:	605a      	str	r2, [r3, #4]
          break;
 8003a7e:	e009      	b.n	8003a94 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a86:	605a      	str	r2, [r3, #4]
          break;
 8003a88:	e004      	b.n	8003a94 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	2206      	movs	r2, #6
 8003a8e:	605a      	str	r2, [r3, #4]
          break;
 8003a90:	e000      	b.n	8003a94 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003a92:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6818      	ldr	r0, [r3, #0]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	6859      	ldr	r1, [r3, #4]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	f7ff fbbb 	bl	800321c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7ff fcf6 	bl	800349c <LL_ADC_REG_IsConversionOngoing>
 8003ab0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7ff fd16 	bl	80034ea <LL_ADC_INJ_IsConversionOngoing>
 8003abe:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ac2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f040 81a6 	bne.w	8003e18 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003acc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f040 81a1 	bne.w	8003e18 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6818      	ldr	r0, [r3, #0]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	6819      	ldr	r1, [r3, #0]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	f7ff fbc6 	bl	8003274 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	695a      	ldr	r2, [r3, #20]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	08db      	lsrs	r3, r3, #3
 8003af4:	f003 0303 	and.w	r3, r3, #3
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d00a      	beq.n	8003b20 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6818      	ldr	r0, [r3, #0]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	6919      	ldr	r1, [r3, #16]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003b1a:	f7ff fb17 	bl	800314c <LL_ADC_SetOffset>
 8003b1e:	e17b      	b.n	8003e18 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2100      	movs	r1, #0
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7ff fb34 	bl	8003194 <LL_ADC_GetOffsetChannel>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10a      	bne.n	8003b4c <HAL_ADC_ConfigChannel+0x148>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7ff fb29 	bl	8003194 <LL_ADC_GetOffsetChannel>
 8003b42:	4603      	mov	r3, r0
 8003b44:	0e9b      	lsrs	r3, r3, #26
 8003b46:	f003 021f 	and.w	r2, r3, #31
 8003b4a:	e01e      	b.n	8003b8a <HAL_ADC_ConfigChannel+0x186>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2100      	movs	r1, #0
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7ff fb1e 	bl	8003194 <LL_ADC_GetOffsetChannel>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003b62:	fa93 f3a3 	rbit	r3, r3
 8003b66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003b6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003b72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003b7a:	2320      	movs	r3, #32
 8003b7c:	e004      	b.n	8003b88 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003b7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b82:	fab3 f383 	clz	r3, r3
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d105      	bne.n	8003ba2 <HAL_ADC_ConfigChannel+0x19e>
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	0e9b      	lsrs	r3, r3, #26
 8003b9c:	f003 031f 	and.w	r3, r3, #31
 8003ba0:	e018      	b.n	8003bd4 <HAL_ADC_ConfigChannel+0x1d0>
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003baa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003bae:	fa93 f3a3 	rbit	r3, r3
 8003bb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003bb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003bba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003bbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003bc6:	2320      	movs	r3, #32
 8003bc8:	e004      	b.n	8003bd4 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003bca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003bce:	fab3 f383 	clz	r3, r3
 8003bd2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d106      	bne.n	8003be6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	2100      	movs	r1, #0
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff faed 	bl	80031c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2101      	movs	r1, #1
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7ff fad1 	bl	8003194 <LL_ADC_GetOffsetChannel>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10a      	bne.n	8003c12 <HAL_ADC_ConfigChannel+0x20e>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2101      	movs	r1, #1
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7ff fac6 	bl	8003194 <LL_ADC_GetOffsetChannel>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	0e9b      	lsrs	r3, r3, #26
 8003c0c:	f003 021f 	and.w	r2, r3, #31
 8003c10:	e01e      	b.n	8003c50 <HAL_ADC_ConfigChannel+0x24c>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2101      	movs	r1, #1
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7ff fabb 	bl	8003194 <LL_ADC_GetOffsetChannel>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003c28:	fa93 f3a3 	rbit	r3, r3
 8003c2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003c30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003c38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003c40:	2320      	movs	r3, #32
 8003c42:	e004      	b.n	8003c4e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003c44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003c48:	fab3 f383 	clz	r3, r3
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d105      	bne.n	8003c68 <HAL_ADC_ConfigChannel+0x264>
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	0e9b      	lsrs	r3, r3, #26
 8003c62:	f003 031f 	and.w	r3, r3, #31
 8003c66:	e018      	b.n	8003c9a <HAL_ADC_ConfigChannel+0x296>
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c74:	fa93 f3a3 	rbit	r3, r3
 8003c78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003c7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003c80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003c84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003c8c:	2320      	movs	r3, #32
 8003c8e:	e004      	b.n	8003c9a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003c90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c94:	fab3 f383 	clz	r3, r3
 8003c98:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d106      	bne.n	8003cac <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7ff fa8a 	bl	80031c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2102      	movs	r1, #2
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7ff fa6e 	bl	8003194 <LL_ADC_GetOffsetChannel>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10a      	bne.n	8003cd8 <HAL_ADC_ConfigChannel+0x2d4>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2102      	movs	r1, #2
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7ff fa63 	bl	8003194 <LL_ADC_GetOffsetChannel>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	0e9b      	lsrs	r3, r3, #26
 8003cd2:	f003 021f 	and.w	r2, r3, #31
 8003cd6:	e01e      	b.n	8003d16 <HAL_ADC_ConfigChannel+0x312>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2102      	movs	r1, #2
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7ff fa58 	bl	8003194 <LL_ADC_GetOffsetChannel>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cee:	fa93 f3a3 	rbit	r3, r3
 8003cf2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003cf6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003cfe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003d06:	2320      	movs	r3, #32
 8003d08:	e004      	b.n	8003d14 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003d0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d0e:	fab3 f383 	clz	r3, r3
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d105      	bne.n	8003d2e <HAL_ADC_ConfigChannel+0x32a>
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	0e9b      	lsrs	r3, r3, #26
 8003d28:	f003 031f 	and.w	r3, r3, #31
 8003d2c:	e016      	b.n	8003d5c <HAL_ADC_ConfigChannel+0x358>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d36:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d3a:	fa93 f3a3 	rbit	r3, r3
 8003d3e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003d40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003d46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003d4e:	2320      	movs	r3, #32
 8003d50:	e004      	b.n	8003d5c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003d52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d56:	fab3 f383 	clz	r3, r3
 8003d5a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d106      	bne.n	8003d6e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2200      	movs	r2, #0
 8003d66:	2102      	movs	r1, #2
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff fa29 	bl	80031c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2103      	movs	r1, #3
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7ff fa0d 	bl	8003194 <LL_ADC_GetOffsetChannel>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10a      	bne.n	8003d9a <HAL_ADC_ConfigChannel+0x396>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2103      	movs	r1, #3
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7ff fa02 	bl	8003194 <LL_ADC_GetOffsetChannel>
 8003d90:	4603      	mov	r3, r0
 8003d92:	0e9b      	lsrs	r3, r3, #26
 8003d94:	f003 021f 	and.w	r2, r3, #31
 8003d98:	e017      	b.n	8003dca <HAL_ADC_ConfigChannel+0x3c6>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2103      	movs	r1, #3
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff f9f7 	bl	8003194 <LL_ADC_GetOffsetChannel>
 8003da6:	4603      	mov	r3, r0
 8003da8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003daa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dac:	fa93 f3a3 	rbit	r3, r3
 8003db0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003db2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003db4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003db6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003dbc:	2320      	movs	r3, #32
 8003dbe:	e003      	b.n	8003dc8 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003dc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dc2:	fab3 f383 	clz	r3, r3
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d105      	bne.n	8003de2 <HAL_ADC_ConfigChannel+0x3de>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	0e9b      	lsrs	r3, r3, #26
 8003ddc:	f003 031f 	and.w	r3, r3, #31
 8003de0:	e011      	b.n	8003e06 <HAL_ADC_ConfigChannel+0x402>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dea:	fa93 f3a3 	rbit	r3, r3
 8003dee:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003df0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003df2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003dfa:	2320      	movs	r3, #32
 8003dfc:	e003      	b.n	8003e06 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003dfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e00:	fab3 f383 	clz	r3, r3
 8003e04:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d106      	bne.n	8003e18 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	2103      	movs	r1, #3
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7ff f9d4 	bl	80031c0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7ff faef 	bl	8003400 <LL_ADC_IsEnabled>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f040 813f 	bne.w	80040a8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6818      	ldr	r0, [r3, #0]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	6819      	ldr	r1, [r3, #0]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	461a      	mov	r2, r3
 8003e38:	f7ff fa48 	bl	80032cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	4a8e      	ldr	r2, [pc, #568]	; (800407c <HAL_ADC_ConfigChannel+0x678>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	f040 8130 	bne.w	80040a8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10b      	bne.n	8003e70 <HAL_ADC_ConfigChannel+0x46c>
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	0e9b      	lsrs	r3, r3, #26
 8003e5e:	3301      	adds	r3, #1
 8003e60:	f003 031f 	and.w	r3, r3, #31
 8003e64:	2b09      	cmp	r3, #9
 8003e66:	bf94      	ite	ls
 8003e68:	2301      	movls	r3, #1
 8003e6a:	2300      	movhi	r3, #0
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	e019      	b.n	8003ea4 <HAL_ADC_ConfigChannel+0x4a0>
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e78:	fa93 f3a3 	rbit	r3, r3
 8003e7c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003e7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e80:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003e82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003e88:	2320      	movs	r3, #32
 8003e8a:	e003      	b.n	8003e94 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003e8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e8e:	fab3 f383 	clz	r3, r3
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	3301      	adds	r3, #1
 8003e96:	f003 031f 	and.w	r3, r3, #31
 8003e9a:	2b09      	cmp	r3, #9
 8003e9c:	bf94      	ite	ls
 8003e9e:	2301      	movls	r3, #1
 8003ea0:	2300      	movhi	r3, #0
 8003ea2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d079      	beq.n	8003f9c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d107      	bne.n	8003ec4 <HAL_ADC_ConfigChannel+0x4c0>
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	0e9b      	lsrs	r3, r3, #26
 8003eba:	3301      	adds	r3, #1
 8003ebc:	069b      	lsls	r3, r3, #26
 8003ebe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ec2:	e015      	b.n	8003ef0 <HAL_ADC_ConfigChannel+0x4ec>
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ecc:	fa93 f3a3 	rbit	r3, r3
 8003ed0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ed4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003ed6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d101      	bne.n	8003ee0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003edc:	2320      	movs	r3, #32
 8003ede:	e003      	b.n	8003ee8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003ee0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ee2:	fab3 f383 	clz	r3, r3
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	3301      	adds	r3, #1
 8003eea:	069b      	lsls	r3, r3, #26
 8003eec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d109      	bne.n	8003f10 <HAL_ADC_ConfigChannel+0x50c>
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	0e9b      	lsrs	r3, r3, #26
 8003f02:	3301      	adds	r3, #1
 8003f04:	f003 031f 	and.w	r3, r3, #31
 8003f08:	2101      	movs	r1, #1
 8003f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f0e:	e017      	b.n	8003f40 <HAL_ADC_ConfigChannel+0x53c>
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f18:	fa93 f3a3 	rbit	r3, r3
 8003f1c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003f1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f20:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003f28:	2320      	movs	r3, #32
 8003f2a:	e003      	b.n	8003f34 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003f2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f2e:	fab3 f383 	clz	r3, r3
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	3301      	adds	r3, #1
 8003f36:	f003 031f 	and.w	r3, r3, #31
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f40:	ea42 0103 	orr.w	r1, r2, r3
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10a      	bne.n	8003f66 <HAL_ADC_ConfigChannel+0x562>
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	0e9b      	lsrs	r3, r3, #26
 8003f56:	3301      	adds	r3, #1
 8003f58:	f003 021f 	and.w	r2, r3, #31
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	4413      	add	r3, r2
 8003f62:	051b      	lsls	r3, r3, #20
 8003f64:	e018      	b.n	8003f98 <HAL_ADC_ConfigChannel+0x594>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f6e:	fa93 f3a3 	rbit	r3, r3
 8003f72:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f76:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003f7e:	2320      	movs	r3, #32
 8003f80:	e003      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f84:	fab3 f383 	clz	r3, r3
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	f003 021f 	and.w	r2, r3, #31
 8003f90:	4613      	mov	r3, r2
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	4413      	add	r3, r2
 8003f96:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f98:	430b      	orrs	r3, r1
 8003f9a:	e080      	b.n	800409e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d107      	bne.n	8003fb8 <HAL_ADC_ConfigChannel+0x5b4>
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	0e9b      	lsrs	r3, r3, #26
 8003fae:	3301      	adds	r3, #1
 8003fb0:	069b      	lsls	r3, r3, #26
 8003fb2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fb6:	e015      	b.n	8003fe4 <HAL_ADC_ConfigChannel+0x5e0>
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc0:	fa93 f3a3 	rbit	r3, r3
 8003fc4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003fd0:	2320      	movs	r3, #32
 8003fd2:	e003      	b.n	8003fdc <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd6:	fab3 f383 	clz	r3, r3
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	3301      	adds	r3, #1
 8003fde:	069b      	lsls	r3, r3, #26
 8003fe0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d109      	bne.n	8004004 <HAL_ADC_ConfigChannel+0x600>
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	0e9b      	lsrs	r3, r3, #26
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	f003 031f 	and.w	r3, r3, #31
 8003ffc:	2101      	movs	r1, #1
 8003ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8004002:	e017      	b.n	8004034 <HAL_ADC_ConfigChannel+0x630>
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800400a:	6a3b      	ldr	r3, [r7, #32]
 800400c:	fa93 f3a3 	rbit	r3, r3
 8004010:	61fb      	str	r3, [r7, #28]
  return result;
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	2b00      	cmp	r3, #0
 800401a:	d101      	bne.n	8004020 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 800401c:	2320      	movs	r3, #32
 800401e:	e003      	b.n	8004028 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8004020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004022:	fab3 f383 	clz	r3, r3
 8004026:	b2db      	uxtb	r3, r3
 8004028:	3301      	adds	r3, #1
 800402a:	f003 031f 	and.w	r3, r3, #31
 800402e:	2101      	movs	r1, #1
 8004030:	fa01 f303 	lsl.w	r3, r1, r3
 8004034:	ea42 0103 	orr.w	r1, r2, r3
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10d      	bne.n	8004060 <HAL_ADC_ConfigChannel+0x65c>
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	0e9b      	lsrs	r3, r3, #26
 800404a:	3301      	adds	r3, #1
 800404c:	f003 021f 	and.w	r2, r3, #31
 8004050:	4613      	mov	r3, r2
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	4413      	add	r3, r2
 8004056:	3b1e      	subs	r3, #30
 8004058:	051b      	lsls	r3, r3, #20
 800405a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800405e:	e01d      	b.n	800409c <HAL_ADC_ConfigChannel+0x698>
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	fa93 f3a3 	rbit	r3, r3
 800406c:	613b      	str	r3, [r7, #16]
  return result;
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d103      	bne.n	8004080 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004078:	2320      	movs	r3, #32
 800407a:	e005      	b.n	8004088 <HAL_ADC_ConfigChannel+0x684>
 800407c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	fab3 f383 	clz	r3, r3
 8004086:	b2db      	uxtb	r3, r3
 8004088:	3301      	adds	r3, #1
 800408a:	f003 021f 	and.w	r2, r3, #31
 800408e:	4613      	mov	r3, r2
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	4413      	add	r3, r2
 8004094:	3b1e      	subs	r3, #30
 8004096:	051b      	lsls	r3, r3, #20
 8004098:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800409c:	430b      	orrs	r3, r1
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	6892      	ldr	r2, [r2, #8]
 80040a2:	4619      	mov	r1, r3
 80040a4:	f7ff f8e6 	bl	8003274 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	4b3d      	ldr	r3, [pc, #244]	; (80041a4 <HAL_ADC_ConfigChannel+0x7a0>)
 80040ae:	4013      	ands	r3, r2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d06c      	beq.n	800418e <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040b4:	483c      	ldr	r0, [pc, #240]	; (80041a8 <HAL_ADC_ConfigChannel+0x7a4>)
 80040b6:	f7ff f83b 	bl	8003130 <LL_ADC_GetCommonPathInternalCh>
 80040ba:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a3a      	ldr	r2, [pc, #232]	; (80041ac <HAL_ADC_ConfigChannel+0x7a8>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d127      	bne.n	8004118 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80040c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d121      	bne.n	8004118 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a35      	ldr	r2, [pc, #212]	; (80041b0 <HAL_ADC_ConfigChannel+0x7ac>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d157      	bne.n	800418e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80040de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80040e6:	4619      	mov	r1, r3
 80040e8:	482f      	ldr	r0, [pc, #188]	; (80041a8 <HAL_ADC_ConfigChannel+0x7a4>)
 80040ea:	f7ff f80e 	bl	800310a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80040ee:	4b31      	ldr	r3, [pc, #196]	; (80041b4 <HAL_ADC_ConfigChannel+0x7b0>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	099b      	lsrs	r3, r3, #6
 80040f4:	4a30      	ldr	r2, [pc, #192]	; (80041b8 <HAL_ADC_ConfigChannel+0x7b4>)
 80040f6:	fba2 2303 	umull	r2, r3, r2, r3
 80040fa:	099b      	lsrs	r3, r3, #6
 80040fc:	1c5a      	adds	r2, r3, #1
 80040fe:	4613      	mov	r3, r2
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	4413      	add	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004108:	e002      	b.n	8004110 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	3b01      	subs	r3, #1
 800410e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f9      	bne.n	800410a <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004116:	e03a      	b.n	800418e <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a27      	ldr	r2, [pc, #156]	; (80041bc <HAL_ADC_ConfigChannel+0x7b8>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d113      	bne.n	800414a <HAL_ADC_ConfigChannel+0x746>
 8004122:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004126:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10d      	bne.n	800414a <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a1f      	ldr	r2, [pc, #124]	; (80041b0 <HAL_ADC_ConfigChannel+0x7ac>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d12a      	bne.n	800418e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004138:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800413c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004140:	4619      	mov	r1, r3
 8004142:	4819      	ldr	r0, [pc, #100]	; (80041a8 <HAL_ADC_ConfigChannel+0x7a4>)
 8004144:	f7fe ffe1 	bl	800310a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004148:	e021      	b.n	800418e <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a1c      	ldr	r2, [pc, #112]	; (80041c0 <HAL_ADC_ConfigChannel+0x7bc>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d11c      	bne.n	800418e <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004154:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004158:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d116      	bne.n	800418e <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a12      	ldr	r2, [pc, #72]	; (80041b0 <HAL_ADC_ConfigChannel+0x7ac>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d111      	bne.n	800418e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800416a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800416e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004172:	4619      	mov	r1, r3
 8004174:	480c      	ldr	r0, [pc, #48]	; (80041a8 <HAL_ADC_ConfigChannel+0x7a4>)
 8004176:	f7fe ffc8 	bl	800310a <LL_ADC_SetCommonPathInternalCh>
 800417a:	e008      	b.n	800418e <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004180:	f043 0220 	orr.w	r2, r3, #32
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004196:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800419a:	4618      	mov	r0, r3
 800419c:	37d8      	adds	r7, #216	; 0xd8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	80080000 	.word	0x80080000
 80041a8:	50040300 	.word	0x50040300
 80041ac:	c7520000 	.word	0xc7520000
 80041b0:	50040000 	.word	0x50040000
 80041b4:	2000000c 	.word	0x2000000c
 80041b8:	053e2d63 	.word	0x053e2d63
 80041bc:	cb840000 	.word	0xcb840000
 80041c0:	80000001 	.word	0x80000001

080041c4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b088      	sub	sp, #32
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80041ce:	2300      	movs	r3, #0
 80041d0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4618      	mov	r0, r3
 80041dc:	f7ff f95e 	bl	800349c <LL_ADC_REG_IsConversionOngoing>
 80041e0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7ff f97f 	bl	80034ea <LL_ADC_INJ_IsConversionOngoing>
 80041ec:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d103      	bne.n	80041fc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f000 8098 	beq.w	800432c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d02a      	beq.n	8004260 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	7e5b      	ldrb	r3, [r3, #25]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d126      	bne.n	8004260 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	7e1b      	ldrb	r3, [r3, #24]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d122      	bne.n	8004260 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800421a:	2301      	movs	r3, #1
 800421c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800421e:	e014      	b.n	800424a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	4a45      	ldr	r2, [pc, #276]	; (8004338 <ADC_ConversionStop+0x174>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d90d      	bls.n	8004244 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422c:	f043 0210 	orr.w	r2, r3, #16
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004238:	f043 0201 	orr.w	r2, r3, #1
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e074      	b.n	800432e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	3301      	adds	r3, #1
 8004248:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004254:	2b40      	cmp	r3, #64	; 0x40
 8004256:	d1e3      	bne.n	8004220 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2240      	movs	r2, #64	; 0x40
 800425e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	2b02      	cmp	r3, #2
 8004264:	d014      	beq.n	8004290 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff f916 	bl	800349c <LL_ADC_REG_IsConversionOngoing>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00c      	beq.n	8004290 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff f8d3 	bl	8003426 <LL_ADC_IsDisableOngoing>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d104      	bne.n	8004290 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	f7ff f8f2 	bl	8003474 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d014      	beq.n	80042c0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4618      	mov	r0, r3
 800429c:	f7ff f925 	bl	80034ea <LL_ADC_INJ_IsConversionOngoing>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00c      	beq.n	80042c0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7ff f8bb 	bl	8003426 <LL_ADC_IsDisableOngoing>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d104      	bne.n	80042c0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7ff f901 	bl	80034c2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d005      	beq.n	80042d2 <ADC_ConversionStop+0x10e>
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	2b03      	cmp	r3, #3
 80042ca:	d105      	bne.n	80042d8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80042cc:	230c      	movs	r3, #12
 80042ce:	617b      	str	r3, [r7, #20]
        break;
 80042d0:	e005      	b.n	80042de <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80042d2:	2308      	movs	r3, #8
 80042d4:	617b      	str	r3, [r7, #20]
        break;
 80042d6:	e002      	b.n	80042de <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80042d8:	2304      	movs	r3, #4
 80042da:	617b      	str	r3, [r7, #20]
        break;
 80042dc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80042de:	f7fe feb1 	bl	8003044 <HAL_GetTick>
 80042e2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80042e4:	e01b      	b.n	800431e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80042e6:	f7fe fead 	bl	8003044 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	2b05      	cmp	r3, #5
 80042f2:	d914      	bls.n	800431e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689a      	ldr	r2, [r3, #8]
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	4013      	ands	r3, r2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00d      	beq.n	800431e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004306:	f043 0210 	orr.w	r2, r3, #16
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004312:	f043 0201 	orr.w	r2, r3, #1
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e007      	b.n	800432e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	689a      	ldr	r2, [r3, #8]
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	4013      	ands	r3, r2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1dc      	bne.n	80042e6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3720      	adds	r7, #32
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	a33fffff 	.word	0xa33fffff

0800433c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004344:	2300      	movs	r3, #0
 8004346:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4618      	mov	r0, r3
 800434e:	f7ff f857 	bl	8003400 <LL_ADC_IsEnabled>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d169      	bne.n	800442c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689a      	ldr	r2, [r3, #8]
 800435e:	4b36      	ldr	r3, [pc, #216]	; (8004438 <ADC_Enable+0xfc>)
 8004360:	4013      	ands	r3, r2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00d      	beq.n	8004382 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436a:	f043 0210 	orr.w	r2, r3, #16
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004376:	f043 0201 	orr.w	r2, r3, #1
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e055      	b.n	800442e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f7ff f812 	bl	80033b0 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800438c:	482b      	ldr	r0, [pc, #172]	; (800443c <ADC_Enable+0x100>)
 800438e:	f7fe fecf 	bl	8003130 <LL_ADC_GetCommonPathInternalCh>
 8004392:	4603      	mov	r3, r0
 8004394:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d013      	beq.n	80043c4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800439c:	4b28      	ldr	r3, [pc, #160]	; (8004440 <ADC_Enable+0x104>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	099b      	lsrs	r3, r3, #6
 80043a2:	4a28      	ldr	r2, [pc, #160]	; (8004444 <ADC_Enable+0x108>)
 80043a4:	fba2 2303 	umull	r2, r3, r2, r3
 80043a8:	099b      	lsrs	r3, r3, #6
 80043aa:	1c5a      	adds	r2, r3, #1
 80043ac:	4613      	mov	r3, r2
 80043ae:	005b      	lsls	r3, r3, #1
 80043b0:	4413      	add	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80043b6:	e002      	b.n	80043be <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	3b01      	subs	r3, #1
 80043bc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1f9      	bne.n	80043b8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80043c4:	f7fe fe3e 	bl	8003044 <HAL_GetTick>
 80043c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80043ca:	e028      	b.n	800441e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7ff f815 	bl	8003400 <LL_ADC_IsEnabled>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d104      	bne.n	80043e6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7fe ffe5 	bl	80033b0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80043e6:	f7fe fe2d 	bl	8003044 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d914      	bls.n	800441e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d00d      	beq.n	800441e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004406:	f043 0210 	orr.w	r2, r3, #16
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004412:	f043 0201 	orr.w	r2, r3, #1
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e007      	b.n	800442e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	2b01      	cmp	r3, #1
 800442a:	d1cf      	bne.n	80043cc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	8000003f 	.word	0x8000003f
 800443c:	50040300 	.word	0x50040300
 8004440:	2000000c 	.word	0x2000000c
 8004444:	053e2d63 	.word	0x053e2d63

08004448 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4618      	mov	r0, r3
 8004456:	f7fe ffe6 	bl	8003426 <LL_ADC_IsDisableOngoing>
 800445a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4618      	mov	r0, r3
 8004462:	f7fe ffcd 	bl	8003400 <LL_ADC_IsEnabled>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d047      	beq.n	80044fc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d144      	bne.n	80044fc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 030d 	and.w	r3, r3, #13
 800447c:	2b01      	cmp	r3, #1
 800447e:	d10c      	bne.n	800449a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4618      	mov	r0, r3
 8004486:	f7fe ffa7 	bl	80033d8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2203      	movs	r2, #3
 8004490:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004492:	f7fe fdd7 	bl	8003044 <HAL_GetTick>
 8004496:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004498:	e029      	b.n	80044ee <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449e:	f043 0210 	orr.w	r2, r3, #16
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044aa:	f043 0201 	orr.w	r2, r3, #1
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e023      	b.n	80044fe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80044b6:	f7fe fdc5 	bl	8003044 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d914      	bls.n	80044ee <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00d      	beq.n	80044ee <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d6:	f043 0210 	orr.w	r2, r3, #16
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e2:	f043 0201 	orr.w	r2, r3, #1
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e007      	b.n	80044fe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1dc      	bne.n	80044b6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <LL_ADC_StartCalibration>:
{
 8004506:	b480      	push	{r7}
 8004508:	b083      	sub	sp, #12
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
 800450e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004518:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004522:	4313      	orrs	r3, r2
 8004524:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	609a      	str	r2, [r3, #8]
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <LL_ADC_IsCalibrationOnGoing>:
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004548:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800454c:	d101      	bne.n	8004552 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800454e:	2301      	movs	r3, #1
 8004550:	e000      	b.n	8004554 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800456a:	2300      	movs	r3, #0
 800456c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004574:	2b01      	cmp	r3, #1
 8004576:	d101      	bne.n	800457c <HAL_ADCEx_Calibration_Start+0x1c>
 8004578:	2302      	movs	r3, #2
 800457a:	e04d      	b.n	8004618 <HAL_ADCEx_Calibration_Start+0xb8>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f7ff ff5f 	bl	8004448 <ADC_Disable>
 800458a:	4603      	mov	r3, r0
 800458c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800458e:	7bfb      	ldrb	r3, [r7, #15]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d136      	bne.n	8004602 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004598:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800459c:	f023 0302 	bic.w	r3, r3, #2
 80045a0:	f043 0202 	orr.w	r2, r3, #2
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6839      	ldr	r1, [r7, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7ff ffa9 	bl	8004506 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80045b4:	e014      	b.n	80045e0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	3301      	adds	r3, #1
 80045ba:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80045c2:	d30d      	bcc.n	80045e0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c8:	f023 0312 	bic.w	r3, r3, #18
 80045cc:	f043 0210 	orr.w	r2, r3, #16
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e01b      	b.n	8004618 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff ffa7 	bl	8004538 <LL_ADC_IsCalibrationOnGoing>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1e2      	bne.n	80045b6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f4:	f023 0303 	bic.w	r3, r3, #3
 80045f8:	f043 0201 	orr.w	r2, r3, #1
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	655a      	str	r2, [r3, #84]	; 0x54
 8004600:	e005      	b.n	800460e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004606:	f043 0210 	orr.w	r2, r3, #16
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004616:	7bfb      	ldrb	r3, [r7, #15]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f003 0307 	and.w	r3, r3, #7
 800462e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004630:	4b0c      	ldr	r3, [pc, #48]	; (8004664 <__NVIC_SetPriorityGrouping+0x44>)
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800463c:	4013      	ands	r3, r2
 800463e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004648:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800464c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004652:	4a04      	ldr	r2, [pc, #16]	; (8004664 <__NVIC_SetPriorityGrouping+0x44>)
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	60d3      	str	r3, [r2, #12]
}
 8004658:	bf00      	nop
 800465a:	3714      	adds	r7, #20
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr
 8004664:	e000ed00 	.word	0xe000ed00

08004668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800466c:	4b04      	ldr	r3, [pc, #16]	; (8004680 <__NVIC_GetPriorityGrouping+0x18>)
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	0a1b      	lsrs	r3, r3, #8
 8004672:	f003 0307 	and.w	r3, r3, #7
}
 8004676:	4618      	mov	r0, r3
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	e000ed00 	.word	0xe000ed00

08004684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	4603      	mov	r3, r0
 800468c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800468e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004692:	2b00      	cmp	r3, #0
 8004694:	db0b      	blt.n	80046ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004696:	79fb      	ldrb	r3, [r7, #7]
 8004698:	f003 021f 	and.w	r2, r3, #31
 800469c:	4907      	ldr	r1, [pc, #28]	; (80046bc <__NVIC_EnableIRQ+0x38>)
 800469e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a2:	095b      	lsrs	r3, r3, #5
 80046a4:	2001      	movs	r0, #1
 80046a6:	fa00 f202 	lsl.w	r2, r0, r2
 80046aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80046ae:	bf00      	nop
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	e000e100 	.word	0xe000e100

080046c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	4603      	mov	r3, r0
 80046c8:	6039      	str	r1, [r7, #0]
 80046ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	db0a      	blt.n	80046ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	b2da      	uxtb	r2, r3
 80046d8:	490c      	ldr	r1, [pc, #48]	; (800470c <__NVIC_SetPriority+0x4c>)
 80046da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046de:	0112      	lsls	r2, r2, #4
 80046e0:	b2d2      	uxtb	r2, r2
 80046e2:	440b      	add	r3, r1
 80046e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046e8:	e00a      	b.n	8004700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	b2da      	uxtb	r2, r3
 80046ee:	4908      	ldr	r1, [pc, #32]	; (8004710 <__NVIC_SetPriority+0x50>)
 80046f0:	79fb      	ldrb	r3, [r7, #7]
 80046f2:	f003 030f 	and.w	r3, r3, #15
 80046f6:	3b04      	subs	r3, #4
 80046f8:	0112      	lsls	r2, r2, #4
 80046fa:	b2d2      	uxtb	r2, r2
 80046fc:	440b      	add	r3, r1
 80046fe:	761a      	strb	r2, [r3, #24]
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	e000e100 	.word	0xe000e100
 8004710:	e000ed00 	.word	0xe000ed00

08004714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004714:	b480      	push	{r7}
 8004716:	b089      	sub	sp, #36	; 0x24
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f003 0307 	and.w	r3, r3, #7
 8004726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	f1c3 0307 	rsb	r3, r3, #7
 800472e:	2b04      	cmp	r3, #4
 8004730:	bf28      	it	cs
 8004732:	2304      	movcs	r3, #4
 8004734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	3304      	adds	r3, #4
 800473a:	2b06      	cmp	r3, #6
 800473c:	d902      	bls.n	8004744 <NVIC_EncodePriority+0x30>
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	3b03      	subs	r3, #3
 8004742:	e000      	b.n	8004746 <NVIC_EncodePriority+0x32>
 8004744:	2300      	movs	r3, #0
 8004746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004748:	f04f 32ff 	mov.w	r2, #4294967295
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	fa02 f303 	lsl.w	r3, r2, r3
 8004752:	43da      	mvns	r2, r3
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	401a      	ands	r2, r3
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800475c:	f04f 31ff 	mov.w	r1, #4294967295
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	fa01 f303 	lsl.w	r3, r1, r3
 8004766:	43d9      	mvns	r1, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800476c:	4313      	orrs	r3, r2
         );
}
 800476e:	4618      	mov	r0, r3
 8004770:	3724      	adds	r7, #36	; 0x24
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
	...

0800477c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	3b01      	subs	r3, #1
 8004788:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800478c:	d301      	bcc.n	8004792 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800478e:	2301      	movs	r3, #1
 8004790:	e00f      	b.n	80047b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004792:	4a0a      	ldr	r2, [pc, #40]	; (80047bc <SysTick_Config+0x40>)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	3b01      	subs	r3, #1
 8004798:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800479a:	210f      	movs	r1, #15
 800479c:	f04f 30ff 	mov.w	r0, #4294967295
 80047a0:	f7ff ff8e 	bl	80046c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047a4:	4b05      	ldr	r3, [pc, #20]	; (80047bc <SysTick_Config+0x40>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047aa:	4b04      	ldr	r3, [pc, #16]	; (80047bc <SysTick_Config+0x40>)
 80047ac:	2207      	movs	r2, #7
 80047ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3708      	adds	r7, #8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	e000e010 	.word	0xe000e010

080047c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f7ff ff29 	bl	8004620 <__NVIC_SetPriorityGrouping>
}
 80047ce:	bf00      	nop
 80047d0:	3708      	adds	r7, #8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b086      	sub	sp, #24
 80047da:	af00      	add	r7, sp, #0
 80047dc:	4603      	mov	r3, r0
 80047de:	60b9      	str	r1, [r7, #8]
 80047e0:	607a      	str	r2, [r7, #4]
 80047e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80047e4:	2300      	movs	r3, #0
 80047e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80047e8:	f7ff ff3e 	bl	8004668 <__NVIC_GetPriorityGrouping>
 80047ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	68b9      	ldr	r1, [r7, #8]
 80047f2:	6978      	ldr	r0, [r7, #20]
 80047f4:	f7ff ff8e 	bl	8004714 <NVIC_EncodePriority>
 80047f8:	4602      	mov	r2, r0
 80047fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047fe:	4611      	mov	r1, r2
 8004800:	4618      	mov	r0, r3
 8004802:	f7ff ff5d 	bl	80046c0 <__NVIC_SetPriority>
}
 8004806:	bf00      	nop
 8004808:	3718      	adds	r7, #24
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b082      	sub	sp, #8
 8004812:	af00      	add	r7, sp, #0
 8004814:	4603      	mov	r3, r0
 8004816:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800481c:	4618      	mov	r0, r3
 800481e:	f7ff ff31 	bl	8004684 <__NVIC_EnableIRQ>
}
 8004822:	bf00      	nop
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b082      	sub	sp, #8
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7ff ffa2 	bl	800477c <SysTick_Config>
 8004838:	4603      	mov	r3, r0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
	...

08004844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800484e:	2300      	movs	r3, #0
 8004850:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004852:	e154      	b.n	8004afe <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	2101      	movs	r1, #1
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	fa01 f303 	lsl.w	r3, r1, r3
 8004860:	4013      	ands	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 8146 	beq.w	8004af8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f003 0303 	and.w	r3, r3, #3
 8004874:	2b01      	cmp	r3, #1
 8004876:	d005      	beq.n	8004884 <HAL_GPIO_Init+0x40>
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f003 0303 	and.w	r3, r3, #3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d130      	bne.n	80048e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	2203      	movs	r2, #3
 8004890:	fa02 f303 	lsl.w	r3, r2, r3
 8004894:	43db      	mvns	r3, r3
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	4013      	ands	r3, r2
 800489a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	68da      	ldr	r2, [r3, #12]
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	fa02 f303 	lsl.w	r3, r2, r3
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80048ba:	2201      	movs	r2, #1
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	fa02 f303 	lsl.w	r3, r2, r3
 80048c2:	43db      	mvns	r3, r3
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	4013      	ands	r3, r2
 80048c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	091b      	lsrs	r3, r3, #4
 80048d0:	f003 0201 	and.w	r2, r3, #1
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	fa02 f303 	lsl.w	r3, r2, r3
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	4313      	orrs	r3, r2
 80048de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f003 0303 	and.w	r3, r3, #3
 80048ee:	2b03      	cmp	r3, #3
 80048f0:	d017      	beq.n	8004922 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	2203      	movs	r2, #3
 80048fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004902:	43db      	mvns	r3, r3
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	4013      	ands	r3, r2
 8004908:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	689a      	ldr	r2, [r3, #8]
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	fa02 f303 	lsl.w	r3, r2, r3
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	4313      	orrs	r3, r2
 800491a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f003 0303 	and.w	r3, r3, #3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d123      	bne.n	8004976 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	08da      	lsrs	r2, r3, #3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	3208      	adds	r2, #8
 8004936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800493a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f003 0307 	and.w	r3, r3, #7
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	220f      	movs	r2, #15
 8004946:	fa02 f303 	lsl.w	r3, r2, r3
 800494a:	43db      	mvns	r3, r3
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	4013      	ands	r3, r2
 8004950:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	691a      	ldr	r2, [r3, #16]
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f003 0307 	and.w	r3, r3, #7
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	fa02 f303 	lsl.w	r3, r2, r3
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	4313      	orrs	r3, r2
 8004966:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	08da      	lsrs	r2, r3, #3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	3208      	adds	r2, #8
 8004970:	6939      	ldr	r1, [r7, #16]
 8004972:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	005b      	lsls	r3, r3, #1
 8004980:	2203      	movs	r2, #3
 8004982:	fa02 f303 	lsl.w	r3, r2, r3
 8004986:	43db      	mvns	r3, r3
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	4013      	ands	r3, r2
 800498c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f003 0203 	and.w	r2, r3, #3
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	fa02 f303 	lsl.w	r3, r2, r3
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f000 80a0 	beq.w	8004af8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049b8:	4b58      	ldr	r3, [pc, #352]	; (8004b1c <HAL_GPIO_Init+0x2d8>)
 80049ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049bc:	4a57      	ldr	r2, [pc, #348]	; (8004b1c <HAL_GPIO_Init+0x2d8>)
 80049be:	f043 0301 	orr.w	r3, r3, #1
 80049c2:	6613      	str	r3, [r2, #96]	; 0x60
 80049c4:	4b55      	ldr	r3, [pc, #340]	; (8004b1c <HAL_GPIO_Init+0x2d8>)
 80049c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	60bb      	str	r3, [r7, #8]
 80049ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80049d0:	4a53      	ldr	r2, [pc, #332]	; (8004b20 <HAL_GPIO_Init+0x2dc>)
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	089b      	lsrs	r3, r3, #2
 80049d6:	3302      	adds	r3, #2
 80049d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f003 0303 	and.w	r3, r3, #3
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	220f      	movs	r2, #15
 80049e8:	fa02 f303 	lsl.w	r3, r2, r3
 80049ec:	43db      	mvns	r3, r3
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	4013      	ands	r3, r2
 80049f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80049fa:	d019      	beq.n	8004a30 <HAL_GPIO_Init+0x1ec>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a49      	ldr	r2, [pc, #292]	; (8004b24 <HAL_GPIO_Init+0x2e0>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d013      	beq.n	8004a2c <HAL_GPIO_Init+0x1e8>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a48      	ldr	r2, [pc, #288]	; (8004b28 <HAL_GPIO_Init+0x2e4>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d00d      	beq.n	8004a28 <HAL_GPIO_Init+0x1e4>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a47      	ldr	r2, [pc, #284]	; (8004b2c <HAL_GPIO_Init+0x2e8>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d007      	beq.n	8004a24 <HAL_GPIO_Init+0x1e0>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a46      	ldr	r2, [pc, #280]	; (8004b30 <HAL_GPIO_Init+0x2ec>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d101      	bne.n	8004a20 <HAL_GPIO_Init+0x1dc>
 8004a1c:	2304      	movs	r3, #4
 8004a1e:	e008      	b.n	8004a32 <HAL_GPIO_Init+0x1ee>
 8004a20:	2307      	movs	r3, #7
 8004a22:	e006      	b.n	8004a32 <HAL_GPIO_Init+0x1ee>
 8004a24:	2303      	movs	r3, #3
 8004a26:	e004      	b.n	8004a32 <HAL_GPIO_Init+0x1ee>
 8004a28:	2302      	movs	r3, #2
 8004a2a:	e002      	b.n	8004a32 <HAL_GPIO_Init+0x1ee>
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e000      	b.n	8004a32 <HAL_GPIO_Init+0x1ee>
 8004a30:	2300      	movs	r3, #0
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	f002 0203 	and.w	r2, r2, #3
 8004a38:	0092      	lsls	r2, r2, #2
 8004a3a:	4093      	lsls	r3, r2
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004a42:	4937      	ldr	r1, [pc, #220]	; (8004b20 <HAL_GPIO_Init+0x2dc>)
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	089b      	lsrs	r3, r3, #2
 8004a48:	3302      	adds	r3, #2
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a50:	4b38      	ldr	r3, [pc, #224]	; (8004b34 <HAL_GPIO_Init+0x2f0>)
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	43db      	mvns	r3, r3
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d003      	beq.n	8004a74 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a74:	4a2f      	ldr	r2, [pc, #188]	; (8004b34 <HAL_GPIO_Init+0x2f0>)
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a7a:	4b2e      	ldr	r3, [pc, #184]	; (8004b34 <HAL_GPIO_Init+0x2f0>)
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	43db      	mvns	r3, r3
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	4013      	ands	r3, r2
 8004a88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a9e:	4a25      	ldr	r2, [pc, #148]	; (8004b34 <HAL_GPIO_Init+0x2f0>)
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004aa4:	4b23      	ldr	r3, [pc, #140]	; (8004b34 <HAL_GPIO_Init+0x2f0>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	43db      	mvns	r3, r3
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d003      	beq.n	8004ac8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ac8:	4a1a      	ldr	r2, [pc, #104]	; (8004b34 <HAL_GPIO_Init+0x2f0>)
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004ace:	4b19      	ldr	r3, [pc, #100]	; (8004b34 <HAL_GPIO_Init+0x2f0>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	43db      	mvns	r3, r3
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	4013      	ands	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d003      	beq.n	8004af2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004af2:	4a10      	ldr	r2, [pc, #64]	; (8004b34 <HAL_GPIO_Init+0x2f0>)
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	3301      	adds	r3, #1
 8004afc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	fa22 f303 	lsr.w	r3, r2, r3
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f47f aea3 	bne.w	8004854 <HAL_GPIO_Init+0x10>
  }
}
 8004b0e:	bf00      	nop
 8004b10:	bf00      	nop
 8004b12:	371c      	adds	r7, #28
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	40021000 	.word	0x40021000
 8004b20:	40010000 	.word	0x40010000
 8004b24:	48000400 	.word	0x48000400
 8004b28:	48000800 	.word	0x48000800
 8004b2c:	48000c00 	.word	0x48000c00
 8004b30:	48001000 	.word	0x48001000
 8004b34:	40010400 	.word	0x40010400

08004b38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	460b      	mov	r3, r1
 8004b42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	691a      	ldr	r2, [r3, #16]
 8004b48:	887b      	ldrh	r3, [r7, #2]
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d002      	beq.n	8004b56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b50:	2301      	movs	r3, #1
 8004b52:	73fb      	strb	r3, [r7, #15]
 8004b54:	e001      	b.n	8004b5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b56:	2300      	movs	r3, #0
 8004b58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3714      	adds	r7, #20
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	460b      	mov	r3, r1
 8004b72:	807b      	strh	r3, [r7, #2]
 8004b74:	4613      	mov	r3, r2
 8004b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b78:	787b      	ldrb	r3, [r7, #1]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d003      	beq.n	8004b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b7e:	887a      	ldrh	r2, [r7, #2]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b84:	e002      	b.n	8004b8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b86:	887a      	ldrh	r2, [r7, #2]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004ba2:	4b08      	ldr	r3, [pc, #32]	; (8004bc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ba4:	695a      	ldr	r2, [r3, #20]
 8004ba6:	88fb      	ldrh	r3, [r7, #6]
 8004ba8:	4013      	ands	r3, r2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d006      	beq.n	8004bbc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004bae:	4a05      	ldr	r2, [pc, #20]	; (8004bc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004bb0:	88fb      	ldrh	r3, [r7, #6]
 8004bb2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004bb4:	88fb      	ldrh	r3, [r7, #6]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7fc fd10 	bl	80015dc <HAL_GPIO_EXTI_Callback>
  }
}
 8004bbc:	bf00      	nop
 8004bbe:	3708      	adds	r7, #8
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	40010400 	.word	0x40010400

08004bc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e081      	b.n	8004cde <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d106      	bne.n	8004bf4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7fd ff70 	bl	8002ad4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2224      	movs	r2, #36	; 0x24
 8004bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0201 	bic.w	r2, r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c18:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c28:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d107      	bne.n	8004c42 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	689a      	ldr	r2, [r3, #8]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c3e:	609a      	str	r2, [r3, #8]
 8004c40:	e006      	b.n	8004c50 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	689a      	ldr	r2, [r3, #8]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004c4e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d104      	bne.n	8004c62 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c60:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	6812      	ldr	r2, [r2, #0]
 8004c6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c74:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68da      	ldr	r2, [r3, #12]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c84:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	691a      	ldr	r2, [r3, #16]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	69d9      	ldr	r1, [r3, #28]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a1a      	ldr	r2, [r3, #32]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	430a      	orrs	r2, r1
 8004cae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f042 0201 	orr.w	r2, r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3708      	adds	r7, #8
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
	...

08004ce8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b088      	sub	sp, #32
 8004cec:	af02      	add	r7, sp, #8
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	4608      	mov	r0, r1
 8004cf2:	4611      	mov	r1, r2
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	817b      	strh	r3, [r7, #10]
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	813b      	strh	r3, [r7, #8]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b20      	cmp	r3, #32
 8004d0c:	f040 80f9 	bne.w	8004f02 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d002      	beq.n	8004d1c <HAL_I2C_Mem_Write+0x34>
 8004d16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d105      	bne.n	8004d28 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d22:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e0ed      	b.n	8004f04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d101      	bne.n	8004d36 <HAL_I2C_Mem_Write+0x4e>
 8004d32:	2302      	movs	r3, #2
 8004d34:	e0e6      	b.n	8004f04 <HAL_I2C_Mem_Write+0x21c>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d3e:	f7fe f981 	bl	8003044 <HAL_GetTick>
 8004d42:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	2319      	movs	r3, #25
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 fac3 	bl	80052dc <I2C_WaitOnFlagUntilTimeout>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d001      	beq.n	8004d60 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e0d1      	b.n	8004f04 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2221      	movs	r2, #33	; 0x21
 8004d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2240      	movs	r2, #64	; 0x40
 8004d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6a3a      	ldr	r2, [r7, #32]
 8004d7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d88:	88f8      	ldrh	r0, [r7, #6]
 8004d8a:	893a      	ldrh	r2, [r7, #8]
 8004d8c:	8979      	ldrh	r1, [r7, #10]
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	9301      	str	r3, [sp, #4]
 8004d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d94:	9300      	str	r3, [sp, #0]
 8004d96:	4603      	mov	r3, r0
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f000 f9d3 	bl	8005144 <I2C_RequestMemoryWrite>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d005      	beq.n	8004db0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e0a9      	b.n	8004f04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	2bff      	cmp	r3, #255	; 0xff
 8004db8:	d90e      	bls.n	8004dd8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	22ff      	movs	r2, #255	; 0xff
 8004dbe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc4:	b2da      	uxtb	r2, r3
 8004dc6:	8979      	ldrh	r1, [r7, #10]
 8004dc8:	2300      	movs	r3, #0
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f000 fc2b 	bl	800562c <I2C_TransferConfig>
 8004dd6:	e00f      	b.n	8004df8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de6:	b2da      	uxtb	r2, r3
 8004de8:	8979      	ldrh	r1, [r7, #10]
 8004dea:	2300      	movs	r3, #0
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f000 fc1a 	bl	800562c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f000 faad 	bl	800535c <I2C_WaitOnTXISFlagUntilTimeout>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e07b      	b.n	8004f04 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	781a      	ldrb	r2, [r3, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1c:	1c5a      	adds	r2, r3, #1
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e34:	3b01      	subs	r3, #1
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d034      	beq.n	8004eb0 <HAL_I2C_Mem_Write+0x1c8>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d130      	bne.n	8004eb0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	9300      	str	r3, [sp, #0]
 8004e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e54:	2200      	movs	r2, #0
 8004e56:	2180      	movs	r1, #128	; 0x80
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f000 fa3f 	bl	80052dc <I2C_WaitOnFlagUntilTimeout>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d001      	beq.n	8004e68 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e04d      	b.n	8004f04 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	2bff      	cmp	r3, #255	; 0xff
 8004e70:	d90e      	bls.n	8004e90 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	22ff      	movs	r2, #255	; 0xff
 8004e76:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e7c:	b2da      	uxtb	r2, r3
 8004e7e:	8979      	ldrh	r1, [r7, #10]
 8004e80:	2300      	movs	r3, #0
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f000 fbcf 	bl	800562c <I2C_TransferConfig>
 8004e8e:	e00f      	b.n	8004eb0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e9e:	b2da      	uxtb	r2, r3
 8004ea0:	8979      	ldrh	r1, [r7, #10]
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f000 fbbe 	bl	800562c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d19e      	bne.n	8004df8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f000 fa8c 	bl	80053dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e01a      	b.n	8004f04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6859      	ldr	r1, [r3, #4]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	4b0a      	ldr	r3, [pc, #40]	; (8004f0c <HAL_I2C_Mem_Write+0x224>)
 8004ee2:	400b      	ands	r3, r1
 8004ee4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004efe:	2300      	movs	r3, #0
 8004f00:	e000      	b.n	8004f04 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004f02:	2302      	movs	r3, #2
  }
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3718      	adds	r7, #24
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	fe00e800 	.word	0xfe00e800

08004f10 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b088      	sub	sp, #32
 8004f14:	af02      	add	r7, sp, #8
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	4608      	mov	r0, r1
 8004f1a:	4611      	mov	r1, r2
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	4603      	mov	r3, r0
 8004f20:	817b      	strh	r3, [r7, #10]
 8004f22:	460b      	mov	r3, r1
 8004f24:	813b      	strh	r3, [r7, #8]
 8004f26:	4613      	mov	r3, r2
 8004f28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b20      	cmp	r3, #32
 8004f34:	f040 80fd 	bne.w	8005132 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f38:	6a3b      	ldr	r3, [r7, #32]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d002      	beq.n	8004f44 <HAL_I2C_Mem_Read+0x34>
 8004f3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d105      	bne.n	8004f50 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f4a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e0f1      	b.n	8005134 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d101      	bne.n	8004f5e <HAL_I2C_Mem_Read+0x4e>
 8004f5a:	2302      	movs	r3, #2
 8004f5c:	e0ea      	b.n	8005134 <HAL_I2C_Mem_Read+0x224>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f66:	f7fe f86d 	bl	8003044 <HAL_GetTick>
 8004f6a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	9300      	str	r3, [sp, #0]
 8004f70:	2319      	movs	r3, #25
 8004f72:	2201      	movs	r2, #1
 8004f74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f000 f9af 	bl	80052dc <I2C_WaitOnFlagUntilTimeout>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d001      	beq.n	8004f88 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e0d5      	b.n	8005134 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2222      	movs	r2, #34	; 0x22
 8004f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2240      	movs	r2, #64	; 0x40
 8004f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6a3a      	ldr	r2, [r7, #32]
 8004fa2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004fa8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004fb0:	88f8      	ldrh	r0, [r7, #6]
 8004fb2:	893a      	ldrh	r2, [r7, #8]
 8004fb4:	8979      	ldrh	r1, [r7, #10]
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	9301      	str	r3, [sp, #4]
 8004fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f000 f913 	bl	80051ec <I2C_RequestMemoryRead>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d005      	beq.n	8004fd8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e0ad      	b.n	8005134 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	2bff      	cmp	r3, #255	; 0xff
 8004fe0:	d90e      	bls.n	8005000 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	22ff      	movs	r2, #255	; 0xff
 8004fe6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fec:	b2da      	uxtb	r2, r3
 8004fee:	8979      	ldrh	r1, [r7, #10]
 8004ff0:	4b52      	ldr	r3, [pc, #328]	; (800513c <HAL_I2C_Mem_Read+0x22c>)
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	f000 fb17 	bl	800562c <I2C_TransferConfig>
 8004ffe:	e00f      	b.n	8005020 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005004:	b29a      	uxth	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800500e:	b2da      	uxtb	r2, r3
 8005010:	8979      	ldrh	r1, [r7, #10]
 8005012:	4b4a      	ldr	r3, [pc, #296]	; (800513c <HAL_I2C_Mem_Read+0x22c>)
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f000 fb06 	bl	800562c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005026:	2200      	movs	r2, #0
 8005028:	2104      	movs	r1, #4
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f000 f956 	bl	80052dc <I2C_WaitOnFlagUntilTimeout>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e07c      	b.n	8005134 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	b2d2      	uxtb	r2, r2
 8005046:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504c:	1c5a      	adds	r2, r3, #1
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005056:	3b01      	subs	r3, #1
 8005058:	b29a      	uxth	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005062:	b29b      	uxth	r3, r3
 8005064:	3b01      	subs	r3, #1
 8005066:	b29a      	uxth	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005070:	b29b      	uxth	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d034      	beq.n	80050e0 <HAL_I2C_Mem_Read+0x1d0>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800507a:	2b00      	cmp	r3, #0
 800507c:	d130      	bne.n	80050e0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005084:	2200      	movs	r2, #0
 8005086:	2180      	movs	r1, #128	; 0x80
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 f927 	bl	80052dc <I2C_WaitOnFlagUntilTimeout>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d001      	beq.n	8005098 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e04d      	b.n	8005134 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509c:	b29b      	uxth	r3, r3
 800509e:	2bff      	cmp	r3, #255	; 0xff
 80050a0:	d90e      	bls.n	80050c0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	22ff      	movs	r2, #255	; 0xff
 80050a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ac:	b2da      	uxtb	r2, r3
 80050ae:	8979      	ldrh	r1, [r7, #10]
 80050b0:	2300      	movs	r3, #0
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f000 fab7 	bl	800562c <I2C_TransferConfig>
 80050be:	e00f      	b.n	80050e0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ce:	b2da      	uxtb	r2, r3
 80050d0:	8979      	ldrh	r1, [r7, #10]
 80050d2:	2300      	movs	r3, #0
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f000 faa6 	bl	800562c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d19a      	bne.n	8005020 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 f974 	bl	80053dc <I2C_WaitOnSTOPFlagUntilTimeout>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e01a      	b.n	8005134 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2220      	movs	r2, #32
 8005104:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6859      	ldr	r1, [r3, #4]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	4b0b      	ldr	r3, [pc, #44]	; (8005140 <HAL_I2C_Mem_Read+0x230>)
 8005112:	400b      	ands	r3, r1
 8005114:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2220      	movs	r2, #32
 800511a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800512e:	2300      	movs	r3, #0
 8005130:	e000      	b.n	8005134 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005132:	2302      	movs	r3, #2
  }
}
 8005134:	4618      	mov	r0, r3
 8005136:	3718      	adds	r7, #24
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	80002400 	.word	0x80002400
 8005140:	fe00e800 	.word	0xfe00e800

08005144 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af02      	add	r7, sp, #8
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	4608      	mov	r0, r1
 800514e:	4611      	mov	r1, r2
 8005150:	461a      	mov	r2, r3
 8005152:	4603      	mov	r3, r0
 8005154:	817b      	strh	r3, [r7, #10]
 8005156:	460b      	mov	r3, r1
 8005158:	813b      	strh	r3, [r7, #8]
 800515a:	4613      	mov	r3, r2
 800515c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800515e:	88fb      	ldrh	r3, [r7, #6]
 8005160:	b2da      	uxtb	r2, r3
 8005162:	8979      	ldrh	r1, [r7, #10]
 8005164:	4b20      	ldr	r3, [pc, #128]	; (80051e8 <I2C_RequestMemoryWrite+0xa4>)
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f000 fa5d 	bl	800562c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005172:	69fa      	ldr	r2, [r7, #28]
 8005174:	69b9      	ldr	r1, [r7, #24]
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f000 f8f0 	bl	800535c <I2C_WaitOnTXISFlagUntilTimeout>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d001      	beq.n	8005186 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e02c      	b.n	80051e0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005186:	88fb      	ldrh	r3, [r7, #6]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d105      	bne.n	8005198 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800518c:	893b      	ldrh	r3, [r7, #8]
 800518e:	b2da      	uxtb	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	629a      	str	r2, [r3, #40]	; 0x28
 8005196:	e015      	b.n	80051c4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005198:	893b      	ldrh	r3, [r7, #8]
 800519a:	0a1b      	lsrs	r3, r3, #8
 800519c:	b29b      	uxth	r3, r3
 800519e:	b2da      	uxtb	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051a6:	69fa      	ldr	r2, [r7, #28]
 80051a8:	69b9      	ldr	r1, [r7, #24]
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f000 f8d6 	bl	800535c <I2C_WaitOnTXISFlagUntilTimeout>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e012      	b.n	80051e0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80051ba:	893b      	ldrh	r3, [r7, #8]
 80051bc:	b2da      	uxtb	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	9300      	str	r3, [sp, #0]
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	2200      	movs	r2, #0
 80051cc:	2180      	movs	r1, #128	; 0x80
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f000 f884 	bl	80052dc <I2C_WaitOnFlagUntilTimeout>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e000      	b.n	80051e0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	80002000 	.word	0x80002000

080051ec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b086      	sub	sp, #24
 80051f0:	af02      	add	r7, sp, #8
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	4608      	mov	r0, r1
 80051f6:	4611      	mov	r1, r2
 80051f8:	461a      	mov	r2, r3
 80051fa:	4603      	mov	r3, r0
 80051fc:	817b      	strh	r3, [r7, #10]
 80051fe:	460b      	mov	r3, r1
 8005200:	813b      	strh	r3, [r7, #8]
 8005202:	4613      	mov	r3, r2
 8005204:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005206:	88fb      	ldrh	r3, [r7, #6]
 8005208:	b2da      	uxtb	r2, r3
 800520a:	8979      	ldrh	r1, [r7, #10]
 800520c:	4b20      	ldr	r3, [pc, #128]	; (8005290 <I2C_RequestMemoryRead+0xa4>)
 800520e:	9300      	str	r3, [sp, #0]
 8005210:	2300      	movs	r3, #0
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f000 fa0a 	bl	800562c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005218:	69fa      	ldr	r2, [r7, #28]
 800521a:	69b9      	ldr	r1, [r7, #24]
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f000 f89d 	bl	800535c <I2C_WaitOnTXISFlagUntilTimeout>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d001      	beq.n	800522c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e02c      	b.n	8005286 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800522c:	88fb      	ldrh	r3, [r7, #6]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d105      	bne.n	800523e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005232:	893b      	ldrh	r3, [r7, #8]
 8005234:	b2da      	uxtb	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	629a      	str	r2, [r3, #40]	; 0x28
 800523c:	e015      	b.n	800526a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800523e:	893b      	ldrh	r3, [r7, #8]
 8005240:	0a1b      	lsrs	r3, r3, #8
 8005242:	b29b      	uxth	r3, r3
 8005244:	b2da      	uxtb	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800524c:	69fa      	ldr	r2, [r7, #28]
 800524e:	69b9      	ldr	r1, [r7, #24]
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f000 f883 	bl	800535c <I2C_WaitOnTXISFlagUntilTimeout>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d001      	beq.n	8005260 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e012      	b.n	8005286 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005260:	893b      	ldrh	r3, [r7, #8]
 8005262:	b2da      	uxtb	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	9300      	str	r3, [sp, #0]
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	2200      	movs	r2, #0
 8005272:	2140      	movs	r1, #64	; 0x40
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f000 f831 	bl	80052dc <I2C_WaitOnFlagUntilTimeout>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d001      	beq.n	8005284 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e000      	b.n	8005286 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	80002000 	.word	0x80002000

08005294 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d103      	bne.n	80052b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2200      	movs	r2, #0
 80052b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	f003 0301 	and.w	r3, r3, #1
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d007      	beq.n	80052d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	699a      	ldr	r2, [r3, #24]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f042 0201 	orr.w	r2, r2, #1
 80052ce:	619a      	str	r2, [r3, #24]
  }
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	603b      	str	r3, [r7, #0]
 80052e8:	4613      	mov	r3, r2
 80052ea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052ec:	e022      	b.n	8005334 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f4:	d01e      	beq.n	8005334 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052f6:	f7fd fea5 	bl	8003044 <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	429a      	cmp	r2, r3
 8005304:	d302      	bcc.n	800530c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d113      	bne.n	8005334 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005310:	f043 0220 	orr.w	r2, r3, #32
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2220      	movs	r2, #32
 800531c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e00f      	b.n	8005354 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	699a      	ldr	r2, [r3, #24]
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	4013      	ands	r3, r2
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	429a      	cmp	r2, r3
 8005342:	bf0c      	ite	eq
 8005344:	2301      	moveq	r3, #1
 8005346:	2300      	movne	r3, #0
 8005348:	b2db      	uxtb	r3, r3
 800534a:	461a      	mov	r2, r3
 800534c:	79fb      	ldrb	r3, [r7, #7]
 800534e:	429a      	cmp	r2, r3
 8005350:	d0cd      	beq.n	80052ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005368:	e02c      	b.n	80053c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	68b9      	ldr	r1, [r7, #8]
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f000 f870 	bl	8005454 <I2C_IsErrorOccurred>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e02a      	b.n	80053d4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005384:	d01e      	beq.n	80053c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005386:	f7fd fe5d 	bl	8003044 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	429a      	cmp	r2, r3
 8005394:	d302      	bcc.n	800539c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d113      	bne.n	80053c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a0:	f043 0220 	orr.w	r2, r3, #32
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2220      	movs	r2, #32
 80053ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e007      	b.n	80053d4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d1cb      	bne.n	800536a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053e8:	e028      	b.n	800543c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	68b9      	ldr	r1, [r7, #8]
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f000 f830 	bl	8005454 <I2C_IsErrorOccurred>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e026      	b.n	800544c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053fe:	f7fd fe21 	bl	8003044 <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	429a      	cmp	r2, r3
 800540c:	d302      	bcc.n	8005414 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d113      	bne.n	800543c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005418:	f043 0220 	orr.w	r2, r3, #32
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2220      	movs	r2, #32
 8005424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e007      	b.n	800544c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	f003 0320 	and.w	r3, r3, #32
 8005446:	2b20      	cmp	r3, #32
 8005448:	d1cf      	bne.n	80053ea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b08a      	sub	sp, #40	; 0x28
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005460:	2300      	movs	r3, #0
 8005462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800546e:	2300      	movs	r3, #0
 8005470:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	f003 0310 	and.w	r3, r3, #16
 800547c:	2b00      	cmp	r3, #0
 800547e:	d075      	beq.n	800556c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2210      	movs	r2, #16
 8005486:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005488:	e056      	b.n	8005538 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005490:	d052      	beq.n	8005538 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005492:	f7fd fdd7 	bl	8003044 <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d302      	bcc.n	80054a8 <I2C_IsErrorOccurred+0x54>
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d147      	bne.n	8005538 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054b2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054ba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054ca:	d12e      	bne.n	800552a <I2C_IsErrorOccurred+0xd6>
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054d2:	d02a      	beq.n	800552a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80054d4:	7cfb      	ldrb	r3, [r7, #19]
 80054d6:	2b20      	cmp	r3, #32
 80054d8:	d027      	beq.n	800552a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	685a      	ldr	r2, [r3, #4]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054e8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80054ea:	f7fd fdab 	bl	8003044 <HAL_GetTick>
 80054ee:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054f0:	e01b      	b.n	800552a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80054f2:	f7fd fda7 	bl	8003044 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	2b19      	cmp	r3, #25
 80054fe:	d914      	bls.n	800552a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005504:	f043 0220 	orr.w	r2, r3, #32
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2220      	movs	r2, #32
 8005510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	f003 0320 	and.w	r3, r3, #32
 8005534:	2b20      	cmp	r3, #32
 8005536:	d1dc      	bne.n	80054f2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	f003 0320 	and.w	r3, r3, #32
 8005542:	2b20      	cmp	r3, #32
 8005544:	d003      	beq.n	800554e <I2C_IsErrorOccurred+0xfa>
 8005546:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800554a:	2b00      	cmp	r3, #0
 800554c:	d09d      	beq.n	800548a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800554e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005552:	2b00      	cmp	r3, #0
 8005554:	d103      	bne.n	800555e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2220      	movs	r2, #32
 800555c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800555e:	6a3b      	ldr	r3, [r7, #32]
 8005560:	f043 0304 	orr.w	r3, r3, #4
 8005564:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00b      	beq.n	8005596 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800557e:	6a3b      	ldr	r3, [r7, #32]
 8005580:	f043 0301 	orr.w	r3, r3, #1
 8005584:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800558e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00b      	beq.n	80055b8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80055a0:	6a3b      	ldr	r3, [r7, #32]
 80055a2:	f043 0308 	orr.w	r3, r3, #8
 80055a6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80055b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00b      	beq.n	80055da <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80055c2:	6a3b      	ldr	r3, [r7, #32]
 80055c4:	f043 0302 	orr.w	r3, r3, #2
 80055c8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80055da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d01c      	beq.n	800561c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f7ff fe56 	bl	8005294 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6859      	ldr	r1, [r3, #4]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	4b0d      	ldr	r3, [pc, #52]	; (8005628 <I2C_IsErrorOccurred+0x1d4>)
 80055f4:	400b      	ands	r3, r1
 80055f6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055fc:	6a3b      	ldr	r3, [r7, #32]
 80055fe:	431a      	orrs	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2220      	movs	r2, #32
 8005608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800561c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005620:	4618      	mov	r0, r3
 8005622:	3728      	adds	r7, #40	; 0x28
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	fe00e800 	.word	0xfe00e800

0800562c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800562c:	b480      	push	{r7}
 800562e:	b087      	sub	sp, #28
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	607b      	str	r3, [r7, #4]
 8005636:	460b      	mov	r3, r1
 8005638:	817b      	strh	r3, [r7, #10]
 800563a:	4613      	mov	r3, r2
 800563c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800563e:	897b      	ldrh	r3, [r7, #10]
 8005640:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005644:	7a7b      	ldrb	r3, [r7, #9]
 8005646:	041b      	lsls	r3, r3, #16
 8005648:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800564c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005652:	6a3b      	ldr	r3, [r7, #32]
 8005654:	4313      	orrs	r3, r2
 8005656:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800565a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	0d5b      	lsrs	r3, r3, #21
 8005666:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800566a:	4b08      	ldr	r3, [pc, #32]	; (800568c <I2C_TransferConfig+0x60>)
 800566c:	430b      	orrs	r3, r1
 800566e:	43db      	mvns	r3, r3
 8005670:	ea02 0103 	and.w	r1, r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	430a      	orrs	r2, r1
 800567c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800567e:	bf00      	nop
 8005680:	371c      	adds	r7, #28
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	03ff63ff 	.word	0x03ff63ff

08005690 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b20      	cmp	r3, #32
 80056a4:	d138      	bne.n	8005718 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d101      	bne.n	80056b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80056b0:	2302      	movs	r3, #2
 80056b2:	e032      	b.n	800571a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2224      	movs	r2, #36	; 0x24
 80056c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f022 0201 	bic.w	r2, r2, #1
 80056d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6819      	ldr	r1, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f042 0201 	orr.w	r2, r2, #1
 8005702:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2220      	movs	r2, #32
 8005708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005714:	2300      	movs	r3, #0
 8005716:	e000      	b.n	800571a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005718:	2302      	movs	r3, #2
  }
}
 800571a:	4618      	mov	r0, r3
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr

08005726 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005726:	b480      	push	{r7}
 8005728:	b085      	sub	sp, #20
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
 800572e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b20      	cmp	r3, #32
 800573a:	d139      	bne.n	80057b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005742:	2b01      	cmp	r3, #1
 8005744:	d101      	bne.n	800574a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005746:	2302      	movs	r3, #2
 8005748:	e033      	b.n	80057b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2224      	movs	r2, #36	; 0x24
 8005756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f022 0201 	bic.w	r2, r2, #1
 8005768:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005778:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	021b      	lsls	r3, r3, #8
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	4313      	orrs	r3, r2
 8005782:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f042 0201 	orr.w	r2, r2, #1
 800579a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2220      	movs	r2, #32
 80057a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80057ac:	2300      	movs	r3, #0
 80057ae:	e000      	b.n	80057b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80057b0:	2302      	movs	r3, #2
  }
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
	...

080057c0 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	460b      	mov	r3, r1
 80057ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10c      	bne.n	80057ec <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 80057d2:	4b13      	ldr	r3, [pc, #76]	; (8005820 <HAL_PWR_EnterSLEEPMode+0x60>)
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057de:	d10e      	bne.n	80057fe <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80057e0:	f000 f896 	bl	8005910 <HAL_PWREx_DisableLowPowerRunMode>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d009      	beq.n	80057fe <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 80057ea:	e016      	b.n	800581a <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 80057ec:	4b0c      	ldr	r3, [pc, #48]	; (8005820 <HAL_PWR_EnterSLEEPMode+0x60>)
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057f8:	d001      	beq.n	80057fe <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80057fa:	f000 f879 	bl	80058f0 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80057fe:	4b09      	ldr	r3, [pc, #36]	; (8005824 <HAL_PWR_EnterSLEEPMode+0x64>)
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	4a08      	ldr	r2, [pc, #32]	; (8005824 <HAL_PWR_EnterSLEEPMode+0x64>)
 8005804:	f023 0304 	bic.w	r3, r3, #4
 8005808:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800580a:	78fb      	ldrb	r3, [r7, #3]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d101      	bne.n	8005814 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005810:	bf30      	wfi
 8005812:	e002      	b.n	800581a <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005814:	bf40      	sev
    __WFE();
 8005816:	bf20      	wfe
    __WFE();
 8005818:	bf20      	wfe
  }

}
 800581a:	3708      	adds	r7, #8
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	40007000 	.word	0x40007000
 8005824:	e000ed00 	.word	0xe000ed00

08005828 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005828:	b480      	push	{r7}
 800582a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800582c:	4b04      	ldr	r3, [pc, #16]	; (8005840 <HAL_PWREx_GetVoltageRange+0x18>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005834:	4618      	mov	r0, r3
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	40007000 	.word	0x40007000

08005844 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005852:	d130      	bne.n	80058b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005854:	4b23      	ldr	r3, [pc, #140]	; (80058e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800585c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005860:	d038      	beq.n	80058d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005862:	4b20      	ldr	r3, [pc, #128]	; (80058e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800586a:	4a1e      	ldr	r2, [pc, #120]	; (80058e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800586c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005870:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005872:	4b1d      	ldr	r3, [pc, #116]	; (80058e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2232      	movs	r2, #50	; 0x32
 8005878:	fb02 f303 	mul.w	r3, r2, r3
 800587c:	4a1b      	ldr	r2, [pc, #108]	; (80058ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800587e:	fba2 2303 	umull	r2, r3, r2, r3
 8005882:	0c9b      	lsrs	r3, r3, #18
 8005884:	3301      	adds	r3, #1
 8005886:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005888:	e002      	b.n	8005890 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	3b01      	subs	r3, #1
 800588e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005890:	4b14      	ldr	r3, [pc, #80]	; (80058e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005898:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800589c:	d102      	bne.n	80058a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1f2      	bne.n	800588a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80058a4:	4b0f      	ldr	r3, [pc, #60]	; (80058e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058b0:	d110      	bne.n	80058d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e00f      	b.n	80058d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80058b6:	4b0b      	ldr	r3, [pc, #44]	; (80058e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80058be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058c2:	d007      	beq.n	80058d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80058c4:	4b07      	ldr	r3, [pc, #28]	; (80058e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80058cc:	4a05      	ldr	r2, [pc, #20]	; (80058e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3714      	adds	r7, #20
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	40007000 	.word	0x40007000
 80058e8:	2000000c 	.word	0x2000000c
 80058ec:	431bde83 	.word	0x431bde83

080058f0 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80058f0:	b480      	push	{r7}
 80058f2:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80058f4:	4b05      	ldr	r3, [pc, #20]	; (800590c <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a04      	ldr	r2, [pc, #16]	; (800590c <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 80058fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058fe:	6013      	str	r3, [r2, #0]
}
 8005900:	bf00      	nop
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	40007000 	.word	0x40007000

08005910 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8005916:	4b17      	ldr	r3, [pc, #92]	; (8005974 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a16      	ldr	r2, [pc, #88]	; (8005974 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800591c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005920:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005922:	4b15      	ldr	r3, [pc, #84]	; (8005978 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2232      	movs	r2, #50	; 0x32
 8005928:	fb02 f303 	mul.w	r3, r2, r3
 800592c:	4a13      	ldr	r2, [pc, #76]	; (800597c <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 800592e:	fba2 2303 	umull	r2, r3, r2, r3
 8005932:	0c9b      	lsrs	r3, r3, #18
 8005934:	3301      	adds	r3, #1
 8005936:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005938:	e002      	b.n	8005940 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	3b01      	subs	r3, #1
 800593e:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005940:	4b0c      	ldr	r3, [pc, #48]	; (8005974 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800594c:	d102      	bne.n	8005954 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d1f2      	bne.n	800593a <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8005954:	4b07      	ldr	r3, [pc, #28]	; (8005974 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800595c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005960:	d101      	bne.n	8005966 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e000      	b.n	8005968 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr
 8005974:	40007000 	.word	0x40007000
 8005978:	2000000c 	.word	0x2000000c
 800597c:	431bde83 	.word	0x431bde83

08005980 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b088      	sub	sp, #32
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d102      	bne.n	8005994 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	f000 bc02 	b.w	8006198 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005994:	4b96      	ldr	r3, [pc, #600]	; (8005bf0 <HAL_RCC_OscConfig+0x270>)
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f003 030c 	and.w	r3, r3, #12
 800599c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800599e:	4b94      	ldr	r3, [pc, #592]	; (8005bf0 <HAL_RCC_OscConfig+0x270>)
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	f003 0303 	and.w	r3, r3, #3
 80059a6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0310 	and.w	r3, r3, #16
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f000 80e4 	beq.w	8005b7e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d007      	beq.n	80059cc <HAL_RCC_OscConfig+0x4c>
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	2b0c      	cmp	r3, #12
 80059c0:	f040 808b 	bne.w	8005ada <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	f040 8087 	bne.w	8005ada <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80059cc:	4b88      	ldr	r3, [pc, #544]	; (8005bf0 <HAL_RCC_OscConfig+0x270>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0302 	and.w	r3, r3, #2
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d005      	beq.n	80059e4 <HAL_RCC_OscConfig+0x64>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d101      	bne.n	80059e4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e3d9      	b.n	8006198 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a1a      	ldr	r2, [r3, #32]
 80059e8:	4b81      	ldr	r3, [pc, #516]	; (8005bf0 <HAL_RCC_OscConfig+0x270>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0308 	and.w	r3, r3, #8
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d004      	beq.n	80059fe <HAL_RCC_OscConfig+0x7e>
 80059f4:	4b7e      	ldr	r3, [pc, #504]	; (8005bf0 <HAL_RCC_OscConfig+0x270>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059fc:	e005      	b.n	8005a0a <HAL_RCC_OscConfig+0x8a>
 80059fe:	4b7c      	ldr	r3, [pc, #496]	; (8005bf0 <HAL_RCC_OscConfig+0x270>)
 8005a00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a04:	091b      	lsrs	r3, r3, #4
 8005a06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d223      	bcs.n	8005a56 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f000 fd54 	bl	80064c0 <RCC_SetFlashLatencyFromMSIRange>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d001      	beq.n	8005a22 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e3ba      	b.n	8006198 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a22:	4b73      	ldr	r3, [pc, #460]	; (8005bf0 <HAL_RCC_OscConfig+0x270>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a72      	ldr	r2, [pc, #456]	; (8005bf0 <HAL_RCC_OscConfig+0x270>)
 8005a28:	f043 0308 	orr.w	r3, r3, #8
 8005a2c:	6013      	str	r3, [r2, #0]
 8005a2e:	4b70      	ldr	r3, [pc, #448]	; (8005bf0 <HAL_RCC_OscConfig+0x270>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	496d      	ldr	r1, [pc, #436]	; (8005bf0 <HAL_RCC_OscConfig+0x270>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a40:	4b6b      	ldr	r3, [pc, #428]	; (8005bf0 <HAL_RCC_OscConfig+0x270>)
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	69db      	ldr	r3, [r3, #28]
 8005a4c:	021b      	lsls	r3, r3, #8
 8005a4e:	4968      	ldr	r1, [pc, #416]	; (8005bf0 <HAL_RCC_OscConfig+0x270>)
 8005a50:	4313      	orrs	r3, r2
 8005a52:	604b      	str	r3, [r1, #4]
 8005a54:	e025      	b.n	8005aa2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a56:	4b66      	ldr	r3, [pc, #408]	; (8005bf0 <HAL_RCC_OscConfig+0x270>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a65      	ldr	r2, [pc, #404]	; (8005bf0 <HAL_RCC_OscConfig+0x270>)
 8005a5c:	f043 0308 	orr.w	r3, r3, #8
 8005a60:	6013      	str	r3, [r2, #0]
 8005a62:	4b63      	ldr	r3, [pc, #396]	; (8005bf0 <HAL_RCC_OscConfig+0x270>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	4960      	ldr	r1, [pc, #384]	; (8005bf0 <HAL_RCC_OscConfig+0x270>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a74:	4b5e      	ldr	r3, [pc, #376]	; (8005bf0 <HAL_RCC_OscConfig+0x270>)
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	69db      	ldr	r3, [r3, #28]
 8005a80:	021b      	lsls	r3, r3, #8
 8005a82:	495b      	ldr	r1, [pc, #364]	; (8005bf0 <HAL_RCC_OscConfig+0x270>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d109      	bne.n	8005aa2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	4618      	mov	r0, r3
 8005a94:	f000 fd14 	bl	80064c0 <RCC_SetFlashLatencyFromMSIRange>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e37a      	b.n	8006198 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005aa2:	f000 fc81 	bl	80063a8 <HAL_RCC_GetSysClockFreq>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	4b51      	ldr	r3, [pc, #324]	; (8005bf0 <HAL_RCC_OscConfig+0x270>)
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	091b      	lsrs	r3, r3, #4
 8005aae:	f003 030f 	and.w	r3, r3, #15
 8005ab2:	4950      	ldr	r1, [pc, #320]	; (8005bf4 <HAL_RCC_OscConfig+0x274>)
 8005ab4:	5ccb      	ldrb	r3, [r1, r3]
 8005ab6:	f003 031f 	and.w	r3, r3, #31
 8005aba:	fa22 f303 	lsr.w	r3, r2, r3
 8005abe:	4a4e      	ldr	r2, [pc, #312]	; (8005bf8 <HAL_RCC_OscConfig+0x278>)
 8005ac0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005ac2:	4b4e      	ldr	r3, [pc, #312]	; (8005bfc <HAL_RCC_OscConfig+0x27c>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7fd fa6c 	bl	8002fa4 <HAL_InitTick>
 8005acc:	4603      	mov	r3, r0
 8005ace:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005ad0:	7bfb      	ldrb	r3, [r7, #15]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d052      	beq.n	8005b7c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005ad6:	7bfb      	ldrb	r3, [r7, #15]
 8005ad8:	e35e      	b.n	8006198 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d032      	beq.n	8005b48 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005ae2:	4b43      	ldr	r3, [pc, #268]	; (8005bf0 <HAL_RCC_OscConfig+0x270>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a42      	ldr	r2, [pc, #264]	; (8005bf0 <HAL_RCC_OscConfig+0x270>)
 8005ae8:	f043 0301 	orr.w	r3, r3, #1
 8005aec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005aee:	f7fd faa9 	bl	8003044 <HAL_GetTick>
 8005af2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005af4:	e008      	b.n	8005b08 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005af6:	f7fd faa5 	bl	8003044 <HAL_GetTick>
 8005afa:	4602      	mov	r2, r0
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d901      	bls.n	8005b08 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e347      	b.n	8006198 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b08:	4b39      	ldr	r3, [pc, #228]	; (8005bf0 <HAL_RCC_OscConfig+0x270>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0302 	and.w	r3, r3, #2
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d0f0      	beq.n	8005af6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b14:	4b36      	ldr	r3, [pc, #216]	; (8005bf0 <HAL_RCC_OscConfig+0x270>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a35      	ldr	r2, [pc, #212]	; (8005bf0 <HAL_RCC_OscConfig+0x270>)
 8005b1a:	f043 0308 	orr.w	r3, r3, #8
 8005b1e:	6013      	str	r3, [r2, #0]
 8005b20:	4b33      	ldr	r3, [pc, #204]	; (8005bf0 <HAL_RCC_OscConfig+0x270>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a1b      	ldr	r3, [r3, #32]
 8005b2c:	4930      	ldr	r1, [pc, #192]	; (8005bf0 <HAL_RCC_OscConfig+0x270>)
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b32:	4b2f      	ldr	r3, [pc, #188]	; (8005bf0 <HAL_RCC_OscConfig+0x270>)
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	021b      	lsls	r3, r3, #8
 8005b40:	492b      	ldr	r1, [pc, #172]	; (8005bf0 <HAL_RCC_OscConfig+0x270>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	604b      	str	r3, [r1, #4]
 8005b46:	e01a      	b.n	8005b7e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005b48:	4b29      	ldr	r3, [pc, #164]	; (8005bf0 <HAL_RCC_OscConfig+0x270>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a28      	ldr	r2, [pc, #160]	; (8005bf0 <HAL_RCC_OscConfig+0x270>)
 8005b4e:	f023 0301 	bic.w	r3, r3, #1
 8005b52:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005b54:	f7fd fa76 	bl	8003044 <HAL_GetTick>
 8005b58:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005b5a:	e008      	b.n	8005b6e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b5c:	f7fd fa72 	bl	8003044 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d901      	bls.n	8005b6e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e314      	b.n	8006198 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005b6e:	4b20      	ldr	r3, [pc, #128]	; (8005bf0 <HAL_RCC_OscConfig+0x270>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0302 	and.w	r3, r3, #2
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1f0      	bne.n	8005b5c <HAL_RCC_OscConfig+0x1dc>
 8005b7a:	e000      	b.n	8005b7e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005b7c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d073      	beq.n	8005c72 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	2b08      	cmp	r3, #8
 8005b8e:	d005      	beq.n	8005b9c <HAL_RCC_OscConfig+0x21c>
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	2b0c      	cmp	r3, #12
 8005b94:	d10e      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	2b03      	cmp	r3, #3
 8005b9a:	d10b      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b9c:	4b14      	ldr	r3, [pc, #80]	; (8005bf0 <HAL_RCC_OscConfig+0x270>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d063      	beq.n	8005c70 <HAL_RCC_OscConfig+0x2f0>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d15f      	bne.n	8005c70 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e2f1      	b.n	8006198 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bbc:	d106      	bne.n	8005bcc <HAL_RCC_OscConfig+0x24c>
 8005bbe:	4b0c      	ldr	r3, [pc, #48]	; (8005bf0 <HAL_RCC_OscConfig+0x270>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a0b      	ldr	r2, [pc, #44]	; (8005bf0 <HAL_RCC_OscConfig+0x270>)
 8005bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bc8:	6013      	str	r3, [r2, #0]
 8005bca:	e025      	b.n	8005c18 <HAL_RCC_OscConfig+0x298>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005bd4:	d114      	bne.n	8005c00 <HAL_RCC_OscConfig+0x280>
 8005bd6:	4b06      	ldr	r3, [pc, #24]	; (8005bf0 <HAL_RCC_OscConfig+0x270>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a05      	ldr	r2, [pc, #20]	; (8005bf0 <HAL_RCC_OscConfig+0x270>)
 8005bdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005be0:	6013      	str	r3, [r2, #0]
 8005be2:	4b03      	ldr	r3, [pc, #12]	; (8005bf0 <HAL_RCC_OscConfig+0x270>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a02      	ldr	r2, [pc, #8]	; (8005bf0 <HAL_RCC_OscConfig+0x270>)
 8005be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bec:	6013      	str	r3, [r2, #0]
 8005bee:	e013      	b.n	8005c18 <HAL_RCC_OscConfig+0x298>
 8005bf0:	40021000 	.word	0x40021000
 8005bf4:	0800cdb8 	.word	0x0800cdb8
 8005bf8:	2000000c 	.word	0x2000000c
 8005bfc:	20000010 	.word	0x20000010
 8005c00:	4ba0      	ldr	r3, [pc, #640]	; (8005e84 <HAL_RCC_OscConfig+0x504>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a9f      	ldr	r2, [pc, #636]	; (8005e84 <HAL_RCC_OscConfig+0x504>)
 8005c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c0a:	6013      	str	r3, [r2, #0]
 8005c0c:	4b9d      	ldr	r3, [pc, #628]	; (8005e84 <HAL_RCC_OscConfig+0x504>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a9c      	ldr	r2, [pc, #624]	; (8005e84 <HAL_RCC_OscConfig+0x504>)
 8005c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d013      	beq.n	8005c48 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c20:	f7fd fa10 	bl	8003044 <HAL_GetTick>
 8005c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c26:	e008      	b.n	8005c3a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c28:	f7fd fa0c 	bl	8003044 <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	2b64      	cmp	r3, #100	; 0x64
 8005c34:	d901      	bls.n	8005c3a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e2ae      	b.n	8006198 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c3a:	4b92      	ldr	r3, [pc, #584]	; (8005e84 <HAL_RCC_OscConfig+0x504>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d0f0      	beq.n	8005c28 <HAL_RCC_OscConfig+0x2a8>
 8005c46:	e014      	b.n	8005c72 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c48:	f7fd f9fc 	bl	8003044 <HAL_GetTick>
 8005c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c4e:	e008      	b.n	8005c62 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c50:	f7fd f9f8 	bl	8003044 <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	2b64      	cmp	r3, #100	; 0x64
 8005c5c:	d901      	bls.n	8005c62 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e29a      	b.n	8006198 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c62:	4b88      	ldr	r3, [pc, #544]	; (8005e84 <HAL_RCC_OscConfig+0x504>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1f0      	bne.n	8005c50 <HAL_RCC_OscConfig+0x2d0>
 8005c6e:	e000      	b.n	8005c72 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0302 	and.w	r3, r3, #2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d060      	beq.n	8005d40 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	2b04      	cmp	r3, #4
 8005c82:	d005      	beq.n	8005c90 <HAL_RCC_OscConfig+0x310>
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	2b0c      	cmp	r3, #12
 8005c88:	d119      	bne.n	8005cbe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d116      	bne.n	8005cbe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c90:	4b7c      	ldr	r3, [pc, #496]	; (8005e84 <HAL_RCC_OscConfig+0x504>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d005      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x328>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d101      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e277      	b.n	8006198 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ca8:	4b76      	ldr	r3, [pc, #472]	; (8005e84 <HAL_RCC_OscConfig+0x504>)
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	061b      	lsls	r3, r3, #24
 8005cb6:	4973      	ldr	r1, [pc, #460]	; (8005e84 <HAL_RCC_OscConfig+0x504>)
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cbc:	e040      	b.n	8005d40 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d023      	beq.n	8005d0e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005cc6:	4b6f      	ldr	r3, [pc, #444]	; (8005e84 <HAL_RCC_OscConfig+0x504>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a6e      	ldr	r2, [pc, #440]	; (8005e84 <HAL_RCC_OscConfig+0x504>)
 8005ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cd2:	f7fd f9b7 	bl	8003044 <HAL_GetTick>
 8005cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cd8:	e008      	b.n	8005cec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cda:	f7fd f9b3 	bl	8003044 <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d901      	bls.n	8005cec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e255      	b.n	8006198 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cec:	4b65      	ldr	r3, [pc, #404]	; (8005e84 <HAL_RCC_OscConfig+0x504>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d0f0      	beq.n	8005cda <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cf8:	4b62      	ldr	r3, [pc, #392]	; (8005e84 <HAL_RCC_OscConfig+0x504>)
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	061b      	lsls	r3, r3, #24
 8005d06:	495f      	ldr	r1, [pc, #380]	; (8005e84 <HAL_RCC_OscConfig+0x504>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	604b      	str	r3, [r1, #4]
 8005d0c:	e018      	b.n	8005d40 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d0e:	4b5d      	ldr	r3, [pc, #372]	; (8005e84 <HAL_RCC_OscConfig+0x504>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a5c      	ldr	r2, [pc, #368]	; (8005e84 <HAL_RCC_OscConfig+0x504>)
 8005d14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d1a:	f7fd f993 	bl	8003044 <HAL_GetTick>
 8005d1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d20:	e008      	b.n	8005d34 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d22:	f7fd f98f 	bl	8003044 <HAL_GetTick>
 8005d26:	4602      	mov	r2, r0
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d901      	bls.n	8005d34 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e231      	b.n	8006198 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d34:	4b53      	ldr	r3, [pc, #332]	; (8005e84 <HAL_RCC_OscConfig+0x504>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d1f0      	bne.n	8005d22 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0308 	and.w	r3, r3, #8
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d03c      	beq.n	8005dc6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d01c      	beq.n	8005d8e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d54:	4b4b      	ldr	r3, [pc, #300]	; (8005e84 <HAL_RCC_OscConfig+0x504>)
 8005d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d5a:	4a4a      	ldr	r2, [pc, #296]	; (8005e84 <HAL_RCC_OscConfig+0x504>)
 8005d5c:	f043 0301 	orr.w	r3, r3, #1
 8005d60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d64:	f7fd f96e 	bl	8003044 <HAL_GetTick>
 8005d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d6a:	e008      	b.n	8005d7e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d6c:	f7fd f96a 	bl	8003044 <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d901      	bls.n	8005d7e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e20c      	b.n	8006198 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d7e:	4b41      	ldr	r3, [pc, #260]	; (8005e84 <HAL_RCC_OscConfig+0x504>)
 8005d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d84:	f003 0302 	and.w	r3, r3, #2
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d0ef      	beq.n	8005d6c <HAL_RCC_OscConfig+0x3ec>
 8005d8c:	e01b      	b.n	8005dc6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d8e:	4b3d      	ldr	r3, [pc, #244]	; (8005e84 <HAL_RCC_OscConfig+0x504>)
 8005d90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d94:	4a3b      	ldr	r2, [pc, #236]	; (8005e84 <HAL_RCC_OscConfig+0x504>)
 8005d96:	f023 0301 	bic.w	r3, r3, #1
 8005d9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d9e:	f7fd f951 	bl	8003044 <HAL_GetTick>
 8005da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005da4:	e008      	b.n	8005db8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005da6:	f7fd f94d 	bl	8003044 <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d901      	bls.n	8005db8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e1ef      	b.n	8006198 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005db8:	4b32      	ldr	r3, [pc, #200]	; (8005e84 <HAL_RCC_OscConfig+0x504>)
 8005dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1ef      	bne.n	8005da6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0304 	and.w	r3, r3, #4
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f000 80a6 	beq.w	8005f20 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005dd8:	4b2a      	ldr	r3, [pc, #168]	; (8005e84 <HAL_RCC_OscConfig+0x504>)
 8005dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d10d      	bne.n	8005e00 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005de4:	4b27      	ldr	r3, [pc, #156]	; (8005e84 <HAL_RCC_OscConfig+0x504>)
 8005de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005de8:	4a26      	ldr	r2, [pc, #152]	; (8005e84 <HAL_RCC_OscConfig+0x504>)
 8005dea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dee:	6593      	str	r3, [r2, #88]	; 0x58
 8005df0:	4b24      	ldr	r3, [pc, #144]	; (8005e84 <HAL_RCC_OscConfig+0x504>)
 8005df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005df8:	60bb      	str	r3, [r7, #8]
 8005dfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e00:	4b21      	ldr	r3, [pc, #132]	; (8005e88 <HAL_RCC_OscConfig+0x508>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d118      	bne.n	8005e3e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e0c:	4b1e      	ldr	r3, [pc, #120]	; (8005e88 <HAL_RCC_OscConfig+0x508>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a1d      	ldr	r2, [pc, #116]	; (8005e88 <HAL_RCC_OscConfig+0x508>)
 8005e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e18:	f7fd f914 	bl	8003044 <HAL_GetTick>
 8005e1c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e1e:	e008      	b.n	8005e32 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e20:	f7fd f910 	bl	8003044 <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d901      	bls.n	8005e32 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e1b2      	b.n	8006198 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e32:	4b15      	ldr	r3, [pc, #84]	; (8005e88 <HAL_RCC_OscConfig+0x508>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d0f0      	beq.n	8005e20 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d108      	bne.n	8005e58 <HAL_RCC_OscConfig+0x4d8>
 8005e46:	4b0f      	ldr	r3, [pc, #60]	; (8005e84 <HAL_RCC_OscConfig+0x504>)
 8005e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e4c:	4a0d      	ldr	r2, [pc, #52]	; (8005e84 <HAL_RCC_OscConfig+0x504>)
 8005e4e:	f043 0301 	orr.w	r3, r3, #1
 8005e52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e56:	e029      	b.n	8005eac <HAL_RCC_OscConfig+0x52c>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	2b05      	cmp	r3, #5
 8005e5e:	d115      	bne.n	8005e8c <HAL_RCC_OscConfig+0x50c>
 8005e60:	4b08      	ldr	r3, [pc, #32]	; (8005e84 <HAL_RCC_OscConfig+0x504>)
 8005e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e66:	4a07      	ldr	r2, [pc, #28]	; (8005e84 <HAL_RCC_OscConfig+0x504>)
 8005e68:	f043 0304 	orr.w	r3, r3, #4
 8005e6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e70:	4b04      	ldr	r3, [pc, #16]	; (8005e84 <HAL_RCC_OscConfig+0x504>)
 8005e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e76:	4a03      	ldr	r2, [pc, #12]	; (8005e84 <HAL_RCC_OscConfig+0x504>)
 8005e78:	f043 0301 	orr.w	r3, r3, #1
 8005e7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e80:	e014      	b.n	8005eac <HAL_RCC_OscConfig+0x52c>
 8005e82:	bf00      	nop
 8005e84:	40021000 	.word	0x40021000
 8005e88:	40007000 	.word	0x40007000
 8005e8c:	4b9a      	ldr	r3, [pc, #616]	; (80060f8 <HAL_RCC_OscConfig+0x778>)
 8005e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e92:	4a99      	ldr	r2, [pc, #612]	; (80060f8 <HAL_RCC_OscConfig+0x778>)
 8005e94:	f023 0301 	bic.w	r3, r3, #1
 8005e98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e9c:	4b96      	ldr	r3, [pc, #600]	; (80060f8 <HAL_RCC_OscConfig+0x778>)
 8005e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea2:	4a95      	ldr	r2, [pc, #596]	; (80060f8 <HAL_RCC_OscConfig+0x778>)
 8005ea4:	f023 0304 	bic.w	r3, r3, #4
 8005ea8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d016      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eb4:	f7fd f8c6 	bl	8003044 <HAL_GetTick>
 8005eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005eba:	e00a      	b.n	8005ed2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ebc:	f7fd f8c2 	bl	8003044 <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d901      	bls.n	8005ed2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e162      	b.n	8006198 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ed2:	4b89      	ldr	r3, [pc, #548]	; (80060f8 <HAL_RCC_OscConfig+0x778>)
 8005ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ed8:	f003 0302 	and.w	r3, r3, #2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d0ed      	beq.n	8005ebc <HAL_RCC_OscConfig+0x53c>
 8005ee0:	e015      	b.n	8005f0e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ee2:	f7fd f8af 	bl	8003044 <HAL_GetTick>
 8005ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ee8:	e00a      	b.n	8005f00 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eea:	f7fd f8ab 	bl	8003044 <HAL_GetTick>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d901      	bls.n	8005f00 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e14b      	b.n	8006198 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f00:	4b7d      	ldr	r3, [pc, #500]	; (80060f8 <HAL_RCC_OscConfig+0x778>)
 8005f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f06:	f003 0302 	and.w	r3, r3, #2
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1ed      	bne.n	8005eea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f0e:	7ffb      	ldrb	r3, [r7, #31]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d105      	bne.n	8005f20 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f14:	4b78      	ldr	r3, [pc, #480]	; (80060f8 <HAL_RCC_OscConfig+0x778>)
 8005f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f18:	4a77      	ldr	r2, [pc, #476]	; (80060f8 <HAL_RCC_OscConfig+0x778>)
 8005f1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f1e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0320 	and.w	r3, r3, #32
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d03c      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d01c      	beq.n	8005f6e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005f34:	4b70      	ldr	r3, [pc, #448]	; (80060f8 <HAL_RCC_OscConfig+0x778>)
 8005f36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f3a:	4a6f      	ldr	r2, [pc, #444]	; (80060f8 <HAL_RCC_OscConfig+0x778>)
 8005f3c:	f043 0301 	orr.w	r3, r3, #1
 8005f40:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f44:	f7fd f87e 	bl	8003044 <HAL_GetTick>
 8005f48:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005f4a:	e008      	b.n	8005f5e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f4c:	f7fd f87a 	bl	8003044 <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d901      	bls.n	8005f5e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e11c      	b.n	8006198 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005f5e:	4b66      	ldr	r3, [pc, #408]	; (80060f8 <HAL_RCC_OscConfig+0x778>)
 8005f60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f64:	f003 0302 	and.w	r3, r3, #2
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d0ef      	beq.n	8005f4c <HAL_RCC_OscConfig+0x5cc>
 8005f6c:	e01b      	b.n	8005fa6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005f6e:	4b62      	ldr	r3, [pc, #392]	; (80060f8 <HAL_RCC_OscConfig+0x778>)
 8005f70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f74:	4a60      	ldr	r2, [pc, #384]	; (80060f8 <HAL_RCC_OscConfig+0x778>)
 8005f76:	f023 0301 	bic.w	r3, r3, #1
 8005f7a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f7e:	f7fd f861 	bl	8003044 <HAL_GetTick>
 8005f82:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f84:	e008      	b.n	8005f98 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f86:	f7fd f85d 	bl	8003044 <HAL_GetTick>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d901      	bls.n	8005f98 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	e0ff      	b.n	8006198 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f98:	4b57      	ldr	r3, [pc, #348]	; (80060f8 <HAL_RCC_OscConfig+0x778>)
 8005f9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f9e:	f003 0302 	and.w	r3, r3, #2
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1ef      	bne.n	8005f86 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f000 80f3 	beq.w	8006196 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	f040 80c9 	bne.w	800614c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005fba:	4b4f      	ldr	r3, [pc, #316]	; (80060f8 <HAL_RCC_OscConfig+0x778>)
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	f003 0203 	and.w	r2, r3, #3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d12c      	bne.n	8006028 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d123      	bne.n	8006028 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fea:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d11b      	bne.n	8006028 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d113      	bne.n	8006028 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800600a:	085b      	lsrs	r3, r3, #1
 800600c:	3b01      	subs	r3, #1
 800600e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006010:	429a      	cmp	r2, r3
 8006012:	d109      	bne.n	8006028 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601e:	085b      	lsrs	r3, r3, #1
 8006020:	3b01      	subs	r3, #1
 8006022:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006024:	429a      	cmp	r2, r3
 8006026:	d06b      	beq.n	8006100 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	2b0c      	cmp	r3, #12
 800602c:	d062      	beq.n	80060f4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800602e:	4b32      	ldr	r3, [pc, #200]	; (80060f8 <HAL_RCC_OscConfig+0x778>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d001      	beq.n	800603e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e0ac      	b.n	8006198 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800603e:	4b2e      	ldr	r3, [pc, #184]	; (80060f8 <HAL_RCC_OscConfig+0x778>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a2d      	ldr	r2, [pc, #180]	; (80060f8 <HAL_RCC_OscConfig+0x778>)
 8006044:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006048:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800604a:	f7fc fffb 	bl	8003044 <HAL_GetTick>
 800604e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006050:	e008      	b.n	8006064 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006052:	f7fc fff7 	bl	8003044 <HAL_GetTick>
 8006056:	4602      	mov	r2, r0
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	2b02      	cmp	r3, #2
 800605e:	d901      	bls.n	8006064 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	e099      	b.n	8006198 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006064:	4b24      	ldr	r3, [pc, #144]	; (80060f8 <HAL_RCC_OscConfig+0x778>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1f0      	bne.n	8006052 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006070:	4b21      	ldr	r3, [pc, #132]	; (80060f8 <HAL_RCC_OscConfig+0x778>)
 8006072:	68da      	ldr	r2, [r3, #12]
 8006074:	4b21      	ldr	r3, [pc, #132]	; (80060fc <HAL_RCC_OscConfig+0x77c>)
 8006076:	4013      	ands	r3, r2
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006080:	3a01      	subs	r2, #1
 8006082:	0112      	lsls	r2, r2, #4
 8006084:	4311      	orrs	r1, r2
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800608a:	0212      	lsls	r2, r2, #8
 800608c:	4311      	orrs	r1, r2
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006092:	0852      	lsrs	r2, r2, #1
 8006094:	3a01      	subs	r2, #1
 8006096:	0552      	lsls	r2, r2, #21
 8006098:	4311      	orrs	r1, r2
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800609e:	0852      	lsrs	r2, r2, #1
 80060a0:	3a01      	subs	r2, #1
 80060a2:	0652      	lsls	r2, r2, #25
 80060a4:	4311      	orrs	r1, r2
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80060aa:	06d2      	lsls	r2, r2, #27
 80060ac:	430a      	orrs	r2, r1
 80060ae:	4912      	ldr	r1, [pc, #72]	; (80060f8 <HAL_RCC_OscConfig+0x778>)
 80060b0:	4313      	orrs	r3, r2
 80060b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80060b4:	4b10      	ldr	r3, [pc, #64]	; (80060f8 <HAL_RCC_OscConfig+0x778>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a0f      	ldr	r2, [pc, #60]	; (80060f8 <HAL_RCC_OscConfig+0x778>)
 80060ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80060c0:	4b0d      	ldr	r3, [pc, #52]	; (80060f8 <HAL_RCC_OscConfig+0x778>)
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	4a0c      	ldr	r2, [pc, #48]	; (80060f8 <HAL_RCC_OscConfig+0x778>)
 80060c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80060cc:	f7fc ffba 	bl	8003044 <HAL_GetTick>
 80060d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060d2:	e008      	b.n	80060e6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060d4:	f7fc ffb6 	bl	8003044 <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d901      	bls.n	80060e6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e058      	b.n	8006198 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060e6:	4b04      	ldr	r3, [pc, #16]	; (80060f8 <HAL_RCC_OscConfig+0x778>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d0f0      	beq.n	80060d4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80060f2:	e050      	b.n	8006196 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e04f      	b.n	8006198 <HAL_RCC_OscConfig+0x818>
 80060f8:	40021000 	.word	0x40021000
 80060fc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006100:	4b27      	ldr	r3, [pc, #156]	; (80061a0 <HAL_RCC_OscConfig+0x820>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d144      	bne.n	8006196 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800610c:	4b24      	ldr	r3, [pc, #144]	; (80061a0 <HAL_RCC_OscConfig+0x820>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a23      	ldr	r2, [pc, #140]	; (80061a0 <HAL_RCC_OscConfig+0x820>)
 8006112:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006116:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006118:	4b21      	ldr	r3, [pc, #132]	; (80061a0 <HAL_RCC_OscConfig+0x820>)
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	4a20      	ldr	r2, [pc, #128]	; (80061a0 <HAL_RCC_OscConfig+0x820>)
 800611e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006122:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006124:	f7fc ff8e 	bl	8003044 <HAL_GetTick>
 8006128:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800612a:	e008      	b.n	800613e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800612c:	f7fc ff8a 	bl	8003044 <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	2b02      	cmp	r3, #2
 8006138:	d901      	bls.n	800613e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e02c      	b.n	8006198 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800613e:	4b18      	ldr	r3, [pc, #96]	; (80061a0 <HAL_RCC_OscConfig+0x820>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d0f0      	beq.n	800612c <HAL_RCC_OscConfig+0x7ac>
 800614a:	e024      	b.n	8006196 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	2b0c      	cmp	r3, #12
 8006150:	d01f      	beq.n	8006192 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006152:	4b13      	ldr	r3, [pc, #76]	; (80061a0 <HAL_RCC_OscConfig+0x820>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a12      	ldr	r2, [pc, #72]	; (80061a0 <HAL_RCC_OscConfig+0x820>)
 8006158:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800615c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800615e:	f7fc ff71 	bl	8003044 <HAL_GetTick>
 8006162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006164:	e008      	b.n	8006178 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006166:	f7fc ff6d 	bl	8003044 <HAL_GetTick>
 800616a:	4602      	mov	r2, r0
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	2b02      	cmp	r3, #2
 8006172:	d901      	bls.n	8006178 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006174:	2303      	movs	r3, #3
 8006176:	e00f      	b.n	8006198 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006178:	4b09      	ldr	r3, [pc, #36]	; (80061a0 <HAL_RCC_OscConfig+0x820>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1f0      	bne.n	8006166 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006184:	4b06      	ldr	r3, [pc, #24]	; (80061a0 <HAL_RCC_OscConfig+0x820>)
 8006186:	68da      	ldr	r2, [r3, #12]
 8006188:	4905      	ldr	r1, [pc, #20]	; (80061a0 <HAL_RCC_OscConfig+0x820>)
 800618a:	4b06      	ldr	r3, [pc, #24]	; (80061a4 <HAL_RCC_OscConfig+0x824>)
 800618c:	4013      	ands	r3, r2
 800618e:	60cb      	str	r3, [r1, #12]
 8006190:	e001      	b.n	8006196 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e000      	b.n	8006198 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3720      	adds	r7, #32
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	40021000 	.word	0x40021000
 80061a4:	feeefffc 	.word	0xfeeefffc

080061a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d101      	bne.n	80061bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e0e7      	b.n	800638c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061bc:	4b75      	ldr	r3, [pc, #468]	; (8006394 <HAL_RCC_ClockConfig+0x1ec>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 0307 	and.w	r3, r3, #7
 80061c4:	683a      	ldr	r2, [r7, #0]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d910      	bls.n	80061ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061ca:	4b72      	ldr	r3, [pc, #456]	; (8006394 <HAL_RCC_ClockConfig+0x1ec>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f023 0207 	bic.w	r2, r3, #7
 80061d2:	4970      	ldr	r1, [pc, #448]	; (8006394 <HAL_RCC_ClockConfig+0x1ec>)
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061da:	4b6e      	ldr	r3, [pc, #440]	; (8006394 <HAL_RCC_ClockConfig+0x1ec>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 0307 	and.w	r3, r3, #7
 80061e2:	683a      	ldr	r2, [r7, #0]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d001      	beq.n	80061ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e0cf      	b.n	800638c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0302 	and.w	r3, r3, #2
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d010      	beq.n	800621a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689a      	ldr	r2, [r3, #8]
 80061fc:	4b66      	ldr	r3, [pc, #408]	; (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006204:	429a      	cmp	r2, r3
 8006206:	d908      	bls.n	800621a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006208:	4b63      	ldr	r3, [pc, #396]	; (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	4960      	ldr	r1, [pc, #384]	; (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 8006216:	4313      	orrs	r3, r2
 8006218:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 0301 	and.w	r3, r3, #1
 8006222:	2b00      	cmp	r3, #0
 8006224:	d04c      	beq.n	80062c0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	2b03      	cmp	r3, #3
 800622c:	d107      	bne.n	800623e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800622e:	4b5a      	ldr	r3, [pc, #360]	; (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d121      	bne.n	800627e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e0a6      	b.n	800638c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	2b02      	cmp	r3, #2
 8006244:	d107      	bne.n	8006256 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006246:	4b54      	ldr	r3, [pc, #336]	; (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800624e:	2b00      	cmp	r3, #0
 8006250:	d115      	bne.n	800627e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e09a      	b.n	800638c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d107      	bne.n	800626e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800625e:	4b4e      	ldr	r3, [pc, #312]	; (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	2b00      	cmp	r3, #0
 8006268:	d109      	bne.n	800627e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e08e      	b.n	800638c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800626e:	4b4a      	ldr	r3, [pc, #296]	; (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e086      	b.n	800638c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800627e:	4b46      	ldr	r3, [pc, #280]	; (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f023 0203 	bic.w	r2, r3, #3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	4943      	ldr	r1, [pc, #268]	; (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 800628c:	4313      	orrs	r3, r2
 800628e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006290:	f7fc fed8 	bl	8003044 <HAL_GetTick>
 8006294:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006296:	e00a      	b.n	80062ae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006298:	f7fc fed4 	bl	8003044 <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d901      	bls.n	80062ae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e06e      	b.n	800638c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062ae:	4b3a      	ldr	r3, [pc, #232]	; (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f003 020c 	and.w	r2, r3, #12
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	429a      	cmp	r2, r3
 80062be:	d1eb      	bne.n	8006298 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0302 	and.w	r3, r3, #2
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d010      	beq.n	80062ee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	689a      	ldr	r2, [r3, #8]
 80062d0:	4b31      	ldr	r3, [pc, #196]	; (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062d8:	429a      	cmp	r2, r3
 80062da:	d208      	bcs.n	80062ee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062dc:	4b2e      	ldr	r3, [pc, #184]	; (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	492b      	ldr	r1, [pc, #172]	; (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 80062ea:	4313      	orrs	r3, r2
 80062ec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062ee:	4b29      	ldr	r3, [pc, #164]	; (8006394 <HAL_RCC_ClockConfig+0x1ec>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0307 	and.w	r3, r3, #7
 80062f6:	683a      	ldr	r2, [r7, #0]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d210      	bcs.n	800631e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062fc:	4b25      	ldr	r3, [pc, #148]	; (8006394 <HAL_RCC_ClockConfig+0x1ec>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f023 0207 	bic.w	r2, r3, #7
 8006304:	4923      	ldr	r1, [pc, #140]	; (8006394 <HAL_RCC_ClockConfig+0x1ec>)
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	4313      	orrs	r3, r2
 800630a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800630c:	4b21      	ldr	r3, [pc, #132]	; (8006394 <HAL_RCC_ClockConfig+0x1ec>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0307 	and.w	r3, r3, #7
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	429a      	cmp	r2, r3
 8006318:	d001      	beq.n	800631e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e036      	b.n	800638c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0304 	and.w	r3, r3, #4
 8006326:	2b00      	cmp	r3, #0
 8006328:	d008      	beq.n	800633c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800632a:	4b1b      	ldr	r3, [pc, #108]	; (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	4918      	ldr	r1, [pc, #96]	; (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 8006338:	4313      	orrs	r3, r2
 800633a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0308 	and.w	r3, r3, #8
 8006344:	2b00      	cmp	r3, #0
 8006346:	d009      	beq.n	800635c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006348:	4b13      	ldr	r3, [pc, #76]	; (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	00db      	lsls	r3, r3, #3
 8006356:	4910      	ldr	r1, [pc, #64]	; (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 8006358:	4313      	orrs	r3, r2
 800635a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800635c:	f000 f824 	bl	80063a8 <HAL_RCC_GetSysClockFreq>
 8006360:	4602      	mov	r2, r0
 8006362:	4b0d      	ldr	r3, [pc, #52]	; (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	091b      	lsrs	r3, r3, #4
 8006368:	f003 030f 	and.w	r3, r3, #15
 800636c:	490b      	ldr	r1, [pc, #44]	; (800639c <HAL_RCC_ClockConfig+0x1f4>)
 800636e:	5ccb      	ldrb	r3, [r1, r3]
 8006370:	f003 031f 	and.w	r3, r3, #31
 8006374:	fa22 f303 	lsr.w	r3, r2, r3
 8006378:	4a09      	ldr	r2, [pc, #36]	; (80063a0 <HAL_RCC_ClockConfig+0x1f8>)
 800637a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800637c:	4b09      	ldr	r3, [pc, #36]	; (80063a4 <HAL_RCC_ClockConfig+0x1fc>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4618      	mov	r0, r3
 8006382:	f7fc fe0f 	bl	8002fa4 <HAL_InitTick>
 8006386:	4603      	mov	r3, r0
 8006388:	72fb      	strb	r3, [r7, #11]

  return status;
 800638a:	7afb      	ldrb	r3, [r7, #11]
}
 800638c:	4618      	mov	r0, r3
 800638e:	3710      	adds	r7, #16
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	40022000 	.word	0x40022000
 8006398:	40021000 	.word	0x40021000
 800639c:	0800cdb8 	.word	0x0800cdb8
 80063a0:	2000000c 	.word	0x2000000c
 80063a4:	20000010 	.word	0x20000010

080063a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b089      	sub	sp, #36	; 0x24
 80063ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80063ae:	2300      	movs	r3, #0
 80063b0:	61fb      	str	r3, [r7, #28]
 80063b2:	2300      	movs	r3, #0
 80063b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063b6:	4b3e      	ldr	r3, [pc, #248]	; (80064b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	f003 030c 	and.w	r3, r3, #12
 80063be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80063c0:	4b3b      	ldr	r3, [pc, #236]	; (80064b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	f003 0303 	and.w	r3, r3, #3
 80063c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d005      	beq.n	80063dc <HAL_RCC_GetSysClockFreq+0x34>
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	2b0c      	cmp	r3, #12
 80063d4:	d121      	bne.n	800641a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d11e      	bne.n	800641a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80063dc:	4b34      	ldr	r3, [pc, #208]	; (80064b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0308 	and.w	r3, r3, #8
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d107      	bne.n	80063f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80063e8:	4b31      	ldr	r3, [pc, #196]	; (80064b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80063ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063ee:	0a1b      	lsrs	r3, r3, #8
 80063f0:	f003 030f 	and.w	r3, r3, #15
 80063f4:	61fb      	str	r3, [r7, #28]
 80063f6:	e005      	b.n	8006404 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80063f8:	4b2d      	ldr	r3, [pc, #180]	; (80064b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	091b      	lsrs	r3, r3, #4
 80063fe:	f003 030f 	and.w	r3, r3, #15
 8006402:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006404:	4a2b      	ldr	r2, [pc, #172]	; (80064b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800640c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10d      	bne.n	8006430 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006418:	e00a      	b.n	8006430 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	2b04      	cmp	r3, #4
 800641e:	d102      	bne.n	8006426 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006420:	4b25      	ldr	r3, [pc, #148]	; (80064b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006422:	61bb      	str	r3, [r7, #24]
 8006424:	e004      	b.n	8006430 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	2b08      	cmp	r3, #8
 800642a:	d101      	bne.n	8006430 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800642c:	4b23      	ldr	r3, [pc, #140]	; (80064bc <HAL_RCC_GetSysClockFreq+0x114>)
 800642e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	2b0c      	cmp	r3, #12
 8006434:	d134      	bne.n	80064a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006436:	4b1e      	ldr	r3, [pc, #120]	; (80064b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	f003 0303 	and.w	r3, r3, #3
 800643e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	2b02      	cmp	r3, #2
 8006444:	d003      	beq.n	800644e <HAL_RCC_GetSysClockFreq+0xa6>
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	2b03      	cmp	r3, #3
 800644a:	d003      	beq.n	8006454 <HAL_RCC_GetSysClockFreq+0xac>
 800644c:	e005      	b.n	800645a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800644e:	4b1a      	ldr	r3, [pc, #104]	; (80064b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006450:	617b      	str	r3, [r7, #20]
      break;
 8006452:	e005      	b.n	8006460 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006454:	4b19      	ldr	r3, [pc, #100]	; (80064bc <HAL_RCC_GetSysClockFreq+0x114>)
 8006456:	617b      	str	r3, [r7, #20]
      break;
 8006458:	e002      	b.n	8006460 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	617b      	str	r3, [r7, #20]
      break;
 800645e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006460:	4b13      	ldr	r3, [pc, #76]	; (80064b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	091b      	lsrs	r3, r3, #4
 8006466:	f003 0307 	and.w	r3, r3, #7
 800646a:	3301      	adds	r3, #1
 800646c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800646e:	4b10      	ldr	r3, [pc, #64]	; (80064b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	0a1b      	lsrs	r3, r3, #8
 8006474:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006478:	697a      	ldr	r2, [r7, #20]
 800647a:	fb03 f202 	mul.w	r2, r3, r2
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	fbb2 f3f3 	udiv	r3, r2, r3
 8006484:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006486:	4b0a      	ldr	r3, [pc, #40]	; (80064b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	0e5b      	lsrs	r3, r3, #25
 800648c:	f003 0303 	and.w	r3, r3, #3
 8006490:	3301      	adds	r3, #1
 8006492:	005b      	lsls	r3, r3, #1
 8006494:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	fbb2 f3f3 	udiv	r3, r2, r3
 800649e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80064a0:	69bb      	ldr	r3, [r7, #24]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3724      	adds	r7, #36	; 0x24
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	40021000 	.word	0x40021000
 80064b4:	0800cdc8 	.word	0x0800cdc8
 80064b8:	00f42400 	.word	0x00f42400
 80064bc:	007a1200 	.word	0x007a1200

080064c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b086      	sub	sp, #24
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80064c8:	2300      	movs	r3, #0
 80064ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80064cc:	4b2a      	ldr	r3, [pc, #168]	; (8006578 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d003      	beq.n	80064e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80064d8:	f7ff f9a6 	bl	8005828 <HAL_PWREx_GetVoltageRange>
 80064dc:	6178      	str	r0, [r7, #20]
 80064de:	e014      	b.n	800650a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80064e0:	4b25      	ldr	r3, [pc, #148]	; (8006578 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064e4:	4a24      	ldr	r2, [pc, #144]	; (8006578 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064ea:	6593      	str	r3, [r2, #88]	; 0x58
 80064ec:	4b22      	ldr	r3, [pc, #136]	; (8006578 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064f4:	60fb      	str	r3, [r7, #12]
 80064f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80064f8:	f7ff f996 	bl	8005828 <HAL_PWREx_GetVoltageRange>
 80064fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80064fe:	4b1e      	ldr	r3, [pc, #120]	; (8006578 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006502:	4a1d      	ldr	r2, [pc, #116]	; (8006578 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006508:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006510:	d10b      	bne.n	800652a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2b80      	cmp	r3, #128	; 0x80
 8006516:	d919      	bls.n	800654c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2ba0      	cmp	r3, #160	; 0xa0
 800651c:	d902      	bls.n	8006524 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800651e:	2302      	movs	r3, #2
 8006520:	613b      	str	r3, [r7, #16]
 8006522:	e013      	b.n	800654c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006524:	2301      	movs	r3, #1
 8006526:	613b      	str	r3, [r7, #16]
 8006528:	e010      	b.n	800654c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2b80      	cmp	r3, #128	; 0x80
 800652e:	d902      	bls.n	8006536 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006530:	2303      	movs	r3, #3
 8006532:	613b      	str	r3, [r7, #16]
 8006534:	e00a      	b.n	800654c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2b80      	cmp	r3, #128	; 0x80
 800653a:	d102      	bne.n	8006542 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800653c:	2302      	movs	r3, #2
 800653e:	613b      	str	r3, [r7, #16]
 8006540:	e004      	b.n	800654c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2b70      	cmp	r3, #112	; 0x70
 8006546:	d101      	bne.n	800654c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006548:	2301      	movs	r3, #1
 800654a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800654c:	4b0b      	ldr	r3, [pc, #44]	; (800657c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f023 0207 	bic.w	r2, r3, #7
 8006554:	4909      	ldr	r1, [pc, #36]	; (800657c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	4313      	orrs	r3, r2
 800655a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800655c:	4b07      	ldr	r3, [pc, #28]	; (800657c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0307 	and.w	r3, r3, #7
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	429a      	cmp	r2, r3
 8006568:	d001      	beq.n	800656e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e000      	b.n	8006570 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3718      	adds	r7, #24
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	40021000 	.word	0x40021000
 800657c:	40022000 	.word	0x40022000

08006580 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b086      	sub	sp, #24
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006588:	2300      	movs	r3, #0
 800658a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800658c:	2300      	movs	r3, #0
 800658e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006598:	2b00      	cmp	r3, #0
 800659a:	d031      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80065a4:	d01a      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80065a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80065aa:	d814      	bhi.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d009      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80065b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80065b4:	d10f      	bne.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80065b6:	4b5d      	ldr	r3, [pc, #372]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	4a5c      	ldr	r2, [pc, #368]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065c0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80065c2:	e00c      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	3304      	adds	r3, #4
 80065c8:	2100      	movs	r1, #0
 80065ca:	4618      	mov	r0, r3
 80065cc:	f000 f9f0 	bl	80069b0 <RCCEx_PLLSAI1_Config>
 80065d0:	4603      	mov	r3, r0
 80065d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80065d4:	e003      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	74fb      	strb	r3, [r7, #19]
      break;
 80065da:	e000      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80065dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065de:	7cfb      	ldrb	r3, [r7, #19]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d10b      	bne.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80065e4:	4b51      	ldr	r3, [pc, #324]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065f2:	494e      	ldr	r1, [pc, #312]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065f4:	4313      	orrs	r3, r2
 80065f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80065fa:	e001      	b.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065fc:	7cfb      	ldrb	r3, [r7, #19]
 80065fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006608:	2b00      	cmp	r3, #0
 800660a:	f000 809e 	beq.w	800674a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800660e:	2300      	movs	r3, #0
 8006610:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006612:	4b46      	ldr	r3, [pc, #280]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d101      	bne.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800661e:	2301      	movs	r3, #1
 8006620:	e000      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006622:	2300      	movs	r3, #0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00d      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006628:	4b40      	ldr	r3, [pc, #256]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800662a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800662c:	4a3f      	ldr	r2, [pc, #252]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800662e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006632:	6593      	str	r3, [r2, #88]	; 0x58
 8006634:	4b3d      	ldr	r3, [pc, #244]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800663c:	60bb      	str	r3, [r7, #8]
 800663e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006640:	2301      	movs	r3, #1
 8006642:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006644:	4b3a      	ldr	r3, [pc, #232]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a39      	ldr	r2, [pc, #228]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800664a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800664e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006650:	f7fc fcf8 	bl	8003044 <HAL_GetTick>
 8006654:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006656:	e009      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006658:	f7fc fcf4 	bl	8003044 <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	2b02      	cmp	r3, #2
 8006664:	d902      	bls.n	800666c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	74fb      	strb	r3, [r7, #19]
        break;
 800666a:	e005      	b.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800666c:	4b30      	ldr	r3, [pc, #192]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006674:	2b00      	cmp	r3, #0
 8006676:	d0ef      	beq.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006678:	7cfb      	ldrb	r3, [r7, #19]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d15a      	bne.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800667e:	4b2b      	ldr	r3, [pc, #172]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006684:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006688:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d01e      	beq.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	429a      	cmp	r2, r3
 8006698:	d019      	beq.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800669a:	4b24      	ldr	r3, [pc, #144]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800669c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066a4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80066a6:	4b21      	ldr	r3, [pc, #132]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ac:	4a1f      	ldr	r2, [pc, #124]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80066b6:	4b1d      	ldr	r3, [pc, #116]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066bc:	4a1b      	ldr	r2, [pc, #108]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80066c6:	4a19      	ldr	r2, [pc, #100]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	f003 0301 	and.w	r3, r3, #1
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d016      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066d8:	f7fc fcb4 	bl	8003044 <HAL_GetTick>
 80066dc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066de:	e00b      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066e0:	f7fc fcb0 	bl	8003044 <HAL_GetTick>
 80066e4:	4602      	mov	r2, r0
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d902      	bls.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	74fb      	strb	r3, [r7, #19]
            break;
 80066f6:	e006      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066f8:	4b0c      	ldr	r3, [pc, #48]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066fe:	f003 0302 	and.w	r3, r3, #2
 8006702:	2b00      	cmp	r3, #0
 8006704:	d0ec      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006706:	7cfb      	ldrb	r3, [r7, #19]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10b      	bne.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800670c:	4b07      	ldr	r3, [pc, #28]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800670e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006712:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800671a:	4904      	ldr	r1, [pc, #16]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800671c:	4313      	orrs	r3, r2
 800671e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006722:	e009      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006724:	7cfb      	ldrb	r3, [r7, #19]
 8006726:	74bb      	strb	r3, [r7, #18]
 8006728:	e006      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800672a:	bf00      	nop
 800672c:	40021000 	.word	0x40021000
 8006730:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006734:	7cfb      	ldrb	r3, [r7, #19]
 8006736:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006738:	7c7b      	ldrb	r3, [r7, #17]
 800673a:	2b01      	cmp	r3, #1
 800673c:	d105      	bne.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800673e:	4b9b      	ldr	r3, [pc, #620]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006742:	4a9a      	ldr	r2, [pc, #616]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006744:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006748:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00a      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006756:	4b95      	ldr	r3, [pc, #596]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800675c:	f023 0203 	bic.w	r2, r3, #3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a1b      	ldr	r3, [r3, #32]
 8006764:	4991      	ldr	r1, [pc, #580]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006766:	4313      	orrs	r3, r2
 8006768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0302 	and.w	r3, r3, #2
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00a      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006778:	4b8c      	ldr	r3, [pc, #560]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800677a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800677e:	f023 020c 	bic.w	r2, r3, #12
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006786:	4989      	ldr	r1, [pc, #548]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006788:	4313      	orrs	r3, r2
 800678a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0304 	and.w	r3, r3, #4
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00a      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800679a:	4b84      	ldr	r3, [pc, #528]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800679c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a8:	4980      	ldr	r1, [pc, #512]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80067aa:	4313      	orrs	r3, r2
 80067ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0320 	and.w	r3, r3, #32
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00a      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80067bc:	4b7b      	ldr	r3, [pc, #492]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80067be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ca:	4978      	ldr	r1, [pc, #480]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80067cc:	4313      	orrs	r3, r2
 80067ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00a      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80067de:	4b73      	ldr	r3, [pc, #460]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80067e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ec:	496f      	ldr	r1, [pc, #444]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00a      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006800:	4b6a      	ldr	r3, [pc, #424]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006806:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680e:	4967      	ldr	r1, [pc, #412]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006810:	4313      	orrs	r3, r2
 8006812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800681e:	2b00      	cmp	r3, #0
 8006820:	d00a      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006822:	4b62      	ldr	r3, [pc, #392]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006828:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006830:	495e      	ldr	r1, [pc, #376]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006832:	4313      	orrs	r3, r2
 8006834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00a      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006844:	4b59      	ldr	r3, [pc, #356]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800684a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006852:	4956      	ldr	r1, [pc, #344]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006854:	4313      	orrs	r3, r2
 8006856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00a      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006866:	4b51      	ldr	r3, [pc, #324]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800686c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006874:	494d      	ldr	r1, [pc, #308]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006876:	4313      	orrs	r3, r2
 8006878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006884:	2b00      	cmp	r3, #0
 8006886:	d028      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006888:	4b48      	ldr	r3, [pc, #288]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800688a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800688e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006896:	4945      	ldr	r1, [pc, #276]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006898:	4313      	orrs	r3, r2
 800689a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068a6:	d106      	bne.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068a8:	4b40      	ldr	r3, [pc, #256]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	4a3f      	ldr	r2, [pc, #252]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80068ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068b2:	60d3      	str	r3, [r2, #12]
 80068b4:	e011      	b.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068be:	d10c      	bne.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	3304      	adds	r3, #4
 80068c4:	2101      	movs	r1, #1
 80068c6:	4618      	mov	r0, r3
 80068c8:	f000 f872 	bl	80069b0 <RCCEx_PLLSAI1_Config>
 80068cc:	4603      	mov	r3, r0
 80068ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80068d0:	7cfb      	ldrb	r3, [r7, #19]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d001      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 80068d6:	7cfb      	ldrb	r3, [r7, #19]
 80068d8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d028      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80068e6:	4b31      	ldr	r3, [pc, #196]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80068e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068f4:	492d      	ldr	r1, [pc, #180]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006900:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006904:	d106      	bne.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006906:	4b29      	ldr	r3, [pc, #164]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	4a28      	ldr	r2, [pc, #160]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800690c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006910:	60d3      	str	r3, [r2, #12]
 8006912:	e011      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006918:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800691c:	d10c      	bne.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	3304      	adds	r3, #4
 8006922:	2101      	movs	r1, #1
 8006924:	4618      	mov	r0, r3
 8006926:	f000 f843 	bl	80069b0 <RCCEx_PLLSAI1_Config>
 800692a:	4603      	mov	r3, r0
 800692c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800692e:	7cfb      	ldrb	r3, [r7, #19]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d001      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8006934:	7cfb      	ldrb	r3, [r7, #19]
 8006936:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d01c      	beq.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006944:	4b19      	ldr	r3, [pc, #100]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800694a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006952:	4916      	ldr	r1, [pc, #88]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006954:	4313      	orrs	r3, r2
 8006956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800695e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006962:	d10c      	bne.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	3304      	adds	r3, #4
 8006968:	2102      	movs	r1, #2
 800696a:	4618      	mov	r0, r3
 800696c:	f000 f820 	bl	80069b0 <RCCEx_PLLSAI1_Config>
 8006970:	4603      	mov	r3, r0
 8006972:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006974:	7cfb      	ldrb	r3, [r7, #19]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d001      	beq.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 800697a:	7cfb      	ldrb	r3, [r7, #19]
 800697c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00a      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800698a:	4b08      	ldr	r3, [pc, #32]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800698c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006990:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006998:	4904      	ldr	r1, [pc, #16]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800699a:	4313      	orrs	r3, r2
 800699c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80069a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3718      	adds	r7, #24
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	40021000 	.word	0x40021000

080069b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069ba:	2300      	movs	r3, #0
 80069bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80069be:	4b74      	ldr	r3, [pc, #464]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	f003 0303 	and.w	r3, r3, #3
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d018      	beq.n	80069fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80069ca:	4b71      	ldr	r3, [pc, #452]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	f003 0203 	and.w	r2, r3, #3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d10d      	bne.n	80069f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
       ||
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d009      	beq.n	80069f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80069e2:	4b6b      	ldr	r3, [pc, #428]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	091b      	lsrs	r3, r3, #4
 80069e8:	f003 0307 	and.w	r3, r3, #7
 80069ec:	1c5a      	adds	r2, r3, #1
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	685b      	ldr	r3, [r3, #4]
       ||
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d047      	beq.n	8006a86 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	73fb      	strb	r3, [r7, #15]
 80069fa:	e044      	b.n	8006a86 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2b03      	cmp	r3, #3
 8006a02:	d018      	beq.n	8006a36 <RCCEx_PLLSAI1_Config+0x86>
 8006a04:	2b03      	cmp	r3, #3
 8006a06:	d825      	bhi.n	8006a54 <RCCEx_PLLSAI1_Config+0xa4>
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d002      	beq.n	8006a12 <RCCEx_PLLSAI1_Config+0x62>
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d009      	beq.n	8006a24 <RCCEx_PLLSAI1_Config+0x74>
 8006a10:	e020      	b.n	8006a54 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006a12:	4b5f      	ldr	r3, [pc, #380]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d11d      	bne.n	8006a5a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a22:	e01a      	b.n	8006a5a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006a24:	4b5a      	ldr	r3, [pc, #360]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d116      	bne.n	8006a5e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a34:	e013      	b.n	8006a5e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006a36:	4b56      	ldr	r3, [pc, #344]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10f      	bne.n	8006a62 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006a42:	4b53      	ldr	r3, [pc, #332]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d109      	bne.n	8006a62 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a52:	e006      	b.n	8006a62 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	73fb      	strb	r3, [r7, #15]
      break;
 8006a58:	e004      	b.n	8006a64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006a5a:	bf00      	nop
 8006a5c:	e002      	b.n	8006a64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006a5e:	bf00      	nop
 8006a60:	e000      	b.n	8006a64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006a62:	bf00      	nop
    }

    if(status == HAL_OK)
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10d      	bne.n	8006a86 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006a6a:	4b49      	ldr	r3, [pc, #292]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6819      	ldr	r1, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	011b      	lsls	r3, r3, #4
 8006a7e:	430b      	orrs	r3, r1
 8006a80:	4943      	ldr	r1, [pc, #268]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a82:	4313      	orrs	r3, r2
 8006a84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006a86:	7bfb      	ldrb	r3, [r7, #15]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d17c      	bne.n	8006b86 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006a8c:	4b40      	ldr	r3, [pc, #256]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a3f      	ldr	r2, [pc, #252]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a98:	f7fc fad4 	bl	8003044 <HAL_GetTick>
 8006a9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006a9e:	e009      	b.n	8006ab4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006aa0:	f7fc fad0 	bl	8003044 <HAL_GetTick>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d902      	bls.n	8006ab4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	73fb      	strb	r3, [r7, #15]
        break;
 8006ab2:	e005      	b.n	8006ac0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006ab4:	4b36      	ldr	r3, [pc, #216]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1ef      	bne.n	8006aa0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006ac0:	7bfb      	ldrb	r3, [r7, #15]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d15f      	bne.n	8006b86 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d110      	bne.n	8006aee <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006acc:	4b30      	ldr	r3, [pc, #192]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006ad4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	6892      	ldr	r2, [r2, #8]
 8006adc:	0211      	lsls	r1, r2, #8
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	68d2      	ldr	r2, [r2, #12]
 8006ae2:	06d2      	lsls	r2, r2, #27
 8006ae4:	430a      	orrs	r2, r1
 8006ae6:	492a      	ldr	r1, [pc, #168]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	610b      	str	r3, [r1, #16]
 8006aec:	e027      	b.n	8006b3e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d112      	bne.n	8006b1a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006af4:	4b26      	ldr	r3, [pc, #152]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006afc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	6892      	ldr	r2, [r2, #8]
 8006b04:	0211      	lsls	r1, r2, #8
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	6912      	ldr	r2, [r2, #16]
 8006b0a:	0852      	lsrs	r2, r2, #1
 8006b0c:	3a01      	subs	r2, #1
 8006b0e:	0552      	lsls	r2, r2, #21
 8006b10:	430a      	orrs	r2, r1
 8006b12:	491f      	ldr	r1, [pc, #124]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	610b      	str	r3, [r1, #16]
 8006b18:	e011      	b.n	8006b3e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b1a:	4b1d      	ldr	r3, [pc, #116]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006b22:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	6892      	ldr	r2, [r2, #8]
 8006b2a:	0211      	lsls	r1, r2, #8
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	6952      	ldr	r2, [r2, #20]
 8006b30:	0852      	lsrs	r2, r2, #1
 8006b32:	3a01      	subs	r2, #1
 8006b34:	0652      	lsls	r2, r2, #25
 8006b36:	430a      	orrs	r2, r1
 8006b38:	4915      	ldr	r1, [pc, #84]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006b3e:	4b14      	ldr	r3, [pc, #80]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a13      	ldr	r2, [pc, #76]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b48:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b4a:	f7fc fa7b 	bl	8003044 <HAL_GetTick>
 8006b4e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006b50:	e009      	b.n	8006b66 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b52:	f7fc fa77 	bl	8003044 <HAL_GetTick>
 8006b56:	4602      	mov	r2, r0
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d902      	bls.n	8006b66 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006b60:	2303      	movs	r3, #3
 8006b62:	73fb      	strb	r3, [r7, #15]
          break;
 8006b64:	e005      	b.n	8006b72 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006b66:	4b0a      	ldr	r3, [pc, #40]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d0ef      	beq.n	8006b52 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006b72:	7bfb      	ldrb	r3, [r7, #15]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d106      	bne.n	8006b86 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006b78:	4b05      	ldr	r3, [pc, #20]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b7a:	691a      	ldr	r2, [r3, #16]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	4903      	ldr	r1, [pc, #12]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b82:	4313      	orrs	r3, r2
 8006b84:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3710      	adds	r7, #16
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	40021000 	.word	0x40021000

08006b94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d101      	bne.n	8006ba6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e049      	b.n	8006c3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d106      	bne.n	8006bc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f7fb ffe2 	bl	8002b84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2202      	movs	r2, #2
 8006bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	3304      	adds	r3, #4
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	4610      	mov	r0, r2
 8006bd4:	f000 fda6 	bl	8007724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3708      	adds	r7, #8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
	...

08006c44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d001      	beq.n	8006c5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e03b      	b.n	8006cd4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2202      	movs	r2, #2
 8006c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68da      	ldr	r2, [r3, #12]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f042 0201 	orr.w	r2, r2, #1
 8006c72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a19      	ldr	r2, [pc, #100]	; (8006ce0 <HAL_TIM_Base_Start_IT+0x9c>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d009      	beq.n	8006c92 <HAL_TIM_Base_Start_IT+0x4e>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c86:	d004      	beq.n	8006c92 <HAL_TIM_Base_Start_IT+0x4e>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a15      	ldr	r2, [pc, #84]	; (8006ce4 <HAL_TIM_Base_Start_IT+0xa0>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d115      	bne.n	8006cbe <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	689a      	ldr	r2, [r3, #8]
 8006c98:	4b13      	ldr	r3, [pc, #76]	; (8006ce8 <HAL_TIM_Base_Start_IT+0xa4>)
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2b06      	cmp	r3, #6
 8006ca2:	d015      	beq.n	8006cd0 <HAL_TIM_Base_Start_IT+0x8c>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006caa:	d011      	beq.n	8006cd0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f042 0201 	orr.w	r2, r2, #1
 8006cba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cbc:	e008      	b.n	8006cd0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f042 0201 	orr.w	r2, r2, #1
 8006ccc:	601a      	str	r2, [r3, #0]
 8006cce:	e000      	b.n	8006cd2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cd0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3714      	adds	r7, #20
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr
 8006ce0:	40012c00 	.word	0x40012c00
 8006ce4:	40014000 	.word	0x40014000
 8006ce8:	00010007 	.word	0x00010007

08006cec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68da      	ldr	r2, [r3, #12]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f022 0201 	bic.w	r2, r2, #1
 8006d02:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	6a1a      	ldr	r2, [r3, #32]
 8006d0a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006d0e:	4013      	ands	r3, r2
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d10f      	bne.n	8006d34 <HAL_TIM_Base_Stop_IT+0x48>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6a1a      	ldr	r2, [r3, #32]
 8006d1a:	f240 4344 	movw	r3, #1092	; 0x444
 8006d1e:	4013      	ands	r3, r2
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d107      	bne.n	8006d34 <HAL_TIM_Base_Stop_IT+0x48>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f022 0201 	bic.w	r2, r2, #1
 8006d32:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	370c      	adds	r7, #12
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr

08006d4a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b082      	sub	sp, #8
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d101      	bne.n	8006d5c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e049      	b.n	8006df0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d106      	bne.n	8006d76 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 f841 	bl	8006df8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2202      	movs	r2, #2
 8006d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	3304      	adds	r3, #4
 8006d86:	4619      	mov	r1, r3
 8006d88:	4610      	mov	r0, r2
 8006d8a:	f000 fccb 	bl	8007724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2201      	movs	r2, #1
 8006da2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2201      	movs	r2, #1
 8006dba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2201      	movs	r2, #1
 8006de2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2201      	movs	r2, #1
 8006dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d109      	bne.n	8006e30 <HAL_TIM_PWM_Start+0x24>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	bf14      	ite	ne
 8006e28:	2301      	movne	r3, #1
 8006e2a:	2300      	moveq	r3, #0
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	e03c      	b.n	8006eaa <HAL_TIM_PWM_Start+0x9e>
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	2b04      	cmp	r3, #4
 8006e34:	d109      	bne.n	8006e4a <HAL_TIM_PWM_Start+0x3e>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	bf14      	ite	ne
 8006e42:	2301      	movne	r3, #1
 8006e44:	2300      	moveq	r3, #0
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	e02f      	b.n	8006eaa <HAL_TIM_PWM_Start+0x9e>
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	2b08      	cmp	r3, #8
 8006e4e:	d109      	bne.n	8006e64 <HAL_TIM_PWM_Start+0x58>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	bf14      	ite	ne
 8006e5c:	2301      	movne	r3, #1
 8006e5e:	2300      	moveq	r3, #0
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	e022      	b.n	8006eaa <HAL_TIM_PWM_Start+0x9e>
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	2b0c      	cmp	r3, #12
 8006e68:	d109      	bne.n	8006e7e <HAL_TIM_PWM_Start+0x72>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	bf14      	ite	ne
 8006e76:	2301      	movne	r3, #1
 8006e78:	2300      	moveq	r3, #0
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	e015      	b.n	8006eaa <HAL_TIM_PWM_Start+0x9e>
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	2b10      	cmp	r3, #16
 8006e82:	d109      	bne.n	8006e98 <HAL_TIM_PWM_Start+0x8c>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	bf14      	ite	ne
 8006e90:	2301      	movne	r3, #1
 8006e92:	2300      	moveq	r3, #0
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	e008      	b.n	8006eaa <HAL_TIM_PWM_Start+0x9e>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	bf14      	ite	ne
 8006ea4:	2301      	movne	r3, #1
 8006ea6:	2300      	moveq	r3, #0
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d001      	beq.n	8006eb2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e07e      	b.n	8006fb0 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d104      	bne.n	8006ec2 <HAL_TIM_PWM_Start+0xb6>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2202      	movs	r2, #2
 8006ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ec0:	e023      	b.n	8006f0a <HAL_TIM_PWM_Start+0xfe>
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	2b04      	cmp	r3, #4
 8006ec6:	d104      	bne.n	8006ed2 <HAL_TIM_PWM_Start+0xc6>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2202      	movs	r2, #2
 8006ecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ed0:	e01b      	b.n	8006f0a <HAL_TIM_PWM_Start+0xfe>
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	2b08      	cmp	r3, #8
 8006ed6:	d104      	bne.n	8006ee2 <HAL_TIM_PWM_Start+0xd6>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2202      	movs	r2, #2
 8006edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ee0:	e013      	b.n	8006f0a <HAL_TIM_PWM_Start+0xfe>
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	2b0c      	cmp	r3, #12
 8006ee6:	d104      	bne.n	8006ef2 <HAL_TIM_PWM_Start+0xe6>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2202      	movs	r2, #2
 8006eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ef0:	e00b      	b.n	8006f0a <HAL_TIM_PWM_Start+0xfe>
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	2b10      	cmp	r3, #16
 8006ef6:	d104      	bne.n	8006f02 <HAL_TIM_PWM_Start+0xf6>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2202      	movs	r2, #2
 8006efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f00:	e003      	b.n	8006f0a <HAL_TIM_PWM_Start+0xfe>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2202      	movs	r2, #2
 8006f06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	6839      	ldr	r1, [r7, #0]
 8006f12:	4618      	mov	r0, r3
 8006f14:	f000 ff82 	bl	8007e1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a26      	ldr	r2, [pc, #152]	; (8006fb8 <HAL_TIM_PWM_Start+0x1ac>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d009      	beq.n	8006f36 <HAL_TIM_PWM_Start+0x12a>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a25      	ldr	r2, [pc, #148]	; (8006fbc <HAL_TIM_PWM_Start+0x1b0>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d004      	beq.n	8006f36 <HAL_TIM_PWM_Start+0x12a>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a23      	ldr	r2, [pc, #140]	; (8006fc0 <HAL_TIM_PWM_Start+0x1b4>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d101      	bne.n	8006f3a <HAL_TIM_PWM_Start+0x12e>
 8006f36:	2301      	movs	r3, #1
 8006f38:	e000      	b.n	8006f3c <HAL_TIM_PWM_Start+0x130>
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d007      	beq.n	8006f50 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f4e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a18      	ldr	r2, [pc, #96]	; (8006fb8 <HAL_TIM_PWM_Start+0x1ac>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d009      	beq.n	8006f6e <HAL_TIM_PWM_Start+0x162>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f62:	d004      	beq.n	8006f6e <HAL_TIM_PWM_Start+0x162>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a14      	ldr	r2, [pc, #80]	; (8006fbc <HAL_TIM_PWM_Start+0x1b0>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d115      	bne.n	8006f9a <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	689a      	ldr	r2, [r3, #8]
 8006f74:	4b13      	ldr	r3, [pc, #76]	; (8006fc4 <HAL_TIM_PWM_Start+0x1b8>)
 8006f76:	4013      	ands	r3, r2
 8006f78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2b06      	cmp	r3, #6
 8006f7e:	d015      	beq.n	8006fac <HAL_TIM_PWM_Start+0x1a0>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f86:	d011      	beq.n	8006fac <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f042 0201 	orr.w	r2, r2, #1
 8006f96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f98:	e008      	b.n	8006fac <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f042 0201 	orr.w	r2, r2, #1
 8006fa8:	601a      	str	r2, [r3, #0]
 8006faa:	e000      	b.n	8006fae <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	40012c00 	.word	0x40012c00
 8006fbc:	40014000 	.word	0x40014000
 8006fc0:	40014400 	.word	0x40014400
 8006fc4:	00010007 	.word	0x00010007

08006fc8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	6839      	ldr	r1, [r7, #0]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f000 ff1e 	bl	8007e1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a39      	ldr	r2, [pc, #228]	; (80070cc <HAL_TIM_PWM_Stop+0x104>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d009      	beq.n	8006ffe <HAL_TIM_PWM_Stop+0x36>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a38      	ldr	r2, [pc, #224]	; (80070d0 <HAL_TIM_PWM_Stop+0x108>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d004      	beq.n	8006ffe <HAL_TIM_PWM_Stop+0x36>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a36      	ldr	r2, [pc, #216]	; (80070d4 <HAL_TIM_PWM_Stop+0x10c>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d101      	bne.n	8007002 <HAL_TIM_PWM_Stop+0x3a>
 8006ffe:	2301      	movs	r3, #1
 8007000:	e000      	b.n	8007004 <HAL_TIM_PWM_Stop+0x3c>
 8007002:	2300      	movs	r3, #0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d017      	beq.n	8007038 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	6a1a      	ldr	r2, [r3, #32]
 800700e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007012:	4013      	ands	r3, r2
 8007014:	2b00      	cmp	r3, #0
 8007016:	d10f      	bne.n	8007038 <HAL_TIM_PWM_Stop+0x70>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	6a1a      	ldr	r2, [r3, #32]
 800701e:	f240 4344 	movw	r3, #1092	; 0x444
 8007022:	4013      	ands	r3, r2
 8007024:	2b00      	cmp	r3, #0
 8007026:	d107      	bne.n	8007038 <HAL_TIM_PWM_Stop+0x70>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007036:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	6a1a      	ldr	r2, [r3, #32]
 800703e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007042:	4013      	ands	r3, r2
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10f      	bne.n	8007068 <HAL_TIM_PWM_Stop+0xa0>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	6a1a      	ldr	r2, [r3, #32]
 800704e:	f240 4344 	movw	r3, #1092	; 0x444
 8007052:	4013      	ands	r3, r2
 8007054:	2b00      	cmp	r3, #0
 8007056:	d107      	bne.n	8007068 <HAL_TIM_PWM_Stop+0xa0>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f022 0201 	bic.w	r2, r2, #1
 8007066:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d104      	bne.n	8007078 <HAL_TIM_PWM_Stop+0xb0>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007076:	e023      	b.n	80070c0 <HAL_TIM_PWM_Stop+0xf8>
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	2b04      	cmp	r3, #4
 800707c:	d104      	bne.n	8007088 <HAL_TIM_PWM_Stop+0xc0>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2201      	movs	r2, #1
 8007082:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007086:	e01b      	b.n	80070c0 <HAL_TIM_PWM_Stop+0xf8>
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	2b08      	cmp	r3, #8
 800708c:	d104      	bne.n	8007098 <HAL_TIM_PWM_Stop+0xd0>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007096:	e013      	b.n	80070c0 <HAL_TIM_PWM_Stop+0xf8>
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	2b0c      	cmp	r3, #12
 800709c:	d104      	bne.n	80070a8 <HAL_TIM_PWM_Stop+0xe0>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2201      	movs	r2, #1
 80070a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070a6:	e00b      	b.n	80070c0 <HAL_TIM_PWM_Stop+0xf8>
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	2b10      	cmp	r3, #16
 80070ac:	d104      	bne.n	80070b8 <HAL_TIM_PWM_Stop+0xf0>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070b6:	e003      	b.n	80070c0 <HAL_TIM_PWM_Stop+0xf8>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3708      	adds	r7, #8
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop
 80070cc:	40012c00 	.word	0x40012c00
 80070d0:	40014000 	.word	0x40014000
 80070d4:	40014400 	.word	0x40014400

080070d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	f003 0302 	and.w	r3, r3, #2
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d122      	bne.n	8007134 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	f003 0302 	and.w	r3, r3, #2
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d11b      	bne.n	8007134 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f06f 0202 	mvn.w	r2, #2
 8007104:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2201      	movs	r2, #1
 800710a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	699b      	ldr	r3, [r3, #24]
 8007112:	f003 0303 	and.w	r3, r3, #3
 8007116:	2b00      	cmp	r3, #0
 8007118:	d003      	beq.n	8007122 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 fae3 	bl	80076e6 <HAL_TIM_IC_CaptureCallback>
 8007120:	e005      	b.n	800712e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 fad5 	bl	80076d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 fae6 	bl	80076fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	f003 0304 	and.w	r3, r3, #4
 800713e:	2b04      	cmp	r3, #4
 8007140:	d122      	bne.n	8007188 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	f003 0304 	and.w	r3, r3, #4
 800714c:	2b04      	cmp	r3, #4
 800714e:	d11b      	bne.n	8007188 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f06f 0204 	mvn.w	r2, #4
 8007158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2202      	movs	r2, #2
 800715e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	699b      	ldr	r3, [r3, #24]
 8007166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800716a:	2b00      	cmp	r3, #0
 800716c:	d003      	beq.n	8007176 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 fab9 	bl	80076e6 <HAL_TIM_IC_CaptureCallback>
 8007174:	e005      	b.n	8007182 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 faab 	bl	80076d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 fabc 	bl	80076fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	f003 0308 	and.w	r3, r3, #8
 8007192:	2b08      	cmp	r3, #8
 8007194:	d122      	bne.n	80071dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	f003 0308 	and.w	r3, r3, #8
 80071a0:	2b08      	cmp	r3, #8
 80071a2:	d11b      	bne.n	80071dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f06f 0208 	mvn.w	r2, #8
 80071ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2204      	movs	r2, #4
 80071b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	69db      	ldr	r3, [r3, #28]
 80071ba:	f003 0303 	and.w	r3, r3, #3
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d003      	beq.n	80071ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 fa8f 	bl	80076e6 <HAL_TIM_IC_CaptureCallback>
 80071c8:	e005      	b.n	80071d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 fa81 	bl	80076d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 fa92 	bl	80076fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	f003 0310 	and.w	r3, r3, #16
 80071e6:	2b10      	cmp	r3, #16
 80071e8:	d122      	bne.n	8007230 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	f003 0310 	and.w	r3, r3, #16
 80071f4:	2b10      	cmp	r3, #16
 80071f6:	d11b      	bne.n	8007230 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f06f 0210 	mvn.w	r2, #16
 8007200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2208      	movs	r2, #8
 8007206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	69db      	ldr	r3, [r3, #28]
 800720e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007212:	2b00      	cmp	r3, #0
 8007214:	d003      	beq.n	800721e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 fa65 	bl	80076e6 <HAL_TIM_IC_CaptureCallback>
 800721c:	e005      	b.n	800722a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 fa57 	bl	80076d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 fa68 	bl	80076fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	f003 0301 	and.w	r3, r3, #1
 800723a:	2b01      	cmp	r3, #1
 800723c:	d10e      	bne.n	800725c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	f003 0301 	and.w	r3, r3, #1
 8007248:	2b01      	cmp	r3, #1
 800724a:	d107      	bne.n	800725c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f06f 0201 	mvn.w	r2, #1
 8007254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f7fa fa76 	bl	8001748 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007266:	2b80      	cmp	r3, #128	; 0x80
 8007268:	d10e      	bne.n	8007288 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007274:	2b80      	cmp	r3, #128	; 0x80
 8007276:	d107      	bne.n	8007288 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 fed8 	bl	8008038 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007292:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007296:	d10e      	bne.n	80072b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072a2:	2b80      	cmp	r3, #128	; 0x80
 80072a4:	d107      	bne.n	80072b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80072ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fecb 	bl	800804c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c0:	2b40      	cmp	r3, #64	; 0x40
 80072c2:	d10e      	bne.n	80072e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ce:	2b40      	cmp	r3, #64	; 0x40
 80072d0:	d107      	bne.n	80072e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80072da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 fa16 	bl	800770e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	f003 0320 	and.w	r3, r3, #32
 80072ec:	2b20      	cmp	r3, #32
 80072ee:	d10e      	bne.n	800730e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	f003 0320 	and.w	r3, r3, #32
 80072fa:	2b20      	cmp	r3, #32
 80072fc:	d107      	bne.n	800730e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f06f 0220 	mvn.w	r2, #32
 8007306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 fe8b 	bl	8008024 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800730e:	bf00      	nop
 8007310:	3708      	adds	r7, #8
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
	...

08007318 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b086      	sub	sp, #24
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007324:	2300      	movs	r3, #0
 8007326:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800732e:	2b01      	cmp	r3, #1
 8007330:	d101      	bne.n	8007336 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007332:	2302      	movs	r3, #2
 8007334:	e0ff      	b.n	8007536 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2201      	movs	r2, #1
 800733a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2b14      	cmp	r3, #20
 8007342:	f200 80f0 	bhi.w	8007526 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007346:	a201      	add	r2, pc, #4	; (adr r2, 800734c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800734c:	080073a1 	.word	0x080073a1
 8007350:	08007527 	.word	0x08007527
 8007354:	08007527 	.word	0x08007527
 8007358:	08007527 	.word	0x08007527
 800735c:	080073e1 	.word	0x080073e1
 8007360:	08007527 	.word	0x08007527
 8007364:	08007527 	.word	0x08007527
 8007368:	08007527 	.word	0x08007527
 800736c:	08007423 	.word	0x08007423
 8007370:	08007527 	.word	0x08007527
 8007374:	08007527 	.word	0x08007527
 8007378:	08007527 	.word	0x08007527
 800737c:	08007463 	.word	0x08007463
 8007380:	08007527 	.word	0x08007527
 8007384:	08007527 	.word	0x08007527
 8007388:	08007527 	.word	0x08007527
 800738c:	080074a5 	.word	0x080074a5
 8007390:	08007527 	.word	0x08007527
 8007394:	08007527 	.word	0x08007527
 8007398:	08007527 	.word	0x08007527
 800739c:	080074e5 	.word	0x080074e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68b9      	ldr	r1, [r7, #8]
 80073a6:	4618      	mov	r0, r3
 80073a8:	f000 fa20 	bl	80077ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	699a      	ldr	r2, [r3, #24]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f042 0208 	orr.w	r2, r2, #8
 80073ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	699a      	ldr	r2, [r3, #24]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f022 0204 	bic.w	r2, r2, #4
 80073ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	6999      	ldr	r1, [r3, #24]
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	691a      	ldr	r2, [r3, #16]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	430a      	orrs	r2, r1
 80073dc:	619a      	str	r2, [r3, #24]
      break;
 80073de:	e0a5      	b.n	800752c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68b9      	ldr	r1, [r7, #8]
 80073e6:	4618      	mov	r0, r3
 80073e8:	f000 fa7c 	bl	80078e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	699a      	ldr	r2, [r3, #24]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	699a      	ldr	r2, [r3, #24]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800740a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	6999      	ldr	r1, [r3, #24]
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	021a      	lsls	r2, r3, #8
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	430a      	orrs	r2, r1
 800741e:	619a      	str	r2, [r3, #24]
      break;
 8007420:	e084      	b.n	800752c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68b9      	ldr	r1, [r7, #8]
 8007428:	4618      	mov	r0, r3
 800742a:	f000 fad5 	bl	80079d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	69da      	ldr	r2, [r3, #28]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f042 0208 	orr.w	r2, r2, #8
 800743c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	69da      	ldr	r2, [r3, #28]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f022 0204 	bic.w	r2, r2, #4
 800744c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	69d9      	ldr	r1, [r3, #28]
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	691a      	ldr	r2, [r3, #16]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	430a      	orrs	r2, r1
 800745e:	61da      	str	r2, [r3, #28]
      break;
 8007460:	e064      	b.n	800752c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	68b9      	ldr	r1, [r7, #8]
 8007468:	4618      	mov	r0, r3
 800746a:	f000 fb2d 	bl	8007ac8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	69da      	ldr	r2, [r3, #28]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800747c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	69da      	ldr	r2, [r3, #28]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800748c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	69d9      	ldr	r1, [r3, #28]
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	021a      	lsls	r2, r3, #8
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	430a      	orrs	r2, r1
 80074a0:	61da      	str	r2, [r3, #28]
      break;
 80074a2:	e043      	b.n	800752c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68b9      	ldr	r1, [r7, #8]
 80074aa:	4618      	mov	r0, r3
 80074ac:	f000 fb6a 	bl	8007b84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f042 0208 	orr.w	r2, r2, #8
 80074be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f022 0204 	bic.w	r2, r2, #4
 80074ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	691a      	ldr	r2, [r3, #16]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	430a      	orrs	r2, r1
 80074e0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80074e2:	e023      	b.n	800752c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68b9      	ldr	r1, [r7, #8]
 80074ea:	4618      	mov	r0, r3
 80074ec:	f000 fba2 	bl	8007c34 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800750e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	021a      	lsls	r2, r3, #8
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	430a      	orrs	r2, r1
 8007522:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007524:	e002      	b.n	800752c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	75fb      	strb	r3, [r7, #23]
      break;
 800752a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2200      	movs	r2, #0
 8007530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007534:	7dfb      	ldrb	r3, [r7, #23]
}
 8007536:	4618      	mov	r0, r3
 8007538:	3718      	adds	r7, #24
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop

08007540 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800754a:	2300      	movs	r3, #0
 800754c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007554:	2b01      	cmp	r3, #1
 8007556:	d101      	bne.n	800755c <HAL_TIM_ConfigClockSource+0x1c>
 8007558:	2302      	movs	r3, #2
 800755a:	e0b6      	b.n	80076ca <HAL_TIM_ConfigClockSource+0x18a>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2202      	movs	r2, #2
 8007568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800757a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800757e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007586:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007598:	d03e      	beq.n	8007618 <HAL_TIM_ConfigClockSource+0xd8>
 800759a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800759e:	f200 8087 	bhi.w	80076b0 <HAL_TIM_ConfigClockSource+0x170>
 80075a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075a6:	f000 8086 	beq.w	80076b6 <HAL_TIM_ConfigClockSource+0x176>
 80075aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ae:	d87f      	bhi.n	80076b0 <HAL_TIM_ConfigClockSource+0x170>
 80075b0:	2b70      	cmp	r3, #112	; 0x70
 80075b2:	d01a      	beq.n	80075ea <HAL_TIM_ConfigClockSource+0xaa>
 80075b4:	2b70      	cmp	r3, #112	; 0x70
 80075b6:	d87b      	bhi.n	80076b0 <HAL_TIM_ConfigClockSource+0x170>
 80075b8:	2b60      	cmp	r3, #96	; 0x60
 80075ba:	d050      	beq.n	800765e <HAL_TIM_ConfigClockSource+0x11e>
 80075bc:	2b60      	cmp	r3, #96	; 0x60
 80075be:	d877      	bhi.n	80076b0 <HAL_TIM_ConfigClockSource+0x170>
 80075c0:	2b50      	cmp	r3, #80	; 0x50
 80075c2:	d03c      	beq.n	800763e <HAL_TIM_ConfigClockSource+0xfe>
 80075c4:	2b50      	cmp	r3, #80	; 0x50
 80075c6:	d873      	bhi.n	80076b0 <HAL_TIM_ConfigClockSource+0x170>
 80075c8:	2b40      	cmp	r3, #64	; 0x40
 80075ca:	d058      	beq.n	800767e <HAL_TIM_ConfigClockSource+0x13e>
 80075cc:	2b40      	cmp	r3, #64	; 0x40
 80075ce:	d86f      	bhi.n	80076b0 <HAL_TIM_ConfigClockSource+0x170>
 80075d0:	2b30      	cmp	r3, #48	; 0x30
 80075d2:	d064      	beq.n	800769e <HAL_TIM_ConfigClockSource+0x15e>
 80075d4:	2b30      	cmp	r3, #48	; 0x30
 80075d6:	d86b      	bhi.n	80076b0 <HAL_TIM_ConfigClockSource+0x170>
 80075d8:	2b20      	cmp	r3, #32
 80075da:	d060      	beq.n	800769e <HAL_TIM_ConfigClockSource+0x15e>
 80075dc:	2b20      	cmp	r3, #32
 80075de:	d867      	bhi.n	80076b0 <HAL_TIM_ConfigClockSource+0x170>
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d05c      	beq.n	800769e <HAL_TIM_ConfigClockSource+0x15e>
 80075e4:	2b10      	cmp	r3, #16
 80075e6:	d05a      	beq.n	800769e <HAL_TIM_ConfigClockSource+0x15e>
 80075e8:	e062      	b.n	80076b0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6818      	ldr	r0, [r3, #0]
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	6899      	ldr	r1, [r3, #8]
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	685a      	ldr	r2, [r3, #4]
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	f000 fbef 	bl	8007ddc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800760c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68ba      	ldr	r2, [r7, #8]
 8007614:	609a      	str	r2, [r3, #8]
      break;
 8007616:	e04f      	b.n	80076b8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6818      	ldr	r0, [r3, #0]
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	6899      	ldr	r1, [r3, #8]
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	685a      	ldr	r2, [r3, #4]
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	f000 fbd8 	bl	8007ddc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	689a      	ldr	r2, [r3, #8]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800763a:	609a      	str	r2, [r3, #8]
      break;
 800763c:	e03c      	b.n	80076b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6818      	ldr	r0, [r3, #0]
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	6859      	ldr	r1, [r3, #4]
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	461a      	mov	r2, r3
 800764c:	f000 fb4c 	bl	8007ce8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2150      	movs	r1, #80	; 0x50
 8007656:	4618      	mov	r0, r3
 8007658:	f000 fba5 	bl	8007da6 <TIM_ITRx_SetConfig>
      break;
 800765c:	e02c      	b.n	80076b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6818      	ldr	r0, [r3, #0]
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	6859      	ldr	r1, [r3, #4]
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	461a      	mov	r2, r3
 800766c:	f000 fb6b 	bl	8007d46 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2160      	movs	r1, #96	; 0x60
 8007676:	4618      	mov	r0, r3
 8007678:	f000 fb95 	bl	8007da6 <TIM_ITRx_SetConfig>
      break;
 800767c:	e01c      	b.n	80076b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6818      	ldr	r0, [r3, #0]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	6859      	ldr	r1, [r3, #4]
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	461a      	mov	r2, r3
 800768c:	f000 fb2c 	bl	8007ce8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2140      	movs	r1, #64	; 0x40
 8007696:	4618      	mov	r0, r3
 8007698:	f000 fb85 	bl	8007da6 <TIM_ITRx_SetConfig>
      break;
 800769c:	e00c      	b.n	80076b8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4619      	mov	r1, r3
 80076a8:	4610      	mov	r0, r2
 80076aa:	f000 fb7c 	bl	8007da6 <TIM_ITRx_SetConfig>
      break;
 80076ae:	e003      	b.n	80076b8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	73fb      	strb	r3, [r7, #15]
      break;
 80076b4:	e000      	b.n	80076b8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80076b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80076c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076d2:	b480      	push	{r7}
 80076d4:	b083      	sub	sp, #12
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076da:	bf00      	nop
 80076dc:	370c      	adds	r7, #12
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr

080076e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076e6:	b480      	push	{r7}
 80076e8:	b083      	sub	sp, #12
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076ee:	bf00      	nop
 80076f0:	370c      	adds	r7, #12
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr

080076fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076fa:	b480      	push	{r7}
 80076fc:	b083      	sub	sp, #12
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007702:	bf00      	nop
 8007704:	370c      	adds	r7, #12
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800770e:	b480      	push	{r7}
 8007710:	b083      	sub	sp, #12
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007716:	bf00      	nop
 8007718:	370c      	adds	r7, #12
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
	...

08007724 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007724:	b480      	push	{r7}
 8007726:	b085      	sub	sp, #20
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a2a      	ldr	r2, [pc, #168]	; (80077e0 <TIM_Base_SetConfig+0xbc>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d003      	beq.n	8007744 <TIM_Base_SetConfig+0x20>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007742:	d108      	bne.n	8007756 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800774a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	4313      	orrs	r3, r2
 8007754:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a21      	ldr	r2, [pc, #132]	; (80077e0 <TIM_Base_SetConfig+0xbc>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d00b      	beq.n	8007776 <TIM_Base_SetConfig+0x52>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007764:	d007      	beq.n	8007776 <TIM_Base_SetConfig+0x52>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4a1e      	ldr	r2, [pc, #120]	; (80077e4 <TIM_Base_SetConfig+0xc0>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d003      	beq.n	8007776 <TIM_Base_SetConfig+0x52>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a1d      	ldr	r2, [pc, #116]	; (80077e8 <TIM_Base_SetConfig+0xc4>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d108      	bne.n	8007788 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800777c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	68fa      	ldr	r2, [r7, #12]
 8007784:	4313      	orrs	r3, r2
 8007786:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	695b      	ldr	r3, [r3, #20]
 8007792:	4313      	orrs	r3, r2
 8007794:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	689a      	ldr	r2, [r3, #8]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a0c      	ldr	r2, [pc, #48]	; (80077e0 <TIM_Base_SetConfig+0xbc>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d007      	beq.n	80077c4 <TIM_Base_SetConfig+0xa0>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4a0b      	ldr	r2, [pc, #44]	; (80077e4 <TIM_Base_SetConfig+0xc0>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d003      	beq.n	80077c4 <TIM_Base_SetConfig+0xa0>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a0a      	ldr	r2, [pc, #40]	; (80077e8 <TIM_Base_SetConfig+0xc4>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d103      	bne.n	80077cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	691a      	ldr	r2, [r3, #16]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	615a      	str	r2, [r3, #20]
}
 80077d2:	bf00      	nop
 80077d4:	3714      	adds	r7, #20
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	40012c00 	.word	0x40012c00
 80077e4:	40014000 	.word	0x40014000
 80077e8:	40014400 	.word	0x40014400

080077ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b087      	sub	sp, #28
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	f023 0201 	bic.w	r2, r3, #1
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a1b      	ldr	r3, [r3, #32]
 8007806:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	699b      	ldr	r3, [r3, #24]
 8007812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800781a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800781e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f023 0303 	bic.w	r3, r3, #3
 8007826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	4313      	orrs	r3, r2
 8007830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	f023 0302 	bic.w	r3, r3, #2
 8007838:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	697a      	ldr	r2, [r7, #20]
 8007840:	4313      	orrs	r3, r2
 8007842:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a24      	ldr	r2, [pc, #144]	; (80078d8 <TIM_OC1_SetConfig+0xec>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d007      	beq.n	800785c <TIM_OC1_SetConfig+0x70>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a23      	ldr	r2, [pc, #140]	; (80078dc <TIM_OC1_SetConfig+0xf0>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d003      	beq.n	800785c <TIM_OC1_SetConfig+0x70>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4a22      	ldr	r2, [pc, #136]	; (80078e0 <TIM_OC1_SetConfig+0xf4>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d10c      	bne.n	8007876 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	f023 0308 	bic.w	r3, r3, #8
 8007862:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	697a      	ldr	r2, [r7, #20]
 800786a:	4313      	orrs	r3, r2
 800786c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	f023 0304 	bic.w	r3, r3, #4
 8007874:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4a17      	ldr	r2, [pc, #92]	; (80078d8 <TIM_OC1_SetConfig+0xec>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d007      	beq.n	800788e <TIM_OC1_SetConfig+0xa2>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a16      	ldr	r2, [pc, #88]	; (80078dc <TIM_OC1_SetConfig+0xf0>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d003      	beq.n	800788e <TIM_OC1_SetConfig+0xa2>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a15      	ldr	r2, [pc, #84]	; (80078e0 <TIM_OC1_SetConfig+0xf4>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d111      	bne.n	80078b2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007894:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800789c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	695b      	ldr	r3, [r3, #20]
 80078a2:	693a      	ldr	r2, [r7, #16]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	699b      	ldr	r3, [r3, #24]
 80078ac:	693a      	ldr	r2, [r7, #16]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	693a      	ldr	r2, [r7, #16]
 80078b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	685a      	ldr	r2, [r3, #4]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	697a      	ldr	r2, [r7, #20]
 80078ca:	621a      	str	r2, [r3, #32]
}
 80078cc:	bf00      	nop
 80078ce:	371c      	adds	r7, #28
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr
 80078d8:	40012c00 	.word	0x40012c00
 80078dc:	40014000 	.word	0x40014000
 80078e0:	40014400 	.word	0x40014400

080078e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b087      	sub	sp, #28
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a1b      	ldr	r3, [r3, #32]
 80078f2:	f023 0210 	bic.w	r2, r3, #16
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a1b      	ldr	r3, [r3, #32]
 80078fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800791e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	021b      	lsls	r3, r3, #8
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	4313      	orrs	r3, r2
 800792a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	f023 0320 	bic.w	r3, r3, #32
 8007932:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	011b      	lsls	r3, r3, #4
 800793a:	697a      	ldr	r2, [r7, #20]
 800793c:	4313      	orrs	r3, r2
 800793e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a22      	ldr	r2, [pc, #136]	; (80079cc <TIM_OC2_SetConfig+0xe8>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d10d      	bne.n	8007964 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800794e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	011b      	lsls	r3, r3, #4
 8007956:	697a      	ldr	r2, [r7, #20]
 8007958:	4313      	orrs	r3, r2
 800795a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007962:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a19      	ldr	r2, [pc, #100]	; (80079cc <TIM_OC2_SetConfig+0xe8>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d007      	beq.n	800797c <TIM_OC2_SetConfig+0x98>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a18      	ldr	r2, [pc, #96]	; (80079d0 <TIM_OC2_SetConfig+0xec>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d003      	beq.n	800797c <TIM_OC2_SetConfig+0x98>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a17      	ldr	r2, [pc, #92]	; (80079d4 <TIM_OC2_SetConfig+0xf0>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d113      	bne.n	80079a4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007982:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800798a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	695b      	ldr	r3, [r3, #20]
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	693a      	ldr	r2, [r7, #16]
 8007994:	4313      	orrs	r3, r2
 8007996:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	699b      	ldr	r3, [r3, #24]
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	693a      	ldr	r2, [r7, #16]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	693a      	ldr	r2, [r7, #16]
 80079a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	685a      	ldr	r2, [r3, #4]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	697a      	ldr	r2, [r7, #20]
 80079bc:	621a      	str	r2, [r3, #32]
}
 80079be:	bf00      	nop
 80079c0:	371c      	adds	r7, #28
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	40012c00 	.word	0x40012c00
 80079d0:	40014000 	.word	0x40014000
 80079d4:	40014400 	.word	0x40014400

080079d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079d8:	b480      	push	{r7}
 80079da:	b087      	sub	sp, #28
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a1b      	ldr	r3, [r3, #32]
 80079e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a1b      	ldr	r3, [r3, #32]
 80079f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	69db      	ldr	r3, [r3, #28]
 80079fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f023 0303 	bic.w	r3, r3, #3
 8007a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	021b      	lsls	r3, r3, #8
 8007a2c:	697a      	ldr	r2, [r7, #20]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4a21      	ldr	r2, [pc, #132]	; (8007abc <TIM_OC3_SetConfig+0xe4>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d10d      	bne.n	8007a56 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	021b      	lsls	r3, r3, #8
 8007a48:	697a      	ldr	r2, [r7, #20]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a18      	ldr	r2, [pc, #96]	; (8007abc <TIM_OC3_SetConfig+0xe4>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d007      	beq.n	8007a6e <TIM_OC3_SetConfig+0x96>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a17      	ldr	r2, [pc, #92]	; (8007ac0 <TIM_OC3_SetConfig+0xe8>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d003      	beq.n	8007a6e <TIM_OC3_SetConfig+0x96>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a16      	ldr	r2, [pc, #88]	; (8007ac4 <TIM_OC3_SetConfig+0xec>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d113      	bne.n	8007a96 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	695b      	ldr	r3, [r3, #20]
 8007a82:	011b      	lsls	r3, r3, #4
 8007a84:	693a      	ldr	r2, [r7, #16]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	699b      	ldr	r3, [r3, #24]
 8007a8e:	011b      	lsls	r3, r3, #4
 8007a90:	693a      	ldr	r2, [r7, #16]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	693a      	ldr	r2, [r7, #16]
 8007a9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	685a      	ldr	r2, [r3, #4]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	697a      	ldr	r2, [r7, #20]
 8007aae:	621a      	str	r2, [r3, #32]
}
 8007ab0:	bf00      	nop
 8007ab2:	371c      	adds	r7, #28
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr
 8007abc:	40012c00 	.word	0x40012c00
 8007ac0:	40014000 	.word	0x40014000
 8007ac4:	40014400 	.word	0x40014400

08007ac8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b087      	sub	sp, #28
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a1b      	ldr	r3, [r3, #32]
 8007ad6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a1b      	ldr	r3, [r3, #32]
 8007ae2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	69db      	ldr	r3, [r3, #28]
 8007aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007af6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	021b      	lsls	r3, r3, #8
 8007b0a:	68fa      	ldr	r2, [r7, #12]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	031b      	lsls	r3, r3, #12
 8007b1e:	693a      	ldr	r2, [r7, #16]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a14      	ldr	r2, [pc, #80]	; (8007b78 <TIM_OC4_SetConfig+0xb0>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d007      	beq.n	8007b3c <TIM_OC4_SetConfig+0x74>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4a13      	ldr	r2, [pc, #76]	; (8007b7c <TIM_OC4_SetConfig+0xb4>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d003      	beq.n	8007b3c <TIM_OC4_SetConfig+0x74>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4a12      	ldr	r2, [pc, #72]	; (8007b80 <TIM_OC4_SetConfig+0xb8>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d109      	bne.n	8007b50 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	695b      	ldr	r3, [r3, #20]
 8007b48:	019b      	lsls	r3, r3, #6
 8007b4a:	697a      	ldr	r2, [r7, #20]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	697a      	ldr	r2, [r7, #20]
 8007b54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	685a      	ldr	r2, [r3, #4]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	693a      	ldr	r2, [r7, #16]
 8007b68:	621a      	str	r2, [r3, #32]
}
 8007b6a:	bf00      	nop
 8007b6c:	371c      	adds	r7, #28
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	40012c00 	.word	0x40012c00
 8007b7c:	40014000 	.word	0x40014000
 8007b80:	40014400 	.word	0x40014400

08007b84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b087      	sub	sp, #28
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a1b      	ldr	r3, [r3, #32]
 8007b92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a1b      	ldr	r3, [r3, #32]
 8007b9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68fa      	ldr	r2, [r7, #12]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007bc8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	041b      	lsls	r3, r3, #16
 8007bd0:	693a      	ldr	r2, [r7, #16]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a13      	ldr	r2, [pc, #76]	; (8007c28 <TIM_OC5_SetConfig+0xa4>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d007      	beq.n	8007bee <TIM_OC5_SetConfig+0x6a>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a12      	ldr	r2, [pc, #72]	; (8007c2c <TIM_OC5_SetConfig+0xa8>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d003      	beq.n	8007bee <TIM_OC5_SetConfig+0x6a>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a11      	ldr	r2, [pc, #68]	; (8007c30 <TIM_OC5_SetConfig+0xac>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d109      	bne.n	8007c02 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bf4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	695b      	ldr	r3, [r3, #20]
 8007bfa:	021b      	lsls	r3, r3, #8
 8007bfc:	697a      	ldr	r2, [r7, #20]
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	697a      	ldr	r2, [r7, #20]
 8007c06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	685a      	ldr	r2, [r3, #4]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	693a      	ldr	r2, [r7, #16]
 8007c1a:	621a      	str	r2, [r3, #32]
}
 8007c1c:	bf00      	nop
 8007c1e:	371c      	adds	r7, #28
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr
 8007c28:	40012c00 	.word	0x40012c00
 8007c2c:	40014000 	.word	0x40014000
 8007c30:	40014400 	.word	0x40014400

08007c34 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b087      	sub	sp, #28
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a1b      	ldr	r3, [r3, #32]
 8007c42:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a1b      	ldr	r3, [r3, #32]
 8007c4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	021b      	lsls	r3, r3, #8
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	4313      	orrs	r3, r2
 8007c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	051b      	lsls	r3, r3, #20
 8007c82:	693a      	ldr	r2, [r7, #16]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4a14      	ldr	r2, [pc, #80]	; (8007cdc <TIM_OC6_SetConfig+0xa8>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d007      	beq.n	8007ca0 <TIM_OC6_SetConfig+0x6c>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a13      	ldr	r2, [pc, #76]	; (8007ce0 <TIM_OC6_SetConfig+0xac>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d003      	beq.n	8007ca0 <TIM_OC6_SetConfig+0x6c>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a12      	ldr	r2, [pc, #72]	; (8007ce4 <TIM_OC6_SetConfig+0xb0>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d109      	bne.n	8007cb4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ca6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	695b      	ldr	r3, [r3, #20]
 8007cac:	029b      	lsls	r3, r3, #10
 8007cae:	697a      	ldr	r2, [r7, #20]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	697a      	ldr	r2, [r7, #20]
 8007cb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	685a      	ldr	r2, [r3, #4]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	693a      	ldr	r2, [r7, #16]
 8007ccc:	621a      	str	r2, [r3, #32]
}
 8007cce:	bf00      	nop
 8007cd0:	371c      	adds	r7, #28
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop
 8007cdc:	40012c00 	.word	0x40012c00
 8007ce0:	40014000 	.word	0x40014000
 8007ce4:	40014400 	.word	0x40014400

08007ce8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b087      	sub	sp, #28
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	6a1b      	ldr	r3, [r3, #32]
 8007cf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6a1b      	ldr	r3, [r3, #32]
 8007cfe:	f023 0201 	bic.w	r2, r3, #1
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	699b      	ldr	r3, [r3, #24]
 8007d0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	011b      	lsls	r3, r3, #4
 8007d18:	693a      	ldr	r2, [r7, #16]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	f023 030a 	bic.w	r3, r3, #10
 8007d24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d26:	697a      	ldr	r2, [r7, #20]
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	693a      	ldr	r2, [r7, #16]
 8007d32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	697a      	ldr	r2, [r7, #20]
 8007d38:	621a      	str	r2, [r3, #32]
}
 8007d3a:	bf00      	nop
 8007d3c:	371c      	adds	r7, #28
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr

08007d46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d46:	b480      	push	{r7}
 8007d48:	b087      	sub	sp, #28
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	60f8      	str	r0, [r7, #12]
 8007d4e:	60b9      	str	r1, [r7, #8]
 8007d50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6a1b      	ldr	r3, [r3, #32]
 8007d56:	f023 0210 	bic.w	r2, r3, #16
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	699b      	ldr	r3, [r3, #24]
 8007d62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6a1b      	ldr	r3, [r3, #32]
 8007d68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	031b      	lsls	r3, r3, #12
 8007d76:	697a      	ldr	r2, [r7, #20]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	011b      	lsls	r3, r3, #4
 8007d88:	693a      	ldr	r2, [r7, #16]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	697a      	ldr	r2, [r7, #20]
 8007d92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	693a      	ldr	r2, [r7, #16]
 8007d98:	621a      	str	r2, [r3, #32]
}
 8007d9a:	bf00      	nop
 8007d9c:	371c      	adds	r7, #28
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr

08007da6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007da6:	b480      	push	{r7}
 8007da8:	b085      	sub	sp, #20
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
 8007dae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007dbe:	683a      	ldr	r2, [r7, #0]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	f043 0307 	orr.w	r3, r3, #7
 8007dc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	609a      	str	r2, [r3, #8]
}
 8007dd0:	bf00      	nop
 8007dd2:	3714      	adds	r7, #20
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b087      	sub	sp, #28
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	607a      	str	r2, [r7, #4]
 8007de8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007df6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	021a      	lsls	r2, r3, #8
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	431a      	orrs	r2, r3
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	697a      	ldr	r2, [r7, #20]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	697a      	ldr	r2, [r7, #20]
 8007e0e:	609a      	str	r2, [r3, #8]
}
 8007e10:	bf00      	nop
 8007e12:	371c      	adds	r7, #28
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b087      	sub	sp, #28
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	f003 031f 	and.w	r3, r3, #31
 8007e2e:	2201      	movs	r2, #1
 8007e30:	fa02 f303 	lsl.w	r3, r2, r3
 8007e34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6a1a      	ldr	r2, [r3, #32]
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	43db      	mvns	r3, r3
 8007e3e:	401a      	ands	r2, r3
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6a1a      	ldr	r2, [r3, #32]
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	f003 031f 	and.w	r3, r3, #31
 8007e4e:	6879      	ldr	r1, [r7, #4]
 8007e50:	fa01 f303 	lsl.w	r3, r1, r3
 8007e54:	431a      	orrs	r2, r3
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	621a      	str	r2, [r3, #32]
}
 8007e5a:	bf00      	nop
 8007e5c:	371c      	adds	r7, #28
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr
	...

08007e68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d101      	bne.n	8007e80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e7c:	2302      	movs	r3, #2
 8007e7e:	e04f      	b.n	8007f20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a21      	ldr	r2, [pc, #132]	; (8007f2c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d108      	bne.n	8007ebc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007eb0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ec2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a14      	ldr	r2, [pc, #80]	; (8007f2c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d009      	beq.n	8007ef4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ee8:	d004      	beq.n	8007ef4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a10      	ldr	r2, [pc, #64]	; (8007f30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d10c      	bne.n	8007f0e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007efa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	68ba      	ldr	r2, [r7, #8]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	68ba      	ldr	r2, [r7, #8]
 8007f0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2201      	movs	r2, #1
 8007f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f1e:	2300      	movs	r3, #0
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3714      	adds	r7, #20
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr
 8007f2c:	40012c00 	.word	0x40012c00
 8007f30:	40014000 	.word	0x40014000

08007f34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b085      	sub	sp, #20
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d101      	bne.n	8007f50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007f4c:	2302      	movs	r3, #2
 8007f4e:	e060      	b.n	8008012 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	691b      	ldr	r3, [r3, #16]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	695b      	ldr	r3, [r3, #20]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	699b      	ldr	r3, [r3, #24]
 8007fc4:	041b      	lsls	r3, r3, #16
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a14      	ldr	r2, [pc, #80]	; (8008020 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d115      	bne.n	8008000 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fde:	051b      	lsls	r3, r3, #20
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	69db      	ldr	r3, [r3, #28]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	6a1b      	ldr	r3, [r3, #32]
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	68fa      	ldr	r2, [r7, #12]
 8008006:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3714      	adds	r7, #20
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop
 8008020:	40012c00 	.word	0x40012c00

08008024 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800802c:	bf00      	nop
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008040:	bf00      	nop
 8008042:	370c      	adds	r7, #12
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr

0800804c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008054:	bf00      	nop
 8008056:	370c      	adds	r7, #12
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <__errno>:
 8008060:	4b01      	ldr	r3, [pc, #4]	; (8008068 <__errno+0x8>)
 8008062:	6818      	ldr	r0, [r3, #0]
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop
 8008068:	20000018 	.word	0x20000018

0800806c <__libc_init_array>:
 800806c:	b570      	push	{r4, r5, r6, lr}
 800806e:	4d0d      	ldr	r5, [pc, #52]	; (80080a4 <__libc_init_array+0x38>)
 8008070:	4c0d      	ldr	r4, [pc, #52]	; (80080a8 <__libc_init_array+0x3c>)
 8008072:	1b64      	subs	r4, r4, r5
 8008074:	10a4      	asrs	r4, r4, #2
 8008076:	2600      	movs	r6, #0
 8008078:	42a6      	cmp	r6, r4
 800807a:	d109      	bne.n	8008090 <__libc_init_array+0x24>
 800807c:	4d0b      	ldr	r5, [pc, #44]	; (80080ac <__libc_init_array+0x40>)
 800807e:	4c0c      	ldr	r4, [pc, #48]	; (80080b0 <__libc_init_array+0x44>)
 8008080:	f004 fe8c 	bl	800cd9c <_init>
 8008084:	1b64      	subs	r4, r4, r5
 8008086:	10a4      	asrs	r4, r4, #2
 8008088:	2600      	movs	r6, #0
 800808a:	42a6      	cmp	r6, r4
 800808c:	d105      	bne.n	800809a <__libc_init_array+0x2e>
 800808e:	bd70      	pop	{r4, r5, r6, pc}
 8008090:	f855 3b04 	ldr.w	r3, [r5], #4
 8008094:	4798      	blx	r3
 8008096:	3601      	adds	r6, #1
 8008098:	e7ee      	b.n	8008078 <__libc_init_array+0xc>
 800809a:	f855 3b04 	ldr.w	r3, [r5], #4
 800809e:	4798      	blx	r3
 80080a0:	3601      	adds	r6, #1
 80080a2:	e7f2      	b.n	800808a <__libc_init_array+0x1e>
 80080a4:	0800d29c 	.word	0x0800d29c
 80080a8:	0800d29c 	.word	0x0800d29c
 80080ac:	0800d29c 	.word	0x0800d29c
 80080b0:	0800d2a0 	.word	0x0800d2a0

080080b4 <memset>:
 80080b4:	4402      	add	r2, r0
 80080b6:	4603      	mov	r3, r0
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d100      	bne.n	80080be <memset+0xa>
 80080bc:	4770      	bx	lr
 80080be:	f803 1b01 	strb.w	r1, [r3], #1
 80080c2:	e7f9      	b.n	80080b8 <memset+0x4>

080080c4 <__cvt>:
 80080c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080c8:	ec55 4b10 	vmov	r4, r5, d0
 80080cc:	2d00      	cmp	r5, #0
 80080ce:	460e      	mov	r6, r1
 80080d0:	4619      	mov	r1, r3
 80080d2:	462b      	mov	r3, r5
 80080d4:	bfbb      	ittet	lt
 80080d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80080da:	461d      	movlt	r5, r3
 80080dc:	2300      	movge	r3, #0
 80080de:	232d      	movlt	r3, #45	; 0x2d
 80080e0:	700b      	strb	r3, [r1, #0]
 80080e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80080e8:	4691      	mov	r9, r2
 80080ea:	f023 0820 	bic.w	r8, r3, #32
 80080ee:	bfbc      	itt	lt
 80080f0:	4622      	movlt	r2, r4
 80080f2:	4614      	movlt	r4, r2
 80080f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80080f8:	d005      	beq.n	8008106 <__cvt+0x42>
 80080fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80080fe:	d100      	bne.n	8008102 <__cvt+0x3e>
 8008100:	3601      	adds	r6, #1
 8008102:	2102      	movs	r1, #2
 8008104:	e000      	b.n	8008108 <__cvt+0x44>
 8008106:	2103      	movs	r1, #3
 8008108:	ab03      	add	r3, sp, #12
 800810a:	9301      	str	r3, [sp, #4]
 800810c:	ab02      	add	r3, sp, #8
 800810e:	9300      	str	r3, [sp, #0]
 8008110:	ec45 4b10 	vmov	d0, r4, r5
 8008114:	4653      	mov	r3, sl
 8008116:	4632      	mov	r2, r6
 8008118:	f001 fdae 	bl	8009c78 <_dtoa_r>
 800811c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008120:	4607      	mov	r7, r0
 8008122:	d102      	bne.n	800812a <__cvt+0x66>
 8008124:	f019 0f01 	tst.w	r9, #1
 8008128:	d022      	beq.n	8008170 <__cvt+0xac>
 800812a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800812e:	eb07 0906 	add.w	r9, r7, r6
 8008132:	d110      	bne.n	8008156 <__cvt+0x92>
 8008134:	783b      	ldrb	r3, [r7, #0]
 8008136:	2b30      	cmp	r3, #48	; 0x30
 8008138:	d10a      	bne.n	8008150 <__cvt+0x8c>
 800813a:	2200      	movs	r2, #0
 800813c:	2300      	movs	r3, #0
 800813e:	4620      	mov	r0, r4
 8008140:	4629      	mov	r1, r5
 8008142:	f7f8 fcc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008146:	b918      	cbnz	r0, 8008150 <__cvt+0x8c>
 8008148:	f1c6 0601 	rsb	r6, r6, #1
 800814c:	f8ca 6000 	str.w	r6, [sl]
 8008150:	f8da 3000 	ldr.w	r3, [sl]
 8008154:	4499      	add	r9, r3
 8008156:	2200      	movs	r2, #0
 8008158:	2300      	movs	r3, #0
 800815a:	4620      	mov	r0, r4
 800815c:	4629      	mov	r1, r5
 800815e:	f7f8 fcb3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008162:	b108      	cbz	r0, 8008168 <__cvt+0xa4>
 8008164:	f8cd 900c 	str.w	r9, [sp, #12]
 8008168:	2230      	movs	r2, #48	; 0x30
 800816a:	9b03      	ldr	r3, [sp, #12]
 800816c:	454b      	cmp	r3, r9
 800816e:	d307      	bcc.n	8008180 <__cvt+0xbc>
 8008170:	9b03      	ldr	r3, [sp, #12]
 8008172:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008174:	1bdb      	subs	r3, r3, r7
 8008176:	4638      	mov	r0, r7
 8008178:	6013      	str	r3, [r2, #0]
 800817a:	b004      	add	sp, #16
 800817c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008180:	1c59      	adds	r1, r3, #1
 8008182:	9103      	str	r1, [sp, #12]
 8008184:	701a      	strb	r2, [r3, #0]
 8008186:	e7f0      	b.n	800816a <__cvt+0xa6>

08008188 <__exponent>:
 8008188:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800818a:	4603      	mov	r3, r0
 800818c:	2900      	cmp	r1, #0
 800818e:	bfb8      	it	lt
 8008190:	4249      	neglt	r1, r1
 8008192:	f803 2b02 	strb.w	r2, [r3], #2
 8008196:	bfb4      	ite	lt
 8008198:	222d      	movlt	r2, #45	; 0x2d
 800819a:	222b      	movge	r2, #43	; 0x2b
 800819c:	2909      	cmp	r1, #9
 800819e:	7042      	strb	r2, [r0, #1]
 80081a0:	dd2a      	ble.n	80081f8 <__exponent+0x70>
 80081a2:	f10d 0407 	add.w	r4, sp, #7
 80081a6:	46a4      	mov	ip, r4
 80081a8:	270a      	movs	r7, #10
 80081aa:	46a6      	mov	lr, r4
 80081ac:	460a      	mov	r2, r1
 80081ae:	fb91 f6f7 	sdiv	r6, r1, r7
 80081b2:	fb07 1516 	mls	r5, r7, r6, r1
 80081b6:	3530      	adds	r5, #48	; 0x30
 80081b8:	2a63      	cmp	r2, #99	; 0x63
 80081ba:	f104 34ff 	add.w	r4, r4, #4294967295
 80081be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80081c2:	4631      	mov	r1, r6
 80081c4:	dcf1      	bgt.n	80081aa <__exponent+0x22>
 80081c6:	3130      	adds	r1, #48	; 0x30
 80081c8:	f1ae 0502 	sub.w	r5, lr, #2
 80081cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80081d0:	1c44      	adds	r4, r0, #1
 80081d2:	4629      	mov	r1, r5
 80081d4:	4561      	cmp	r1, ip
 80081d6:	d30a      	bcc.n	80081ee <__exponent+0x66>
 80081d8:	f10d 0209 	add.w	r2, sp, #9
 80081dc:	eba2 020e 	sub.w	r2, r2, lr
 80081e0:	4565      	cmp	r5, ip
 80081e2:	bf88      	it	hi
 80081e4:	2200      	movhi	r2, #0
 80081e6:	4413      	add	r3, r2
 80081e8:	1a18      	subs	r0, r3, r0
 80081ea:	b003      	add	sp, #12
 80081ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80081f6:	e7ed      	b.n	80081d4 <__exponent+0x4c>
 80081f8:	2330      	movs	r3, #48	; 0x30
 80081fa:	3130      	adds	r1, #48	; 0x30
 80081fc:	7083      	strb	r3, [r0, #2]
 80081fe:	70c1      	strb	r1, [r0, #3]
 8008200:	1d03      	adds	r3, r0, #4
 8008202:	e7f1      	b.n	80081e8 <__exponent+0x60>

08008204 <_printf_float>:
 8008204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008208:	ed2d 8b02 	vpush	{d8}
 800820c:	b08d      	sub	sp, #52	; 0x34
 800820e:	460c      	mov	r4, r1
 8008210:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008214:	4616      	mov	r6, r2
 8008216:	461f      	mov	r7, r3
 8008218:	4605      	mov	r5, r0
 800821a:	f002 fe8b 	bl	800af34 <_localeconv_r>
 800821e:	f8d0 a000 	ldr.w	sl, [r0]
 8008222:	4650      	mov	r0, sl
 8008224:	f7f7 ffd4 	bl	80001d0 <strlen>
 8008228:	2300      	movs	r3, #0
 800822a:	930a      	str	r3, [sp, #40]	; 0x28
 800822c:	6823      	ldr	r3, [r4, #0]
 800822e:	9305      	str	r3, [sp, #20]
 8008230:	f8d8 3000 	ldr.w	r3, [r8]
 8008234:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008238:	3307      	adds	r3, #7
 800823a:	f023 0307 	bic.w	r3, r3, #7
 800823e:	f103 0208 	add.w	r2, r3, #8
 8008242:	f8c8 2000 	str.w	r2, [r8]
 8008246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800824e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008252:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008256:	9307      	str	r3, [sp, #28]
 8008258:	f8cd 8018 	str.w	r8, [sp, #24]
 800825c:	ee08 0a10 	vmov	s16, r0
 8008260:	4b9f      	ldr	r3, [pc, #636]	; (80084e0 <_printf_float+0x2dc>)
 8008262:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008266:	f04f 32ff 	mov.w	r2, #4294967295
 800826a:	f7f8 fc5f 	bl	8000b2c <__aeabi_dcmpun>
 800826e:	bb88      	cbnz	r0, 80082d4 <_printf_float+0xd0>
 8008270:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008274:	4b9a      	ldr	r3, [pc, #616]	; (80084e0 <_printf_float+0x2dc>)
 8008276:	f04f 32ff 	mov.w	r2, #4294967295
 800827a:	f7f8 fc39 	bl	8000af0 <__aeabi_dcmple>
 800827e:	bb48      	cbnz	r0, 80082d4 <_printf_float+0xd0>
 8008280:	2200      	movs	r2, #0
 8008282:	2300      	movs	r3, #0
 8008284:	4640      	mov	r0, r8
 8008286:	4649      	mov	r1, r9
 8008288:	f7f8 fc28 	bl	8000adc <__aeabi_dcmplt>
 800828c:	b110      	cbz	r0, 8008294 <_printf_float+0x90>
 800828e:	232d      	movs	r3, #45	; 0x2d
 8008290:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008294:	4b93      	ldr	r3, [pc, #588]	; (80084e4 <_printf_float+0x2e0>)
 8008296:	4894      	ldr	r0, [pc, #592]	; (80084e8 <_printf_float+0x2e4>)
 8008298:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800829c:	bf94      	ite	ls
 800829e:	4698      	movls	r8, r3
 80082a0:	4680      	movhi	r8, r0
 80082a2:	2303      	movs	r3, #3
 80082a4:	6123      	str	r3, [r4, #16]
 80082a6:	9b05      	ldr	r3, [sp, #20]
 80082a8:	f023 0204 	bic.w	r2, r3, #4
 80082ac:	6022      	str	r2, [r4, #0]
 80082ae:	f04f 0900 	mov.w	r9, #0
 80082b2:	9700      	str	r7, [sp, #0]
 80082b4:	4633      	mov	r3, r6
 80082b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80082b8:	4621      	mov	r1, r4
 80082ba:	4628      	mov	r0, r5
 80082bc:	f000 f9d8 	bl	8008670 <_printf_common>
 80082c0:	3001      	adds	r0, #1
 80082c2:	f040 8090 	bne.w	80083e6 <_printf_float+0x1e2>
 80082c6:	f04f 30ff 	mov.w	r0, #4294967295
 80082ca:	b00d      	add	sp, #52	; 0x34
 80082cc:	ecbd 8b02 	vpop	{d8}
 80082d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082d4:	4642      	mov	r2, r8
 80082d6:	464b      	mov	r3, r9
 80082d8:	4640      	mov	r0, r8
 80082da:	4649      	mov	r1, r9
 80082dc:	f7f8 fc26 	bl	8000b2c <__aeabi_dcmpun>
 80082e0:	b140      	cbz	r0, 80082f4 <_printf_float+0xf0>
 80082e2:	464b      	mov	r3, r9
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	bfbc      	itt	lt
 80082e8:	232d      	movlt	r3, #45	; 0x2d
 80082ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80082ee:	487f      	ldr	r0, [pc, #508]	; (80084ec <_printf_float+0x2e8>)
 80082f0:	4b7f      	ldr	r3, [pc, #508]	; (80084f0 <_printf_float+0x2ec>)
 80082f2:	e7d1      	b.n	8008298 <_printf_float+0x94>
 80082f4:	6863      	ldr	r3, [r4, #4]
 80082f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80082fa:	9206      	str	r2, [sp, #24]
 80082fc:	1c5a      	adds	r2, r3, #1
 80082fe:	d13f      	bne.n	8008380 <_printf_float+0x17c>
 8008300:	2306      	movs	r3, #6
 8008302:	6063      	str	r3, [r4, #4]
 8008304:	9b05      	ldr	r3, [sp, #20]
 8008306:	6861      	ldr	r1, [r4, #4]
 8008308:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800830c:	2300      	movs	r3, #0
 800830e:	9303      	str	r3, [sp, #12]
 8008310:	ab0a      	add	r3, sp, #40	; 0x28
 8008312:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008316:	ab09      	add	r3, sp, #36	; 0x24
 8008318:	ec49 8b10 	vmov	d0, r8, r9
 800831c:	9300      	str	r3, [sp, #0]
 800831e:	6022      	str	r2, [r4, #0]
 8008320:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008324:	4628      	mov	r0, r5
 8008326:	f7ff fecd 	bl	80080c4 <__cvt>
 800832a:	9b06      	ldr	r3, [sp, #24]
 800832c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800832e:	2b47      	cmp	r3, #71	; 0x47
 8008330:	4680      	mov	r8, r0
 8008332:	d108      	bne.n	8008346 <_printf_float+0x142>
 8008334:	1cc8      	adds	r0, r1, #3
 8008336:	db02      	blt.n	800833e <_printf_float+0x13a>
 8008338:	6863      	ldr	r3, [r4, #4]
 800833a:	4299      	cmp	r1, r3
 800833c:	dd41      	ble.n	80083c2 <_printf_float+0x1be>
 800833e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008342:	fa5f fb8b 	uxtb.w	fp, fp
 8008346:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800834a:	d820      	bhi.n	800838e <_printf_float+0x18a>
 800834c:	3901      	subs	r1, #1
 800834e:	465a      	mov	r2, fp
 8008350:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008354:	9109      	str	r1, [sp, #36]	; 0x24
 8008356:	f7ff ff17 	bl	8008188 <__exponent>
 800835a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800835c:	1813      	adds	r3, r2, r0
 800835e:	2a01      	cmp	r2, #1
 8008360:	4681      	mov	r9, r0
 8008362:	6123      	str	r3, [r4, #16]
 8008364:	dc02      	bgt.n	800836c <_printf_float+0x168>
 8008366:	6822      	ldr	r2, [r4, #0]
 8008368:	07d2      	lsls	r2, r2, #31
 800836a:	d501      	bpl.n	8008370 <_printf_float+0x16c>
 800836c:	3301      	adds	r3, #1
 800836e:	6123      	str	r3, [r4, #16]
 8008370:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008374:	2b00      	cmp	r3, #0
 8008376:	d09c      	beq.n	80082b2 <_printf_float+0xae>
 8008378:	232d      	movs	r3, #45	; 0x2d
 800837a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800837e:	e798      	b.n	80082b2 <_printf_float+0xae>
 8008380:	9a06      	ldr	r2, [sp, #24]
 8008382:	2a47      	cmp	r2, #71	; 0x47
 8008384:	d1be      	bne.n	8008304 <_printf_float+0x100>
 8008386:	2b00      	cmp	r3, #0
 8008388:	d1bc      	bne.n	8008304 <_printf_float+0x100>
 800838a:	2301      	movs	r3, #1
 800838c:	e7b9      	b.n	8008302 <_printf_float+0xfe>
 800838e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008392:	d118      	bne.n	80083c6 <_printf_float+0x1c2>
 8008394:	2900      	cmp	r1, #0
 8008396:	6863      	ldr	r3, [r4, #4]
 8008398:	dd0b      	ble.n	80083b2 <_printf_float+0x1ae>
 800839a:	6121      	str	r1, [r4, #16]
 800839c:	b913      	cbnz	r3, 80083a4 <_printf_float+0x1a0>
 800839e:	6822      	ldr	r2, [r4, #0]
 80083a0:	07d0      	lsls	r0, r2, #31
 80083a2:	d502      	bpl.n	80083aa <_printf_float+0x1a6>
 80083a4:	3301      	adds	r3, #1
 80083a6:	440b      	add	r3, r1
 80083a8:	6123      	str	r3, [r4, #16]
 80083aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80083ac:	f04f 0900 	mov.w	r9, #0
 80083b0:	e7de      	b.n	8008370 <_printf_float+0x16c>
 80083b2:	b913      	cbnz	r3, 80083ba <_printf_float+0x1b6>
 80083b4:	6822      	ldr	r2, [r4, #0]
 80083b6:	07d2      	lsls	r2, r2, #31
 80083b8:	d501      	bpl.n	80083be <_printf_float+0x1ba>
 80083ba:	3302      	adds	r3, #2
 80083bc:	e7f4      	b.n	80083a8 <_printf_float+0x1a4>
 80083be:	2301      	movs	r3, #1
 80083c0:	e7f2      	b.n	80083a8 <_printf_float+0x1a4>
 80083c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80083c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083c8:	4299      	cmp	r1, r3
 80083ca:	db05      	blt.n	80083d8 <_printf_float+0x1d4>
 80083cc:	6823      	ldr	r3, [r4, #0]
 80083ce:	6121      	str	r1, [r4, #16]
 80083d0:	07d8      	lsls	r0, r3, #31
 80083d2:	d5ea      	bpl.n	80083aa <_printf_float+0x1a6>
 80083d4:	1c4b      	adds	r3, r1, #1
 80083d6:	e7e7      	b.n	80083a8 <_printf_float+0x1a4>
 80083d8:	2900      	cmp	r1, #0
 80083da:	bfd4      	ite	le
 80083dc:	f1c1 0202 	rsble	r2, r1, #2
 80083e0:	2201      	movgt	r2, #1
 80083e2:	4413      	add	r3, r2
 80083e4:	e7e0      	b.n	80083a8 <_printf_float+0x1a4>
 80083e6:	6823      	ldr	r3, [r4, #0]
 80083e8:	055a      	lsls	r2, r3, #21
 80083ea:	d407      	bmi.n	80083fc <_printf_float+0x1f8>
 80083ec:	6923      	ldr	r3, [r4, #16]
 80083ee:	4642      	mov	r2, r8
 80083f0:	4631      	mov	r1, r6
 80083f2:	4628      	mov	r0, r5
 80083f4:	47b8      	blx	r7
 80083f6:	3001      	adds	r0, #1
 80083f8:	d12c      	bne.n	8008454 <_printf_float+0x250>
 80083fa:	e764      	b.n	80082c6 <_printf_float+0xc2>
 80083fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008400:	f240 80e0 	bls.w	80085c4 <_printf_float+0x3c0>
 8008404:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008408:	2200      	movs	r2, #0
 800840a:	2300      	movs	r3, #0
 800840c:	f7f8 fb5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008410:	2800      	cmp	r0, #0
 8008412:	d034      	beq.n	800847e <_printf_float+0x27a>
 8008414:	4a37      	ldr	r2, [pc, #220]	; (80084f4 <_printf_float+0x2f0>)
 8008416:	2301      	movs	r3, #1
 8008418:	4631      	mov	r1, r6
 800841a:	4628      	mov	r0, r5
 800841c:	47b8      	blx	r7
 800841e:	3001      	adds	r0, #1
 8008420:	f43f af51 	beq.w	80082c6 <_printf_float+0xc2>
 8008424:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008428:	429a      	cmp	r2, r3
 800842a:	db02      	blt.n	8008432 <_printf_float+0x22e>
 800842c:	6823      	ldr	r3, [r4, #0]
 800842e:	07d8      	lsls	r0, r3, #31
 8008430:	d510      	bpl.n	8008454 <_printf_float+0x250>
 8008432:	ee18 3a10 	vmov	r3, s16
 8008436:	4652      	mov	r2, sl
 8008438:	4631      	mov	r1, r6
 800843a:	4628      	mov	r0, r5
 800843c:	47b8      	blx	r7
 800843e:	3001      	adds	r0, #1
 8008440:	f43f af41 	beq.w	80082c6 <_printf_float+0xc2>
 8008444:	f04f 0800 	mov.w	r8, #0
 8008448:	f104 091a 	add.w	r9, r4, #26
 800844c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800844e:	3b01      	subs	r3, #1
 8008450:	4543      	cmp	r3, r8
 8008452:	dc09      	bgt.n	8008468 <_printf_float+0x264>
 8008454:	6823      	ldr	r3, [r4, #0]
 8008456:	079b      	lsls	r3, r3, #30
 8008458:	f100 8105 	bmi.w	8008666 <_printf_float+0x462>
 800845c:	68e0      	ldr	r0, [r4, #12]
 800845e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008460:	4298      	cmp	r0, r3
 8008462:	bfb8      	it	lt
 8008464:	4618      	movlt	r0, r3
 8008466:	e730      	b.n	80082ca <_printf_float+0xc6>
 8008468:	2301      	movs	r3, #1
 800846a:	464a      	mov	r2, r9
 800846c:	4631      	mov	r1, r6
 800846e:	4628      	mov	r0, r5
 8008470:	47b8      	blx	r7
 8008472:	3001      	adds	r0, #1
 8008474:	f43f af27 	beq.w	80082c6 <_printf_float+0xc2>
 8008478:	f108 0801 	add.w	r8, r8, #1
 800847c:	e7e6      	b.n	800844c <_printf_float+0x248>
 800847e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008480:	2b00      	cmp	r3, #0
 8008482:	dc39      	bgt.n	80084f8 <_printf_float+0x2f4>
 8008484:	4a1b      	ldr	r2, [pc, #108]	; (80084f4 <_printf_float+0x2f0>)
 8008486:	2301      	movs	r3, #1
 8008488:	4631      	mov	r1, r6
 800848a:	4628      	mov	r0, r5
 800848c:	47b8      	blx	r7
 800848e:	3001      	adds	r0, #1
 8008490:	f43f af19 	beq.w	80082c6 <_printf_float+0xc2>
 8008494:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008498:	4313      	orrs	r3, r2
 800849a:	d102      	bne.n	80084a2 <_printf_float+0x29e>
 800849c:	6823      	ldr	r3, [r4, #0]
 800849e:	07d9      	lsls	r1, r3, #31
 80084a0:	d5d8      	bpl.n	8008454 <_printf_float+0x250>
 80084a2:	ee18 3a10 	vmov	r3, s16
 80084a6:	4652      	mov	r2, sl
 80084a8:	4631      	mov	r1, r6
 80084aa:	4628      	mov	r0, r5
 80084ac:	47b8      	blx	r7
 80084ae:	3001      	adds	r0, #1
 80084b0:	f43f af09 	beq.w	80082c6 <_printf_float+0xc2>
 80084b4:	f04f 0900 	mov.w	r9, #0
 80084b8:	f104 0a1a 	add.w	sl, r4, #26
 80084bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084be:	425b      	negs	r3, r3
 80084c0:	454b      	cmp	r3, r9
 80084c2:	dc01      	bgt.n	80084c8 <_printf_float+0x2c4>
 80084c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084c6:	e792      	b.n	80083ee <_printf_float+0x1ea>
 80084c8:	2301      	movs	r3, #1
 80084ca:	4652      	mov	r2, sl
 80084cc:	4631      	mov	r1, r6
 80084ce:	4628      	mov	r0, r5
 80084d0:	47b8      	blx	r7
 80084d2:	3001      	adds	r0, #1
 80084d4:	f43f aef7 	beq.w	80082c6 <_printf_float+0xc2>
 80084d8:	f109 0901 	add.w	r9, r9, #1
 80084dc:	e7ee      	b.n	80084bc <_printf_float+0x2b8>
 80084de:	bf00      	nop
 80084e0:	7fefffff 	.word	0x7fefffff
 80084e4:	0800cdfc 	.word	0x0800cdfc
 80084e8:	0800ce00 	.word	0x0800ce00
 80084ec:	0800ce08 	.word	0x0800ce08
 80084f0:	0800ce04 	.word	0x0800ce04
 80084f4:	0800ce0c 	.word	0x0800ce0c
 80084f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084fc:	429a      	cmp	r2, r3
 80084fe:	bfa8      	it	ge
 8008500:	461a      	movge	r2, r3
 8008502:	2a00      	cmp	r2, #0
 8008504:	4691      	mov	r9, r2
 8008506:	dc37      	bgt.n	8008578 <_printf_float+0x374>
 8008508:	f04f 0b00 	mov.w	fp, #0
 800850c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008510:	f104 021a 	add.w	r2, r4, #26
 8008514:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008516:	9305      	str	r3, [sp, #20]
 8008518:	eba3 0309 	sub.w	r3, r3, r9
 800851c:	455b      	cmp	r3, fp
 800851e:	dc33      	bgt.n	8008588 <_printf_float+0x384>
 8008520:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008524:	429a      	cmp	r2, r3
 8008526:	db3b      	blt.n	80085a0 <_printf_float+0x39c>
 8008528:	6823      	ldr	r3, [r4, #0]
 800852a:	07da      	lsls	r2, r3, #31
 800852c:	d438      	bmi.n	80085a0 <_printf_float+0x39c>
 800852e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008530:	9a05      	ldr	r2, [sp, #20]
 8008532:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008534:	1a9a      	subs	r2, r3, r2
 8008536:	eba3 0901 	sub.w	r9, r3, r1
 800853a:	4591      	cmp	r9, r2
 800853c:	bfa8      	it	ge
 800853e:	4691      	movge	r9, r2
 8008540:	f1b9 0f00 	cmp.w	r9, #0
 8008544:	dc35      	bgt.n	80085b2 <_printf_float+0x3ae>
 8008546:	f04f 0800 	mov.w	r8, #0
 800854a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800854e:	f104 0a1a 	add.w	sl, r4, #26
 8008552:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008556:	1a9b      	subs	r3, r3, r2
 8008558:	eba3 0309 	sub.w	r3, r3, r9
 800855c:	4543      	cmp	r3, r8
 800855e:	f77f af79 	ble.w	8008454 <_printf_float+0x250>
 8008562:	2301      	movs	r3, #1
 8008564:	4652      	mov	r2, sl
 8008566:	4631      	mov	r1, r6
 8008568:	4628      	mov	r0, r5
 800856a:	47b8      	blx	r7
 800856c:	3001      	adds	r0, #1
 800856e:	f43f aeaa 	beq.w	80082c6 <_printf_float+0xc2>
 8008572:	f108 0801 	add.w	r8, r8, #1
 8008576:	e7ec      	b.n	8008552 <_printf_float+0x34e>
 8008578:	4613      	mov	r3, r2
 800857a:	4631      	mov	r1, r6
 800857c:	4642      	mov	r2, r8
 800857e:	4628      	mov	r0, r5
 8008580:	47b8      	blx	r7
 8008582:	3001      	adds	r0, #1
 8008584:	d1c0      	bne.n	8008508 <_printf_float+0x304>
 8008586:	e69e      	b.n	80082c6 <_printf_float+0xc2>
 8008588:	2301      	movs	r3, #1
 800858a:	4631      	mov	r1, r6
 800858c:	4628      	mov	r0, r5
 800858e:	9205      	str	r2, [sp, #20]
 8008590:	47b8      	blx	r7
 8008592:	3001      	adds	r0, #1
 8008594:	f43f ae97 	beq.w	80082c6 <_printf_float+0xc2>
 8008598:	9a05      	ldr	r2, [sp, #20]
 800859a:	f10b 0b01 	add.w	fp, fp, #1
 800859e:	e7b9      	b.n	8008514 <_printf_float+0x310>
 80085a0:	ee18 3a10 	vmov	r3, s16
 80085a4:	4652      	mov	r2, sl
 80085a6:	4631      	mov	r1, r6
 80085a8:	4628      	mov	r0, r5
 80085aa:	47b8      	blx	r7
 80085ac:	3001      	adds	r0, #1
 80085ae:	d1be      	bne.n	800852e <_printf_float+0x32a>
 80085b0:	e689      	b.n	80082c6 <_printf_float+0xc2>
 80085b2:	9a05      	ldr	r2, [sp, #20]
 80085b4:	464b      	mov	r3, r9
 80085b6:	4442      	add	r2, r8
 80085b8:	4631      	mov	r1, r6
 80085ba:	4628      	mov	r0, r5
 80085bc:	47b8      	blx	r7
 80085be:	3001      	adds	r0, #1
 80085c0:	d1c1      	bne.n	8008546 <_printf_float+0x342>
 80085c2:	e680      	b.n	80082c6 <_printf_float+0xc2>
 80085c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085c6:	2a01      	cmp	r2, #1
 80085c8:	dc01      	bgt.n	80085ce <_printf_float+0x3ca>
 80085ca:	07db      	lsls	r3, r3, #31
 80085cc:	d538      	bpl.n	8008640 <_printf_float+0x43c>
 80085ce:	2301      	movs	r3, #1
 80085d0:	4642      	mov	r2, r8
 80085d2:	4631      	mov	r1, r6
 80085d4:	4628      	mov	r0, r5
 80085d6:	47b8      	blx	r7
 80085d8:	3001      	adds	r0, #1
 80085da:	f43f ae74 	beq.w	80082c6 <_printf_float+0xc2>
 80085de:	ee18 3a10 	vmov	r3, s16
 80085e2:	4652      	mov	r2, sl
 80085e4:	4631      	mov	r1, r6
 80085e6:	4628      	mov	r0, r5
 80085e8:	47b8      	blx	r7
 80085ea:	3001      	adds	r0, #1
 80085ec:	f43f ae6b 	beq.w	80082c6 <_printf_float+0xc2>
 80085f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80085f4:	2200      	movs	r2, #0
 80085f6:	2300      	movs	r3, #0
 80085f8:	f7f8 fa66 	bl	8000ac8 <__aeabi_dcmpeq>
 80085fc:	b9d8      	cbnz	r0, 8008636 <_printf_float+0x432>
 80085fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008600:	f108 0201 	add.w	r2, r8, #1
 8008604:	3b01      	subs	r3, #1
 8008606:	4631      	mov	r1, r6
 8008608:	4628      	mov	r0, r5
 800860a:	47b8      	blx	r7
 800860c:	3001      	adds	r0, #1
 800860e:	d10e      	bne.n	800862e <_printf_float+0x42a>
 8008610:	e659      	b.n	80082c6 <_printf_float+0xc2>
 8008612:	2301      	movs	r3, #1
 8008614:	4652      	mov	r2, sl
 8008616:	4631      	mov	r1, r6
 8008618:	4628      	mov	r0, r5
 800861a:	47b8      	blx	r7
 800861c:	3001      	adds	r0, #1
 800861e:	f43f ae52 	beq.w	80082c6 <_printf_float+0xc2>
 8008622:	f108 0801 	add.w	r8, r8, #1
 8008626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008628:	3b01      	subs	r3, #1
 800862a:	4543      	cmp	r3, r8
 800862c:	dcf1      	bgt.n	8008612 <_printf_float+0x40e>
 800862e:	464b      	mov	r3, r9
 8008630:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008634:	e6dc      	b.n	80083f0 <_printf_float+0x1ec>
 8008636:	f04f 0800 	mov.w	r8, #0
 800863a:	f104 0a1a 	add.w	sl, r4, #26
 800863e:	e7f2      	b.n	8008626 <_printf_float+0x422>
 8008640:	2301      	movs	r3, #1
 8008642:	4642      	mov	r2, r8
 8008644:	e7df      	b.n	8008606 <_printf_float+0x402>
 8008646:	2301      	movs	r3, #1
 8008648:	464a      	mov	r2, r9
 800864a:	4631      	mov	r1, r6
 800864c:	4628      	mov	r0, r5
 800864e:	47b8      	blx	r7
 8008650:	3001      	adds	r0, #1
 8008652:	f43f ae38 	beq.w	80082c6 <_printf_float+0xc2>
 8008656:	f108 0801 	add.w	r8, r8, #1
 800865a:	68e3      	ldr	r3, [r4, #12]
 800865c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800865e:	1a5b      	subs	r3, r3, r1
 8008660:	4543      	cmp	r3, r8
 8008662:	dcf0      	bgt.n	8008646 <_printf_float+0x442>
 8008664:	e6fa      	b.n	800845c <_printf_float+0x258>
 8008666:	f04f 0800 	mov.w	r8, #0
 800866a:	f104 0919 	add.w	r9, r4, #25
 800866e:	e7f4      	b.n	800865a <_printf_float+0x456>

08008670 <_printf_common>:
 8008670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008674:	4616      	mov	r6, r2
 8008676:	4699      	mov	r9, r3
 8008678:	688a      	ldr	r2, [r1, #8]
 800867a:	690b      	ldr	r3, [r1, #16]
 800867c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008680:	4293      	cmp	r3, r2
 8008682:	bfb8      	it	lt
 8008684:	4613      	movlt	r3, r2
 8008686:	6033      	str	r3, [r6, #0]
 8008688:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800868c:	4607      	mov	r7, r0
 800868e:	460c      	mov	r4, r1
 8008690:	b10a      	cbz	r2, 8008696 <_printf_common+0x26>
 8008692:	3301      	adds	r3, #1
 8008694:	6033      	str	r3, [r6, #0]
 8008696:	6823      	ldr	r3, [r4, #0]
 8008698:	0699      	lsls	r1, r3, #26
 800869a:	bf42      	ittt	mi
 800869c:	6833      	ldrmi	r3, [r6, #0]
 800869e:	3302      	addmi	r3, #2
 80086a0:	6033      	strmi	r3, [r6, #0]
 80086a2:	6825      	ldr	r5, [r4, #0]
 80086a4:	f015 0506 	ands.w	r5, r5, #6
 80086a8:	d106      	bne.n	80086b8 <_printf_common+0x48>
 80086aa:	f104 0a19 	add.w	sl, r4, #25
 80086ae:	68e3      	ldr	r3, [r4, #12]
 80086b0:	6832      	ldr	r2, [r6, #0]
 80086b2:	1a9b      	subs	r3, r3, r2
 80086b4:	42ab      	cmp	r3, r5
 80086b6:	dc26      	bgt.n	8008706 <_printf_common+0x96>
 80086b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086bc:	1e13      	subs	r3, r2, #0
 80086be:	6822      	ldr	r2, [r4, #0]
 80086c0:	bf18      	it	ne
 80086c2:	2301      	movne	r3, #1
 80086c4:	0692      	lsls	r2, r2, #26
 80086c6:	d42b      	bmi.n	8008720 <_printf_common+0xb0>
 80086c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086cc:	4649      	mov	r1, r9
 80086ce:	4638      	mov	r0, r7
 80086d0:	47c0      	blx	r8
 80086d2:	3001      	adds	r0, #1
 80086d4:	d01e      	beq.n	8008714 <_printf_common+0xa4>
 80086d6:	6823      	ldr	r3, [r4, #0]
 80086d8:	68e5      	ldr	r5, [r4, #12]
 80086da:	6832      	ldr	r2, [r6, #0]
 80086dc:	f003 0306 	and.w	r3, r3, #6
 80086e0:	2b04      	cmp	r3, #4
 80086e2:	bf08      	it	eq
 80086e4:	1aad      	subeq	r5, r5, r2
 80086e6:	68a3      	ldr	r3, [r4, #8]
 80086e8:	6922      	ldr	r2, [r4, #16]
 80086ea:	bf0c      	ite	eq
 80086ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086f0:	2500      	movne	r5, #0
 80086f2:	4293      	cmp	r3, r2
 80086f4:	bfc4      	itt	gt
 80086f6:	1a9b      	subgt	r3, r3, r2
 80086f8:	18ed      	addgt	r5, r5, r3
 80086fa:	2600      	movs	r6, #0
 80086fc:	341a      	adds	r4, #26
 80086fe:	42b5      	cmp	r5, r6
 8008700:	d11a      	bne.n	8008738 <_printf_common+0xc8>
 8008702:	2000      	movs	r0, #0
 8008704:	e008      	b.n	8008718 <_printf_common+0xa8>
 8008706:	2301      	movs	r3, #1
 8008708:	4652      	mov	r2, sl
 800870a:	4649      	mov	r1, r9
 800870c:	4638      	mov	r0, r7
 800870e:	47c0      	blx	r8
 8008710:	3001      	adds	r0, #1
 8008712:	d103      	bne.n	800871c <_printf_common+0xac>
 8008714:	f04f 30ff 	mov.w	r0, #4294967295
 8008718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800871c:	3501      	adds	r5, #1
 800871e:	e7c6      	b.n	80086ae <_printf_common+0x3e>
 8008720:	18e1      	adds	r1, r4, r3
 8008722:	1c5a      	adds	r2, r3, #1
 8008724:	2030      	movs	r0, #48	; 0x30
 8008726:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800872a:	4422      	add	r2, r4
 800872c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008730:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008734:	3302      	adds	r3, #2
 8008736:	e7c7      	b.n	80086c8 <_printf_common+0x58>
 8008738:	2301      	movs	r3, #1
 800873a:	4622      	mov	r2, r4
 800873c:	4649      	mov	r1, r9
 800873e:	4638      	mov	r0, r7
 8008740:	47c0      	blx	r8
 8008742:	3001      	adds	r0, #1
 8008744:	d0e6      	beq.n	8008714 <_printf_common+0xa4>
 8008746:	3601      	adds	r6, #1
 8008748:	e7d9      	b.n	80086fe <_printf_common+0x8e>
	...

0800874c <_printf_i>:
 800874c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008750:	7e0f      	ldrb	r7, [r1, #24]
 8008752:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008754:	2f78      	cmp	r7, #120	; 0x78
 8008756:	4691      	mov	r9, r2
 8008758:	4680      	mov	r8, r0
 800875a:	460c      	mov	r4, r1
 800875c:	469a      	mov	sl, r3
 800875e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008762:	d807      	bhi.n	8008774 <_printf_i+0x28>
 8008764:	2f62      	cmp	r7, #98	; 0x62
 8008766:	d80a      	bhi.n	800877e <_printf_i+0x32>
 8008768:	2f00      	cmp	r7, #0
 800876a:	f000 80d8 	beq.w	800891e <_printf_i+0x1d2>
 800876e:	2f58      	cmp	r7, #88	; 0x58
 8008770:	f000 80a3 	beq.w	80088ba <_printf_i+0x16e>
 8008774:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008778:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800877c:	e03a      	b.n	80087f4 <_printf_i+0xa8>
 800877e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008782:	2b15      	cmp	r3, #21
 8008784:	d8f6      	bhi.n	8008774 <_printf_i+0x28>
 8008786:	a101      	add	r1, pc, #4	; (adr r1, 800878c <_printf_i+0x40>)
 8008788:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800878c:	080087e5 	.word	0x080087e5
 8008790:	080087f9 	.word	0x080087f9
 8008794:	08008775 	.word	0x08008775
 8008798:	08008775 	.word	0x08008775
 800879c:	08008775 	.word	0x08008775
 80087a0:	08008775 	.word	0x08008775
 80087a4:	080087f9 	.word	0x080087f9
 80087a8:	08008775 	.word	0x08008775
 80087ac:	08008775 	.word	0x08008775
 80087b0:	08008775 	.word	0x08008775
 80087b4:	08008775 	.word	0x08008775
 80087b8:	08008905 	.word	0x08008905
 80087bc:	08008829 	.word	0x08008829
 80087c0:	080088e7 	.word	0x080088e7
 80087c4:	08008775 	.word	0x08008775
 80087c8:	08008775 	.word	0x08008775
 80087cc:	08008927 	.word	0x08008927
 80087d0:	08008775 	.word	0x08008775
 80087d4:	08008829 	.word	0x08008829
 80087d8:	08008775 	.word	0x08008775
 80087dc:	08008775 	.word	0x08008775
 80087e0:	080088ef 	.word	0x080088ef
 80087e4:	682b      	ldr	r3, [r5, #0]
 80087e6:	1d1a      	adds	r2, r3, #4
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	602a      	str	r2, [r5, #0]
 80087ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087f4:	2301      	movs	r3, #1
 80087f6:	e0a3      	b.n	8008940 <_printf_i+0x1f4>
 80087f8:	6820      	ldr	r0, [r4, #0]
 80087fa:	6829      	ldr	r1, [r5, #0]
 80087fc:	0606      	lsls	r6, r0, #24
 80087fe:	f101 0304 	add.w	r3, r1, #4
 8008802:	d50a      	bpl.n	800881a <_printf_i+0xce>
 8008804:	680e      	ldr	r6, [r1, #0]
 8008806:	602b      	str	r3, [r5, #0]
 8008808:	2e00      	cmp	r6, #0
 800880a:	da03      	bge.n	8008814 <_printf_i+0xc8>
 800880c:	232d      	movs	r3, #45	; 0x2d
 800880e:	4276      	negs	r6, r6
 8008810:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008814:	485e      	ldr	r0, [pc, #376]	; (8008990 <_printf_i+0x244>)
 8008816:	230a      	movs	r3, #10
 8008818:	e019      	b.n	800884e <_printf_i+0x102>
 800881a:	680e      	ldr	r6, [r1, #0]
 800881c:	602b      	str	r3, [r5, #0]
 800881e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008822:	bf18      	it	ne
 8008824:	b236      	sxthne	r6, r6
 8008826:	e7ef      	b.n	8008808 <_printf_i+0xbc>
 8008828:	682b      	ldr	r3, [r5, #0]
 800882a:	6820      	ldr	r0, [r4, #0]
 800882c:	1d19      	adds	r1, r3, #4
 800882e:	6029      	str	r1, [r5, #0]
 8008830:	0601      	lsls	r1, r0, #24
 8008832:	d501      	bpl.n	8008838 <_printf_i+0xec>
 8008834:	681e      	ldr	r6, [r3, #0]
 8008836:	e002      	b.n	800883e <_printf_i+0xf2>
 8008838:	0646      	lsls	r6, r0, #25
 800883a:	d5fb      	bpl.n	8008834 <_printf_i+0xe8>
 800883c:	881e      	ldrh	r6, [r3, #0]
 800883e:	4854      	ldr	r0, [pc, #336]	; (8008990 <_printf_i+0x244>)
 8008840:	2f6f      	cmp	r7, #111	; 0x6f
 8008842:	bf0c      	ite	eq
 8008844:	2308      	moveq	r3, #8
 8008846:	230a      	movne	r3, #10
 8008848:	2100      	movs	r1, #0
 800884a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800884e:	6865      	ldr	r5, [r4, #4]
 8008850:	60a5      	str	r5, [r4, #8]
 8008852:	2d00      	cmp	r5, #0
 8008854:	bfa2      	ittt	ge
 8008856:	6821      	ldrge	r1, [r4, #0]
 8008858:	f021 0104 	bicge.w	r1, r1, #4
 800885c:	6021      	strge	r1, [r4, #0]
 800885e:	b90e      	cbnz	r6, 8008864 <_printf_i+0x118>
 8008860:	2d00      	cmp	r5, #0
 8008862:	d04d      	beq.n	8008900 <_printf_i+0x1b4>
 8008864:	4615      	mov	r5, r2
 8008866:	fbb6 f1f3 	udiv	r1, r6, r3
 800886a:	fb03 6711 	mls	r7, r3, r1, r6
 800886e:	5dc7      	ldrb	r7, [r0, r7]
 8008870:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008874:	4637      	mov	r7, r6
 8008876:	42bb      	cmp	r3, r7
 8008878:	460e      	mov	r6, r1
 800887a:	d9f4      	bls.n	8008866 <_printf_i+0x11a>
 800887c:	2b08      	cmp	r3, #8
 800887e:	d10b      	bne.n	8008898 <_printf_i+0x14c>
 8008880:	6823      	ldr	r3, [r4, #0]
 8008882:	07de      	lsls	r6, r3, #31
 8008884:	d508      	bpl.n	8008898 <_printf_i+0x14c>
 8008886:	6923      	ldr	r3, [r4, #16]
 8008888:	6861      	ldr	r1, [r4, #4]
 800888a:	4299      	cmp	r1, r3
 800888c:	bfde      	ittt	le
 800888e:	2330      	movle	r3, #48	; 0x30
 8008890:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008894:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008898:	1b52      	subs	r2, r2, r5
 800889a:	6122      	str	r2, [r4, #16]
 800889c:	f8cd a000 	str.w	sl, [sp]
 80088a0:	464b      	mov	r3, r9
 80088a2:	aa03      	add	r2, sp, #12
 80088a4:	4621      	mov	r1, r4
 80088a6:	4640      	mov	r0, r8
 80088a8:	f7ff fee2 	bl	8008670 <_printf_common>
 80088ac:	3001      	adds	r0, #1
 80088ae:	d14c      	bne.n	800894a <_printf_i+0x1fe>
 80088b0:	f04f 30ff 	mov.w	r0, #4294967295
 80088b4:	b004      	add	sp, #16
 80088b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088ba:	4835      	ldr	r0, [pc, #212]	; (8008990 <_printf_i+0x244>)
 80088bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80088c0:	6829      	ldr	r1, [r5, #0]
 80088c2:	6823      	ldr	r3, [r4, #0]
 80088c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80088c8:	6029      	str	r1, [r5, #0]
 80088ca:	061d      	lsls	r5, r3, #24
 80088cc:	d514      	bpl.n	80088f8 <_printf_i+0x1ac>
 80088ce:	07df      	lsls	r7, r3, #31
 80088d0:	bf44      	itt	mi
 80088d2:	f043 0320 	orrmi.w	r3, r3, #32
 80088d6:	6023      	strmi	r3, [r4, #0]
 80088d8:	b91e      	cbnz	r6, 80088e2 <_printf_i+0x196>
 80088da:	6823      	ldr	r3, [r4, #0]
 80088dc:	f023 0320 	bic.w	r3, r3, #32
 80088e0:	6023      	str	r3, [r4, #0]
 80088e2:	2310      	movs	r3, #16
 80088e4:	e7b0      	b.n	8008848 <_printf_i+0xfc>
 80088e6:	6823      	ldr	r3, [r4, #0]
 80088e8:	f043 0320 	orr.w	r3, r3, #32
 80088ec:	6023      	str	r3, [r4, #0]
 80088ee:	2378      	movs	r3, #120	; 0x78
 80088f0:	4828      	ldr	r0, [pc, #160]	; (8008994 <_printf_i+0x248>)
 80088f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088f6:	e7e3      	b.n	80088c0 <_printf_i+0x174>
 80088f8:	0659      	lsls	r1, r3, #25
 80088fa:	bf48      	it	mi
 80088fc:	b2b6      	uxthmi	r6, r6
 80088fe:	e7e6      	b.n	80088ce <_printf_i+0x182>
 8008900:	4615      	mov	r5, r2
 8008902:	e7bb      	b.n	800887c <_printf_i+0x130>
 8008904:	682b      	ldr	r3, [r5, #0]
 8008906:	6826      	ldr	r6, [r4, #0]
 8008908:	6961      	ldr	r1, [r4, #20]
 800890a:	1d18      	adds	r0, r3, #4
 800890c:	6028      	str	r0, [r5, #0]
 800890e:	0635      	lsls	r5, r6, #24
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	d501      	bpl.n	8008918 <_printf_i+0x1cc>
 8008914:	6019      	str	r1, [r3, #0]
 8008916:	e002      	b.n	800891e <_printf_i+0x1d2>
 8008918:	0670      	lsls	r0, r6, #25
 800891a:	d5fb      	bpl.n	8008914 <_printf_i+0x1c8>
 800891c:	8019      	strh	r1, [r3, #0]
 800891e:	2300      	movs	r3, #0
 8008920:	6123      	str	r3, [r4, #16]
 8008922:	4615      	mov	r5, r2
 8008924:	e7ba      	b.n	800889c <_printf_i+0x150>
 8008926:	682b      	ldr	r3, [r5, #0]
 8008928:	1d1a      	adds	r2, r3, #4
 800892a:	602a      	str	r2, [r5, #0]
 800892c:	681d      	ldr	r5, [r3, #0]
 800892e:	6862      	ldr	r2, [r4, #4]
 8008930:	2100      	movs	r1, #0
 8008932:	4628      	mov	r0, r5
 8008934:	f7f7 fc54 	bl	80001e0 <memchr>
 8008938:	b108      	cbz	r0, 800893e <_printf_i+0x1f2>
 800893a:	1b40      	subs	r0, r0, r5
 800893c:	6060      	str	r0, [r4, #4]
 800893e:	6863      	ldr	r3, [r4, #4]
 8008940:	6123      	str	r3, [r4, #16]
 8008942:	2300      	movs	r3, #0
 8008944:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008948:	e7a8      	b.n	800889c <_printf_i+0x150>
 800894a:	6923      	ldr	r3, [r4, #16]
 800894c:	462a      	mov	r2, r5
 800894e:	4649      	mov	r1, r9
 8008950:	4640      	mov	r0, r8
 8008952:	47d0      	blx	sl
 8008954:	3001      	adds	r0, #1
 8008956:	d0ab      	beq.n	80088b0 <_printf_i+0x164>
 8008958:	6823      	ldr	r3, [r4, #0]
 800895a:	079b      	lsls	r3, r3, #30
 800895c:	d413      	bmi.n	8008986 <_printf_i+0x23a>
 800895e:	68e0      	ldr	r0, [r4, #12]
 8008960:	9b03      	ldr	r3, [sp, #12]
 8008962:	4298      	cmp	r0, r3
 8008964:	bfb8      	it	lt
 8008966:	4618      	movlt	r0, r3
 8008968:	e7a4      	b.n	80088b4 <_printf_i+0x168>
 800896a:	2301      	movs	r3, #1
 800896c:	4632      	mov	r2, r6
 800896e:	4649      	mov	r1, r9
 8008970:	4640      	mov	r0, r8
 8008972:	47d0      	blx	sl
 8008974:	3001      	adds	r0, #1
 8008976:	d09b      	beq.n	80088b0 <_printf_i+0x164>
 8008978:	3501      	adds	r5, #1
 800897a:	68e3      	ldr	r3, [r4, #12]
 800897c:	9903      	ldr	r1, [sp, #12]
 800897e:	1a5b      	subs	r3, r3, r1
 8008980:	42ab      	cmp	r3, r5
 8008982:	dcf2      	bgt.n	800896a <_printf_i+0x21e>
 8008984:	e7eb      	b.n	800895e <_printf_i+0x212>
 8008986:	2500      	movs	r5, #0
 8008988:	f104 0619 	add.w	r6, r4, #25
 800898c:	e7f5      	b.n	800897a <_printf_i+0x22e>
 800898e:	bf00      	nop
 8008990:	0800ce0e 	.word	0x0800ce0e
 8008994:	0800ce1f 	.word	0x0800ce1f

08008998 <_scanf_float>:
 8008998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800899c:	b087      	sub	sp, #28
 800899e:	4617      	mov	r7, r2
 80089a0:	9303      	str	r3, [sp, #12]
 80089a2:	688b      	ldr	r3, [r1, #8]
 80089a4:	1e5a      	subs	r2, r3, #1
 80089a6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80089aa:	bf83      	ittte	hi
 80089ac:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80089b0:	195b      	addhi	r3, r3, r5
 80089b2:	9302      	strhi	r3, [sp, #8]
 80089b4:	2300      	movls	r3, #0
 80089b6:	bf86      	itte	hi
 80089b8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80089bc:	608b      	strhi	r3, [r1, #8]
 80089be:	9302      	strls	r3, [sp, #8]
 80089c0:	680b      	ldr	r3, [r1, #0]
 80089c2:	468b      	mov	fp, r1
 80089c4:	2500      	movs	r5, #0
 80089c6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80089ca:	f84b 3b1c 	str.w	r3, [fp], #28
 80089ce:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80089d2:	4680      	mov	r8, r0
 80089d4:	460c      	mov	r4, r1
 80089d6:	465e      	mov	r6, fp
 80089d8:	46aa      	mov	sl, r5
 80089da:	46a9      	mov	r9, r5
 80089dc:	9501      	str	r5, [sp, #4]
 80089de:	68a2      	ldr	r2, [r4, #8]
 80089e0:	b152      	cbz	r2, 80089f8 <_scanf_float+0x60>
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	2b4e      	cmp	r3, #78	; 0x4e
 80089e8:	d864      	bhi.n	8008ab4 <_scanf_float+0x11c>
 80089ea:	2b40      	cmp	r3, #64	; 0x40
 80089ec:	d83c      	bhi.n	8008a68 <_scanf_float+0xd0>
 80089ee:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80089f2:	b2c8      	uxtb	r0, r1
 80089f4:	280e      	cmp	r0, #14
 80089f6:	d93a      	bls.n	8008a6e <_scanf_float+0xd6>
 80089f8:	f1b9 0f00 	cmp.w	r9, #0
 80089fc:	d003      	beq.n	8008a06 <_scanf_float+0x6e>
 80089fe:	6823      	ldr	r3, [r4, #0]
 8008a00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a04:	6023      	str	r3, [r4, #0]
 8008a06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a0a:	f1ba 0f01 	cmp.w	sl, #1
 8008a0e:	f200 8113 	bhi.w	8008c38 <_scanf_float+0x2a0>
 8008a12:	455e      	cmp	r6, fp
 8008a14:	f200 8105 	bhi.w	8008c22 <_scanf_float+0x28a>
 8008a18:	2501      	movs	r5, #1
 8008a1a:	4628      	mov	r0, r5
 8008a1c:	b007      	add	sp, #28
 8008a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a22:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008a26:	2a0d      	cmp	r2, #13
 8008a28:	d8e6      	bhi.n	80089f8 <_scanf_float+0x60>
 8008a2a:	a101      	add	r1, pc, #4	; (adr r1, 8008a30 <_scanf_float+0x98>)
 8008a2c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008a30:	08008b6f 	.word	0x08008b6f
 8008a34:	080089f9 	.word	0x080089f9
 8008a38:	080089f9 	.word	0x080089f9
 8008a3c:	080089f9 	.word	0x080089f9
 8008a40:	08008bcf 	.word	0x08008bcf
 8008a44:	08008ba7 	.word	0x08008ba7
 8008a48:	080089f9 	.word	0x080089f9
 8008a4c:	080089f9 	.word	0x080089f9
 8008a50:	08008b7d 	.word	0x08008b7d
 8008a54:	080089f9 	.word	0x080089f9
 8008a58:	080089f9 	.word	0x080089f9
 8008a5c:	080089f9 	.word	0x080089f9
 8008a60:	080089f9 	.word	0x080089f9
 8008a64:	08008b35 	.word	0x08008b35
 8008a68:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008a6c:	e7db      	b.n	8008a26 <_scanf_float+0x8e>
 8008a6e:	290e      	cmp	r1, #14
 8008a70:	d8c2      	bhi.n	80089f8 <_scanf_float+0x60>
 8008a72:	a001      	add	r0, pc, #4	; (adr r0, 8008a78 <_scanf_float+0xe0>)
 8008a74:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008a78:	08008b27 	.word	0x08008b27
 8008a7c:	080089f9 	.word	0x080089f9
 8008a80:	08008b27 	.word	0x08008b27
 8008a84:	08008bbb 	.word	0x08008bbb
 8008a88:	080089f9 	.word	0x080089f9
 8008a8c:	08008ad5 	.word	0x08008ad5
 8008a90:	08008b11 	.word	0x08008b11
 8008a94:	08008b11 	.word	0x08008b11
 8008a98:	08008b11 	.word	0x08008b11
 8008a9c:	08008b11 	.word	0x08008b11
 8008aa0:	08008b11 	.word	0x08008b11
 8008aa4:	08008b11 	.word	0x08008b11
 8008aa8:	08008b11 	.word	0x08008b11
 8008aac:	08008b11 	.word	0x08008b11
 8008ab0:	08008b11 	.word	0x08008b11
 8008ab4:	2b6e      	cmp	r3, #110	; 0x6e
 8008ab6:	d809      	bhi.n	8008acc <_scanf_float+0x134>
 8008ab8:	2b60      	cmp	r3, #96	; 0x60
 8008aba:	d8b2      	bhi.n	8008a22 <_scanf_float+0x8a>
 8008abc:	2b54      	cmp	r3, #84	; 0x54
 8008abe:	d077      	beq.n	8008bb0 <_scanf_float+0x218>
 8008ac0:	2b59      	cmp	r3, #89	; 0x59
 8008ac2:	d199      	bne.n	80089f8 <_scanf_float+0x60>
 8008ac4:	2d07      	cmp	r5, #7
 8008ac6:	d197      	bne.n	80089f8 <_scanf_float+0x60>
 8008ac8:	2508      	movs	r5, #8
 8008aca:	e029      	b.n	8008b20 <_scanf_float+0x188>
 8008acc:	2b74      	cmp	r3, #116	; 0x74
 8008ace:	d06f      	beq.n	8008bb0 <_scanf_float+0x218>
 8008ad0:	2b79      	cmp	r3, #121	; 0x79
 8008ad2:	e7f6      	b.n	8008ac2 <_scanf_float+0x12a>
 8008ad4:	6821      	ldr	r1, [r4, #0]
 8008ad6:	05c8      	lsls	r0, r1, #23
 8008ad8:	d51a      	bpl.n	8008b10 <_scanf_float+0x178>
 8008ada:	9b02      	ldr	r3, [sp, #8]
 8008adc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008ae0:	6021      	str	r1, [r4, #0]
 8008ae2:	f109 0901 	add.w	r9, r9, #1
 8008ae6:	b11b      	cbz	r3, 8008af0 <_scanf_float+0x158>
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	3201      	adds	r2, #1
 8008aec:	9302      	str	r3, [sp, #8]
 8008aee:	60a2      	str	r2, [r4, #8]
 8008af0:	68a3      	ldr	r3, [r4, #8]
 8008af2:	3b01      	subs	r3, #1
 8008af4:	60a3      	str	r3, [r4, #8]
 8008af6:	6923      	ldr	r3, [r4, #16]
 8008af8:	3301      	adds	r3, #1
 8008afa:	6123      	str	r3, [r4, #16]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	3b01      	subs	r3, #1
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	607b      	str	r3, [r7, #4]
 8008b04:	f340 8084 	ble.w	8008c10 <_scanf_float+0x278>
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	603b      	str	r3, [r7, #0]
 8008b0e:	e766      	b.n	80089de <_scanf_float+0x46>
 8008b10:	eb1a 0f05 	cmn.w	sl, r5
 8008b14:	f47f af70 	bne.w	80089f8 <_scanf_float+0x60>
 8008b18:	6822      	ldr	r2, [r4, #0]
 8008b1a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008b1e:	6022      	str	r2, [r4, #0]
 8008b20:	f806 3b01 	strb.w	r3, [r6], #1
 8008b24:	e7e4      	b.n	8008af0 <_scanf_float+0x158>
 8008b26:	6822      	ldr	r2, [r4, #0]
 8008b28:	0610      	lsls	r0, r2, #24
 8008b2a:	f57f af65 	bpl.w	80089f8 <_scanf_float+0x60>
 8008b2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b32:	e7f4      	b.n	8008b1e <_scanf_float+0x186>
 8008b34:	f1ba 0f00 	cmp.w	sl, #0
 8008b38:	d10e      	bne.n	8008b58 <_scanf_float+0x1c0>
 8008b3a:	f1b9 0f00 	cmp.w	r9, #0
 8008b3e:	d10e      	bne.n	8008b5e <_scanf_float+0x1c6>
 8008b40:	6822      	ldr	r2, [r4, #0]
 8008b42:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008b46:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008b4a:	d108      	bne.n	8008b5e <_scanf_float+0x1c6>
 8008b4c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008b50:	6022      	str	r2, [r4, #0]
 8008b52:	f04f 0a01 	mov.w	sl, #1
 8008b56:	e7e3      	b.n	8008b20 <_scanf_float+0x188>
 8008b58:	f1ba 0f02 	cmp.w	sl, #2
 8008b5c:	d055      	beq.n	8008c0a <_scanf_float+0x272>
 8008b5e:	2d01      	cmp	r5, #1
 8008b60:	d002      	beq.n	8008b68 <_scanf_float+0x1d0>
 8008b62:	2d04      	cmp	r5, #4
 8008b64:	f47f af48 	bne.w	80089f8 <_scanf_float+0x60>
 8008b68:	3501      	adds	r5, #1
 8008b6a:	b2ed      	uxtb	r5, r5
 8008b6c:	e7d8      	b.n	8008b20 <_scanf_float+0x188>
 8008b6e:	f1ba 0f01 	cmp.w	sl, #1
 8008b72:	f47f af41 	bne.w	80089f8 <_scanf_float+0x60>
 8008b76:	f04f 0a02 	mov.w	sl, #2
 8008b7a:	e7d1      	b.n	8008b20 <_scanf_float+0x188>
 8008b7c:	b97d      	cbnz	r5, 8008b9e <_scanf_float+0x206>
 8008b7e:	f1b9 0f00 	cmp.w	r9, #0
 8008b82:	f47f af3c 	bne.w	80089fe <_scanf_float+0x66>
 8008b86:	6822      	ldr	r2, [r4, #0]
 8008b88:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008b8c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008b90:	f47f af39 	bne.w	8008a06 <_scanf_float+0x6e>
 8008b94:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008b98:	6022      	str	r2, [r4, #0]
 8008b9a:	2501      	movs	r5, #1
 8008b9c:	e7c0      	b.n	8008b20 <_scanf_float+0x188>
 8008b9e:	2d03      	cmp	r5, #3
 8008ba0:	d0e2      	beq.n	8008b68 <_scanf_float+0x1d0>
 8008ba2:	2d05      	cmp	r5, #5
 8008ba4:	e7de      	b.n	8008b64 <_scanf_float+0x1cc>
 8008ba6:	2d02      	cmp	r5, #2
 8008ba8:	f47f af26 	bne.w	80089f8 <_scanf_float+0x60>
 8008bac:	2503      	movs	r5, #3
 8008bae:	e7b7      	b.n	8008b20 <_scanf_float+0x188>
 8008bb0:	2d06      	cmp	r5, #6
 8008bb2:	f47f af21 	bne.w	80089f8 <_scanf_float+0x60>
 8008bb6:	2507      	movs	r5, #7
 8008bb8:	e7b2      	b.n	8008b20 <_scanf_float+0x188>
 8008bba:	6822      	ldr	r2, [r4, #0]
 8008bbc:	0591      	lsls	r1, r2, #22
 8008bbe:	f57f af1b 	bpl.w	80089f8 <_scanf_float+0x60>
 8008bc2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008bc6:	6022      	str	r2, [r4, #0]
 8008bc8:	f8cd 9004 	str.w	r9, [sp, #4]
 8008bcc:	e7a8      	b.n	8008b20 <_scanf_float+0x188>
 8008bce:	6822      	ldr	r2, [r4, #0]
 8008bd0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008bd4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008bd8:	d006      	beq.n	8008be8 <_scanf_float+0x250>
 8008bda:	0550      	lsls	r0, r2, #21
 8008bdc:	f57f af0c 	bpl.w	80089f8 <_scanf_float+0x60>
 8008be0:	f1b9 0f00 	cmp.w	r9, #0
 8008be4:	f43f af0f 	beq.w	8008a06 <_scanf_float+0x6e>
 8008be8:	0591      	lsls	r1, r2, #22
 8008bea:	bf58      	it	pl
 8008bec:	9901      	ldrpl	r1, [sp, #4]
 8008bee:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008bf2:	bf58      	it	pl
 8008bf4:	eba9 0101 	subpl.w	r1, r9, r1
 8008bf8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008bfc:	bf58      	it	pl
 8008bfe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008c02:	6022      	str	r2, [r4, #0]
 8008c04:	f04f 0900 	mov.w	r9, #0
 8008c08:	e78a      	b.n	8008b20 <_scanf_float+0x188>
 8008c0a:	f04f 0a03 	mov.w	sl, #3
 8008c0e:	e787      	b.n	8008b20 <_scanf_float+0x188>
 8008c10:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008c14:	4639      	mov	r1, r7
 8008c16:	4640      	mov	r0, r8
 8008c18:	4798      	blx	r3
 8008c1a:	2800      	cmp	r0, #0
 8008c1c:	f43f aedf 	beq.w	80089de <_scanf_float+0x46>
 8008c20:	e6ea      	b.n	80089f8 <_scanf_float+0x60>
 8008c22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c2a:	463a      	mov	r2, r7
 8008c2c:	4640      	mov	r0, r8
 8008c2e:	4798      	blx	r3
 8008c30:	6923      	ldr	r3, [r4, #16]
 8008c32:	3b01      	subs	r3, #1
 8008c34:	6123      	str	r3, [r4, #16]
 8008c36:	e6ec      	b.n	8008a12 <_scanf_float+0x7a>
 8008c38:	1e6b      	subs	r3, r5, #1
 8008c3a:	2b06      	cmp	r3, #6
 8008c3c:	d825      	bhi.n	8008c8a <_scanf_float+0x2f2>
 8008c3e:	2d02      	cmp	r5, #2
 8008c40:	d836      	bhi.n	8008cb0 <_scanf_float+0x318>
 8008c42:	455e      	cmp	r6, fp
 8008c44:	f67f aee8 	bls.w	8008a18 <_scanf_float+0x80>
 8008c48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c4c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c50:	463a      	mov	r2, r7
 8008c52:	4640      	mov	r0, r8
 8008c54:	4798      	blx	r3
 8008c56:	6923      	ldr	r3, [r4, #16]
 8008c58:	3b01      	subs	r3, #1
 8008c5a:	6123      	str	r3, [r4, #16]
 8008c5c:	e7f1      	b.n	8008c42 <_scanf_float+0x2aa>
 8008c5e:	9802      	ldr	r0, [sp, #8]
 8008c60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c64:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008c68:	9002      	str	r0, [sp, #8]
 8008c6a:	463a      	mov	r2, r7
 8008c6c:	4640      	mov	r0, r8
 8008c6e:	4798      	blx	r3
 8008c70:	6923      	ldr	r3, [r4, #16]
 8008c72:	3b01      	subs	r3, #1
 8008c74:	6123      	str	r3, [r4, #16]
 8008c76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c7a:	fa5f fa8a 	uxtb.w	sl, sl
 8008c7e:	f1ba 0f02 	cmp.w	sl, #2
 8008c82:	d1ec      	bne.n	8008c5e <_scanf_float+0x2c6>
 8008c84:	3d03      	subs	r5, #3
 8008c86:	b2ed      	uxtb	r5, r5
 8008c88:	1b76      	subs	r6, r6, r5
 8008c8a:	6823      	ldr	r3, [r4, #0]
 8008c8c:	05da      	lsls	r2, r3, #23
 8008c8e:	d52f      	bpl.n	8008cf0 <_scanf_float+0x358>
 8008c90:	055b      	lsls	r3, r3, #21
 8008c92:	d510      	bpl.n	8008cb6 <_scanf_float+0x31e>
 8008c94:	455e      	cmp	r6, fp
 8008c96:	f67f aebf 	bls.w	8008a18 <_scanf_float+0x80>
 8008c9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008ca2:	463a      	mov	r2, r7
 8008ca4:	4640      	mov	r0, r8
 8008ca6:	4798      	blx	r3
 8008ca8:	6923      	ldr	r3, [r4, #16]
 8008caa:	3b01      	subs	r3, #1
 8008cac:	6123      	str	r3, [r4, #16]
 8008cae:	e7f1      	b.n	8008c94 <_scanf_float+0x2fc>
 8008cb0:	46aa      	mov	sl, r5
 8008cb2:	9602      	str	r6, [sp, #8]
 8008cb4:	e7df      	b.n	8008c76 <_scanf_float+0x2de>
 8008cb6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008cba:	6923      	ldr	r3, [r4, #16]
 8008cbc:	2965      	cmp	r1, #101	; 0x65
 8008cbe:	f103 33ff 	add.w	r3, r3, #4294967295
 8008cc2:	f106 35ff 	add.w	r5, r6, #4294967295
 8008cc6:	6123      	str	r3, [r4, #16]
 8008cc8:	d00c      	beq.n	8008ce4 <_scanf_float+0x34c>
 8008cca:	2945      	cmp	r1, #69	; 0x45
 8008ccc:	d00a      	beq.n	8008ce4 <_scanf_float+0x34c>
 8008cce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008cd2:	463a      	mov	r2, r7
 8008cd4:	4640      	mov	r0, r8
 8008cd6:	4798      	blx	r3
 8008cd8:	6923      	ldr	r3, [r4, #16]
 8008cda:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008cde:	3b01      	subs	r3, #1
 8008ce0:	1eb5      	subs	r5, r6, #2
 8008ce2:	6123      	str	r3, [r4, #16]
 8008ce4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ce8:	463a      	mov	r2, r7
 8008cea:	4640      	mov	r0, r8
 8008cec:	4798      	blx	r3
 8008cee:	462e      	mov	r6, r5
 8008cf0:	6825      	ldr	r5, [r4, #0]
 8008cf2:	f015 0510 	ands.w	r5, r5, #16
 8008cf6:	d159      	bne.n	8008dac <_scanf_float+0x414>
 8008cf8:	7035      	strb	r5, [r6, #0]
 8008cfa:	6823      	ldr	r3, [r4, #0]
 8008cfc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008d00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d04:	d11b      	bne.n	8008d3e <_scanf_float+0x3a6>
 8008d06:	9b01      	ldr	r3, [sp, #4]
 8008d08:	454b      	cmp	r3, r9
 8008d0a:	eba3 0209 	sub.w	r2, r3, r9
 8008d0e:	d123      	bne.n	8008d58 <_scanf_float+0x3c0>
 8008d10:	2200      	movs	r2, #0
 8008d12:	4659      	mov	r1, fp
 8008d14:	4640      	mov	r0, r8
 8008d16:	f000 fe99 	bl	8009a4c <_strtod_r>
 8008d1a:	6822      	ldr	r2, [r4, #0]
 8008d1c:	9b03      	ldr	r3, [sp, #12]
 8008d1e:	f012 0f02 	tst.w	r2, #2
 8008d22:	ec57 6b10 	vmov	r6, r7, d0
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	d021      	beq.n	8008d6e <_scanf_float+0x3d6>
 8008d2a:	9903      	ldr	r1, [sp, #12]
 8008d2c:	1d1a      	adds	r2, r3, #4
 8008d2e:	600a      	str	r2, [r1, #0]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	e9c3 6700 	strd	r6, r7, [r3]
 8008d36:	68e3      	ldr	r3, [r4, #12]
 8008d38:	3301      	adds	r3, #1
 8008d3a:	60e3      	str	r3, [r4, #12]
 8008d3c:	e66d      	b.n	8008a1a <_scanf_float+0x82>
 8008d3e:	9b04      	ldr	r3, [sp, #16]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d0e5      	beq.n	8008d10 <_scanf_float+0x378>
 8008d44:	9905      	ldr	r1, [sp, #20]
 8008d46:	230a      	movs	r3, #10
 8008d48:	462a      	mov	r2, r5
 8008d4a:	3101      	adds	r1, #1
 8008d4c:	4640      	mov	r0, r8
 8008d4e:	f000 ff05 	bl	8009b5c <_strtol_r>
 8008d52:	9b04      	ldr	r3, [sp, #16]
 8008d54:	9e05      	ldr	r6, [sp, #20]
 8008d56:	1ac2      	subs	r2, r0, r3
 8008d58:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008d5c:	429e      	cmp	r6, r3
 8008d5e:	bf28      	it	cs
 8008d60:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008d64:	4912      	ldr	r1, [pc, #72]	; (8008db0 <_scanf_float+0x418>)
 8008d66:	4630      	mov	r0, r6
 8008d68:	f000 f82c 	bl	8008dc4 <siprintf>
 8008d6c:	e7d0      	b.n	8008d10 <_scanf_float+0x378>
 8008d6e:	9903      	ldr	r1, [sp, #12]
 8008d70:	f012 0f04 	tst.w	r2, #4
 8008d74:	f103 0204 	add.w	r2, r3, #4
 8008d78:	600a      	str	r2, [r1, #0]
 8008d7a:	d1d9      	bne.n	8008d30 <_scanf_float+0x398>
 8008d7c:	f8d3 8000 	ldr.w	r8, [r3]
 8008d80:	ee10 2a10 	vmov	r2, s0
 8008d84:	ee10 0a10 	vmov	r0, s0
 8008d88:	463b      	mov	r3, r7
 8008d8a:	4639      	mov	r1, r7
 8008d8c:	f7f7 fece 	bl	8000b2c <__aeabi_dcmpun>
 8008d90:	b128      	cbz	r0, 8008d9e <_scanf_float+0x406>
 8008d92:	4808      	ldr	r0, [pc, #32]	; (8008db4 <_scanf_float+0x41c>)
 8008d94:	f000 f810 	bl	8008db8 <nanf>
 8008d98:	ed88 0a00 	vstr	s0, [r8]
 8008d9c:	e7cb      	b.n	8008d36 <_scanf_float+0x39e>
 8008d9e:	4630      	mov	r0, r6
 8008da0:	4639      	mov	r1, r7
 8008da2:	f7f7 ff21 	bl	8000be8 <__aeabi_d2f>
 8008da6:	f8c8 0000 	str.w	r0, [r8]
 8008daa:	e7c4      	b.n	8008d36 <_scanf_float+0x39e>
 8008dac:	2500      	movs	r5, #0
 8008dae:	e634      	b.n	8008a1a <_scanf_float+0x82>
 8008db0:	0800ce30 	.word	0x0800ce30
 8008db4:	0800d238 	.word	0x0800d238

08008db8 <nanf>:
 8008db8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008dc0 <nanf+0x8>
 8008dbc:	4770      	bx	lr
 8008dbe:	bf00      	nop
 8008dc0:	7fc00000 	.word	0x7fc00000

08008dc4 <siprintf>:
 8008dc4:	b40e      	push	{r1, r2, r3}
 8008dc6:	b500      	push	{lr}
 8008dc8:	b09c      	sub	sp, #112	; 0x70
 8008dca:	ab1d      	add	r3, sp, #116	; 0x74
 8008dcc:	9002      	str	r0, [sp, #8]
 8008dce:	9006      	str	r0, [sp, #24]
 8008dd0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008dd4:	4809      	ldr	r0, [pc, #36]	; (8008dfc <siprintf+0x38>)
 8008dd6:	9107      	str	r1, [sp, #28]
 8008dd8:	9104      	str	r1, [sp, #16]
 8008dda:	4909      	ldr	r1, [pc, #36]	; (8008e00 <siprintf+0x3c>)
 8008ddc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008de0:	9105      	str	r1, [sp, #20]
 8008de2:	6800      	ldr	r0, [r0, #0]
 8008de4:	9301      	str	r3, [sp, #4]
 8008de6:	a902      	add	r1, sp, #8
 8008de8:	f002 fee4 	bl	800bbb4 <_svfiprintf_r>
 8008dec:	9b02      	ldr	r3, [sp, #8]
 8008dee:	2200      	movs	r2, #0
 8008df0:	701a      	strb	r2, [r3, #0]
 8008df2:	b01c      	add	sp, #112	; 0x70
 8008df4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008df8:	b003      	add	sp, #12
 8008dfa:	4770      	bx	lr
 8008dfc:	20000018 	.word	0x20000018
 8008e00:	ffff0208 	.word	0xffff0208

08008e04 <sulp>:
 8008e04:	b570      	push	{r4, r5, r6, lr}
 8008e06:	4604      	mov	r4, r0
 8008e08:	460d      	mov	r5, r1
 8008e0a:	ec45 4b10 	vmov	d0, r4, r5
 8008e0e:	4616      	mov	r6, r2
 8008e10:	f002 fc2e 	bl	800b670 <__ulp>
 8008e14:	ec51 0b10 	vmov	r0, r1, d0
 8008e18:	b17e      	cbz	r6, 8008e3a <sulp+0x36>
 8008e1a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008e1e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	dd09      	ble.n	8008e3a <sulp+0x36>
 8008e26:	051b      	lsls	r3, r3, #20
 8008e28:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008e2c:	2400      	movs	r4, #0
 8008e2e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008e32:	4622      	mov	r2, r4
 8008e34:	462b      	mov	r3, r5
 8008e36:	f7f7 fbdf 	bl	80005f8 <__aeabi_dmul>
 8008e3a:	bd70      	pop	{r4, r5, r6, pc}
 8008e3c:	0000      	movs	r0, r0
	...

08008e40 <_strtod_l>:
 8008e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e44:	ed2d 8b02 	vpush	{d8}
 8008e48:	b09d      	sub	sp, #116	; 0x74
 8008e4a:	461f      	mov	r7, r3
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	9318      	str	r3, [sp, #96]	; 0x60
 8008e50:	4ba2      	ldr	r3, [pc, #648]	; (80090dc <_strtod_l+0x29c>)
 8008e52:	9213      	str	r2, [sp, #76]	; 0x4c
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	9305      	str	r3, [sp, #20]
 8008e58:	4604      	mov	r4, r0
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	4688      	mov	r8, r1
 8008e5e:	f7f7 f9b7 	bl	80001d0 <strlen>
 8008e62:	f04f 0a00 	mov.w	sl, #0
 8008e66:	4605      	mov	r5, r0
 8008e68:	f04f 0b00 	mov.w	fp, #0
 8008e6c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008e70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e72:	781a      	ldrb	r2, [r3, #0]
 8008e74:	2a2b      	cmp	r2, #43	; 0x2b
 8008e76:	d04e      	beq.n	8008f16 <_strtod_l+0xd6>
 8008e78:	d83b      	bhi.n	8008ef2 <_strtod_l+0xb2>
 8008e7a:	2a0d      	cmp	r2, #13
 8008e7c:	d834      	bhi.n	8008ee8 <_strtod_l+0xa8>
 8008e7e:	2a08      	cmp	r2, #8
 8008e80:	d834      	bhi.n	8008eec <_strtod_l+0xac>
 8008e82:	2a00      	cmp	r2, #0
 8008e84:	d03e      	beq.n	8008f04 <_strtod_l+0xc4>
 8008e86:	2300      	movs	r3, #0
 8008e88:	930a      	str	r3, [sp, #40]	; 0x28
 8008e8a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008e8c:	7833      	ldrb	r3, [r6, #0]
 8008e8e:	2b30      	cmp	r3, #48	; 0x30
 8008e90:	f040 80b0 	bne.w	8008ff4 <_strtod_l+0x1b4>
 8008e94:	7873      	ldrb	r3, [r6, #1]
 8008e96:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008e9a:	2b58      	cmp	r3, #88	; 0x58
 8008e9c:	d168      	bne.n	8008f70 <_strtod_l+0x130>
 8008e9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ea0:	9301      	str	r3, [sp, #4]
 8008ea2:	ab18      	add	r3, sp, #96	; 0x60
 8008ea4:	9702      	str	r7, [sp, #8]
 8008ea6:	9300      	str	r3, [sp, #0]
 8008ea8:	4a8d      	ldr	r2, [pc, #564]	; (80090e0 <_strtod_l+0x2a0>)
 8008eaa:	ab19      	add	r3, sp, #100	; 0x64
 8008eac:	a917      	add	r1, sp, #92	; 0x5c
 8008eae:	4620      	mov	r0, r4
 8008eb0:	f001 fd38 	bl	800a924 <__gethex>
 8008eb4:	f010 0707 	ands.w	r7, r0, #7
 8008eb8:	4605      	mov	r5, r0
 8008eba:	d005      	beq.n	8008ec8 <_strtod_l+0x88>
 8008ebc:	2f06      	cmp	r7, #6
 8008ebe:	d12c      	bne.n	8008f1a <_strtod_l+0xda>
 8008ec0:	3601      	adds	r6, #1
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	9617      	str	r6, [sp, #92]	; 0x5c
 8008ec6:	930a      	str	r3, [sp, #40]	; 0x28
 8008ec8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	f040 8590 	bne.w	80099f0 <_strtod_l+0xbb0>
 8008ed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ed2:	b1eb      	cbz	r3, 8008f10 <_strtod_l+0xd0>
 8008ed4:	4652      	mov	r2, sl
 8008ed6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008eda:	ec43 2b10 	vmov	d0, r2, r3
 8008ede:	b01d      	add	sp, #116	; 0x74
 8008ee0:	ecbd 8b02 	vpop	{d8}
 8008ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ee8:	2a20      	cmp	r2, #32
 8008eea:	d1cc      	bne.n	8008e86 <_strtod_l+0x46>
 8008eec:	3301      	adds	r3, #1
 8008eee:	9317      	str	r3, [sp, #92]	; 0x5c
 8008ef0:	e7be      	b.n	8008e70 <_strtod_l+0x30>
 8008ef2:	2a2d      	cmp	r2, #45	; 0x2d
 8008ef4:	d1c7      	bne.n	8008e86 <_strtod_l+0x46>
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	920a      	str	r2, [sp, #40]	; 0x28
 8008efa:	1c5a      	adds	r2, r3, #1
 8008efc:	9217      	str	r2, [sp, #92]	; 0x5c
 8008efe:	785b      	ldrb	r3, [r3, #1]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d1c2      	bne.n	8008e8a <_strtod_l+0x4a>
 8008f04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f06:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	f040 856e 	bne.w	80099ec <_strtod_l+0xbac>
 8008f10:	4652      	mov	r2, sl
 8008f12:	465b      	mov	r3, fp
 8008f14:	e7e1      	b.n	8008eda <_strtod_l+0x9a>
 8008f16:	2200      	movs	r2, #0
 8008f18:	e7ee      	b.n	8008ef8 <_strtod_l+0xb8>
 8008f1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008f1c:	b13a      	cbz	r2, 8008f2e <_strtod_l+0xee>
 8008f1e:	2135      	movs	r1, #53	; 0x35
 8008f20:	a81a      	add	r0, sp, #104	; 0x68
 8008f22:	f002 fcb0 	bl	800b886 <__copybits>
 8008f26:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008f28:	4620      	mov	r0, r4
 8008f2a:	f002 f86f 	bl	800b00c <_Bfree>
 8008f2e:	3f01      	subs	r7, #1
 8008f30:	2f04      	cmp	r7, #4
 8008f32:	d806      	bhi.n	8008f42 <_strtod_l+0x102>
 8008f34:	e8df f007 	tbb	[pc, r7]
 8008f38:	1714030a 	.word	0x1714030a
 8008f3c:	0a          	.byte	0x0a
 8008f3d:	00          	.byte	0x00
 8008f3e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008f42:	0728      	lsls	r0, r5, #28
 8008f44:	d5c0      	bpl.n	8008ec8 <_strtod_l+0x88>
 8008f46:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008f4a:	e7bd      	b.n	8008ec8 <_strtod_l+0x88>
 8008f4c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008f50:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008f52:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008f56:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008f5a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008f5e:	e7f0      	b.n	8008f42 <_strtod_l+0x102>
 8008f60:	f8df b180 	ldr.w	fp, [pc, #384]	; 80090e4 <_strtod_l+0x2a4>
 8008f64:	e7ed      	b.n	8008f42 <_strtod_l+0x102>
 8008f66:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008f6a:	f04f 3aff 	mov.w	sl, #4294967295
 8008f6e:	e7e8      	b.n	8008f42 <_strtod_l+0x102>
 8008f70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f72:	1c5a      	adds	r2, r3, #1
 8008f74:	9217      	str	r2, [sp, #92]	; 0x5c
 8008f76:	785b      	ldrb	r3, [r3, #1]
 8008f78:	2b30      	cmp	r3, #48	; 0x30
 8008f7a:	d0f9      	beq.n	8008f70 <_strtod_l+0x130>
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d0a3      	beq.n	8008ec8 <_strtod_l+0x88>
 8008f80:	2301      	movs	r3, #1
 8008f82:	f04f 0900 	mov.w	r9, #0
 8008f86:	9304      	str	r3, [sp, #16]
 8008f88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f8a:	9308      	str	r3, [sp, #32]
 8008f8c:	f8cd 901c 	str.w	r9, [sp, #28]
 8008f90:	464f      	mov	r7, r9
 8008f92:	220a      	movs	r2, #10
 8008f94:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008f96:	7806      	ldrb	r6, [r0, #0]
 8008f98:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008f9c:	b2d9      	uxtb	r1, r3
 8008f9e:	2909      	cmp	r1, #9
 8008fa0:	d92a      	bls.n	8008ff8 <_strtod_l+0x1b8>
 8008fa2:	9905      	ldr	r1, [sp, #20]
 8008fa4:	462a      	mov	r2, r5
 8008fa6:	f002 ff1f 	bl	800bde8 <strncmp>
 8008faa:	b398      	cbz	r0, 8009014 <_strtod_l+0x1d4>
 8008fac:	2000      	movs	r0, #0
 8008fae:	4632      	mov	r2, r6
 8008fb0:	463d      	mov	r5, r7
 8008fb2:	9005      	str	r0, [sp, #20]
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	2a65      	cmp	r2, #101	; 0x65
 8008fb8:	d001      	beq.n	8008fbe <_strtod_l+0x17e>
 8008fba:	2a45      	cmp	r2, #69	; 0x45
 8008fbc:	d118      	bne.n	8008ff0 <_strtod_l+0x1b0>
 8008fbe:	b91d      	cbnz	r5, 8008fc8 <_strtod_l+0x188>
 8008fc0:	9a04      	ldr	r2, [sp, #16]
 8008fc2:	4302      	orrs	r2, r0
 8008fc4:	d09e      	beq.n	8008f04 <_strtod_l+0xc4>
 8008fc6:	2500      	movs	r5, #0
 8008fc8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008fcc:	f108 0201 	add.w	r2, r8, #1
 8008fd0:	9217      	str	r2, [sp, #92]	; 0x5c
 8008fd2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008fd6:	2a2b      	cmp	r2, #43	; 0x2b
 8008fd8:	d075      	beq.n	80090c6 <_strtod_l+0x286>
 8008fda:	2a2d      	cmp	r2, #45	; 0x2d
 8008fdc:	d07b      	beq.n	80090d6 <_strtod_l+0x296>
 8008fde:	f04f 0c00 	mov.w	ip, #0
 8008fe2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008fe6:	2909      	cmp	r1, #9
 8008fe8:	f240 8082 	bls.w	80090f0 <_strtod_l+0x2b0>
 8008fec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008ff0:	2600      	movs	r6, #0
 8008ff2:	e09d      	b.n	8009130 <_strtod_l+0x2f0>
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	e7c4      	b.n	8008f82 <_strtod_l+0x142>
 8008ff8:	2f08      	cmp	r7, #8
 8008ffa:	bfd8      	it	le
 8008ffc:	9907      	ldrle	r1, [sp, #28]
 8008ffe:	f100 0001 	add.w	r0, r0, #1
 8009002:	bfda      	itte	le
 8009004:	fb02 3301 	mlale	r3, r2, r1, r3
 8009008:	9307      	strle	r3, [sp, #28]
 800900a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800900e:	3701      	adds	r7, #1
 8009010:	9017      	str	r0, [sp, #92]	; 0x5c
 8009012:	e7bf      	b.n	8008f94 <_strtod_l+0x154>
 8009014:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009016:	195a      	adds	r2, r3, r5
 8009018:	9217      	str	r2, [sp, #92]	; 0x5c
 800901a:	5d5a      	ldrb	r2, [r3, r5]
 800901c:	2f00      	cmp	r7, #0
 800901e:	d037      	beq.n	8009090 <_strtod_l+0x250>
 8009020:	9005      	str	r0, [sp, #20]
 8009022:	463d      	mov	r5, r7
 8009024:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009028:	2b09      	cmp	r3, #9
 800902a:	d912      	bls.n	8009052 <_strtod_l+0x212>
 800902c:	2301      	movs	r3, #1
 800902e:	e7c2      	b.n	8008fb6 <_strtod_l+0x176>
 8009030:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009032:	1c5a      	adds	r2, r3, #1
 8009034:	9217      	str	r2, [sp, #92]	; 0x5c
 8009036:	785a      	ldrb	r2, [r3, #1]
 8009038:	3001      	adds	r0, #1
 800903a:	2a30      	cmp	r2, #48	; 0x30
 800903c:	d0f8      	beq.n	8009030 <_strtod_l+0x1f0>
 800903e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009042:	2b08      	cmp	r3, #8
 8009044:	f200 84d9 	bhi.w	80099fa <_strtod_l+0xbba>
 8009048:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800904a:	9005      	str	r0, [sp, #20]
 800904c:	2000      	movs	r0, #0
 800904e:	9308      	str	r3, [sp, #32]
 8009050:	4605      	mov	r5, r0
 8009052:	3a30      	subs	r2, #48	; 0x30
 8009054:	f100 0301 	add.w	r3, r0, #1
 8009058:	d014      	beq.n	8009084 <_strtod_l+0x244>
 800905a:	9905      	ldr	r1, [sp, #20]
 800905c:	4419      	add	r1, r3
 800905e:	9105      	str	r1, [sp, #20]
 8009060:	462b      	mov	r3, r5
 8009062:	eb00 0e05 	add.w	lr, r0, r5
 8009066:	210a      	movs	r1, #10
 8009068:	4573      	cmp	r3, lr
 800906a:	d113      	bne.n	8009094 <_strtod_l+0x254>
 800906c:	182b      	adds	r3, r5, r0
 800906e:	2b08      	cmp	r3, #8
 8009070:	f105 0501 	add.w	r5, r5, #1
 8009074:	4405      	add	r5, r0
 8009076:	dc1c      	bgt.n	80090b2 <_strtod_l+0x272>
 8009078:	9907      	ldr	r1, [sp, #28]
 800907a:	230a      	movs	r3, #10
 800907c:	fb03 2301 	mla	r3, r3, r1, r2
 8009080:	9307      	str	r3, [sp, #28]
 8009082:	2300      	movs	r3, #0
 8009084:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009086:	1c51      	adds	r1, r2, #1
 8009088:	9117      	str	r1, [sp, #92]	; 0x5c
 800908a:	7852      	ldrb	r2, [r2, #1]
 800908c:	4618      	mov	r0, r3
 800908e:	e7c9      	b.n	8009024 <_strtod_l+0x1e4>
 8009090:	4638      	mov	r0, r7
 8009092:	e7d2      	b.n	800903a <_strtod_l+0x1fa>
 8009094:	2b08      	cmp	r3, #8
 8009096:	dc04      	bgt.n	80090a2 <_strtod_l+0x262>
 8009098:	9e07      	ldr	r6, [sp, #28]
 800909a:	434e      	muls	r6, r1
 800909c:	9607      	str	r6, [sp, #28]
 800909e:	3301      	adds	r3, #1
 80090a0:	e7e2      	b.n	8009068 <_strtod_l+0x228>
 80090a2:	f103 0c01 	add.w	ip, r3, #1
 80090a6:	f1bc 0f10 	cmp.w	ip, #16
 80090aa:	bfd8      	it	le
 80090ac:	fb01 f909 	mulle.w	r9, r1, r9
 80090b0:	e7f5      	b.n	800909e <_strtod_l+0x25e>
 80090b2:	2d10      	cmp	r5, #16
 80090b4:	bfdc      	itt	le
 80090b6:	230a      	movle	r3, #10
 80090b8:	fb03 2909 	mlale	r9, r3, r9, r2
 80090bc:	e7e1      	b.n	8009082 <_strtod_l+0x242>
 80090be:	2300      	movs	r3, #0
 80090c0:	9305      	str	r3, [sp, #20]
 80090c2:	2301      	movs	r3, #1
 80090c4:	e77c      	b.n	8008fc0 <_strtod_l+0x180>
 80090c6:	f04f 0c00 	mov.w	ip, #0
 80090ca:	f108 0202 	add.w	r2, r8, #2
 80090ce:	9217      	str	r2, [sp, #92]	; 0x5c
 80090d0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80090d4:	e785      	b.n	8008fe2 <_strtod_l+0x1a2>
 80090d6:	f04f 0c01 	mov.w	ip, #1
 80090da:	e7f6      	b.n	80090ca <_strtod_l+0x28a>
 80090dc:	0800d080 	.word	0x0800d080
 80090e0:	0800ce38 	.word	0x0800ce38
 80090e4:	7ff00000 	.word	0x7ff00000
 80090e8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80090ea:	1c51      	adds	r1, r2, #1
 80090ec:	9117      	str	r1, [sp, #92]	; 0x5c
 80090ee:	7852      	ldrb	r2, [r2, #1]
 80090f0:	2a30      	cmp	r2, #48	; 0x30
 80090f2:	d0f9      	beq.n	80090e8 <_strtod_l+0x2a8>
 80090f4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80090f8:	2908      	cmp	r1, #8
 80090fa:	f63f af79 	bhi.w	8008ff0 <_strtod_l+0x1b0>
 80090fe:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009102:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009104:	9206      	str	r2, [sp, #24]
 8009106:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009108:	1c51      	adds	r1, r2, #1
 800910a:	9117      	str	r1, [sp, #92]	; 0x5c
 800910c:	7852      	ldrb	r2, [r2, #1]
 800910e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009112:	2e09      	cmp	r6, #9
 8009114:	d937      	bls.n	8009186 <_strtod_l+0x346>
 8009116:	9e06      	ldr	r6, [sp, #24]
 8009118:	1b89      	subs	r1, r1, r6
 800911a:	2908      	cmp	r1, #8
 800911c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009120:	dc02      	bgt.n	8009128 <_strtod_l+0x2e8>
 8009122:	4576      	cmp	r6, lr
 8009124:	bfa8      	it	ge
 8009126:	4676      	movge	r6, lr
 8009128:	f1bc 0f00 	cmp.w	ip, #0
 800912c:	d000      	beq.n	8009130 <_strtod_l+0x2f0>
 800912e:	4276      	negs	r6, r6
 8009130:	2d00      	cmp	r5, #0
 8009132:	d14d      	bne.n	80091d0 <_strtod_l+0x390>
 8009134:	9904      	ldr	r1, [sp, #16]
 8009136:	4301      	orrs	r1, r0
 8009138:	f47f aec6 	bne.w	8008ec8 <_strtod_l+0x88>
 800913c:	2b00      	cmp	r3, #0
 800913e:	f47f aee1 	bne.w	8008f04 <_strtod_l+0xc4>
 8009142:	2a69      	cmp	r2, #105	; 0x69
 8009144:	d027      	beq.n	8009196 <_strtod_l+0x356>
 8009146:	dc24      	bgt.n	8009192 <_strtod_l+0x352>
 8009148:	2a49      	cmp	r2, #73	; 0x49
 800914a:	d024      	beq.n	8009196 <_strtod_l+0x356>
 800914c:	2a4e      	cmp	r2, #78	; 0x4e
 800914e:	f47f aed9 	bne.w	8008f04 <_strtod_l+0xc4>
 8009152:	499f      	ldr	r1, [pc, #636]	; (80093d0 <_strtod_l+0x590>)
 8009154:	a817      	add	r0, sp, #92	; 0x5c
 8009156:	f001 fe3d 	bl	800add4 <__match>
 800915a:	2800      	cmp	r0, #0
 800915c:	f43f aed2 	beq.w	8008f04 <_strtod_l+0xc4>
 8009160:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	2b28      	cmp	r3, #40	; 0x28
 8009166:	d12d      	bne.n	80091c4 <_strtod_l+0x384>
 8009168:	499a      	ldr	r1, [pc, #616]	; (80093d4 <_strtod_l+0x594>)
 800916a:	aa1a      	add	r2, sp, #104	; 0x68
 800916c:	a817      	add	r0, sp, #92	; 0x5c
 800916e:	f001 fe45 	bl	800adfc <__hexnan>
 8009172:	2805      	cmp	r0, #5
 8009174:	d126      	bne.n	80091c4 <_strtod_l+0x384>
 8009176:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009178:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800917c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009180:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009184:	e6a0      	b.n	8008ec8 <_strtod_l+0x88>
 8009186:	210a      	movs	r1, #10
 8009188:	fb01 2e0e 	mla	lr, r1, lr, r2
 800918c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009190:	e7b9      	b.n	8009106 <_strtod_l+0x2c6>
 8009192:	2a6e      	cmp	r2, #110	; 0x6e
 8009194:	e7db      	b.n	800914e <_strtod_l+0x30e>
 8009196:	4990      	ldr	r1, [pc, #576]	; (80093d8 <_strtod_l+0x598>)
 8009198:	a817      	add	r0, sp, #92	; 0x5c
 800919a:	f001 fe1b 	bl	800add4 <__match>
 800919e:	2800      	cmp	r0, #0
 80091a0:	f43f aeb0 	beq.w	8008f04 <_strtod_l+0xc4>
 80091a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80091a6:	498d      	ldr	r1, [pc, #564]	; (80093dc <_strtod_l+0x59c>)
 80091a8:	3b01      	subs	r3, #1
 80091aa:	a817      	add	r0, sp, #92	; 0x5c
 80091ac:	9317      	str	r3, [sp, #92]	; 0x5c
 80091ae:	f001 fe11 	bl	800add4 <__match>
 80091b2:	b910      	cbnz	r0, 80091ba <_strtod_l+0x37a>
 80091b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80091b6:	3301      	adds	r3, #1
 80091b8:	9317      	str	r3, [sp, #92]	; 0x5c
 80091ba:	f8df b230 	ldr.w	fp, [pc, #560]	; 80093ec <_strtod_l+0x5ac>
 80091be:	f04f 0a00 	mov.w	sl, #0
 80091c2:	e681      	b.n	8008ec8 <_strtod_l+0x88>
 80091c4:	4886      	ldr	r0, [pc, #536]	; (80093e0 <_strtod_l+0x5a0>)
 80091c6:	f002 fdf7 	bl	800bdb8 <nan>
 80091ca:	ec5b ab10 	vmov	sl, fp, d0
 80091ce:	e67b      	b.n	8008ec8 <_strtod_l+0x88>
 80091d0:	9b05      	ldr	r3, [sp, #20]
 80091d2:	9807      	ldr	r0, [sp, #28]
 80091d4:	1af3      	subs	r3, r6, r3
 80091d6:	2f00      	cmp	r7, #0
 80091d8:	bf08      	it	eq
 80091da:	462f      	moveq	r7, r5
 80091dc:	2d10      	cmp	r5, #16
 80091de:	9306      	str	r3, [sp, #24]
 80091e0:	46a8      	mov	r8, r5
 80091e2:	bfa8      	it	ge
 80091e4:	f04f 0810 	movge.w	r8, #16
 80091e8:	f7f7 f98c 	bl	8000504 <__aeabi_ui2d>
 80091ec:	2d09      	cmp	r5, #9
 80091ee:	4682      	mov	sl, r0
 80091f0:	468b      	mov	fp, r1
 80091f2:	dd13      	ble.n	800921c <_strtod_l+0x3dc>
 80091f4:	4b7b      	ldr	r3, [pc, #492]	; (80093e4 <_strtod_l+0x5a4>)
 80091f6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80091fa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80091fe:	f7f7 f9fb 	bl	80005f8 <__aeabi_dmul>
 8009202:	4682      	mov	sl, r0
 8009204:	4648      	mov	r0, r9
 8009206:	468b      	mov	fp, r1
 8009208:	f7f7 f97c 	bl	8000504 <__aeabi_ui2d>
 800920c:	4602      	mov	r2, r0
 800920e:	460b      	mov	r3, r1
 8009210:	4650      	mov	r0, sl
 8009212:	4659      	mov	r1, fp
 8009214:	f7f7 f83a 	bl	800028c <__adddf3>
 8009218:	4682      	mov	sl, r0
 800921a:	468b      	mov	fp, r1
 800921c:	2d0f      	cmp	r5, #15
 800921e:	dc38      	bgt.n	8009292 <_strtod_l+0x452>
 8009220:	9b06      	ldr	r3, [sp, #24]
 8009222:	2b00      	cmp	r3, #0
 8009224:	f43f ae50 	beq.w	8008ec8 <_strtod_l+0x88>
 8009228:	dd24      	ble.n	8009274 <_strtod_l+0x434>
 800922a:	2b16      	cmp	r3, #22
 800922c:	dc0b      	bgt.n	8009246 <_strtod_l+0x406>
 800922e:	496d      	ldr	r1, [pc, #436]	; (80093e4 <_strtod_l+0x5a4>)
 8009230:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009234:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009238:	4652      	mov	r2, sl
 800923a:	465b      	mov	r3, fp
 800923c:	f7f7 f9dc 	bl	80005f8 <__aeabi_dmul>
 8009240:	4682      	mov	sl, r0
 8009242:	468b      	mov	fp, r1
 8009244:	e640      	b.n	8008ec8 <_strtod_l+0x88>
 8009246:	9a06      	ldr	r2, [sp, #24]
 8009248:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800924c:	4293      	cmp	r3, r2
 800924e:	db20      	blt.n	8009292 <_strtod_l+0x452>
 8009250:	4c64      	ldr	r4, [pc, #400]	; (80093e4 <_strtod_l+0x5a4>)
 8009252:	f1c5 050f 	rsb	r5, r5, #15
 8009256:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800925a:	4652      	mov	r2, sl
 800925c:	465b      	mov	r3, fp
 800925e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009262:	f7f7 f9c9 	bl	80005f8 <__aeabi_dmul>
 8009266:	9b06      	ldr	r3, [sp, #24]
 8009268:	1b5d      	subs	r5, r3, r5
 800926a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800926e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009272:	e7e3      	b.n	800923c <_strtod_l+0x3fc>
 8009274:	9b06      	ldr	r3, [sp, #24]
 8009276:	3316      	adds	r3, #22
 8009278:	db0b      	blt.n	8009292 <_strtod_l+0x452>
 800927a:	9b05      	ldr	r3, [sp, #20]
 800927c:	1b9e      	subs	r6, r3, r6
 800927e:	4b59      	ldr	r3, [pc, #356]	; (80093e4 <_strtod_l+0x5a4>)
 8009280:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009284:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009288:	4650      	mov	r0, sl
 800928a:	4659      	mov	r1, fp
 800928c:	f7f7 fade 	bl	800084c <__aeabi_ddiv>
 8009290:	e7d6      	b.n	8009240 <_strtod_l+0x400>
 8009292:	9b06      	ldr	r3, [sp, #24]
 8009294:	eba5 0808 	sub.w	r8, r5, r8
 8009298:	4498      	add	r8, r3
 800929a:	f1b8 0f00 	cmp.w	r8, #0
 800929e:	dd74      	ble.n	800938a <_strtod_l+0x54a>
 80092a0:	f018 030f 	ands.w	r3, r8, #15
 80092a4:	d00a      	beq.n	80092bc <_strtod_l+0x47c>
 80092a6:	494f      	ldr	r1, [pc, #316]	; (80093e4 <_strtod_l+0x5a4>)
 80092a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80092ac:	4652      	mov	r2, sl
 80092ae:	465b      	mov	r3, fp
 80092b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092b4:	f7f7 f9a0 	bl	80005f8 <__aeabi_dmul>
 80092b8:	4682      	mov	sl, r0
 80092ba:	468b      	mov	fp, r1
 80092bc:	f038 080f 	bics.w	r8, r8, #15
 80092c0:	d04f      	beq.n	8009362 <_strtod_l+0x522>
 80092c2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80092c6:	dd22      	ble.n	800930e <_strtod_l+0x4ce>
 80092c8:	2500      	movs	r5, #0
 80092ca:	462e      	mov	r6, r5
 80092cc:	9507      	str	r5, [sp, #28]
 80092ce:	9505      	str	r5, [sp, #20]
 80092d0:	2322      	movs	r3, #34	; 0x22
 80092d2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80093ec <_strtod_l+0x5ac>
 80092d6:	6023      	str	r3, [r4, #0]
 80092d8:	f04f 0a00 	mov.w	sl, #0
 80092dc:	9b07      	ldr	r3, [sp, #28]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	f43f adf2 	beq.w	8008ec8 <_strtod_l+0x88>
 80092e4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80092e6:	4620      	mov	r0, r4
 80092e8:	f001 fe90 	bl	800b00c <_Bfree>
 80092ec:	9905      	ldr	r1, [sp, #20]
 80092ee:	4620      	mov	r0, r4
 80092f0:	f001 fe8c 	bl	800b00c <_Bfree>
 80092f4:	4631      	mov	r1, r6
 80092f6:	4620      	mov	r0, r4
 80092f8:	f001 fe88 	bl	800b00c <_Bfree>
 80092fc:	9907      	ldr	r1, [sp, #28]
 80092fe:	4620      	mov	r0, r4
 8009300:	f001 fe84 	bl	800b00c <_Bfree>
 8009304:	4629      	mov	r1, r5
 8009306:	4620      	mov	r0, r4
 8009308:	f001 fe80 	bl	800b00c <_Bfree>
 800930c:	e5dc      	b.n	8008ec8 <_strtod_l+0x88>
 800930e:	4b36      	ldr	r3, [pc, #216]	; (80093e8 <_strtod_l+0x5a8>)
 8009310:	9304      	str	r3, [sp, #16]
 8009312:	2300      	movs	r3, #0
 8009314:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009318:	4650      	mov	r0, sl
 800931a:	4659      	mov	r1, fp
 800931c:	4699      	mov	r9, r3
 800931e:	f1b8 0f01 	cmp.w	r8, #1
 8009322:	dc21      	bgt.n	8009368 <_strtod_l+0x528>
 8009324:	b10b      	cbz	r3, 800932a <_strtod_l+0x4ea>
 8009326:	4682      	mov	sl, r0
 8009328:	468b      	mov	fp, r1
 800932a:	4b2f      	ldr	r3, [pc, #188]	; (80093e8 <_strtod_l+0x5a8>)
 800932c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009330:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009334:	4652      	mov	r2, sl
 8009336:	465b      	mov	r3, fp
 8009338:	e9d9 0100 	ldrd	r0, r1, [r9]
 800933c:	f7f7 f95c 	bl	80005f8 <__aeabi_dmul>
 8009340:	4b2a      	ldr	r3, [pc, #168]	; (80093ec <_strtod_l+0x5ac>)
 8009342:	460a      	mov	r2, r1
 8009344:	400b      	ands	r3, r1
 8009346:	492a      	ldr	r1, [pc, #168]	; (80093f0 <_strtod_l+0x5b0>)
 8009348:	428b      	cmp	r3, r1
 800934a:	4682      	mov	sl, r0
 800934c:	d8bc      	bhi.n	80092c8 <_strtod_l+0x488>
 800934e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009352:	428b      	cmp	r3, r1
 8009354:	bf86      	itte	hi
 8009356:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80093f4 <_strtod_l+0x5b4>
 800935a:	f04f 3aff 	movhi.w	sl, #4294967295
 800935e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009362:	2300      	movs	r3, #0
 8009364:	9304      	str	r3, [sp, #16]
 8009366:	e084      	b.n	8009472 <_strtod_l+0x632>
 8009368:	f018 0f01 	tst.w	r8, #1
 800936c:	d005      	beq.n	800937a <_strtod_l+0x53a>
 800936e:	9b04      	ldr	r3, [sp, #16]
 8009370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009374:	f7f7 f940 	bl	80005f8 <__aeabi_dmul>
 8009378:	2301      	movs	r3, #1
 800937a:	9a04      	ldr	r2, [sp, #16]
 800937c:	3208      	adds	r2, #8
 800937e:	f109 0901 	add.w	r9, r9, #1
 8009382:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009386:	9204      	str	r2, [sp, #16]
 8009388:	e7c9      	b.n	800931e <_strtod_l+0x4de>
 800938a:	d0ea      	beq.n	8009362 <_strtod_l+0x522>
 800938c:	f1c8 0800 	rsb	r8, r8, #0
 8009390:	f018 020f 	ands.w	r2, r8, #15
 8009394:	d00a      	beq.n	80093ac <_strtod_l+0x56c>
 8009396:	4b13      	ldr	r3, [pc, #76]	; (80093e4 <_strtod_l+0x5a4>)
 8009398:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800939c:	4650      	mov	r0, sl
 800939e:	4659      	mov	r1, fp
 80093a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a4:	f7f7 fa52 	bl	800084c <__aeabi_ddiv>
 80093a8:	4682      	mov	sl, r0
 80093aa:	468b      	mov	fp, r1
 80093ac:	ea5f 1828 	movs.w	r8, r8, asr #4
 80093b0:	d0d7      	beq.n	8009362 <_strtod_l+0x522>
 80093b2:	f1b8 0f1f 	cmp.w	r8, #31
 80093b6:	dd1f      	ble.n	80093f8 <_strtod_l+0x5b8>
 80093b8:	2500      	movs	r5, #0
 80093ba:	462e      	mov	r6, r5
 80093bc:	9507      	str	r5, [sp, #28]
 80093be:	9505      	str	r5, [sp, #20]
 80093c0:	2322      	movs	r3, #34	; 0x22
 80093c2:	f04f 0a00 	mov.w	sl, #0
 80093c6:	f04f 0b00 	mov.w	fp, #0
 80093ca:	6023      	str	r3, [r4, #0]
 80093cc:	e786      	b.n	80092dc <_strtod_l+0x49c>
 80093ce:	bf00      	nop
 80093d0:	0800ce09 	.word	0x0800ce09
 80093d4:	0800ce4c 	.word	0x0800ce4c
 80093d8:	0800ce01 	.word	0x0800ce01
 80093dc:	0800cf8c 	.word	0x0800cf8c
 80093e0:	0800d238 	.word	0x0800d238
 80093e4:	0800d118 	.word	0x0800d118
 80093e8:	0800d0f0 	.word	0x0800d0f0
 80093ec:	7ff00000 	.word	0x7ff00000
 80093f0:	7ca00000 	.word	0x7ca00000
 80093f4:	7fefffff 	.word	0x7fefffff
 80093f8:	f018 0310 	ands.w	r3, r8, #16
 80093fc:	bf18      	it	ne
 80093fe:	236a      	movne	r3, #106	; 0x6a
 8009400:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80097b0 <_strtod_l+0x970>
 8009404:	9304      	str	r3, [sp, #16]
 8009406:	4650      	mov	r0, sl
 8009408:	4659      	mov	r1, fp
 800940a:	2300      	movs	r3, #0
 800940c:	f018 0f01 	tst.w	r8, #1
 8009410:	d004      	beq.n	800941c <_strtod_l+0x5dc>
 8009412:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009416:	f7f7 f8ef 	bl	80005f8 <__aeabi_dmul>
 800941a:	2301      	movs	r3, #1
 800941c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009420:	f109 0908 	add.w	r9, r9, #8
 8009424:	d1f2      	bne.n	800940c <_strtod_l+0x5cc>
 8009426:	b10b      	cbz	r3, 800942c <_strtod_l+0x5ec>
 8009428:	4682      	mov	sl, r0
 800942a:	468b      	mov	fp, r1
 800942c:	9b04      	ldr	r3, [sp, #16]
 800942e:	b1c3      	cbz	r3, 8009462 <_strtod_l+0x622>
 8009430:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009434:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009438:	2b00      	cmp	r3, #0
 800943a:	4659      	mov	r1, fp
 800943c:	dd11      	ble.n	8009462 <_strtod_l+0x622>
 800943e:	2b1f      	cmp	r3, #31
 8009440:	f340 8124 	ble.w	800968c <_strtod_l+0x84c>
 8009444:	2b34      	cmp	r3, #52	; 0x34
 8009446:	bfde      	ittt	le
 8009448:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800944c:	f04f 33ff 	movle.w	r3, #4294967295
 8009450:	fa03 f202 	lslle.w	r2, r3, r2
 8009454:	f04f 0a00 	mov.w	sl, #0
 8009458:	bfcc      	ite	gt
 800945a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800945e:	ea02 0b01 	andle.w	fp, r2, r1
 8009462:	2200      	movs	r2, #0
 8009464:	2300      	movs	r3, #0
 8009466:	4650      	mov	r0, sl
 8009468:	4659      	mov	r1, fp
 800946a:	f7f7 fb2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800946e:	2800      	cmp	r0, #0
 8009470:	d1a2      	bne.n	80093b8 <_strtod_l+0x578>
 8009472:	9b07      	ldr	r3, [sp, #28]
 8009474:	9300      	str	r3, [sp, #0]
 8009476:	9908      	ldr	r1, [sp, #32]
 8009478:	462b      	mov	r3, r5
 800947a:	463a      	mov	r2, r7
 800947c:	4620      	mov	r0, r4
 800947e:	f001 fe2d 	bl	800b0dc <__s2b>
 8009482:	9007      	str	r0, [sp, #28]
 8009484:	2800      	cmp	r0, #0
 8009486:	f43f af1f 	beq.w	80092c8 <_strtod_l+0x488>
 800948a:	9b05      	ldr	r3, [sp, #20]
 800948c:	1b9e      	subs	r6, r3, r6
 800948e:	9b06      	ldr	r3, [sp, #24]
 8009490:	2b00      	cmp	r3, #0
 8009492:	bfb4      	ite	lt
 8009494:	4633      	movlt	r3, r6
 8009496:	2300      	movge	r3, #0
 8009498:	930c      	str	r3, [sp, #48]	; 0x30
 800949a:	9b06      	ldr	r3, [sp, #24]
 800949c:	2500      	movs	r5, #0
 800949e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80094a2:	9312      	str	r3, [sp, #72]	; 0x48
 80094a4:	462e      	mov	r6, r5
 80094a6:	9b07      	ldr	r3, [sp, #28]
 80094a8:	4620      	mov	r0, r4
 80094aa:	6859      	ldr	r1, [r3, #4]
 80094ac:	f001 fd6e 	bl	800af8c <_Balloc>
 80094b0:	9005      	str	r0, [sp, #20]
 80094b2:	2800      	cmp	r0, #0
 80094b4:	f43f af0c 	beq.w	80092d0 <_strtod_l+0x490>
 80094b8:	9b07      	ldr	r3, [sp, #28]
 80094ba:	691a      	ldr	r2, [r3, #16]
 80094bc:	3202      	adds	r2, #2
 80094be:	f103 010c 	add.w	r1, r3, #12
 80094c2:	0092      	lsls	r2, r2, #2
 80094c4:	300c      	adds	r0, #12
 80094c6:	f001 fd53 	bl	800af70 <memcpy>
 80094ca:	ec4b ab10 	vmov	d0, sl, fp
 80094ce:	aa1a      	add	r2, sp, #104	; 0x68
 80094d0:	a919      	add	r1, sp, #100	; 0x64
 80094d2:	4620      	mov	r0, r4
 80094d4:	f002 f948 	bl	800b768 <__d2b>
 80094d8:	ec4b ab18 	vmov	d8, sl, fp
 80094dc:	9018      	str	r0, [sp, #96]	; 0x60
 80094de:	2800      	cmp	r0, #0
 80094e0:	f43f aef6 	beq.w	80092d0 <_strtod_l+0x490>
 80094e4:	2101      	movs	r1, #1
 80094e6:	4620      	mov	r0, r4
 80094e8:	f001 fe92 	bl	800b210 <__i2b>
 80094ec:	4606      	mov	r6, r0
 80094ee:	2800      	cmp	r0, #0
 80094f0:	f43f aeee 	beq.w	80092d0 <_strtod_l+0x490>
 80094f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80094f6:	9904      	ldr	r1, [sp, #16]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	bfab      	itete	ge
 80094fc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80094fe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009500:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009502:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009506:	bfac      	ite	ge
 8009508:	eb03 0902 	addge.w	r9, r3, r2
 800950c:	1ad7      	sublt	r7, r2, r3
 800950e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009510:	eba3 0801 	sub.w	r8, r3, r1
 8009514:	4490      	add	r8, r2
 8009516:	4ba1      	ldr	r3, [pc, #644]	; (800979c <_strtod_l+0x95c>)
 8009518:	f108 38ff 	add.w	r8, r8, #4294967295
 800951c:	4598      	cmp	r8, r3
 800951e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009522:	f280 80c7 	bge.w	80096b4 <_strtod_l+0x874>
 8009526:	eba3 0308 	sub.w	r3, r3, r8
 800952a:	2b1f      	cmp	r3, #31
 800952c:	eba2 0203 	sub.w	r2, r2, r3
 8009530:	f04f 0101 	mov.w	r1, #1
 8009534:	f300 80b1 	bgt.w	800969a <_strtod_l+0x85a>
 8009538:	fa01 f303 	lsl.w	r3, r1, r3
 800953c:	930d      	str	r3, [sp, #52]	; 0x34
 800953e:	2300      	movs	r3, #0
 8009540:	9308      	str	r3, [sp, #32]
 8009542:	eb09 0802 	add.w	r8, r9, r2
 8009546:	9b04      	ldr	r3, [sp, #16]
 8009548:	45c1      	cmp	r9, r8
 800954a:	4417      	add	r7, r2
 800954c:	441f      	add	r7, r3
 800954e:	464b      	mov	r3, r9
 8009550:	bfa8      	it	ge
 8009552:	4643      	movge	r3, r8
 8009554:	42bb      	cmp	r3, r7
 8009556:	bfa8      	it	ge
 8009558:	463b      	movge	r3, r7
 800955a:	2b00      	cmp	r3, #0
 800955c:	bfc2      	ittt	gt
 800955e:	eba8 0803 	subgt.w	r8, r8, r3
 8009562:	1aff      	subgt	r7, r7, r3
 8009564:	eba9 0903 	subgt.w	r9, r9, r3
 8009568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800956a:	2b00      	cmp	r3, #0
 800956c:	dd17      	ble.n	800959e <_strtod_l+0x75e>
 800956e:	4631      	mov	r1, r6
 8009570:	461a      	mov	r2, r3
 8009572:	4620      	mov	r0, r4
 8009574:	f001 ff0c 	bl	800b390 <__pow5mult>
 8009578:	4606      	mov	r6, r0
 800957a:	2800      	cmp	r0, #0
 800957c:	f43f aea8 	beq.w	80092d0 <_strtod_l+0x490>
 8009580:	4601      	mov	r1, r0
 8009582:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009584:	4620      	mov	r0, r4
 8009586:	f001 fe59 	bl	800b23c <__multiply>
 800958a:	900b      	str	r0, [sp, #44]	; 0x2c
 800958c:	2800      	cmp	r0, #0
 800958e:	f43f ae9f 	beq.w	80092d0 <_strtod_l+0x490>
 8009592:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009594:	4620      	mov	r0, r4
 8009596:	f001 fd39 	bl	800b00c <_Bfree>
 800959a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800959c:	9318      	str	r3, [sp, #96]	; 0x60
 800959e:	f1b8 0f00 	cmp.w	r8, #0
 80095a2:	f300 808c 	bgt.w	80096be <_strtod_l+0x87e>
 80095a6:	9b06      	ldr	r3, [sp, #24]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	dd08      	ble.n	80095be <_strtod_l+0x77e>
 80095ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80095ae:	9905      	ldr	r1, [sp, #20]
 80095b0:	4620      	mov	r0, r4
 80095b2:	f001 feed 	bl	800b390 <__pow5mult>
 80095b6:	9005      	str	r0, [sp, #20]
 80095b8:	2800      	cmp	r0, #0
 80095ba:	f43f ae89 	beq.w	80092d0 <_strtod_l+0x490>
 80095be:	2f00      	cmp	r7, #0
 80095c0:	dd08      	ble.n	80095d4 <_strtod_l+0x794>
 80095c2:	9905      	ldr	r1, [sp, #20]
 80095c4:	463a      	mov	r2, r7
 80095c6:	4620      	mov	r0, r4
 80095c8:	f001 ff3c 	bl	800b444 <__lshift>
 80095cc:	9005      	str	r0, [sp, #20]
 80095ce:	2800      	cmp	r0, #0
 80095d0:	f43f ae7e 	beq.w	80092d0 <_strtod_l+0x490>
 80095d4:	f1b9 0f00 	cmp.w	r9, #0
 80095d8:	dd08      	ble.n	80095ec <_strtod_l+0x7ac>
 80095da:	4631      	mov	r1, r6
 80095dc:	464a      	mov	r2, r9
 80095de:	4620      	mov	r0, r4
 80095e0:	f001 ff30 	bl	800b444 <__lshift>
 80095e4:	4606      	mov	r6, r0
 80095e6:	2800      	cmp	r0, #0
 80095e8:	f43f ae72 	beq.w	80092d0 <_strtod_l+0x490>
 80095ec:	9a05      	ldr	r2, [sp, #20]
 80095ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80095f0:	4620      	mov	r0, r4
 80095f2:	f001 ffb3 	bl	800b55c <__mdiff>
 80095f6:	4605      	mov	r5, r0
 80095f8:	2800      	cmp	r0, #0
 80095fa:	f43f ae69 	beq.w	80092d0 <_strtod_l+0x490>
 80095fe:	68c3      	ldr	r3, [r0, #12]
 8009600:	930b      	str	r3, [sp, #44]	; 0x2c
 8009602:	2300      	movs	r3, #0
 8009604:	60c3      	str	r3, [r0, #12]
 8009606:	4631      	mov	r1, r6
 8009608:	f001 ff8c 	bl	800b524 <__mcmp>
 800960c:	2800      	cmp	r0, #0
 800960e:	da60      	bge.n	80096d2 <_strtod_l+0x892>
 8009610:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009612:	ea53 030a 	orrs.w	r3, r3, sl
 8009616:	f040 8082 	bne.w	800971e <_strtod_l+0x8de>
 800961a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800961e:	2b00      	cmp	r3, #0
 8009620:	d17d      	bne.n	800971e <_strtod_l+0x8de>
 8009622:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009626:	0d1b      	lsrs	r3, r3, #20
 8009628:	051b      	lsls	r3, r3, #20
 800962a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800962e:	d976      	bls.n	800971e <_strtod_l+0x8de>
 8009630:	696b      	ldr	r3, [r5, #20]
 8009632:	b913      	cbnz	r3, 800963a <_strtod_l+0x7fa>
 8009634:	692b      	ldr	r3, [r5, #16]
 8009636:	2b01      	cmp	r3, #1
 8009638:	dd71      	ble.n	800971e <_strtod_l+0x8de>
 800963a:	4629      	mov	r1, r5
 800963c:	2201      	movs	r2, #1
 800963e:	4620      	mov	r0, r4
 8009640:	f001 ff00 	bl	800b444 <__lshift>
 8009644:	4631      	mov	r1, r6
 8009646:	4605      	mov	r5, r0
 8009648:	f001 ff6c 	bl	800b524 <__mcmp>
 800964c:	2800      	cmp	r0, #0
 800964e:	dd66      	ble.n	800971e <_strtod_l+0x8de>
 8009650:	9904      	ldr	r1, [sp, #16]
 8009652:	4a53      	ldr	r2, [pc, #332]	; (80097a0 <_strtod_l+0x960>)
 8009654:	465b      	mov	r3, fp
 8009656:	2900      	cmp	r1, #0
 8009658:	f000 8081 	beq.w	800975e <_strtod_l+0x91e>
 800965c:	ea02 010b 	and.w	r1, r2, fp
 8009660:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009664:	dc7b      	bgt.n	800975e <_strtod_l+0x91e>
 8009666:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800966a:	f77f aea9 	ble.w	80093c0 <_strtod_l+0x580>
 800966e:	4b4d      	ldr	r3, [pc, #308]	; (80097a4 <_strtod_l+0x964>)
 8009670:	4650      	mov	r0, sl
 8009672:	4659      	mov	r1, fp
 8009674:	2200      	movs	r2, #0
 8009676:	f7f6 ffbf 	bl	80005f8 <__aeabi_dmul>
 800967a:	460b      	mov	r3, r1
 800967c:	4303      	orrs	r3, r0
 800967e:	bf08      	it	eq
 8009680:	2322      	moveq	r3, #34	; 0x22
 8009682:	4682      	mov	sl, r0
 8009684:	468b      	mov	fp, r1
 8009686:	bf08      	it	eq
 8009688:	6023      	streq	r3, [r4, #0]
 800968a:	e62b      	b.n	80092e4 <_strtod_l+0x4a4>
 800968c:	f04f 32ff 	mov.w	r2, #4294967295
 8009690:	fa02 f303 	lsl.w	r3, r2, r3
 8009694:	ea03 0a0a 	and.w	sl, r3, sl
 8009698:	e6e3      	b.n	8009462 <_strtod_l+0x622>
 800969a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800969e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80096a2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80096a6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80096aa:	fa01 f308 	lsl.w	r3, r1, r8
 80096ae:	9308      	str	r3, [sp, #32]
 80096b0:	910d      	str	r1, [sp, #52]	; 0x34
 80096b2:	e746      	b.n	8009542 <_strtod_l+0x702>
 80096b4:	2300      	movs	r3, #0
 80096b6:	9308      	str	r3, [sp, #32]
 80096b8:	2301      	movs	r3, #1
 80096ba:	930d      	str	r3, [sp, #52]	; 0x34
 80096bc:	e741      	b.n	8009542 <_strtod_l+0x702>
 80096be:	9918      	ldr	r1, [sp, #96]	; 0x60
 80096c0:	4642      	mov	r2, r8
 80096c2:	4620      	mov	r0, r4
 80096c4:	f001 febe 	bl	800b444 <__lshift>
 80096c8:	9018      	str	r0, [sp, #96]	; 0x60
 80096ca:	2800      	cmp	r0, #0
 80096cc:	f47f af6b 	bne.w	80095a6 <_strtod_l+0x766>
 80096d0:	e5fe      	b.n	80092d0 <_strtod_l+0x490>
 80096d2:	465f      	mov	r7, fp
 80096d4:	d16e      	bne.n	80097b4 <_strtod_l+0x974>
 80096d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80096d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80096dc:	b342      	cbz	r2, 8009730 <_strtod_l+0x8f0>
 80096de:	4a32      	ldr	r2, [pc, #200]	; (80097a8 <_strtod_l+0x968>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d128      	bne.n	8009736 <_strtod_l+0x8f6>
 80096e4:	9b04      	ldr	r3, [sp, #16]
 80096e6:	4651      	mov	r1, sl
 80096e8:	b1eb      	cbz	r3, 8009726 <_strtod_l+0x8e6>
 80096ea:	4b2d      	ldr	r3, [pc, #180]	; (80097a0 <_strtod_l+0x960>)
 80096ec:	403b      	ands	r3, r7
 80096ee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80096f2:	f04f 32ff 	mov.w	r2, #4294967295
 80096f6:	d819      	bhi.n	800972c <_strtod_l+0x8ec>
 80096f8:	0d1b      	lsrs	r3, r3, #20
 80096fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80096fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009702:	4299      	cmp	r1, r3
 8009704:	d117      	bne.n	8009736 <_strtod_l+0x8f6>
 8009706:	4b29      	ldr	r3, [pc, #164]	; (80097ac <_strtod_l+0x96c>)
 8009708:	429f      	cmp	r7, r3
 800970a:	d102      	bne.n	8009712 <_strtod_l+0x8d2>
 800970c:	3101      	adds	r1, #1
 800970e:	f43f addf 	beq.w	80092d0 <_strtod_l+0x490>
 8009712:	4b23      	ldr	r3, [pc, #140]	; (80097a0 <_strtod_l+0x960>)
 8009714:	403b      	ands	r3, r7
 8009716:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800971a:	f04f 0a00 	mov.w	sl, #0
 800971e:	9b04      	ldr	r3, [sp, #16]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d1a4      	bne.n	800966e <_strtod_l+0x82e>
 8009724:	e5de      	b.n	80092e4 <_strtod_l+0x4a4>
 8009726:	f04f 33ff 	mov.w	r3, #4294967295
 800972a:	e7ea      	b.n	8009702 <_strtod_l+0x8c2>
 800972c:	4613      	mov	r3, r2
 800972e:	e7e8      	b.n	8009702 <_strtod_l+0x8c2>
 8009730:	ea53 030a 	orrs.w	r3, r3, sl
 8009734:	d08c      	beq.n	8009650 <_strtod_l+0x810>
 8009736:	9b08      	ldr	r3, [sp, #32]
 8009738:	b1db      	cbz	r3, 8009772 <_strtod_l+0x932>
 800973a:	423b      	tst	r3, r7
 800973c:	d0ef      	beq.n	800971e <_strtod_l+0x8de>
 800973e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009740:	9a04      	ldr	r2, [sp, #16]
 8009742:	4650      	mov	r0, sl
 8009744:	4659      	mov	r1, fp
 8009746:	b1c3      	cbz	r3, 800977a <_strtod_l+0x93a>
 8009748:	f7ff fb5c 	bl	8008e04 <sulp>
 800974c:	4602      	mov	r2, r0
 800974e:	460b      	mov	r3, r1
 8009750:	ec51 0b18 	vmov	r0, r1, d8
 8009754:	f7f6 fd9a 	bl	800028c <__adddf3>
 8009758:	4682      	mov	sl, r0
 800975a:	468b      	mov	fp, r1
 800975c:	e7df      	b.n	800971e <_strtod_l+0x8de>
 800975e:	4013      	ands	r3, r2
 8009760:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009764:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009768:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800976c:	f04f 3aff 	mov.w	sl, #4294967295
 8009770:	e7d5      	b.n	800971e <_strtod_l+0x8de>
 8009772:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009774:	ea13 0f0a 	tst.w	r3, sl
 8009778:	e7e0      	b.n	800973c <_strtod_l+0x8fc>
 800977a:	f7ff fb43 	bl	8008e04 <sulp>
 800977e:	4602      	mov	r2, r0
 8009780:	460b      	mov	r3, r1
 8009782:	ec51 0b18 	vmov	r0, r1, d8
 8009786:	f7f6 fd7f 	bl	8000288 <__aeabi_dsub>
 800978a:	2200      	movs	r2, #0
 800978c:	2300      	movs	r3, #0
 800978e:	4682      	mov	sl, r0
 8009790:	468b      	mov	fp, r1
 8009792:	f7f7 f999 	bl	8000ac8 <__aeabi_dcmpeq>
 8009796:	2800      	cmp	r0, #0
 8009798:	d0c1      	beq.n	800971e <_strtod_l+0x8de>
 800979a:	e611      	b.n	80093c0 <_strtod_l+0x580>
 800979c:	fffffc02 	.word	0xfffffc02
 80097a0:	7ff00000 	.word	0x7ff00000
 80097a4:	39500000 	.word	0x39500000
 80097a8:	000fffff 	.word	0x000fffff
 80097ac:	7fefffff 	.word	0x7fefffff
 80097b0:	0800ce60 	.word	0x0800ce60
 80097b4:	4631      	mov	r1, r6
 80097b6:	4628      	mov	r0, r5
 80097b8:	f002 f832 	bl	800b820 <__ratio>
 80097bc:	ec59 8b10 	vmov	r8, r9, d0
 80097c0:	ee10 0a10 	vmov	r0, s0
 80097c4:	2200      	movs	r2, #0
 80097c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80097ca:	4649      	mov	r1, r9
 80097cc:	f7f7 f990 	bl	8000af0 <__aeabi_dcmple>
 80097d0:	2800      	cmp	r0, #0
 80097d2:	d07a      	beq.n	80098ca <_strtod_l+0xa8a>
 80097d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d04a      	beq.n	8009870 <_strtod_l+0xa30>
 80097da:	4b95      	ldr	r3, [pc, #596]	; (8009a30 <_strtod_l+0xbf0>)
 80097dc:	2200      	movs	r2, #0
 80097de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80097e2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009a30 <_strtod_l+0xbf0>
 80097e6:	f04f 0800 	mov.w	r8, #0
 80097ea:	4b92      	ldr	r3, [pc, #584]	; (8009a34 <_strtod_l+0xbf4>)
 80097ec:	403b      	ands	r3, r7
 80097ee:	930d      	str	r3, [sp, #52]	; 0x34
 80097f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80097f2:	4b91      	ldr	r3, [pc, #580]	; (8009a38 <_strtod_l+0xbf8>)
 80097f4:	429a      	cmp	r2, r3
 80097f6:	f040 80b0 	bne.w	800995a <_strtod_l+0xb1a>
 80097fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80097fe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009802:	ec4b ab10 	vmov	d0, sl, fp
 8009806:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800980a:	f001 ff31 	bl	800b670 <__ulp>
 800980e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009812:	ec53 2b10 	vmov	r2, r3, d0
 8009816:	f7f6 feef 	bl	80005f8 <__aeabi_dmul>
 800981a:	4652      	mov	r2, sl
 800981c:	465b      	mov	r3, fp
 800981e:	f7f6 fd35 	bl	800028c <__adddf3>
 8009822:	460b      	mov	r3, r1
 8009824:	4983      	ldr	r1, [pc, #524]	; (8009a34 <_strtod_l+0xbf4>)
 8009826:	4a85      	ldr	r2, [pc, #532]	; (8009a3c <_strtod_l+0xbfc>)
 8009828:	4019      	ands	r1, r3
 800982a:	4291      	cmp	r1, r2
 800982c:	4682      	mov	sl, r0
 800982e:	d960      	bls.n	80098f2 <_strtod_l+0xab2>
 8009830:	ee18 3a90 	vmov	r3, s17
 8009834:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009838:	4293      	cmp	r3, r2
 800983a:	d104      	bne.n	8009846 <_strtod_l+0xa06>
 800983c:	ee18 3a10 	vmov	r3, s16
 8009840:	3301      	adds	r3, #1
 8009842:	f43f ad45 	beq.w	80092d0 <_strtod_l+0x490>
 8009846:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009a48 <_strtod_l+0xc08>
 800984a:	f04f 3aff 	mov.w	sl, #4294967295
 800984e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009850:	4620      	mov	r0, r4
 8009852:	f001 fbdb 	bl	800b00c <_Bfree>
 8009856:	9905      	ldr	r1, [sp, #20]
 8009858:	4620      	mov	r0, r4
 800985a:	f001 fbd7 	bl	800b00c <_Bfree>
 800985e:	4631      	mov	r1, r6
 8009860:	4620      	mov	r0, r4
 8009862:	f001 fbd3 	bl	800b00c <_Bfree>
 8009866:	4629      	mov	r1, r5
 8009868:	4620      	mov	r0, r4
 800986a:	f001 fbcf 	bl	800b00c <_Bfree>
 800986e:	e61a      	b.n	80094a6 <_strtod_l+0x666>
 8009870:	f1ba 0f00 	cmp.w	sl, #0
 8009874:	d11b      	bne.n	80098ae <_strtod_l+0xa6e>
 8009876:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800987a:	b9f3      	cbnz	r3, 80098ba <_strtod_l+0xa7a>
 800987c:	4b6c      	ldr	r3, [pc, #432]	; (8009a30 <_strtod_l+0xbf0>)
 800987e:	2200      	movs	r2, #0
 8009880:	4640      	mov	r0, r8
 8009882:	4649      	mov	r1, r9
 8009884:	f7f7 f92a 	bl	8000adc <__aeabi_dcmplt>
 8009888:	b9d0      	cbnz	r0, 80098c0 <_strtod_l+0xa80>
 800988a:	4640      	mov	r0, r8
 800988c:	4649      	mov	r1, r9
 800988e:	4b6c      	ldr	r3, [pc, #432]	; (8009a40 <_strtod_l+0xc00>)
 8009890:	2200      	movs	r2, #0
 8009892:	f7f6 feb1 	bl	80005f8 <__aeabi_dmul>
 8009896:	4680      	mov	r8, r0
 8009898:	4689      	mov	r9, r1
 800989a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800989e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80098a2:	9315      	str	r3, [sp, #84]	; 0x54
 80098a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80098a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80098ac:	e79d      	b.n	80097ea <_strtod_l+0x9aa>
 80098ae:	f1ba 0f01 	cmp.w	sl, #1
 80098b2:	d102      	bne.n	80098ba <_strtod_l+0xa7a>
 80098b4:	2f00      	cmp	r7, #0
 80098b6:	f43f ad83 	beq.w	80093c0 <_strtod_l+0x580>
 80098ba:	4b62      	ldr	r3, [pc, #392]	; (8009a44 <_strtod_l+0xc04>)
 80098bc:	2200      	movs	r2, #0
 80098be:	e78e      	b.n	80097de <_strtod_l+0x99e>
 80098c0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009a40 <_strtod_l+0xc00>
 80098c4:	f04f 0800 	mov.w	r8, #0
 80098c8:	e7e7      	b.n	800989a <_strtod_l+0xa5a>
 80098ca:	4b5d      	ldr	r3, [pc, #372]	; (8009a40 <_strtod_l+0xc00>)
 80098cc:	4640      	mov	r0, r8
 80098ce:	4649      	mov	r1, r9
 80098d0:	2200      	movs	r2, #0
 80098d2:	f7f6 fe91 	bl	80005f8 <__aeabi_dmul>
 80098d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098d8:	4680      	mov	r8, r0
 80098da:	4689      	mov	r9, r1
 80098dc:	b933      	cbnz	r3, 80098ec <_strtod_l+0xaac>
 80098de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80098e2:	900e      	str	r0, [sp, #56]	; 0x38
 80098e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80098e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80098ea:	e7dd      	b.n	80098a8 <_strtod_l+0xa68>
 80098ec:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80098f0:	e7f9      	b.n	80098e6 <_strtod_l+0xaa6>
 80098f2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80098f6:	9b04      	ldr	r3, [sp, #16]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d1a8      	bne.n	800984e <_strtod_l+0xa0e>
 80098fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009900:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009902:	0d1b      	lsrs	r3, r3, #20
 8009904:	051b      	lsls	r3, r3, #20
 8009906:	429a      	cmp	r2, r3
 8009908:	d1a1      	bne.n	800984e <_strtod_l+0xa0e>
 800990a:	4640      	mov	r0, r8
 800990c:	4649      	mov	r1, r9
 800990e:	f7f7 f9bb 	bl	8000c88 <__aeabi_d2lz>
 8009912:	f7f6 fe43 	bl	800059c <__aeabi_l2d>
 8009916:	4602      	mov	r2, r0
 8009918:	460b      	mov	r3, r1
 800991a:	4640      	mov	r0, r8
 800991c:	4649      	mov	r1, r9
 800991e:	f7f6 fcb3 	bl	8000288 <__aeabi_dsub>
 8009922:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009924:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009928:	ea43 030a 	orr.w	r3, r3, sl
 800992c:	4313      	orrs	r3, r2
 800992e:	4680      	mov	r8, r0
 8009930:	4689      	mov	r9, r1
 8009932:	d055      	beq.n	80099e0 <_strtod_l+0xba0>
 8009934:	a336      	add	r3, pc, #216	; (adr r3, 8009a10 <_strtod_l+0xbd0>)
 8009936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800993a:	f7f7 f8cf 	bl	8000adc <__aeabi_dcmplt>
 800993e:	2800      	cmp	r0, #0
 8009940:	f47f acd0 	bne.w	80092e4 <_strtod_l+0x4a4>
 8009944:	a334      	add	r3, pc, #208	; (adr r3, 8009a18 <_strtod_l+0xbd8>)
 8009946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994a:	4640      	mov	r0, r8
 800994c:	4649      	mov	r1, r9
 800994e:	f7f7 f8e3 	bl	8000b18 <__aeabi_dcmpgt>
 8009952:	2800      	cmp	r0, #0
 8009954:	f43f af7b 	beq.w	800984e <_strtod_l+0xa0e>
 8009958:	e4c4      	b.n	80092e4 <_strtod_l+0x4a4>
 800995a:	9b04      	ldr	r3, [sp, #16]
 800995c:	b333      	cbz	r3, 80099ac <_strtod_l+0xb6c>
 800995e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009960:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009964:	d822      	bhi.n	80099ac <_strtod_l+0xb6c>
 8009966:	a32e      	add	r3, pc, #184	; (adr r3, 8009a20 <_strtod_l+0xbe0>)
 8009968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996c:	4640      	mov	r0, r8
 800996e:	4649      	mov	r1, r9
 8009970:	f7f7 f8be 	bl	8000af0 <__aeabi_dcmple>
 8009974:	b1a0      	cbz	r0, 80099a0 <_strtod_l+0xb60>
 8009976:	4649      	mov	r1, r9
 8009978:	4640      	mov	r0, r8
 800997a:	f7f7 f915 	bl	8000ba8 <__aeabi_d2uiz>
 800997e:	2801      	cmp	r0, #1
 8009980:	bf38      	it	cc
 8009982:	2001      	movcc	r0, #1
 8009984:	f7f6 fdbe 	bl	8000504 <__aeabi_ui2d>
 8009988:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800998a:	4680      	mov	r8, r0
 800998c:	4689      	mov	r9, r1
 800998e:	bb23      	cbnz	r3, 80099da <_strtod_l+0xb9a>
 8009990:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009994:	9010      	str	r0, [sp, #64]	; 0x40
 8009996:	9311      	str	r3, [sp, #68]	; 0x44
 8009998:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800999c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80099a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80099a4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80099a8:	1a9b      	subs	r3, r3, r2
 80099aa:	9309      	str	r3, [sp, #36]	; 0x24
 80099ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80099b0:	eeb0 0a48 	vmov.f32	s0, s16
 80099b4:	eef0 0a68 	vmov.f32	s1, s17
 80099b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80099bc:	f001 fe58 	bl	800b670 <__ulp>
 80099c0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80099c4:	ec53 2b10 	vmov	r2, r3, d0
 80099c8:	f7f6 fe16 	bl	80005f8 <__aeabi_dmul>
 80099cc:	ec53 2b18 	vmov	r2, r3, d8
 80099d0:	f7f6 fc5c 	bl	800028c <__adddf3>
 80099d4:	4682      	mov	sl, r0
 80099d6:	468b      	mov	fp, r1
 80099d8:	e78d      	b.n	80098f6 <_strtod_l+0xab6>
 80099da:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80099de:	e7db      	b.n	8009998 <_strtod_l+0xb58>
 80099e0:	a311      	add	r3, pc, #68	; (adr r3, 8009a28 <_strtod_l+0xbe8>)
 80099e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e6:	f7f7 f879 	bl	8000adc <__aeabi_dcmplt>
 80099ea:	e7b2      	b.n	8009952 <_strtod_l+0xb12>
 80099ec:	2300      	movs	r3, #0
 80099ee:	930a      	str	r3, [sp, #40]	; 0x28
 80099f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80099f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80099f4:	6013      	str	r3, [r2, #0]
 80099f6:	f7ff ba6b 	b.w	8008ed0 <_strtod_l+0x90>
 80099fa:	2a65      	cmp	r2, #101	; 0x65
 80099fc:	f43f ab5f 	beq.w	80090be <_strtod_l+0x27e>
 8009a00:	2a45      	cmp	r2, #69	; 0x45
 8009a02:	f43f ab5c 	beq.w	80090be <_strtod_l+0x27e>
 8009a06:	2301      	movs	r3, #1
 8009a08:	f7ff bb94 	b.w	8009134 <_strtod_l+0x2f4>
 8009a0c:	f3af 8000 	nop.w
 8009a10:	94a03595 	.word	0x94a03595
 8009a14:	3fdfffff 	.word	0x3fdfffff
 8009a18:	35afe535 	.word	0x35afe535
 8009a1c:	3fe00000 	.word	0x3fe00000
 8009a20:	ffc00000 	.word	0xffc00000
 8009a24:	41dfffff 	.word	0x41dfffff
 8009a28:	94a03595 	.word	0x94a03595
 8009a2c:	3fcfffff 	.word	0x3fcfffff
 8009a30:	3ff00000 	.word	0x3ff00000
 8009a34:	7ff00000 	.word	0x7ff00000
 8009a38:	7fe00000 	.word	0x7fe00000
 8009a3c:	7c9fffff 	.word	0x7c9fffff
 8009a40:	3fe00000 	.word	0x3fe00000
 8009a44:	bff00000 	.word	0xbff00000
 8009a48:	7fefffff 	.word	0x7fefffff

08009a4c <_strtod_r>:
 8009a4c:	4b01      	ldr	r3, [pc, #4]	; (8009a54 <_strtod_r+0x8>)
 8009a4e:	f7ff b9f7 	b.w	8008e40 <_strtod_l>
 8009a52:	bf00      	nop
 8009a54:	20000080 	.word	0x20000080

08009a58 <_strtol_l.constprop.0>:
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a5e:	d001      	beq.n	8009a64 <_strtol_l.constprop.0+0xc>
 8009a60:	2b24      	cmp	r3, #36	; 0x24
 8009a62:	d906      	bls.n	8009a72 <_strtol_l.constprop.0+0x1a>
 8009a64:	f7fe fafc 	bl	8008060 <__errno>
 8009a68:	2316      	movs	r3, #22
 8009a6a:	6003      	str	r3, [r0, #0]
 8009a6c:	2000      	movs	r0, #0
 8009a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a72:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009b58 <_strtol_l.constprop.0+0x100>
 8009a76:	460d      	mov	r5, r1
 8009a78:	462e      	mov	r6, r5
 8009a7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a7e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009a82:	f017 0708 	ands.w	r7, r7, #8
 8009a86:	d1f7      	bne.n	8009a78 <_strtol_l.constprop.0+0x20>
 8009a88:	2c2d      	cmp	r4, #45	; 0x2d
 8009a8a:	d132      	bne.n	8009af2 <_strtol_l.constprop.0+0x9a>
 8009a8c:	782c      	ldrb	r4, [r5, #0]
 8009a8e:	2701      	movs	r7, #1
 8009a90:	1cb5      	adds	r5, r6, #2
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d05b      	beq.n	8009b4e <_strtol_l.constprop.0+0xf6>
 8009a96:	2b10      	cmp	r3, #16
 8009a98:	d109      	bne.n	8009aae <_strtol_l.constprop.0+0x56>
 8009a9a:	2c30      	cmp	r4, #48	; 0x30
 8009a9c:	d107      	bne.n	8009aae <_strtol_l.constprop.0+0x56>
 8009a9e:	782c      	ldrb	r4, [r5, #0]
 8009aa0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009aa4:	2c58      	cmp	r4, #88	; 0x58
 8009aa6:	d14d      	bne.n	8009b44 <_strtol_l.constprop.0+0xec>
 8009aa8:	786c      	ldrb	r4, [r5, #1]
 8009aaa:	2310      	movs	r3, #16
 8009aac:	3502      	adds	r5, #2
 8009aae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009ab2:	f108 38ff 	add.w	r8, r8, #4294967295
 8009ab6:	f04f 0c00 	mov.w	ip, #0
 8009aba:	fbb8 f9f3 	udiv	r9, r8, r3
 8009abe:	4666      	mov	r6, ip
 8009ac0:	fb03 8a19 	mls	sl, r3, r9, r8
 8009ac4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009ac8:	f1be 0f09 	cmp.w	lr, #9
 8009acc:	d816      	bhi.n	8009afc <_strtol_l.constprop.0+0xa4>
 8009ace:	4674      	mov	r4, lr
 8009ad0:	42a3      	cmp	r3, r4
 8009ad2:	dd24      	ble.n	8009b1e <_strtol_l.constprop.0+0xc6>
 8009ad4:	f1bc 0f00 	cmp.w	ip, #0
 8009ad8:	db1e      	blt.n	8009b18 <_strtol_l.constprop.0+0xc0>
 8009ada:	45b1      	cmp	r9, r6
 8009adc:	d31c      	bcc.n	8009b18 <_strtol_l.constprop.0+0xc0>
 8009ade:	d101      	bne.n	8009ae4 <_strtol_l.constprop.0+0x8c>
 8009ae0:	45a2      	cmp	sl, r4
 8009ae2:	db19      	blt.n	8009b18 <_strtol_l.constprop.0+0xc0>
 8009ae4:	fb06 4603 	mla	r6, r6, r3, r4
 8009ae8:	f04f 0c01 	mov.w	ip, #1
 8009aec:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009af0:	e7e8      	b.n	8009ac4 <_strtol_l.constprop.0+0x6c>
 8009af2:	2c2b      	cmp	r4, #43	; 0x2b
 8009af4:	bf04      	itt	eq
 8009af6:	782c      	ldrbeq	r4, [r5, #0]
 8009af8:	1cb5      	addeq	r5, r6, #2
 8009afa:	e7ca      	b.n	8009a92 <_strtol_l.constprop.0+0x3a>
 8009afc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009b00:	f1be 0f19 	cmp.w	lr, #25
 8009b04:	d801      	bhi.n	8009b0a <_strtol_l.constprop.0+0xb2>
 8009b06:	3c37      	subs	r4, #55	; 0x37
 8009b08:	e7e2      	b.n	8009ad0 <_strtol_l.constprop.0+0x78>
 8009b0a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009b0e:	f1be 0f19 	cmp.w	lr, #25
 8009b12:	d804      	bhi.n	8009b1e <_strtol_l.constprop.0+0xc6>
 8009b14:	3c57      	subs	r4, #87	; 0x57
 8009b16:	e7db      	b.n	8009ad0 <_strtol_l.constprop.0+0x78>
 8009b18:	f04f 3cff 	mov.w	ip, #4294967295
 8009b1c:	e7e6      	b.n	8009aec <_strtol_l.constprop.0+0x94>
 8009b1e:	f1bc 0f00 	cmp.w	ip, #0
 8009b22:	da05      	bge.n	8009b30 <_strtol_l.constprop.0+0xd8>
 8009b24:	2322      	movs	r3, #34	; 0x22
 8009b26:	6003      	str	r3, [r0, #0]
 8009b28:	4646      	mov	r6, r8
 8009b2a:	b942      	cbnz	r2, 8009b3e <_strtol_l.constprop.0+0xe6>
 8009b2c:	4630      	mov	r0, r6
 8009b2e:	e79e      	b.n	8009a6e <_strtol_l.constprop.0+0x16>
 8009b30:	b107      	cbz	r7, 8009b34 <_strtol_l.constprop.0+0xdc>
 8009b32:	4276      	negs	r6, r6
 8009b34:	2a00      	cmp	r2, #0
 8009b36:	d0f9      	beq.n	8009b2c <_strtol_l.constprop.0+0xd4>
 8009b38:	f1bc 0f00 	cmp.w	ip, #0
 8009b3c:	d000      	beq.n	8009b40 <_strtol_l.constprop.0+0xe8>
 8009b3e:	1e69      	subs	r1, r5, #1
 8009b40:	6011      	str	r1, [r2, #0]
 8009b42:	e7f3      	b.n	8009b2c <_strtol_l.constprop.0+0xd4>
 8009b44:	2430      	movs	r4, #48	; 0x30
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d1b1      	bne.n	8009aae <_strtol_l.constprop.0+0x56>
 8009b4a:	2308      	movs	r3, #8
 8009b4c:	e7af      	b.n	8009aae <_strtol_l.constprop.0+0x56>
 8009b4e:	2c30      	cmp	r4, #48	; 0x30
 8009b50:	d0a5      	beq.n	8009a9e <_strtol_l.constprop.0+0x46>
 8009b52:	230a      	movs	r3, #10
 8009b54:	e7ab      	b.n	8009aae <_strtol_l.constprop.0+0x56>
 8009b56:	bf00      	nop
 8009b58:	0800ce89 	.word	0x0800ce89

08009b5c <_strtol_r>:
 8009b5c:	f7ff bf7c 	b.w	8009a58 <_strtol_l.constprop.0>

08009b60 <quorem>:
 8009b60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b64:	6903      	ldr	r3, [r0, #16]
 8009b66:	690c      	ldr	r4, [r1, #16]
 8009b68:	42a3      	cmp	r3, r4
 8009b6a:	4607      	mov	r7, r0
 8009b6c:	f2c0 8081 	blt.w	8009c72 <quorem+0x112>
 8009b70:	3c01      	subs	r4, #1
 8009b72:	f101 0814 	add.w	r8, r1, #20
 8009b76:	f100 0514 	add.w	r5, r0, #20
 8009b7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b7e:	9301      	str	r3, [sp, #4]
 8009b80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009b84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b88:	3301      	adds	r3, #1
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009b90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009b94:	fbb2 f6f3 	udiv	r6, r2, r3
 8009b98:	d331      	bcc.n	8009bfe <quorem+0x9e>
 8009b9a:	f04f 0e00 	mov.w	lr, #0
 8009b9e:	4640      	mov	r0, r8
 8009ba0:	46ac      	mov	ip, r5
 8009ba2:	46f2      	mov	sl, lr
 8009ba4:	f850 2b04 	ldr.w	r2, [r0], #4
 8009ba8:	b293      	uxth	r3, r2
 8009baa:	fb06 e303 	mla	r3, r6, r3, lr
 8009bae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	ebaa 0303 	sub.w	r3, sl, r3
 8009bb8:	f8dc a000 	ldr.w	sl, [ip]
 8009bbc:	0c12      	lsrs	r2, r2, #16
 8009bbe:	fa13 f38a 	uxtah	r3, r3, sl
 8009bc2:	fb06 e202 	mla	r2, r6, r2, lr
 8009bc6:	9300      	str	r3, [sp, #0]
 8009bc8:	9b00      	ldr	r3, [sp, #0]
 8009bca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009bce:	b292      	uxth	r2, r2
 8009bd0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009bd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009bd8:	f8bd 3000 	ldrh.w	r3, [sp]
 8009bdc:	4581      	cmp	r9, r0
 8009bde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009be2:	f84c 3b04 	str.w	r3, [ip], #4
 8009be6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009bea:	d2db      	bcs.n	8009ba4 <quorem+0x44>
 8009bec:	f855 300b 	ldr.w	r3, [r5, fp]
 8009bf0:	b92b      	cbnz	r3, 8009bfe <quorem+0x9e>
 8009bf2:	9b01      	ldr	r3, [sp, #4]
 8009bf4:	3b04      	subs	r3, #4
 8009bf6:	429d      	cmp	r5, r3
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	d32e      	bcc.n	8009c5a <quorem+0xfa>
 8009bfc:	613c      	str	r4, [r7, #16]
 8009bfe:	4638      	mov	r0, r7
 8009c00:	f001 fc90 	bl	800b524 <__mcmp>
 8009c04:	2800      	cmp	r0, #0
 8009c06:	db24      	blt.n	8009c52 <quorem+0xf2>
 8009c08:	3601      	adds	r6, #1
 8009c0a:	4628      	mov	r0, r5
 8009c0c:	f04f 0c00 	mov.w	ip, #0
 8009c10:	f858 2b04 	ldr.w	r2, [r8], #4
 8009c14:	f8d0 e000 	ldr.w	lr, [r0]
 8009c18:	b293      	uxth	r3, r2
 8009c1a:	ebac 0303 	sub.w	r3, ip, r3
 8009c1e:	0c12      	lsrs	r2, r2, #16
 8009c20:	fa13 f38e 	uxtah	r3, r3, lr
 8009c24:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009c28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c2c:	b29b      	uxth	r3, r3
 8009c2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c32:	45c1      	cmp	r9, r8
 8009c34:	f840 3b04 	str.w	r3, [r0], #4
 8009c38:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009c3c:	d2e8      	bcs.n	8009c10 <quorem+0xb0>
 8009c3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c46:	b922      	cbnz	r2, 8009c52 <quorem+0xf2>
 8009c48:	3b04      	subs	r3, #4
 8009c4a:	429d      	cmp	r5, r3
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	d30a      	bcc.n	8009c66 <quorem+0x106>
 8009c50:	613c      	str	r4, [r7, #16]
 8009c52:	4630      	mov	r0, r6
 8009c54:	b003      	add	sp, #12
 8009c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c5a:	6812      	ldr	r2, [r2, #0]
 8009c5c:	3b04      	subs	r3, #4
 8009c5e:	2a00      	cmp	r2, #0
 8009c60:	d1cc      	bne.n	8009bfc <quorem+0x9c>
 8009c62:	3c01      	subs	r4, #1
 8009c64:	e7c7      	b.n	8009bf6 <quorem+0x96>
 8009c66:	6812      	ldr	r2, [r2, #0]
 8009c68:	3b04      	subs	r3, #4
 8009c6a:	2a00      	cmp	r2, #0
 8009c6c:	d1f0      	bne.n	8009c50 <quorem+0xf0>
 8009c6e:	3c01      	subs	r4, #1
 8009c70:	e7eb      	b.n	8009c4a <quorem+0xea>
 8009c72:	2000      	movs	r0, #0
 8009c74:	e7ee      	b.n	8009c54 <quorem+0xf4>
	...

08009c78 <_dtoa_r>:
 8009c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c7c:	ed2d 8b04 	vpush	{d8-d9}
 8009c80:	ec57 6b10 	vmov	r6, r7, d0
 8009c84:	b093      	sub	sp, #76	; 0x4c
 8009c86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009c88:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009c8c:	9106      	str	r1, [sp, #24]
 8009c8e:	ee10 aa10 	vmov	sl, s0
 8009c92:	4604      	mov	r4, r0
 8009c94:	9209      	str	r2, [sp, #36]	; 0x24
 8009c96:	930c      	str	r3, [sp, #48]	; 0x30
 8009c98:	46bb      	mov	fp, r7
 8009c9a:	b975      	cbnz	r5, 8009cba <_dtoa_r+0x42>
 8009c9c:	2010      	movs	r0, #16
 8009c9e:	f001 f94d 	bl	800af3c <malloc>
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	6260      	str	r0, [r4, #36]	; 0x24
 8009ca6:	b920      	cbnz	r0, 8009cb2 <_dtoa_r+0x3a>
 8009ca8:	4ba7      	ldr	r3, [pc, #668]	; (8009f48 <_dtoa_r+0x2d0>)
 8009caa:	21ea      	movs	r1, #234	; 0xea
 8009cac:	48a7      	ldr	r0, [pc, #668]	; (8009f4c <_dtoa_r+0x2d4>)
 8009cae:	f002 f8bd 	bl	800be2c <__assert_func>
 8009cb2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009cb6:	6005      	str	r5, [r0, #0]
 8009cb8:	60c5      	str	r5, [r0, #12]
 8009cba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cbc:	6819      	ldr	r1, [r3, #0]
 8009cbe:	b151      	cbz	r1, 8009cd6 <_dtoa_r+0x5e>
 8009cc0:	685a      	ldr	r2, [r3, #4]
 8009cc2:	604a      	str	r2, [r1, #4]
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	4093      	lsls	r3, r2
 8009cc8:	608b      	str	r3, [r1, #8]
 8009cca:	4620      	mov	r0, r4
 8009ccc:	f001 f99e 	bl	800b00c <_Bfree>
 8009cd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	601a      	str	r2, [r3, #0]
 8009cd6:	1e3b      	subs	r3, r7, #0
 8009cd8:	bfaa      	itet	ge
 8009cda:	2300      	movge	r3, #0
 8009cdc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009ce0:	f8c8 3000 	strge.w	r3, [r8]
 8009ce4:	4b9a      	ldr	r3, [pc, #616]	; (8009f50 <_dtoa_r+0x2d8>)
 8009ce6:	bfbc      	itt	lt
 8009ce8:	2201      	movlt	r2, #1
 8009cea:	f8c8 2000 	strlt.w	r2, [r8]
 8009cee:	ea33 030b 	bics.w	r3, r3, fp
 8009cf2:	d11b      	bne.n	8009d2c <_dtoa_r+0xb4>
 8009cf4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009cf6:	f242 730f 	movw	r3, #9999	; 0x270f
 8009cfa:	6013      	str	r3, [r2, #0]
 8009cfc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d00:	4333      	orrs	r3, r6
 8009d02:	f000 8592 	beq.w	800a82a <_dtoa_r+0xbb2>
 8009d06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d08:	b963      	cbnz	r3, 8009d24 <_dtoa_r+0xac>
 8009d0a:	4b92      	ldr	r3, [pc, #584]	; (8009f54 <_dtoa_r+0x2dc>)
 8009d0c:	e022      	b.n	8009d54 <_dtoa_r+0xdc>
 8009d0e:	4b92      	ldr	r3, [pc, #584]	; (8009f58 <_dtoa_r+0x2e0>)
 8009d10:	9301      	str	r3, [sp, #4]
 8009d12:	3308      	adds	r3, #8
 8009d14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009d16:	6013      	str	r3, [r2, #0]
 8009d18:	9801      	ldr	r0, [sp, #4]
 8009d1a:	b013      	add	sp, #76	; 0x4c
 8009d1c:	ecbd 8b04 	vpop	{d8-d9}
 8009d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d24:	4b8b      	ldr	r3, [pc, #556]	; (8009f54 <_dtoa_r+0x2dc>)
 8009d26:	9301      	str	r3, [sp, #4]
 8009d28:	3303      	adds	r3, #3
 8009d2a:	e7f3      	b.n	8009d14 <_dtoa_r+0x9c>
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	2300      	movs	r3, #0
 8009d30:	4650      	mov	r0, sl
 8009d32:	4659      	mov	r1, fp
 8009d34:	f7f6 fec8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d38:	ec4b ab19 	vmov	d9, sl, fp
 8009d3c:	4680      	mov	r8, r0
 8009d3e:	b158      	cbz	r0, 8009d58 <_dtoa_r+0xe0>
 8009d40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d42:	2301      	movs	r3, #1
 8009d44:	6013      	str	r3, [r2, #0]
 8009d46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	f000 856b 	beq.w	800a824 <_dtoa_r+0xbac>
 8009d4e:	4883      	ldr	r0, [pc, #524]	; (8009f5c <_dtoa_r+0x2e4>)
 8009d50:	6018      	str	r0, [r3, #0]
 8009d52:	1e43      	subs	r3, r0, #1
 8009d54:	9301      	str	r3, [sp, #4]
 8009d56:	e7df      	b.n	8009d18 <_dtoa_r+0xa0>
 8009d58:	ec4b ab10 	vmov	d0, sl, fp
 8009d5c:	aa10      	add	r2, sp, #64	; 0x40
 8009d5e:	a911      	add	r1, sp, #68	; 0x44
 8009d60:	4620      	mov	r0, r4
 8009d62:	f001 fd01 	bl	800b768 <__d2b>
 8009d66:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009d6a:	ee08 0a10 	vmov	s16, r0
 8009d6e:	2d00      	cmp	r5, #0
 8009d70:	f000 8084 	beq.w	8009e7c <_dtoa_r+0x204>
 8009d74:	ee19 3a90 	vmov	r3, s19
 8009d78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d7c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009d80:	4656      	mov	r6, sl
 8009d82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009d86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009d8a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009d8e:	4b74      	ldr	r3, [pc, #464]	; (8009f60 <_dtoa_r+0x2e8>)
 8009d90:	2200      	movs	r2, #0
 8009d92:	4630      	mov	r0, r6
 8009d94:	4639      	mov	r1, r7
 8009d96:	f7f6 fa77 	bl	8000288 <__aeabi_dsub>
 8009d9a:	a365      	add	r3, pc, #404	; (adr r3, 8009f30 <_dtoa_r+0x2b8>)
 8009d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da0:	f7f6 fc2a 	bl	80005f8 <__aeabi_dmul>
 8009da4:	a364      	add	r3, pc, #400	; (adr r3, 8009f38 <_dtoa_r+0x2c0>)
 8009da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009daa:	f7f6 fa6f 	bl	800028c <__adddf3>
 8009dae:	4606      	mov	r6, r0
 8009db0:	4628      	mov	r0, r5
 8009db2:	460f      	mov	r7, r1
 8009db4:	f7f6 fbb6 	bl	8000524 <__aeabi_i2d>
 8009db8:	a361      	add	r3, pc, #388	; (adr r3, 8009f40 <_dtoa_r+0x2c8>)
 8009dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dbe:	f7f6 fc1b 	bl	80005f8 <__aeabi_dmul>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	4630      	mov	r0, r6
 8009dc8:	4639      	mov	r1, r7
 8009dca:	f7f6 fa5f 	bl	800028c <__adddf3>
 8009dce:	4606      	mov	r6, r0
 8009dd0:	460f      	mov	r7, r1
 8009dd2:	f7f6 fec1 	bl	8000b58 <__aeabi_d2iz>
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	9000      	str	r0, [sp, #0]
 8009dda:	2300      	movs	r3, #0
 8009ddc:	4630      	mov	r0, r6
 8009dde:	4639      	mov	r1, r7
 8009de0:	f7f6 fe7c 	bl	8000adc <__aeabi_dcmplt>
 8009de4:	b150      	cbz	r0, 8009dfc <_dtoa_r+0x184>
 8009de6:	9800      	ldr	r0, [sp, #0]
 8009de8:	f7f6 fb9c 	bl	8000524 <__aeabi_i2d>
 8009dec:	4632      	mov	r2, r6
 8009dee:	463b      	mov	r3, r7
 8009df0:	f7f6 fe6a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009df4:	b910      	cbnz	r0, 8009dfc <_dtoa_r+0x184>
 8009df6:	9b00      	ldr	r3, [sp, #0]
 8009df8:	3b01      	subs	r3, #1
 8009dfa:	9300      	str	r3, [sp, #0]
 8009dfc:	9b00      	ldr	r3, [sp, #0]
 8009dfe:	2b16      	cmp	r3, #22
 8009e00:	d85a      	bhi.n	8009eb8 <_dtoa_r+0x240>
 8009e02:	9a00      	ldr	r2, [sp, #0]
 8009e04:	4b57      	ldr	r3, [pc, #348]	; (8009f64 <_dtoa_r+0x2ec>)
 8009e06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0e:	ec51 0b19 	vmov	r0, r1, d9
 8009e12:	f7f6 fe63 	bl	8000adc <__aeabi_dcmplt>
 8009e16:	2800      	cmp	r0, #0
 8009e18:	d050      	beq.n	8009ebc <_dtoa_r+0x244>
 8009e1a:	9b00      	ldr	r3, [sp, #0]
 8009e1c:	3b01      	subs	r3, #1
 8009e1e:	9300      	str	r3, [sp, #0]
 8009e20:	2300      	movs	r3, #0
 8009e22:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e26:	1b5d      	subs	r5, r3, r5
 8009e28:	1e6b      	subs	r3, r5, #1
 8009e2a:	9305      	str	r3, [sp, #20]
 8009e2c:	bf45      	ittet	mi
 8009e2e:	f1c5 0301 	rsbmi	r3, r5, #1
 8009e32:	9304      	strmi	r3, [sp, #16]
 8009e34:	2300      	movpl	r3, #0
 8009e36:	2300      	movmi	r3, #0
 8009e38:	bf4c      	ite	mi
 8009e3a:	9305      	strmi	r3, [sp, #20]
 8009e3c:	9304      	strpl	r3, [sp, #16]
 8009e3e:	9b00      	ldr	r3, [sp, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	db3d      	blt.n	8009ec0 <_dtoa_r+0x248>
 8009e44:	9b05      	ldr	r3, [sp, #20]
 8009e46:	9a00      	ldr	r2, [sp, #0]
 8009e48:	920a      	str	r2, [sp, #40]	; 0x28
 8009e4a:	4413      	add	r3, r2
 8009e4c:	9305      	str	r3, [sp, #20]
 8009e4e:	2300      	movs	r3, #0
 8009e50:	9307      	str	r3, [sp, #28]
 8009e52:	9b06      	ldr	r3, [sp, #24]
 8009e54:	2b09      	cmp	r3, #9
 8009e56:	f200 8089 	bhi.w	8009f6c <_dtoa_r+0x2f4>
 8009e5a:	2b05      	cmp	r3, #5
 8009e5c:	bfc4      	itt	gt
 8009e5e:	3b04      	subgt	r3, #4
 8009e60:	9306      	strgt	r3, [sp, #24]
 8009e62:	9b06      	ldr	r3, [sp, #24]
 8009e64:	f1a3 0302 	sub.w	r3, r3, #2
 8009e68:	bfcc      	ite	gt
 8009e6a:	2500      	movgt	r5, #0
 8009e6c:	2501      	movle	r5, #1
 8009e6e:	2b03      	cmp	r3, #3
 8009e70:	f200 8087 	bhi.w	8009f82 <_dtoa_r+0x30a>
 8009e74:	e8df f003 	tbb	[pc, r3]
 8009e78:	59383a2d 	.word	0x59383a2d
 8009e7c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009e80:	441d      	add	r5, r3
 8009e82:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009e86:	2b20      	cmp	r3, #32
 8009e88:	bfc1      	itttt	gt
 8009e8a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009e8e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009e92:	fa0b f303 	lslgt.w	r3, fp, r3
 8009e96:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009e9a:	bfda      	itte	le
 8009e9c:	f1c3 0320 	rsble	r3, r3, #32
 8009ea0:	fa06 f003 	lslle.w	r0, r6, r3
 8009ea4:	4318      	orrgt	r0, r3
 8009ea6:	f7f6 fb2d 	bl	8000504 <__aeabi_ui2d>
 8009eaa:	2301      	movs	r3, #1
 8009eac:	4606      	mov	r6, r0
 8009eae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009eb2:	3d01      	subs	r5, #1
 8009eb4:	930e      	str	r3, [sp, #56]	; 0x38
 8009eb6:	e76a      	b.n	8009d8e <_dtoa_r+0x116>
 8009eb8:	2301      	movs	r3, #1
 8009eba:	e7b2      	b.n	8009e22 <_dtoa_r+0x1aa>
 8009ebc:	900b      	str	r0, [sp, #44]	; 0x2c
 8009ebe:	e7b1      	b.n	8009e24 <_dtoa_r+0x1ac>
 8009ec0:	9b04      	ldr	r3, [sp, #16]
 8009ec2:	9a00      	ldr	r2, [sp, #0]
 8009ec4:	1a9b      	subs	r3, r3, r2
 8009ec6:	9304      	str	r3, [sp, #16]
 8009ec8:	4253      	negs	r3, r2
 8009eca:	9307      	str	r3, [sp, #28]
 8009ecc:	2300      	movs	r3, #0
 8009ece:	930a      	str	r3, [sp, #40]	; 0x28
 8009ed0:	e7bf      	b.n	8009e52 <_dtoa_r+0x1da>
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	9308      	str	r3, [sp, #32]
 8009ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	dc55      	bgt.n	8009f88 <_dtoa_r+0x310>
 8009edc:	2301      	movs	r3, #1
 8009ede:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009ee2:	461a      	mov	r2, r3
 8009ee4:	9209      	str	r2, [sp, #36]	; 0x24
 8009ee6:	e00c      	b.n	8009f02 <_dtoa_r+0x28a>
 8009ee8:	2301      	movs	r3, #1
 8009eea:	e7f3      	b.n	8009ed4 <_dtoa_r+0x25c>
 8009eec:	2300      	movs	r3, #0
 8009eee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ef0:	9308      	str	r3, [sp, #32]
 8009ef2:	9b00      	ldr	r3, [sp, #0]
 8009ef4:	4413      	add	r3, r2
 8009ef6:	9302      	str	r3, [sp, #8]
 8009ef8:	3301      	adds	r3, #1
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	9303      	str	r3, [sp, #12]
 8009efe:	bfb8      	it	lt
 8009f00:	2301      	movlt	r3, #1
 8009f02:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009f04:	2200      	movs	r2, #0
 8009f06:	6042      	str	r2, [r0, #4]
 8009f08:	2204      	movs	r2, #4
 8009f0a:	f102 0614 	add.w	r6, r2, #20
 8009f0e:	429e      	cmp	r6, r3
 8009f10:	6841      	ldr	r1, [r0, #4]
 8009f12:	d93d      	bls.n	8009f90 <_dtoa_r+0x318>
 8009f14:	4620      	mov	r0, r4
 8009f16:	f001 f839 	bl	800af8c <_Balloc>
 8009f1a:	9001      	str	r0, [sp, #4]
 8009f1c:	2800      	cmp	r0, #0
 8009f1e:	d13b      	bne.n	8009f98 <_dtoa_r+0x320>
 8009f20:	4b11      	ldr	r3, [pc, #68]	; (8009f68 <_dtoa_r+0x2f0>)
 8009f22:	4602      	mov	r2, r0
 8009f24:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009f28:	e6c0      	b.n	8009cac <_dtoa_r+0x34>
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	e7df      	b.n	8009eee <_dtoa_r+0x276>
 8009f2e:	bf00      	nop
 8009f30:	636f4361 	.word	0x636f4361
 8009f34:	3fd287a7 	.word	0x3fd287a7
 8009f38:	8b60c8b3 	.word	0x8b60c8b3
 8009f3c:	3fc68a28 	.word	0x3fc68a28
 8009f40:	509f79fb 	.word	0x509f79fb
 8009f44:	3fd34413 	.word	0x3fd34413
 8009f48:	0800cf96 	.word	0x0800cf96
 8009f4c:	0800cfad 	.word	0x0800cfad
 8009f50:	7ff00000 	.word	0x7ff00000
 8009f54:	0800cf92 	.word	0x0800cf92
 8009f58:	0800cf89 	.word	0x0800cf89
 8009f5c:	0800ce0d 	.word	0x0800ce0d
 8009f60:	3ff80000 	.word	0x3ff80000
 8009f64:	0800d118 	.word	0x0800d118
 8009f68:	0800d008 	.word	0x0800d008
 8009f6c:	2501      	movs	r5, #1
 8009f6e:	2300      	movs	r3, #0
 8009f70:	9306      	str	r3, [sp, #24]
 8009f72:	9508      	str	r5, [sp, #32]
 8009f74:	f04f 33ff 	mov.w	r3, #4294967295
 8009f78:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	2312      	movs	r3, #18
 8009f80:	e7b0      	b.n	8009ee4 <_dtoa_r+0x26c>
 8009f82:	2301      	movs	r3, #1
 8009f84:	9308      	str	r3, [sp, #32]
 8009f86:	e7f5      	b.n	8009f74 <_dtoa_r+0x2fc>
 8009f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f8a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009f8e:	e7b8      	b.n	8009f02 <_dtoa_r+0x28a>
 8009f90:	3101      	adds	r1, #1
 8009f92:	6041      	str	r1, [r0, #4]
 8009f94:	0052      	lsls	r2, r2, #1
 8009f96:	e7b8      	b.n	8009f0a <_dtoa_r+0x292>
 8009f98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f9a:	9a01      	ldr	r2, [sp, #4]
 8009f9c:	601a      	str	r2, [r3, #0]
 8009f9e:	9b03      	ldr	r3, [sp, #12]
 8009fa0:	2b0e      	cmp	r3, #14
 8009fa2:	f200 809d 	bhi.w	800a0e0 <_dtoa_r+0x468>
 8009fa6:	2d00      	cmp	r5, #0
 8009fa8:	f000 809a 	beq.w	800a0e0 <_dtoa_r+0x468>
 8009fac:	9b00      	ldr	r3, [sp, #0]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	dd32      	ble.n	800a018 <_dtoa_r+0x3a0>
 8009fb2:	4ab7      	ldr	r2, [pc, #732]	; (800a290 <_dtoa_r+0x618>)
 8009fb4:	f003 030f 	and.w	r3, r3, #15
 8009fb8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009fbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009fc0:	9b00      	ldr	r3, [sp, #0]
 8009fc2:	05d8      	lsls	r0, r3, #23
 8009fc4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009fc8:	d516      	bpl.n	8009ff8 <_dtoa_r+0x380>
 8009fca:	4bb2      	ldr	r3, [pc, #712]	; (800a294 <_dtoa_r+0x61c>)
 8009fcc:	ec51 0b19 	vmov	r0, r1, d9
 8009fd0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009fd4:	f7f6 fc3a 	bl	800084c <__aeabi_ddiv>
 8009fd8:	f007 070f 	and.w	r7, r7, #15
 8009fdc:	4682      	mov	sl, r0
 8009fde:	468b      	mov	fp, r1
 8009fe0:	2503      	movs	r5, #3
 8009fe2:	4eac      	ldr	r6, [pc, #688]	; (800a294 <_dtoa_r+0x61c>)
 8009fe4:	b957      	cbnz	r7, 8009ffc <_dtoa_r+0x384>
 8009fe6:	4642      	mov	r2, r8
 8009fe8:	464b      	mov	r3, r9
 8009fea:	4650      	mov	r0, sl
 8009fec:	4659      	mov	r1, fp
 8009fee:	f7f6 fc2d 	bl	800084c <__aeabi_ddiv>
 8009ff2:	4682      	mov	sl, r0
 8009ff4:	468b      	mov	fp, r1
 8009ff6:	e028      	b.n	800a04a <_dtoa_r+0x3d2>
 8009ff8:	2502      	movs	r5, #2
 8009ffa:	e7f2      	b.n	8009fe2 <_dtoa_r+0x36a>
 8009ffc:	07f9      	lsls	r1, r7, #31
 8009ffe:	d508      	bpl.n	800a012 <_dtoa_r+0x39a>
 800a000:	4640      	mov	r0, r8
 800a002:	4649      	mov	r1, r9
 800a004:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a008:	f7f6 faf6 	bl	80005f8 <__aeabi_dmul>
 800a00c:	3501      	adds	r5, #1
 800a00e:	4680      	mov	r8, r0
 800a010:	4689      	mov	r9, r1
 800a012:	107f      	asrs	r7, r7, #1
 800a014:	3608      	adds	r6, #8
 800a016:	e7e5      	b.n	8009fe4 <_dtoa_r+0x36c>
 800a018:	f000 809b 	beq.w	800a152 <_dtoa_r+0x4da>
 800a01c:	9b00      	ldr	r3, [sp, #0]
 800a01e:	4f9d      	ldr	r7, [pc, #628]	; (800a294 <_dtoa_r+0x61c>)
 800a020:	425e      	negs	r6, r3
 800a022:	4b9b      	ldr	r3, [pc, #620]	; (800a290 <_dtoa_r+0x618>)
 800a024:	f006 020f 	and.w	r2, r6, #15
 800a028:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a030:	ec51 0b19 	vmov	r0, r1, d9
 800a034:	f7f6 fae0 	bl	80005f8 <__aeabi_dmul>
 800a038:	1136      	asrs	r6, r6, #4
 800a03a:	4682      	mov	sl, r0
 800a03c:	468b      	mov	fp, r1
 800a03e:	2300      	movs	r3, #0
 800a040:	2502      	movs	r5, #2
 800a042:	2e00      	cmp	r6, #0
 800a044:	d17a      	bne.n	800a13c <_dtoa_r+0x4c4>
 800a046:	2b00      	cmp	r3, #0
 800a048:	d1d3      	bne.n	8009ff2 <_dtoa_r+0x37a>
 800a04a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	f000 8082 	beq.w	800a156 <_dtoa_r+0x4de>
 800a052:	4b91      	ldr	r3, [pc, #580]	; (800a298 <_dtoa_r+0x620>)
 800a054:	2200      	movs	r2, #0
 800a056:	4650      	mov	r0, sl
 800a058:	4659      	mov	r1, fp
 800a05a:	f7f6 fd3f 	bl	8000adc <__aeabi_dcmplt>
 800a05e:	2800      	cmp	r0, #0
 800a060:	d079      	beq.n	800a156 <_dtoa_r+0x4de>
 800a062:	9b03      	ldr	r3, [sp, #12]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d076      	beq.n	800a156 <_dtoa_r+0x4de>
 800a068:	9b02      	ldr	r3, [sp, #8]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	dd36      	ble.n	800a0dc <_dtoa_r+0x464>
 800a06e:	9b00      	ldr	r3, [sp, #0]
 800a070:	4650      	mov	r0, sl
 800a072:	4659      	mov	r1, fp
 800a074:	1e5f      	subs	r7, r3, #1
 800a076:	2200      	movs	r2, #0
 800a078:	4b88      	ldr	r3, [pc, #544]	; (800a29c <_dtoa_r+0x624>)
 800a07a:	f7f6 fabd 	bl	80005f8 <__aeabi_dmul>
 800a07e:	9e02      	ldr	r6, [sp, #8]
 800a080:	4682      	mov	sl, r0
 800a082:	468b      	mov	fp, r1
 800a084:	3501      	adds	r5, #1
 800a086:	4628      	mov	r0, r5
 800a088:	f7f6 fa4c 	bl	8000524 <__aeabi_i2d>
 800a08c:	4652      	mov	r2, sl
 800a08e:	465b      	mov	r3, fp
 800a090:	f7f6 fab2 	bl	80005f8 <__aeabi_dmul>
 800a094:	4b82      	ldr	r3, [pc, #520]	; (800a2a0 <_dtoa_r+0x628>)
 800a096:	2200      	movs	r2, #0
 800a098:	f7f6 f8f8 	bl	800028c <__adddf3>
 800a09c:	46d0      	mov	r8, sl
 800a09e:	46d9      	mov	r9, fp
 800a0a0:	4682      	mov	sl, r0
 800a0a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a0a6:	2e00      	cmp	r6, #0
 800a0a8:	d158      	bne.n	800a15c <_dtoa_r+0x4e4>
 800a0aa:	4b7e      	ldr	r3, [pc, #504]	; (800a2a4 <_dtoa_r+0x62c>)
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	4640      	mov	r0, r8
 800a0b0:	4649      	mov	r1, r9
 800a0b2:	f7f6 f8e9 	bl	8000288 <__aeabi_dsub>
 800a0b6:	4652      	mov	r2, sl
 800a0b8:	465b      	mov	r3, fp
 800a0ba:	4680      	mov	r8, r0
 800a0bc:	4689      	mov	r9, r1
 800a0be:	f7f6 fd2b 	bl	8000b18 <__aeabi_dcmpgt>
 800a0c2:	2800      	cmp	r0, #0
 800a0c4:	f040 8295 	bne.w	800a5f2 <_dtoa_r+0x97a>
 800a0c8:	4652      	mov	r2, sl
 800a0ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a0ce:	4640      	mov	r0, r8
 800a0d0:	4649      	mov	r1, r9
 800a0d2:	f7f6 fd03 	bl	8000adc <__aeabi_dcmplt>
 800a0d6:	2800      	cmp	r0, #0
 800a0d8:	f040 8289 	bne.w	800a5ee <_dtoa_r+0x976>
 800a0dc:	ec5b ab19 	vmov	sl, fp, d9
 800a0e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	f2c0 8148 	blt.w	800a378 <_dtoa_r+0x700>
 800a0e8:	9a00      	ldr	r2, [sp, #0]
 800a0ea:	2a0e      	cmp	r2, #14
 800a0ec:	f300 8144 	bgt.w	800a378 <_dtoa_r+0x700>
 800a0f0:	4b67      	ldr	r3, [pc, #412]	; (800a290 <_dtoa_r+0x618>)
 800a0f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a0fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	f280 80d5 	bge.w	800a2ac <_dtoa_r+0x634>
 800a102:	9b03      	ldr	r3, [sp, #12]
 800a104:	2b00      	cmp	r3, #0
 800a106:	f300 80d1 	bgt.w	800a2ac <_dtoa_r+0x634>
 800a10a:	f040 826f 	bne.w	800a5ec <_dtoa_r+0x974>
 800a10e:	4b65      	ldr	r3, [pc, #404]	; (800a2a4 <_dtoa_r+0x62c>)
 800a110:	2200      	movs	r2, #0
 800a112:	4640      	mov	r0, r8
 800a114:	4649      	mov	r1, r9
 800a116:	f7f6 fa6f 	bl	80005f8 <__aeabi_dmul>
 800a11a:	4652      	mov	r2, sl
 800a11c:	465b      	mov	r3, fp
 800a11e:	f7f6 fcf1 	bl	8000b04 <__aeabi_dcmpge>
 800a122:	9e03      	ldr	r6, [sp, #12]
 800a124:	4637      	mov	r7, r6
 800a126:	2800      	cmp	r0, #0
 800a128:	f040 8245 	bne.w	800a5b6 <_dtoa_r+0x93e>
 800a12c:	9d01      	ldr	r5, [sp, #4]
 800a12e:	2331      	movs	r3, #49	; 0x31
 800a130:	f805 3b01 	strb.w	r3, [r5], #1
 800a134:	9b00      	ldr	r3, [sp, #0]
 800a136:	3301      	adds	r3, #1
 800a138:	9300      	str	r3, [sp, #0]
 800a13a:	e240      	b.n	800a5be <_dtoa_r+0x946>
 800a13c:	07f2      	lsls	r2, r6, #31
 800a13e:	d505      	bpl.n	800a14c <_dtoa_r+0x4d4>
 800a140:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a144:	f7f6 fa58 	bl	80005f8 <__aeabi_dmul>
 800a148:	3501      	adds	r5, #1
 800a14a:	2301      	movs	r3, #1
 800a14c:	1076      	asrs	r6, r6, #1
 800a14e:	3708      	adds	r7, #8
 800a150:	e777      	b.n	800a042 <_dtoa_r+0x3ca>
 800a152:	2502      	movs	r5, #2
 800a154:	e779      	b.n	800a04a <_dtoa_r+0x3d2>
 800a156:	9f00      	ldr	r7, [sp, #0]
 800a158:	9e03      	ldr	r6, [sp, #12]
 800a15a:	e794      	b.n	800a086 <_dtoa_r+0x40e>
 800a15c:	9901      	ldr	r1, [sp, #4]
 800a15e:	4b4c      	ldr	r3, [pc, #304]	; (800a290 <_dtoa_r+0x618>)
 800a160:	4431      	add	r1, r6
 800a162:	910d      	str	r1, [sp, #52]	; 0x34
 800a164:	9908      	ldr	r1, [sp, #32]
 800a166:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a16a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a16e:	2900      	cmp	r1, #0
 800a170:	d043      	beq.n	800a1fa <_dtoa_r+0x582>
 800a172:	494d      	ldr	r1, [pc, #308]	; (800a2a8 <_dtoa_r+0x630>)
 800a174:	2000      	movs	r0, #0
 800a176:	f7f6 fb69 	bl	800084c <__aeabi_ddiv>
 800a17a:	4652      	mov	r2, sl
 800a17c:	465b      	mov	r3, fp
 800a17e:	f7f6 f883 	bl	8000288 <__aeabi_dsub>
 800a182:	9d01      	ldr	r5, [sp, #4]
 800a184:	4682      	mov	sl, r0
 800a186:	468b      	mov	fp, r1
 800a188:	4649      	mov	r1, r9
 800a18a:	4640      	mov	r0, r8
 800a18c:	f7f6 fce4 	bl	8000b58 <__aeabi_d2iz>
 800a190:	4606      	mov	r6, r0
 800a192:	f7f6 f9c7 	bl	8000524 <__aeabi_i2d>
 800a196:	4602      	mov	r2, r0
 800a198:	460b      	mov	r3, r1
 800a19a:	4640      	mov	r0, r8
 800a19c:	4649      	mov	r1, r9
 800a19e:	f7f6 f873 	bl	8000288 <__aeabi_dsub>
 800a1a2:	3630      	adds	r6, #48	; 0x30
 800a1a4:	f805 6b01 	strb.w	r6, [r5], #1
 800a1a8:	4652      	mov	r2, sl
 800a1aa:	465b      	mov	r3, fp
 800a1ac:	4680      	mov	r8, r0
 800a1ae:	4689      	mov	r9, r1
 800a1b0:	f7f6 fc94 	bl	8000adc <__aeabi_dcmplt>
 800a1b4:	2800      	cmp	r0, #0
 800a1b6:	d163      	bne.n	800a280 <_dtoa_r+0x608>
 800a1b8:	4642      	mov	r2, r8
 800a1ba:	464b      	mov	r3, r9
 800a1bc:	4936      	ldr	r1, [pc, #216]	; (800a298 <_dtoa_r+0x620>)
 800a1be:	2000      	movs	r0, #0
 800a1c0:	f7f6 f862 	bl	8000288 <__aeabi_dsub>
 800a1c4:	4652      	mov	r2, sl
 800a1c6:	465b      	mov	r3, fp
 800a1c8:	f7f6 fc88 	bl	8000adc <__aeabi_dcmplt>
 800a1cc:	2800      	cmp	r0, #0
 800a1ce:	f040 80b5 	bne.w	800a33c <_dtoa_r+0x6c4>
 800a1d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1d4:	429d      	cmp	r5, r3
 800a1d6:	d081      	beq.n	800a0dc <_dtoa_r+0x464>
 800a1d8:	4b30      	ldr	r3, [pc, #192]	; (800a29c <_dtoa_r+0x624>)
 800a1da:	2200      	movs	r2, #0
 800a1dc:	4650      	mov	r0, sl
 800a1de:	4659      	mov	r1, fp
 800a1e0:	f7f6 fa0a 	bl	80005f8 <__aeabi_dmul>
 800a1e4:	4b2d      	ldr	r3, [pc, #180]	; (800a29c <_dtoa_r+0x624>)
 800a1e6:	4682      	mov	sl, r0
 800a1e8:	468b      	mov	fp, r1
 800a1ea:	4640      	mov	r0, r8
 800a1ec:	4649      	mov	r1, r9
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f7f6 fa02 	bl	80005f8 <__aeabi_dmul>
 800a1f4:	4680      	mov	r8, r0
 800a1f6:	4689      	mov	r9, r1
 800a1f8:	e7c6      	b.n	800a188 <_dtoa_r+0x510>
 800a1fa:	4650      	mov	r0, sl
 800a1fc:	4659      	mov	r1, fp
 800a1fe:	f7f6 f9fb 	bl	80005f8 <__aeabi_dmul>
 800a202:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a204:	9d01      	ldr	r5, [sp, #4]
 800a206:	930f      	str	r3, [sp, #60]	; 0x3c
 800a208:	4682      	mov	sl, r0
 800a20a:	468b      	mov	fp, r1
 800a20c:	4649      	mov	r1, r9
 800a20e:	4640      	mov	r0, r8
 800a210:	f7f6 fca2 	bl	8000b58 <__aeabi_d2iz>
 800a214:	4606      	mov	r6, r0
 800a216:	f7f6 f985 	bl	8000524 <__aeabi_i2d>
 800a21a:	3630      	adds	r6, #48	; 0x30
 800a21c:	4602      	mov	r2, r0
 800a21e:	460b      	mov	r3, r1
 800a220:	4640      	mov	r0, r8
 800a222:	4649      	mov	r1, r9
 800a224:	f7f6 f830 	bl	8000288 <__aeabi_dsub>
 800a228:	f805 6b01 	strb.w	r6, [r5], #1
 800a22c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a22e:	429d      	cmp	r5, r3
 800a230:	4680      	mov	r8, r0
 800a232:	4689      	mov	r9, r1
 800a234:	f04f 0200 	mov.w	r2, #0
 800a238:	d124      	bne.n	800a284 <_dtoa_r+0x60c>
 800a23a:	4b1b      	ldr	r3, [pc, #108]	; (800a2a8 <_dtoa_r+0x630>)
 800a23c:	4650      	mov	r0, sl
 800a23e:	4659      	mov	r1, fp
 800a240:	f7f6 f824 	bl	800028c <__adddf3>
 800a244:	4602      	mov	r2, r0
 800a246:	460b      	mov	r3, r1
 800a248:	4640      	mov	r0, r8
 800a24a:	4649      	mov	r1, r9
 800a24c:	f7f6 fc64 	bl	8000b18 <__aeabi_dcmpgt>
 800a250:	2800      	cmp	r0, #0
 800a252:	d173      	bne.n	800a33c <_dtoa_r+0x6c4>
 800a254:	4652      	mov	r2, sl
 800a256:	465b      	mov	r3, fp
 800a258:	4913      	ldr	r1, [pc, #76]	; (800a2a8 <_dtoa_r+0x630>)
 800a25a:	2000      	movs	r0, #0
 800a25c:	f7f6 f814 	bl	8000288 <__aeabi_dsub>
 800a260:	4602      	mov	r2, r0
 800a262:	460b      	mov	r3, r1
 800a264:	4640      	mov	r0, r8
 800a266:	4649      	mov	r1, r9
 800a268:	f7f6 fc38 	bl	8000adc <__aeabi_dcmplt>
 800a26c:	2800      	cmp	r0, #0
 800a26e:	f43f af35 	beq.w	800a0dc <_dtoa_r+0x464>
 800a272:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a274:	1e6b      	subs	r3, r5, #1
 800a276:	930f      	str	r3, [sp, #60]	; 0x3c
 800a278:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a27c:	2b30      	cmp	r3, #48	; 0x30
 800a27e:	d0f8      	beq.n	800a272 <_dtoa_r+0x5fa>
 800a280:	9700      	str	r7, [sp, #0]
 800a282:	e049      	b.n	800a318 <_dtoa_r+0x6a0>
 800a284:	4b05      	ldr	r3, [pc, #20]	; (800a29c <_dtoa_r+0x624>)
 800a286:	f7f6 f9b7 	bl	80005f8 <__aeabi_dmul>
 800a28a:	4680      	mov	r8, r0
 800a28c:	4689      	mov	r9, r1
 800a28e:	e7bd      	b.n	800a20c <_dtoa_r+0x594>
 800a290:	0800d118 	.word	0x0800d118
 800a294:	0800d0f0 	.word	0x0800d0f0
 800a298:	3ff00000 	.word	0x3ff00000
 800a29c:	40240000 	.word	0x40240000
 800a2a0:	401c0000 	.word	0x401c0000
 800a2a4:	40140000 	.word	0x40140000
 800a2a8:	3fe00000 	.word	0x3fe00000
 800a2ac:	9d01      	ldr	r5, [sp, #4]
 800a2ae:	4656      	mov	r6, sl
 800a2b0:	465f      	mov	r7, fp
 800a2b2:	4642      	mov	r2, r8
 800a2b4:	464b      	mov	r3, r9
 800a2b6:	4630      	mov	r0, r6
 800a2b8:	4639      	mov	r1, r7
 800a2ba:	f7f6 fac7 	bl	800084c <__aeabi_ddiv>
 800a2be:	f7f6 fc4b 	bl	8000b58 <__aeabi_d2iz>
 800a2c2:	4682      	mov	sl, r0
 800a2c4:	f7f6 f92e 	bl	8000524 <__aeabi_i2d>
 800a2c8:	4642      	mov	r2, r8
 800a2ca:	464b      	mov	r3, r9
 800a2cc:	f7f6 f994 	bl	80005f8 <__aeabi_dmul>
 800a2d0:	4602      	mov	r2, r0
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	4630      	mov	r0, r6
 800a2d6:	4639      	mov	r1, r7
 800a2d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a2dc:	f7f5 ffd4 	bl	8000288 <__aeabi_dsub>
 800a2e0:	f805 6b01 	strb.w	r6, [r5], #1
 800a2e4:	9e01      	ldr	r6, [sp, #4]
 800a2e6:	9f03      	ldr	r7, [sp, #12]
 800a2e8:	1bae      	subs	r6, r5, r6
 800a2ea:	42b7      	cmp	r7, r6
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	460b      	mov	r3, r1
 800a2f0:	d135      	bne.n	800a35e <_dtoa_r+0x6e6>
 800a2f2:	f7f5 ffcb 	bl	800028c <__adddf3>
 800a2f6:	4642      	mov	r2, r8
 800a2f8:	464b      	mov	r3, r9
 800a2fa:	4606      	mov	r6, r0
 800a2fc:	460f      	mov	r7, r1
 800a2fe:	f7f6 fc0b 	bl	8000b18 <__aeabi_dcmpgt>
 800a302:	b9d0      	cbnz	r0, 800a33a <_dtoa_r+0x6c2>
 800a304:	4642      	mov	r2, r8
 800a306:	464b      	mov	r3, r9
 800a308:	4630      	mov	r0, r6
 800a30a:	4639      	mov	r1, r7
 800a30c:	f7f6 fbdc 	bl	8000ac8 <__aeabi_dcmpeq>
 800a310:	b110      	cbz	r0, 800a318 <_dtoa_r+0x6a0>
 800a312:	f01a 0f01 	tst.w	sl, #1
 800a316:	d110      	bne.n	800a33a <_dtoa_r+0x6c2>
 800a318:	4620      	mov	r0, r4
 800a31a:	ee18 1a10 	vmov	r1, s16
 800a31e:	f000 fe75 	bl	800b00c <_Bfree>
 800a322:	2300      	movs	r3, #0
 800a324:	9800      	ldr	r0, [sp, #0]
 800a326:	702b      	strb	r3, [r5, #0]
 800a328:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a32a:	3001      	adds	r0, #1
 800a32c:	6018      	str	r0, [r3, #0]
 800a32e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a330:	2b00      	cmp	r3, #0
 800a332:	f43f acf1 	beq.w	8009d18 <_dtoa_r+0xa0>
 800a336:	601d      	str	r5, [r3, #0]
 800a338:	e4ee      	b.n	8009d18 <_dtoa_r+0xa0>
 800a33a:	9f00      	ldr	r7, [sp, #0]
 800a33c:	462b      	mov	r3, r5
 800a33e:	461d      	mov	r5, r3
 800a340:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a344:	2a39      	cmp	r2, #57	; 0x39
 800a346:	d106      	bne.n	800a356 <_dtoa_r+0x6de>
 800a348:	9a01      	ldr	r2, [sp, #4]
 800a34a:	429a      	cmp	r2, r3
 800a34c:	d1f7      	bne.n	800a33e <_dtoa_r+0x6c6>
 800a34e:	9901      	ldr	r1, [sp, #4]
 800a350:	2230      	movs	r2, #48	; 0x30
 800a352:	3701      	adds	r7, #1
 800a354:	700a      	strb	r2, [r1, #0]
 800a356:	781a      	ldrb	r2, [r3, #0]
 800a358:	3201      	adds	r2, #1
 800a35a:	701a      	strb	r2, [r3, #0]
 800a35c:	e790      	b.n	800a280 <_dtoa_r+0x608>
 800a35e:	4ba6      	ldr	r3, [pc, #664]	; (800a5f8 <_dtoa_r+0x980>)
 800a360:	2200      	movs	r2, #0
 800a362:	f7f6 f949 	bl	80005f8 <__aeabi_dmul>
 800a366:	2200      	movs	r2, #0
 800a368:	2300      	movs	r3, #0
 800a36a:	4606      	mov	r6, r0
 800a36c:	460f      	mov	r7, r1
 800a36e:	f7f6 fbab 	bl	8000ac8 <__aeabi_dcmpeq>
 800a372:	2800      	cmp	r0, #0
 800a374:	d09d      	beq.n	800a2b2 <_dtoa_r+0x63a>
 800a376:	e7cf      	b.n	800a318 <_dtoa_r+0x6a0>
 800a378:	9a08      	ldr	r2, [sp, #32]
 800a37a:	2a00      	cmp	r2, #0
 800a37c:	f000 80d7 	beq.w	800a52e <_dtoa_r+0x8b6>
 800a380:	9a06      	ldr	r2, [sp, #24]
 800a382:	2a01      	cmp	r2, #1
 800a384:	f300 80ba 	bgt.w	800a4fc <_dtoa_r+0x884>
 800a388:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a38a:	2a00      	cmp	r2, #0
 800a38c:	f000 80b2 	beq.w	800a4f4 <_dtoa_r+0x87c>
 800a390:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a394:	9e07      	ldr	r6, [sp, #28]
 800a396:	9d04      	ldr	r5, [sp, #16]
 800a398:	9a04      	ldr	r2, [sp, #16]
 800a39a:	441a      	add	r2, r3
 800a39c:	9204      	str	r2, [sp, #16]
 800a39e:	9a05      	ldr	r2, [sp, #20]
 800a3a0:	2101      	movs	r1, #1
 800a3a2:	441a      	add	r2, r3
 800a3a4:	4620      	mov	r0, r4
 800a3a6:	9205      	str	r2, [sp, #20]
 800a3a8:	f000 ff32 	bl	800b210 <__i2b>
 800a3ac:	4607      	mov	r7, r0
 800a3ae:	2d00      	cmp	r5, #0
 800a3b0:	dd0c      	ble.n	800a3cc <_dtoa_r+0x754>
 800a3b2:	9b05      	ldr	r3, [sp, #20]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	dd09      	ble.n	800a3cc <_dtoa_r+0x754>
 800a3b8:	42ab      	cmp	r3, r5
 800a3ba:	9a04      	ldr	r2, [sp, #16]
 800a3bc:	bfa8      	it	ge
 800a3be:	462b      	movge	r3, r5
 800a3c0:	1ad2      	subs	r2, r2, r3
 800a3c2:	9204      	str	r2, [sp, #16]
 800a3c4:	9a05      	ldr	r2, [sp, #20]
 800a3c6:	1aed      	subs	r5, r5, r3
 800a3c8:	1ad3      	subs	r3, r2, r3
 800a3ca:	9305      	str	r3, [sp, #20]
 800a3cc:	9b07      	ldr	r3, [sp, #28]
 800a3ce:	b31b      	cbz	r3, 800a418 <_dtoa_r+0x7a0>
 800a3d0:	9b08      	ldr	r3, [sp, #32]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	f000 80af 	beq.w	800a536 <_dtoa_r+0x8be>
 800a3d8:	2e00      	cmp	r6, #0
 800a3da:	dd13      	ble.n	800a404 <_dtoa_r+0x78c>
 800a3dc:	4639      	mov	r1, r7
 800a3de:	4632      	mov	r2, r6
 800a3e0:	4620      	mov	r0, r4
 800a3e2:	f000 ffd5 	bl	800b390 <__pow5mult>
 800a3e6:	ee18 2a10 	vmov	r2, s16
 800a3ea:	4601      	mov	r1, r0
 800a3ec:	4607      	mov	r7, r0
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	f000 ff24 	bl	800b23c <__multiply>
 800a3f4:	ee18 1a10 	vmov	r1, s16
 800a3f8:	4680      	mov	r8, r0
 800a3fa:	4620      	mov	r0, r4
 800a3fc:	f000 fe06 	bl	800b00c <_Bfree>
 800a400:	ee08 8a10 	vmov	s16, r8
 800a404:	9b07      	ldr	r3, [sp, #28]
 800a406:	1b9a      	subs	r2, r3, r6
 800a408:	d006      	beq.n	800a418 <_dtoa_r+0x7a0>
 800a40a:	ee18 1a10 	vmov	r1, s16
 800a40e:	4620      	mov	r0, r4
 800a410:	f000 ffbe 	bl	800b390 <__pow5mult>
 800a414:	ee08 0a10 	vmov	s16, r0
 800a418:	2101      	movs	r1, #1
 800a41a:	4620      	mov	r0, r4
 800a41c:	f000 fef8 	bl	800b210 <__i2b>
 800a420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a422:	2b00      	cmp	r3, #0
 800a424:	4606      	mov	r6, r0
 800a426:	f340 8088 	ble.w	800a53a <_dtoa_r+0x8c2>
 800a42a:	461a      	mov	r2, r3
 800a42c:	4601      	mov	r1, r0
 800a42e:	4620      	mov	r0, r4
 800a430:	f000 ffae 	bl	800b390 <__pow5mult>
 800a434:	9b06      	ldr	r3, [sp, #24]
 800a436:	2b01      	cmp	r3, #1
 800a438:	4606      	mov	r6, r0
 800a43a:	f340 8081 	ble.w	800a540 <_dtoa_r+0x8c8>
 800a43e:	f04f 0800 	mov.w	r8, #0
 800a442:	6933      	ldr	r3, [r6, #16]
 800a444:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a448:	6918      	ldr	r0, [r3, #16]
 800a44a:	f000 fe91 	bl	800b170 <__hi0bits>
 800a44e:	f1c0 0020 	rsb	r0, r0, #32
 800a452:	9b05      	ldr	r3, [sp, #20]
 800a454:	4418      	add	r0, r3
 800a456:	f010 001f 	ands.w	r0, r0, #31
 800a45a:	f000 8092 	beq.w	800a582 <_dtoa_r+0x90a>
 800a45e:	f1c0 0320 	rsb	r3, r0, #32
 800a462:	2b04      	cmp	r3, #4
 800a464:	f340 808a 	ble.w	800a57c <_dtoa_r+0x904>
 800a468:	f1c0 001c 	rsb	r0, r0, #28
 800a46c:	9b04      	ldr	r3, [sp, #16]
 800a46e:	4403      	add	r3, r0
 800a470:	9304      	str	r3, [sp, #16]
 800a472:	9b05      	ldr	r3, [sp, #20]
 800a474:	4403      	add	r3, r0
 800a476:	4405      	add	r5, r0
 800a478:	9305      	str	r3, [sp, #20]
 800a47a:	9b04      	ldr	r3, [sp, #16]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	dd07      	ble.n	800a490 <_dtoa_r+0x818>
 800a480:	ee18 1a10 	vmov	r1, s16
 800a484:	461a      	mov	r2, r3
 800a486:	4620      	mov	r0, r4
 800a488:	f000 ffdc 	bl	800b444 <__lshift>
 800a48c:	ee08 0a10 	vmov	s16, r0
 800a490:	9b05      	ldr	r3, [sp, #20]
 800a492:	2b00      	cmp	r3, #0
 800a494:	dd05      	ble.n	800a4a2 <_dtoa_r+0x82a>
 800a496:	4631      	mov	r1, r6
 800a498:	461a      	mov	r2, r3
 800a49a:	4620      	mov	r0, r4
 800a49c:	f000 ffd2 	bl	800b444 <__lshift>
 800a4a0:	4606      	mov	r6, r0
 800a4a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d06e      	beq.n	800a586 <_dtoa_r+0x90e>
 800a4a8:	ee18 0a10 	vmov	r0, s16
 800a4ac:	4631      	mov	r1, r6
 800a4ae:	f001 f839 	bl	800b524 <__mcmp>
 800a4b2:	2800      	cmp	r0, #0
 800a4b4:	da67      	bge.n	800a586 <_dtoa_r+0x90e>
 800a4b6:	9b00      	ldr	r3, [sp, #0]
 800a4b8:	3b01      	subs	r3, #1
 800a4ba:	ee18 1a10 	vmov	r1, s16
 800a4be:	9300      	str	r3, [sp, #0]
 800a4c0:	220a      	movs	r2, #10
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	4620      	mov	r0, r4
 800a4c6:	f000 fdc3 	bl	800b050 <__multadd>
 800a4ca:	9b08      	ldr	r3, [sp, #32]
 800a4cc:	ee08 0a10 	vmov	s16, r0
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	f000 81b1 	beq.w	800a838 <_dtoa_r+0xbc0>
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	4639      	mov	r1, r7
 800a4da:	220a      	movs	r2, #10
 800a4dc:	4620      	mov	r0, r4
 800a4de:	f000 fdb7 	bl	800b050 <__multadd>
 800a4e2:	9b02      	ldr	r3, [sp, #8]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	4607      	mov	r7, r0
 800a4e8:	f300 808e 	bgt.w	800a608 <_dtoa_r+0x990>
 800a4ec:	9b06      	ldr	r3, [sp, #24]
 800a4ee:	2b02      	cmp	r3, #2
 800a4f0:	dc51      	bgt.n	800a596 <_dtoa_r+0x91e>
 800a4f2:	e089      	b.n	800a608 <_dtoa_r+0x990>
 800a4f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a4f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a4fa:	e74b      	b.n	800a394 <_dtoa_r+0x71c>
 800a4fc:	9b03      	ldr	r3, [sp, #12]
 800a4fe:	1e5e      	subs	r6, r3, #1
 800a500:	9b07      	ldr	r3, [sp, #28]
 800a502:	42b3      	cmp	r3, r6
 800a504:	bfbf      	itttt	lt
 800a506:	9b07      	ldrlt	r3, [sp, #28]
 800a508:	9607      	strlt	r6, [sp, #28]
 800a50a:	1af2      	sublt	r2, r6, r3
 800a50c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a50e:	bfb6      	itet	lt
 800a510:	189b      	addlt	r3, r3, r2
 800a512:	1b9e      	subge	r6, r3, r6
 800a514:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a516:	9b03      	ldr	r3, [sp, #12]
 800a518:	bfb8      	it	lt
 800a51a:	2600      	movlt	r6, #0
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	bfb7      	itett	lt
 800a520:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a524:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a528:	1a9d      	sublt	r5, r3, r2
 800a52a:	2300      	movlt	r3, #0
 800a52c:	e734      	b.n	800a398 <_dtoa_r+0x720>
 800a52e:	9e07      	ldr	r6, [sp, #28]
 800a530:	9d04      	ldr	r5, [sp, #16]
 800a532:	9f08      	ldr	r7, [sp, #32]
 800a534:	e73b      	b.n	800a3ae <_dtoa_r+0x736>
 800a536:	9a07      	ldr	r2, [sp, #28]
 800a538:	e767      	b.n	800a40a <_dtoa_r+0x792>
 800a53a:	9b06      	ldr	r3, [sp, #24]
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	dc18      	bgt.n	800a572 <_dtoa_r+0x8fa>
 800a540:	f1ba 0f00 	cmp.w	sl, #0
 800a544:	d115      	bne.n	800a572 <_dtoa_r+0x8fa>
 800a546:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a54a:	b993      	cbnz	r3, 800a572 <_dtoa_r+0x8fa>
 800a54c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a550:	0d1b      	lsrs	r3, r3, #20
 800a552:	051b      	lsls	r3, r3, #20
 800a554:	b183      	cbz	r3, 800a578 <_dtoa_r+0x900>
 800a556:	9b04      	ldr	r3, [sp, #16]
 800a558:	3301      	adds	r3, #1
 800a55a:	9304      	str	r3, [sp, #16]
 800a55c:	9b05      	ldr	r3, [sp, #20]
 800a55e:	3301      	adds	r3, #1
 800a560:	9305      	str	r3, [sp, #20]
 800a562:	f04f 0801 	mov.w	r8, #1
 800a566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a568:	2b00      	cmp	r3, #0
 800a56a:	f47f af6a 	bne.w	800a442 <_dtoa_r+0x7ca>
 800a56e:	2001      	movs	r0, #1
 800a570:	e76f      	b.n	800a452 <_dtoa_r+0x7da>
 800a572:	f04f 0800 	mov.w	r8, #0
 800a576:	e7f6      	b.n	800a566 <_dtoa_r+0x8ee>
 800a578:	4698      	mov	r8, r3
 800a57a:	e7f4      	b.n	800a566 <_dtoa_r+0x8ee>
 800a57c:	f43f af7d 	beq.w	800a47a <_dtoa_r+0x802>
 800a580:	4618      	mov	r0, r3
 800a582:	301c      	adds	r0, #28
 800a584:	e772      	b.n	800a46c <_dtoa_r+0x7f4>
 800a586:	9b03      	ldr	r3, [sp, #12]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	dc37      	bgt.n	800a5fc <_dtoa_r+0x984>
 800a58c:	9b06      	ldr	r3, [sp, #24]
 800a58e:	2b02      	cmp	r3, #2
 800a590:	dd34      	ble.n	800a5fc <_dtoa_r+0x984>
 800a592:	9b03      	ldr	r3, [sp, #12]
 800a594:	9302      	str	r3, [sp, #8]
 800a596:	9b02      	ldr	r3, [sp, #8]
 800a598:	b96b      	cbnz	r3, 800a5b6 <_dtoa_r+0x93e>
 800a59a:	4631      	mov	r1, r6
 800a59c:	2205      	movs	r2, #5
 800a59e:	4620      	mov	r0, r4
 800a5a0:	f000 fd56 	bl	800b050 <__multadd>
 800a5a4:	4601      	mov	r1, r0
 800a5a6:	4606      	mov	r6, r0
 800a5a8:	ee18 0a10 	vmov	r0, s16
 800a5ac:	f000 ffba 	bl	800b524 <__mcmp>
 800a5b0:	2800      	cmp	r0, #0
 800a5b2:	f73f adbb 	bgt.w	800a12c <_dtoa_r+0x4b4>
 800a5b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5b8:	9d01      	ldr	r5, [sp, #4]
 800a5ba:	43db      	mvns	r3, r3
 800a5bc:	9300      	str	r3, [sp, #0]
 800a5be:	f04f 0800 	mov.w	r8, #0
 800a5c2:	4631      	mov	r1, r6
 800a5c4:	4620      	mov	r0, r4
 800a5c6:	f000 fd21 	bl	800b00c <_Bfree>
 800a5ca:	2f00      	cmp	r7, #0
 800a5cc:	f43f aea4 	beq.w	800a318 <_dtoa_r+0x6a0>
 800a5d0:	f1b8 0f00 	cmp.w	r8, #0
 800a5d4:	d005      	beq.n	800a5e2 <_dtoa_r+0x96a>
 800a5d6:	45b8      	cmp	r8, r7
 800a5d8:	d003      	beq.n	800a5e2 <_dtoa_r+0x96a>
 800a5da:	4641      	mov	r1, r8
 800a5dc:	4620      	mov	r0, r4
 800a5de:	f000 fd15 	bl	800b00c <_Bfree>
 800a5e2:	4639      	mov	r1, r7
 800a5e4:	4620      	mov	r0, r4
 800a5e6:	f000 fd11 	bl	800b00c <_Bfree>
 800a5ea:	e695      	b.n	800a318 <_dtoa_r+0x6a0>
 800a5ec:	2600      	movs	r6, #0
 800a5ee:	4637      	mov	r7, r6
 800a5f0:	e7e1      	b.n	800a5b6 <_dtoa_r+0x93e>
 800a5f2:	9700      	str	r7, [sp, #0]
 800a5f4:	4637      	mov	r7, r6
 800a5f6:	e599      	b.n	800a12c <_dtoa_r+0x4b4>
 800a5f8:	40240000 	.word	0x40240000
 800a5fc:	9b08      	ldr	r3, [sp, #32]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	f000 80ca 	beq.w	800a798 <_dtoa_r+0xb20>
 800a604:	9b03      	ldr	r3, [sp, #12]
 800a606:	9302      	str	r3, [sp, #8]
 800a608:	2d00      	cmp	r5, #0
 800a60a:	dd05      	ble.n	800a618 <_dtoa_r+0x9a0>
 800a60c:	4639      	mov	r1, r7
 800a60e:	462a      	mov	r2, r5
 800a610:	4620      	mov	r0, r4
 800a612:	f000 ff17 	bl	800b444 <__lshift>
 800a616:	4607      	mov	r7, r0
 800a618:	f1b8 0f00 	cmp.w	r8, #0
 800a61c:	d05b      	beq.n	800a6d6 <_dtoa_r+0xa5e>
 800a61e:	6879      	ldr	r1, [r7, #4]
 800a620:	4620      	mov	r0, r4
 800a622:	f000 fcb3 	bl	800af8c <_Balloc>
 800a626:	4605      	mov	r5, r0
 800a628:	b928      	cbnz	r0, 800a636 <_dtoa_r+0x9be>
 800a62a:	4b87      	ldr	r3, [pc, #540]	; (800a848 <_dtoa_r+0xbd0>)
 800a62c:	4602      	mov	r2, r0
 800a62e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a632:	f7ff bb3b 	b.w	8009cac <_dtoa_r+0x34>
 800a636:	693a      	ldr	r2, [r7, #16]
 800a638:	3202      	adds	r2, #2
 800a63a:	0092      	lsls	r2, r2, #2
 800a63c:	f107 010c 	add.w	r1, r7, #12
 800a640:	300c      	adds	r0, #12
 800a642:	f000 fc95 	bl	800af70 <memcpy>
 800a646:	2201      	movs	r2, #1
 800a648:	4629      	mov	r1, r5
 800a64a:	4620      	mov	r0, r4
 800a64c:	f000 fefa 	bl	800b444 <__lshift>
 800a650:	9b01      	ldr	r3, [sp, #4]
 800a652:	f103 0901 	add.w	r9, r3, #1
 800a656:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a65a:	4413      	add	r3, r2
 800a65c:	9305      	str	r3, [sp, #20]
 800a65e:	f00a 0301 	and.w	r3, sl, #1
 800a662:	46b8      	mov	r8, r7
 800a664:	9304      	str	r3, [sp, #16]
 800a666:	4607      	mov	r7, r0
 800a668:	4631      	mov	r1, r6
 800a66a:	ee18 0a10 	vmov	r0, s16
 800a66e:	f7ff fa77 	bl	8009b60 <quorem>
 800a672:	4641      	mov	r1, r8
 800a674:	9002      	str	r0, [sp, #8]
 800a676:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a67a:	ee18 0a10 	vmov	r0, s16
 800a67e:	f000 ff51 	bl	800b524 <__mcmp>
 800a682:	463a      	mov	r2, r7
 800a684:	9003      	str	r0, [sp, #12]
 800a686:	4631      	mov	r1, r6
 800a688:	4620      	mov	r0, r4
 800a68a:	f000 ff67 	bl	800b55c <__mdiff>
 800a68e:	68c2      	ldr	r2, [r0, #12]
 800a690:	f109 3bff 	add.w	fp, r9, #4294967295
 800a694:	4605      	mov	r5, r0
 800a696:	bb02      	cbnz	r2, 800a6da <_dtoa_r+0xa62>
 800a698:	4601      	mov	r1, r0
 800a69a:	ee18 0a10 	vmov	r0, s16
 800a69e:	f000 ff41 	bl	800b524 <__mcmp>
 800a6a2:	4602      	mov	r2, r0
 800a6a4:	4629      	mov	r1, r5
 800a6a6:	4620      	mov	r0, r4
 800a6a8:	9207      	str	r2, [sp, #28]
 800a6aa:	f000 fcaf 	bl	800b00c <_Bfree>
 800a6ae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a6b2:	ea43 0102 	orr.w	r1, r3, r2
 800a6b6:	9b04      	ldr	r3, [sp, #16]
 800a6b8:	430b      	orrs	r3, r1
 800a6ba:	464d      	mov	r5, r9
 800a6bc:	d10f      	bne.n	800a6de <_dtoa_r+0xa66>
 800a6be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a6c2:	d02a      	beq.n	800a71a <_dtoa_r+0xaa2>
 800a6c4:	9b03      	ldr	r3, [sp, #12]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	dd02      	ble.n	800a6d0 <_dtoa_r+0xa58>
 800a6ca:	9b02      	ldr	r3, [sp, #8]
 800a6cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a6d0:	f88b a000 	strb.w	sl, [fp]
 800a6d4:	e775      	b.n	800a5c2 <_dtoa_r+0x94a>
 800a6d6:	4638      	mov	r0, r7
 800a6d8:	e7ba      	b.n	800a650 <_dtoa_r+0x9d8>
 800a6da:	2201      	movs	r2, #1
 800a6dc:	e7e2      	b.n	800a6a4 <_dtoa_r+0xa2c>
 800a6de:	9b03      	ldr	r3, [sp, #12]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	db04      	blt.n	800a6ee <_dtoa_r+0xa76>
 800a6e4:	9906      	ldr	r1, [sp, #24]
 800a6e6:	430b      	orrs	r3, r1
 800a6e8:	9904      	ldr	r1, [sp, #16]
 800a6ea:	430b      	orrs	r3, r1
 800a6ec:	d122      	bne.n	800a734 <_dtoa_r+0xabc>
 800a6ee:	2a00      	cmp	r2, #0
 800a6f0:	ddee      	ble.n	800a6d0 <_dtoa_r+0xa58>
 800a6f2:	ee18 1a10 	vmov	r1, s16
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	f000 fea3 	bl	800b444 <__lshift>
 800a6fe:	4631      	mov	r1, r6
 800a700:	ee08 0a10 	vmov	s16, r0
 800a704:	f000 ff0e 	bl	800b524 <__mcmp>
 800a708:	2800      	cmp	r0, #0
 800a70a:	dc03      	bgt.n	800a714 <_dtoa_r+0xa9c>
 800a70c:	d1e0      	bne.n	800a6d0 <_dtoa_r+0xa58>
 800a70e:	f01a 0f01 	tst.w	sl, #1
 800a712:	d0dd      	beq.n	800a6d0 <_dtoa_r+0xa58>
 800a714:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a718:	d1d7      	bne.n	800a6ca <_dtoa_r+0xa52>
 800a71a:	2339      	movs	r3, #57	; 0x39
 800a71c:	f88b 3000 	strb.w	r3, [fp]
 800a720:	462b      	mov	r3, r5
 800a722:	461d      	mov	r5, r3
 800a724:	3b01      	subs	r3, #1
 800a726:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a72a:	2a39      	cmp	r2, #57	; 0x39
 800a72c:	d071      	beq.n	800a812 <_dtoa_r+0xb9a>
 800a72e:	3201      	adds	r2, #1
 800a730:	701a      	strb	r2, [r3, #0]
 800a732:	e746      	b.n	800a5c2 <_dtoa_r+0x94a>
 800a734:	2a00      	cmp	r2, #0
 800a736:	dd07      	ble.n	800a748 <_dtoa_r+0xad0>
 800a738:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a73c:	d0ed      	beq.n	800a71a <_dtoa_r+0xaa2>
 800a73e:	f10a 0301 	add.w	r3, sl, #1
 800a742:	f88b 3000 	strb.w	r3, [fp]
 800a746:	e73c      	b.n	800a5c2 <_dtoa_r+0x94a>
 800a748:	9b05      	ldr	r3, [sp, #20]
 800a74a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a74e:	4599      	cmp	r9, r3
 800a750:	d047      	beq.n	800a7e2 <_dtoa_r+0xb6a>
 800a752:	ee18 1a10 	vmov	r1, s16
 800a756:	2300      	movs	r3, #0
 800a758:	220a      	movs	r2, #10
 800a75a:	4620      	mov	r0, r4
 800a75c:	f000 fc78 	bl	800b050 <__multadd>
 800a760:	45b8      	cmp	r8, r7
 800a762:	ee08 0a10 	vmov	s16, r0
 800a766:	f04f 0300 	mov.w	r3, #0
 800a76a:	f04f 020a 	mov.w	r2, #10
 800a76e:	4641      	mov	r1, r8
 800a770:	4620      	mov	r0, r4
 800a772:	d106      	bne.n	800a782 <_dtoa_r+0xb0a>
 800a774:	f000 fc6c 	bl	800b050 <__multadd>
 800a778:	4680      	mov	r8, r0
 800a77a:	4607      	mov	r7, r0
 800a77c:	f109 0901 	add.w	r9, r9, #1
 800a780:	e772      	b.n	800a668 <_dtoa_r+0x9f0>
 800a782:	f000 fc65 	bl	800b050 <__multadd>
 800a786:	4639      	mov	r1, r7
 800a788:	4680      	mov	r8, r0
 800a78a:	2300      	movs	r3, #0
 800a78c:	220a      	movs	r2, #10
 800a78e:	4620      	mov	r0, r4
 800a790:	f000 fc5e 	bl	800b050 <__multadd>
 800a794:	4607      	mov	r7, r0
 800a796:	e7f1      	b.n	800a77c <_dtoa_r+0xb04>
 800a798:	9b03      	ldr	r3, [sp, #12]
 800a79a:	9302      	str	r3, [sp, #8]
 800a79c:	9d01      	ldr	r5, [sp, #4]
 800a79e:	ee18 0a10 	vmov	r0, s16
 800a7a2:	4631      	mov	r1, r6
 800a7a4:	f7ff f9dc 	bl	8009b60 <quorem>
 800a7a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a7ac:	9b01      	ldr	r3, [sp, #4]
 800a7ae:	f805 ab01 	strb.w	sl, [r5], #1
 800a7b2:	1aea      	subs	r2, r5, r3
 800a7b4:	9b02      	ldr	r3, [sp, #8]
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	dd09      	ble.n	800a7ce <_dtoa_r+0xb56>
 800a7ba:	ee18 1a10 	vmov	r1, s16
 800a7be:	2300      	movs	r3, #0
 800a7c0:	220a      	movs	r2, #10
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	f000 fc44 	bl	800b050 <__multadd>
 800a7c8:	ee08 0a10 	vmov	s16, r0
 800a7cc:	e7e7      	b.n	800a79e <_dtoa_r+0xb26>
 800a7ce:	9b02      	ldr	r3, [sp, #8]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	bfc8      	it	gt
 800a7d4:	461d      	movgt	r5, r3
 800a7d6:	9b01      	ldr	r3, [sp, #4]
 800a7d8:	bfd8      	it	le
 800a7da:	2501      	movle	r5, #1
 800a7dc:	441d      	add	r5, r3
 800a7de:	f04f 0800 	mov.w	r8, #0
 800a7e2:	ee18 1a10 	vmov	r1, s16
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	4620      	mov	r0, r4
 800a7ea:	f000 fe2b 	bl	800b444 <__lshift>
 800a7ee:	4631      	mov	r1, r6
 800a7f0:	ee08 0a10 	vmov	s16, r0
 800a7f4:	f000 fe96 	bl	800b524 <__mcmp>
 800a7f8:	2800      	cmp	r0, #0
 800a7fa:	dc91      	bgt.n	800a720 <_dtoa_r+0xaa8>
 800a7fc:	d102      	bne.n	800a804 <_dtoa_r+0xb8c>
 800a7fe:	f01a 0f01 	tst.w	sl, #1
 800a802:	d18d      	bne.n	800a720 <_dtoa_r+0xaa8>
 800a804:	462b      	mov	r3, r5
 800a806:	461d      	mov	r5, r3
 800a808:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a80c:	2a30      	cmp	r2, #48	; 0x30
 800a80e:	d0fa      	beq.n	800a806 <_dtoa_r+0xb8e>
 800a810:	e6d7      	b.n	800a5c2 <_dtoa_r+0x94a>
 800a812:	9a01      	ldr	r2, [sp, #4]
 800a814:	429a      	cmp	r2, r3
 800a816:	d184      	bne.n	800a722 <_dtoa_r+0xaaa>
 800a818:	9b00      	ldr	r3, [sp, #0]
 800a81a:	3301      	adds	r3, #1
 800a81c:	9300      	str	r3, [sp, #0]
 800a81e:	2331      	movs	r3, #49	; 0x31
 800a820:	7013      	strb	r3, [r2, #0]
 800a822:	e6ce      	b.n	800a5c2 <_dtoa_r+0x94a>
 800a824:	4b09      	ldr	r3, [pc, #36]	; (800a84c <_dtoa_r+0xbd4>)
 800a826:	f7ff ba95 	b.w	8009d54 <_dtoa_r+0xdc>
 800a82a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	f47f aa6e 	bne.w	8009d0e <_dtoa_r+0x96>
 800a832:	4b07      	ldr	r3, [pc, #28]	; (800a850 <_dtoa_r+0xbd8>)
 800a834:	f7ff ba8e 	b.w	8009d54 <_dtoa_r+0xdc>
 800a838:	9b02      	ldr	r3, [sp, #8]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	dcae      	bgt.n	800a79c <_dtoa_r+0xb24>
 800a83e:	9b06      	ldr	r3, [sp, #24]
 800a840:	2b02      	cmp	r3, #2
 800a842:	f73f aea8 	bgt.w	800a596 <_dtoa_r+0x91e>
 800a846:	e7a9      	b.n	800a79c <_dtoa_r+0xb24>
 800a848:	0800d008 	.word	0x0800d008
 800a84c:	0800ce0c 	.word	0x0800ce0c
 800a850:	0800cf89 	.word	0x0800cf89

0800a854 <rshift>:
 800a854:	6903      	ldr	r3, [r0, #16]
 800a856:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a85a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a85e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a862:	f100 0414 	add.w	r4, r0, #20
 800a866:	dd45      	ble.n	800a8f4 <rshift+0xa0>
 800a868:	f011 011f 	ands.w	r1, r1, #31
 800a86c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a870:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a874:	d10c      	bne.n	800a890 <rshift+0x3c>
 800a876:	f100 0710 	add.w	r7, r0, #16
 800a87a:	4629      	mov	r1, r5
 800a87c:	42b1      	cmp	r1, r6
 800a87e:	d334      	bcc.n	800a8ea <rshift+0x96>
 800a880:	1a9b      	subs	r3, r3, r2
 800a882:	009b      	lsls	r3, r3, #2
 800a884:	1eea      	subs	r2, r5, #3
 800a886:	4296      	cmp	r6, r2
 800a888:	bf38      	it	cc
 800a88a:	2300      	movcc	r3, #0
 800a88c:	4423      	add	r3, r4
 800a88e:	e015      	b.n	800a8bc <rshift+0x68>
 800a890:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a894:	f1c1 0820 	rsb	r8, r1, #32
 800a898:	40cf      	lsrs	r7, r1
 800a89a:	f105 0e04 	add.w	lr, r5, #4
 800a89e:	46a1      	mov	r9, r4
 800a8a0:	4576      	cmp	r6, lr
 800a8a2:	46f4      	mov	ip, lr
 800a8a4:	d815      	bhi.n	800a8d2 <rshift+0x7e>
 800a8a6:	1a9a      	subs	r2, r3, r2
 800a8a8:	0092      	lsls	r2, r2, #2
 800a8aa:	3a04      	subs	r2, #4
 800a8ac:	3501      	adds	r5, #1
 800a8ae:	42ae      	cmp	r6, r5
 800a8b0:	bf38      	it	cc
 800a8b2:	2200      	movcc	r2, #0
 800a8b4:	18a3      	adds	r3, r4, r2
 800a8b6:	50a7      	str	r7, [r4, r2]
 800a8b8:	b107      	cbz	r7, 800a8bc <rshift+0x68>
 800a8ba:	3304      	adds	r3, #4
 800a8bc:	1b1a      	subs	r2, r3, r4
 800a8be:	42a3      	cmp	r3, r4
 800a8c0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a8c4:	bf08      	it	eq
 800a8c6:	2300      	moveq	r3, #0
 800a8c8:	6102      	str	r2, [r0, #16]
 800a8ca:	bf08      	it	eq
 800a8cc:	6143      	streq	r3, [r0, #20]
 800a8ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8d2:	f8dc c000 	ldr.w	ip, [ip]
 800a8d6:	fa0c fc08 	lsl.w	ip, ip, r8
 800a8da:	ea4c 0707 	orr.w	r7, ip, r7
 800a8de:	f849 7b04 	str.w	r7, [r9], #4
 800a8e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a8e6:	40cf      	lsrs	r7, r1
 800a8e8:	e7da      	b.n	800a8a0 <rshift+0x4c>
 800a8ea:	f851 cb04 	ldr.w	ip, [r1], #4
 800a8ee:	f847 cf04 	str.w	ip, [r7, #4]!
 800a8f2:	e7c3      	b.n	800a87c <rshift+0x28>
 800a8f4:	4623      	mov	r3, r4
 800a8f6:	e7e1      	b.n	800a8bc <rshift+0x68>

0800a8f8 <__hexdig_fun>:
 800a8f8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a8fc:	2b09      	cmp	r3, #9
 800a8fe:	d802      	bhi.n	800a906 <__hexdig_fun+0xe>
 800a900:	3820      	subs	r0, #32
 800a902:	b2c0      	uxtb	r0, r0
 800a904:	4770      	bx	lr
 800a906:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a90a:	2b05      	cmp	r3, #5
 800a90c:	d801      	bhi.n	800a912 <__hexdig_fun+0x1a>
 800a90e:	3847      	subs	r0, #71	; 0x47
 800a910:	e7f7      	b.n	800a902 <__hexdig_fun+0xa>
 800a912:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a916:	2b05      	cmp	r3, #5
 800a918:	d801      	bhi.n	800a91e <__hexdig_fun+0x26>
 800a91a:	3827      	subs	r0, #39	; 0x27
 800a91c:	e7f1      	b.n	800a902 <__hexdig_fun+0xa>
 800a91e:	2000      	movs	r0, #0
 800a920:	4770      	bx	lr
	...

0800a924 <__gethex>:
 800a924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a928:	ed2d 8b02 	vpush	{d8}
 800a92c:	b089      	sub	sp, #36	; 0x24
 800a92e:	ee08 0a10 	vmov	s16, r0
 800a932:	9304      	str	r3, [sp, #16]
 800a934:	4bb4      	ldr	r3, [pc, #720]	; (800ac08 <__gethex+0x2e4>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	9301      	str	r3, [sp, #4]
 800a93a:	4618      	mov	r0, r3
 800a93c:	468b      	mov	fp, r1
 800a93e:	4690      	mov	r8, r2
 800a940:	f7f5 fc46 	bl	80001d0 <strlen>
 800a944:	9b01      	ldr	r3, [sp, #4]
 800a946:	f8db 2000 	ldr.w	r2, [fp]
 800a94a:	4403      	add	r3, r0
 800a94c:	4682      	mov	sl, r0
 800a94e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a952:	9305      	str	r3, [sp, #20]
 800a954:	1c93      	adds	r3, r2, #2
 800a956:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a95a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a95e:	32fe      	adds	r2, #254	; 0xfe
 800a960:	18d1      	adds	r1, r2, r3
 800a962:	461f      	mov	r7, r3
 800a964:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a968:	9100      	str	r1, [sp, #0]
 800a96a:	2830      	cmp	r0, #48	; 0x30
 800a96c:	d0f8      	beq.n	800a960 <__gethex+0x3c>
 800a96e:	f7ff ffc3 	bl	800a8f8 <__hexdig_fun>
 800a972:	4604      	mov	r4, r0
 800a974:	2800      	cmp	r0, #0
 800a976:	d13a      	bne.n	800a9ee <__gethex+0xca>
 800a978:	9901      	ldr	r1, [sp, #4]
 800a97a:	4652      	mov	r2, sl
 800a97c:	4638      	mov	r0, r7
 800a97e:	f001 fa33 	bl	800bde8 <strncmp>
 800a982:	4605      	mov	r5, r0
 800a984:	2800      	cmp	r0, #0
 800a986:	d168      	bne.n	800aa5a <__gethex+0x136>
 800a988:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a98c:	eb07 060a 	add.w	r6, r7, sl
 800a990:	f7ff ffb2 	bl	800a8f8 <__hexdig_fun>
 800a994:	2800      	cmp	r0, #0
 800a996:	d062      	beq.n	800aa5e <__gethex+0x13a>
 800a998:	4633      	mov	r3, r6
 800a99a:	7818      	ldrb	r0, [r3, #0]
 800a99c:	2830      	cmp	r0, #48	; 0x30
 800a99e:	461f      	mov	r7, r3
 800a9a0:	f103 0301 	add.w	r3, r3, #1
 800a9a4:	d0f9      	beq.n	800a99a <__gethex+0x76>
 800a9a6:	f7ff ffa7 	bl	800a8f8 <__hexdig_fun>
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	fab0 f480 	clz	r4, r0
 800a9b0:	0964      	lsrs	r4, r4, #5
 800a9b2:	4635      	mov	r5, r6
 800a9b4:	9300      	str	r3, [sp, #0]
 800a9b6:	463a      	mov	r2, r7
 800a9b8:	4616      	mov	r6, r2
 800a9ba:	3201      	adds	r2, #1
 800a9bc:	7830      	ldrb	r0, [r6, #0]
 800a9be:	f7ff ff9b 	bl	800a8f8 <__hexdig_fun>
 800a9c2:	2800      	cmp	r0, #0
 800a9c4:	d1f8      	bne.n	800a9b8 <__gethex+0x94>
 800a9c6:	9901      	ldr	r1, [sp, #4]
 800a9c8:	4652      	mov	r2, sl
 800a9ca:	4630      	mov	r0, r6
 800a9cc:	f001 fa0c 	bl	800bde8 <strncmp>
 800a9d0:	b980      	cbnz	r0, 800a9f4 <__gethex+0xd0>
 800a9d2:	b94d      	cbnz	r5, 800a9e8 <__gethex+0xc4>
 800a9d4:	eb06 050a 	add.w	r5, r6, sl
 800a9d8:	462a      	mov	r2, r5
 800a9da:	4616      	mov	r6, r2
 800a9dc:	3201      	adds	r2, #1
 800a9de:	7830      	ldrb	r0, [r6, #0]
 800a9e0:	f7ff ff8a 	bl	800a8f8 <__hexdig_fun>
 800a9e4:	2800      	cmp	r0, #0
 800a9e6:	d1f8      	bne.n	800a9da <__gethex+0xb6>
 800a9e8:	1bad      	subs	r5, r5, r6
 800a9ea:	00ad      	lsls	r5, r5, #2
 800a9ec:	e004      	b.n	800a9f8 <__gethex+0xd4>
 800a9ee:	2400      	movs	r4, #0
 800a9f0:	4625      	mov	r5, r4
 800a9f2:	e7e0      	b.n	800a9b6 <__gethex+0x92>
 800a9f4:	2d00      	cmp	r5, #0
 800a9f6:	d1f7      	bne.n	800a9e8 <__gethex+0xc4>
 800a9f8:	7833      	ldrb	r3, [r6, #0]
 800a9fa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a9fe:	2b50      	cmp	r3, #80	; 0x50
 800aa00:	d13b      	bne.n	800aa7a <__gethex+0x156>
 800aa02:	7873      	ldrb	r3, [r6, #1]
 800aa04:	2b2b      	cmp	r3, #43	; 0x2b
 800aa06:	d02c      	beq.n	800aa62 <__gethex+0x13e>
 800aa08:	2b2d      	cmp	r3, #45	; 0x2d
 800aa0a:	d02e      	beq.n	800aa6a <__gethex+0x146>
 800aa0c:	1c71      	adds	r1, r6, #1
 800aa0e:	f04f 0900 	mov.w	r9, #0
 800aa12:	7808      	ldrb	r0, [r1, #0]
 800aa14:	f7ff ff70 	bl	800a8f8 <__hexdig_fun>
 800aa18:	1e43      	subs	r3, r0, #1
 800aa1a:	b2db      	uxtb	r3, r3
 800aa1c:	2b18      	cmp	r3, #24
 800aa1e:	d82c      	bhi.n	800aa7a <__gethex+0x156>
 800aa20:	f1a0 0210 	sub.w	r2, r0, #16
 800aa24:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aa28:	f7ff ff66 	bl	800a8f8 <__hexdig_fun>
 800aa2c:	1e43      	subs	r3, r0, #1
 800aa2e:	b2db      	uxtb	r3, r3
 800aa30:	2b18      	cmp	r3, #24
 800aa32:	d91d      	bls.n	800aa70 <__gethex+0x14c>
 800aa34:	f1b9 0f00 	cmp.w	r9, #0
 800aa38:	d000      	beq.n	800aa3c <__gethex+0x118>
 800aa3a:	4252      	negs	r2, r2
 800aa3c:	4415      	add	r5, r2
 800aa3e:	f8cb 1000 	str.w	r1, [fp]
 800aa42:	b1e4      	cbz	r4, 800aa7e <__gethex+0x15a>
 800aa44:	9b00      	ldr	r3, [sp, #0]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	bf14      	ite	ne
 800aa4a:	2700      	movne	r7, #0
 800aa4c:	2706      	moveq	r7, #6
 800aa4e:	4638      	mov	r0, r7
 800aa50:	b009      	add	sp, #36	; 0x24
 800aa52:	ecbd 8b02 	vpop	{d8}
 800aa56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa5a:	463e      	mov	r6, r7
 800aa5c:	4625      	mov	r5, r4
 800aa5e:	2401      	movs	r4, #1
 800aa60:	e7ca      	b.n	800a9f8 <__gethex+0xd4>
 800aa62:	f04f 0900 	mov.w	r9, #0
 800aa66:	1cb1      	adds	r1, r6, #2
 800aa68:	e7d3      	b.n	800aa12 <__gethex+0xee>
 800aa6a:	f04f 0901 	mov.w	r9, #1
 800aa6e:	e7fa      	b.n	800aa66 <__gethex+0x142>
 800aa70:	230a      	movs	r3, #10
 800aa72:	fb03 0202 	mla	r2, r3, r2, r0
 800aa76:	3a10      	subs	r2, #16
 800aa78:	e7d4      	b.n	800aa24 <__gethex+0x100>
 800aa7a:	4631      	mov	r1, r6
 800aa7c:	e7df      	b.n	800aa3e <__gethex+0x11a>
 800aa7e:	1bf3      	subs	r3, r6, r7
 800aa80:	3b01      	subs	r3, #1
 800aa82:	4621      	mov	r1, r4
 800aa84:	2b07      	cmp	r3, #7
 800aa86:	dc0b      	bgt.n	800aaa0 <__gethex+0x17c>
 800aa88:	ee18 0a10 	vmov	r0, s16
 800aa8c:	f000 fa7e 	bl	800af8c <_Balloc>
 800aa90:	4604      	mov	r4, r0
 800aa92:	b940      	cbnz	r0, 800aaa6 <__gethex+0x182>
 800aa94:	4b5d      	ldr	r3, [pc, #372]	; (800ac0c <__gethex+0x2e8>)
 800aa96:	4602      	mov	r2, r0
 800aa98:	21de      	movs	r1, #222	; 0xde
 800aa9a:	485d      	ldr	r0, [pc, #372]	; (800ac10 <__gethex+0x2ec>)
 800aa9c:	f001 f9c6 	bl	800be2c <__assert_func>
 800aaa0:	3101      	adds	r1, #1
 800aaa2:	105b      	asrs	r3, r3, #1
 800aaa4:	e7ee      	b.n	800aa84 <__gethex+0x160>
 800aaa6:	f100 0914 	add.w	r9, r0, #20
 800aaaa:	f04f 0b00 	mov.w	fp, #0
 800aaae:	f1ca 0301 	rsb	r3, sl, #1
 800aab2:	f8cd 9008 	str.w	r9, [sp, #8]
 800aab6:	f8cd b000 	str.w	fp, [sp]
 800aaba:	9306      	str	r3, [sp, #24]
 800aabc:	42b7      	cmp	r7, r6
 800aabe:	d340      	bcc.n	800ab42 <__gethex+0x21e>
 800aac0:	9802      	ldr	r0, [sp, #8]
 800aac2:	9b00      	ldr	r3, [sp, #0]
 800aac4:	f840 3b04 	str.w	r3, [r0], #4
 800aac8:	eba0 0009 	sub.w	r0, r0, r9
 800aacc:	1080      	asrs	r0, r0, #2
 800aace:	0146      	lsls	r6, r0, #5
 800aad0:	6120      	str	r0, [r4, #16]
 800aad2:	4618      	mov	r0, r3
 800aad4:	f000 fb4c 	bl	800b170 <__hi0bits>
 800aad8:	1a30      	subs	r0, r6, r0
 800aada:	f8d8 6000 	ldr.w	r6, [r8]
 800aade:	42b0      	cmp	r0, r6
 800aae0:	dd63      	ble.n	800abaa <__gethex+0x286>
 800aae2:	1b87      	subs	r7, r0, r6
 800aae4:	4639      	mov	r1, r7
 800aae6:	4620      	mov	r0, r4
 800aae8:	f000 fef0 	bl	800b8cc <__any_on>
 800aaec:	4682      	mov	sl, r0
 800aaee:	b1a8      	cbz	r0, 800ab1c <__gethex+0x1f8>
 800aaf0:	1e7b      	subs	r3, r7, #1
 800aaf2:	1159      	asrs	r1, r3, #5
 800aaf4:	f003 021f 	and.w	r2, r3, #31
 800aaf8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800aafc:	f04f 0a01 	mov.w	sl, #1
 800ab00:	fa0a f202 	lsl.w	r2, sl, r2
 800ab04:	420a      	tst	r2, r1
 800ab06:	d009      	beq.n	800ab1c <__gethex+0x1f8>
 800ab08:	4553      	cmp	r3, sl
 800ab0a:	dd05      	ble.n	800ab18 <__gethex+0x1f4>
 800ab0c:	1eb9      	subs	r1, r7, #2
 800ab0e:	4620      	mov	r0, r4
 800ab10:	f000 fedc 	bl	800b8cc <__any_on>
 800ab14:	2800      	cmp	r0, #0
 800ab16:	d145      	bne.n	800aba4 <__gethex+0x280>
 800ab18:	f04f 0a02 	mov.w	sl, #2
 800ab1c:	4639      	mov	r1, r7
 800ab1e:	4620      	mov	r0, r4
 800ab20:	f7ff fe98 	bl	800a854 <rshift>
 800ab24:	443d      	add	r5, r7
 800ab26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ab2a:	42ab      	cmp	r3, r5
 800ab2c:	da4c      	bge.n	800abc8 <__gethex+0x2a4>
 800ab2e:	ee18 0a10 	vmov	r0, s16
 800ab32:	4621      	mov	r1, r4
 800ab34:	f000 fa6a 	bl	800b00c <_Bfree>
 800ab38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	6013      	str	r3, [r2, #0]
 800ab3e:	27a3      	movs	r7, #163	; 0xa3
 800ab40:	e785      	b.n	800aa4e <__gethex+0x12a>
 800ab42:	1e73      	subs	r3, r6, #1
 800ab44:	9a05      	ldr	r2, [sp, #20]
 800ab46:	9303      	str	r3, [sp, #12]
 800ab48:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d019      	beq.n	800ab84 <__gethex+0x260>
 800ab50:	f1bb 0f20 	cmp.w	fp, #32
 800ab54:	d107      	bne.n	800ab66 <__gethex+0x242>
 800ab56:	9b02      	ldr	r3, [sp, #8]
 800ab58:	9a00      	ldr	r2, [sp, #0]
 800ab5a:	f843 2b04 	str.w	r2, [r3], #4
 800ab5e:	9302      	str	r3, [sp, #8]
 800ab60:	2300      	movs	r3, #0
 800ab62:	9300      	str	r3, [sp, #0]
 800ab64:	469b      	mov	fp, r3
 800ab66:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ab6a:	f7ff fec5 	bl	800a8f8 <__hexdig_fun>
 800ab6e:	9b00      	ldr	r3, [sp, #0]
 800ab70:	f000 000f 	and.w	r0, r0, #15
 800ab74:	fa00 f00b 	lsl.w	r0, r0, fp
 800ab78:	4303      	orrs	r3, r0
 800ab7a:	9300      	str	r3, [sp, #0]
 800ab7c:	f10b 0b04 	add.w	fp, fp, #4
 800ab80:	9b03      	ldr	r3, [sp, #12]
 800ab82:	e00d      	b.n	800aba0 <__gethex+0x27c>
 800ab84:	9b03      	ldr	r3, [sp, #12]
 800ab86:	9a06      	ldr	r2, [sp, #24]
 800ab88:	4413      	add	r3, r2
 800ab8a:	42bb      	cmp	r3, r7
 800ab8c:	d3e0      	bcc.n	800ab50 <__gethex+0x22c>
 800ab8e:	4618      	mov	r0, r3
 800ab90:	9901      	ldr	r1, [sp, #4]
 800ab92:	9307      	str	r3, [sp, #28]
 800ab94:	4652      	mov	r2, sl
 800ab96:	f001 f927 	bl	800bde8 <strncmp>
 800ab9a:	9b07      	ldr	r3, [sp, #28]
 800ab9c:	2800      	cmp	r0, #0
 800ab9e:	d1d7      	bne.n	800ab50 <__gethex+0x22c>
 800aba0:	461e      	mov	r6, r3
 800aba2:	e78b      	b.n	800aabc <__gethex+0x198>
 800aba4:	f04f 0a03 	mov.w	sl, #3
 800aba8:	e7b8      	b.n	800ab1c <__gethex+0x1f8>
 800abaa:	da0a      	bge.n	800abc2 <__gethex+0x29e>
 800abac:	1a37      	subs	r7, r6, r0
 800abae:	4621      	mov	r1, r4
 800abb0:	ee18 0a10 	vmov	r0, s16
 800abb4:	463a      	mov	r2, r7
 800abb6:	f000 fc45 	bl	800b444 <__lshift>
 800abba:	1bed      	subs	r5, r5, r7
 800abbc:	4604      	mov	r4, r0
 800abbe:	f100 0914 	add.w	r9, r0, #20
 800abc2:	f04f 0a00 	mov.w	sl, #0
 800abc6:	e7ae      	b.n	800ab26 <__gethex+0x202>
 800abc8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800abcc:	42a8      	cmp	r0, r5
 800abce:	dd72      	ble.n	800acb6 <__gethex+0x392>
 800abd0:	1b45      	subs	r5, r0, r5
 800abd2:	42ae      	cmp	r6, r5
 800abd4:	dc36      	bgt.n	800ac44 <__gethex+0x320>
 800abd6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800abda:	2b02      	cmp	r3, #2
 800abdc:	d02a      	beq.n	800ac34 <__gethex+0x310>
 800abde:	2b03      	cmp	r3, #3
 800abe0:	d02c      	beq.n	800ac3c <__gethex+0x318>
 800abe2:	2b01      	cmp	r3, #1
 800abe4:	d11c      	bne.n	800ac20 <__gethex+0x2fc>
 800abe6:	42ae      	cmp	r6, r5
 800abe8:	d11a      	bne.n	800ac20 <__gethex+0x2fc>
 800abea:	2e01      	cmp	r6, #1
 800abec:	d112      	bne.n	800ac14 <__gethex+0x2f0>
 800abee:	9a04      	ldr	r2, [sp, #16]
 800abf0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800abf4:	6013      	str	r3, [r2, #0]
 800abf6:	2301      	movs	r3, #1
 800abf8:	6123      	str	r3, [r4, #16]
 800abfa:	f8c9 3000 	str.w	r3, [r9]
 800abfe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac00:	2762      	movs	r7, #98	; 0x62
 800ac02:	601c      	str	r4, [r3, #0]
 800ac04:	e723      	b.n	800aa4e <__gethex+0x12a>
 800ac06:	bf00      	nop
 800ac08:	0800d080 	.word	0x0800d080
 800ac0c:	0800d008 	.word	0x0800d008
 800ac10:	0800d019 	.word	0x0800d019
 800ac14:	1e71      	subs	r1, r6, #1
 800ac16:	4620      	mov	r0, r4
 800ac18:	f000 fe58 	bl	800b8cc <__any_on>
 800ac1c:	2800      	cmp	r0, #0
 800ac1e:	d1e6      	bne.n	800abee <__gethex+0x2ca>
 800ac20:	ee18 0a10 	vmov	r0, s16
 800ac24:	4621      	mov	r1, r4
 800ac26:	f000 f9f1 	bl	800b00c <_Bfree>
 800ac2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	6013      	str	r3, [r2, #0]
 800ac30:	2750      	movs	r7, #80	; 0x50
 800ac32:	e70c      	b.n	800aa4e <__gethex+0x12a>
 800ac34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d1f2      	bne.n	800ac20 <__gethex+0x2fc>
 800ac3a:	e7d8      	b.n	800abee <__gethex+0x2ca>
 800ac3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d1d5      	bne.n	800abee <__gethex+0x2ca>
 800ac42:	e7ed      	b.n	800ac20 <__gethex+0x2fc>
 800ac44:	1e6f      	subs	r7, r5, #1
 800ac46:	f1ba 0f00 	cmp.w	sl, #0
 800ac4a:	d131      	bne.n	800acb0 <__gethex+0x38c>
 800ac4c:	b127      	cbz	r7, 800ac58 <__gethex+0x334>
 800ac4e:	4639      	mov	r1, r7
 800ac50:	4620      	mov	r0, r4
 800ac52:	f000 fe3b 	bl	800b8cc <__any_on>
 800ac56:	4682      	mov	sl, r0
 800ac58:	117b      	asrs	r3, r7, #5
 800ac5a:	2101      	movs	r1, #1
 800ac5c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ac60:	f007 071f 	and.w	r7, r7, #31
 800ac64:	fa01 f707 	lsl.w	r7, r1, r7
 800ac68:	421f      	tst	r7, r3
 800ac6a:	4629      	mov	r1, r5
 800ac6c:	4620      	mov	r0, r4
 800ac6e:	bf18      	it	ne
 800ac70:	f04a 0a02 	orrne.w	sl, sl, #2
 800ac74:	1b76      	subs	r6, r6, r5
 800ac76:	f7ff fded 	bl	800a854 <rshift>
 800ac7a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ac7e:	2702      	movs	r7, #2
 800ac80:	f1ba 0f00 	cmp.w	sl, #0
 800ac84:	d048      	beq.n	800ad18 <__gethex+0x3f4>
 800ac86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ac8a:	2b02      	cmp	r3, #2
 800ac8c:	d015      	beq.n	800acba <__gethex+0x396>
 800ac8e:	2b03      	cmp	r3, #3
 800ac90:	d017      	beq.n	800acc2 <__gethex+0x39e>
 800ac92:	2b01      	cmp	r3, #1
 800ac94:	d109      	bne.n	800acaa <__gethex+0x386>
 800ac96:	f01a 0f02 	tst.w	sl, #2
 800ac9a:	d006      	beq.n	800acaa <__gethex+0x386>
 800ac9c:	f8d9 0000 	ldr.w	r0, [r9]
 800aca0:	ea4a 0a00 	orr.w	sl, sl, r0
 800aca4:	f01a 0f01 	tst.w	sl, #1
 800aca8:	d10e      	bne.n	800acc8 <__gethex+0x3a4>
 800acaa:	f047 0710 	orr.w	r7, r7, #16
 800acae:	e033      	b.n	800ad18 <__gethex+0x3f4>
 800acb0:	f04f 0a01 	mov.w	sl, #1
 800acb4:	e7d0      	b.n	800ac58 <__gethex+0x334>
 800acb6:	2701      	movs	r7, #1
 800acb8:	e7e2      	b.n	800ac80 <__gethex+0x35c>
 800acba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800acbc:	f1c3 0301 	rsb	r3, r3, #1
 800acc0:	9315      	str	r3, [sp, #84]	; 0x54
 800acc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d0f0      	beq.n	800acaa <__gethex+0x386>
 800acc8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800accc:	f104 0314 	add.w	r3, r4, #20
 800acd0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800acd4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800acd8:	f04f 0c00 	mov.w	ip, #0
 800acdc:	4618      	mov	r0, r3
 800acde:	f853 2b04 	ldr.w	r2, [r3], #4
 800ace2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ace6:	d01c      	beq.n	800ad22 <__gethex+0x3fe>
 800ace8:	3201      	adds	r2, #1
 800acea:	6002      	str	r2, [r0, #0]
 800acec:	2f02      	cmp	r7, #2
 800acee:	f104 0314 	add.w	r3, r4, #20
 800acf2:	d13f      	bne.n	800ad74 <__gethex+0x450>
 800acf4:	f8d8 2000 	ldr.w	r2, [r8]
 800acf8:	3a01      	subs	r2, #1
 800acfa:	42b2      	cmp	r2, r6
 800acfc:	d10a      	bne.n	800ad14 <__gethex+0x3f0>
 800acfe:	1171      	asrs	r1, r6, #5
 800ad00:	2201      	movs	r2, #1
 800ad02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ad06:	f006 061f 	and.w	r6, r6, #31
 800ad0a:	fa02 f606 	lsl.w	r6, r2, r6
 800ad0e:	421e      	tst	r6, r3
 800ad10:	bf18      	it	ne
 800ad12:	4617      	movne	r7, r2
 800ad14:	f047 0720 	orr.w	r7, r7, #32
 800ad18:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ad1a:	601c      	str	r4, [r3, #0]
 800ad1c:	9b04      	ldr	r3, [sp, #16]
 800ad1e:	601d      	str	r5, [r3, #0]
 800ad20:	e695      	b.n	800aa4e <__gethex+0x12a>
 800ad22:	4299      	cmp	r1, r3
 800ad24:	f843 cc04 	str.w	ip, [r3, #-4]
 800ad28:	d8d8      	bhi.n	800acdc <__gethex+0x3b8>
 800ad2a:	68a3      	ldr	r3, [r4, #8]
 800ad2c:	459b      	cmp	fp, r3
 800ad2e:	db19      	blt.n	800ad64 <__gethex+0x440>
 800ad30:	6861      	ldr	r1, [r4, #4]
 800ad32:	ee18 0a10 	vmov	r0, s16
 800ad36:	3101      	adds	r1, #1
 800ad38:	f000 f928 	bl	800af8c <_Balloc>
 800ad3c:	4681      	mov	r9, r0
 800ad3e:	b918      	cbnz	r0, 800ad48 <__gethex+0x424>
 800ad40:	4b1a      	ldr	r3, [pc, #104]	; (800adac <__gethex+0x488>)
 800ad42:	4602      	mov	r2, r0
 800ad44:	2184      	movs	r1, #132	; 0x84
 800ad46:	e6a8      	b.n	800aa9a <__gethex+0x176>
 800ad48:	6922      	ldr	r2, [r4, #16]
 800ad4a:	3202      	adds	r2, #2
 800ad4c:	f104 010c 	add.w	r1, r4, #12
 800ad50:	0092      	lsls	r2, r2, #2
 800ad52:	300c      	adds	r0, #12
 800ad54:	f000 f90c 	bl	800af70 <memcpy>
 800ad58:	4621      	mov	r1, r4
 800ad5a:	ee18 0a10 	vmov	r0, s16
 800ad5e:	f000 f955 	bl	800b00c <_Bfree>
 800ad62:	464c      	mov	r4, r9
 800ad64:	6923      	ldr	r3, [r4, #16]
 800ad66:	1c5a      	adds	r2, r3, #1
 800ad68:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ad6c:	6122      	str	r2, [r4, #16]
 800ad6e:	2201      	movs	r2, #1
 800ad70:	615a      	str	r2, [r3, #20]
 800ad72:	e7bb      	b.n	800acec <__gethex+0x3c8>
 800ad74:	6922      	ldr	r2, [r4, #16]
 800ad76:	455a      	cmp	r2, fp
 800ad78:	dd0b      	ble.n	800ad92 <__gethex+0x46e>
 800ad7a:	2101      	movs	r1, #1
 800ad7c:	4620      	mov	r0, r4
 800ad7e:	f7ff fd69 	bl	800a854 <rshift>
 800ad82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ad86:	3501      	adds	r5, #1
 800ad88:	42ab      	cmp	r3, r5
 800ad8a:	f6ff aed0 	blt.w	800ab2e <__gethex+0x20a>
 800ad8e:	2701      	movs	r7, #1
 800ad90:	e7c0      	b.n	800ad14 <__gethex+0x3f0>
 800ad92:	f016 061f 	ands.w	r6, r6, #31
 800ad96:	d0fa      	beq.n	800ad8e <__gethex+0x46a>
 800ad98:	4453      	add	r3, sl
 800ad9a:	f1c6 0620 	rsb	r6, r6, #32
 800ad9e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ada2:	f000 f9e5 	bl	800b170 <__hi0bits>
 800ada6:	42b0      	cmp	r0, r6
 800ada8:	dbe7      	blt.n	800ad7a <__gethex+0x456>
 800adaa:	e7f0      	b.n	800ad8e <__gethex+0x46a>
 800adac:	0800d008 	.word	0x0800d008

0800adb0 <L_shift>:
 800adb0:	f1c2 0208 	rsb	r2, r2, #8
 800adb4:	0092      	lsls	r2, r2, #2
 800adb6:	b570      	push	{r4, r5, r6, lr}
 800adb8:	f1c2 0620 	rsb	r6, r2, #32
 800adbc:	6843      	ldr	r3, [r0, #4]
 800adbe:	6804      	ldr	r4, [r0, #0]
 800adc0:	fa03 f506 	lsl.w	r5, r3, r6
 800adc4:	432c      	orrs	r4, r5
 800adc6:	40d3      	lsrs	r3, r2
 800adc8:	6004      	str	r4, [r0, #0]
 800adca:	f840 3f04 	str.w	r3, [r0, #4]!
 800adce:	4288      	cmp	r0, r1
 800add0:	d3f4      	bcc.n	800adbc <L_shift+0xc>
 800add2:	bd70      	pop	{r4, r5, r6, pc}

0800add4 <__match>:
 800add4:	b530      	push	{r4, r5, lr}
 800add6:	6803      	ldr	r3, [r0, #0]
 800add8:	3301      	adds	r3, #1
 800adda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adde:	b914      	cbnz	r4, 800ade6 <__match+0x12>
 800ade0:	6003      	str	r3, [r0, #0]
 800ade2:	2001      	movs	r0, #1
 800ade4:	bd30      	pop	{r4, r5, pc}
 800ade6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800adee:	2d19      	cmp	r5, #25
 800adf0:	bf98      	it	ls
 800adf2:	3220      	addls	r2, #32
 800adf4:	42a2      	cmp	r2, r4
 800adf6:	d0f0      	beq.n	800adda <__match+0x6>
 800adf8:	2000      	movs	r0, #0
 800adfa:	e7f3      	b.n	800ade4 <__match+0x10>

0800adfc <__hexnan>:
 800adfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae00:	680b      	ldr	r3, [r1, #0]
 800ae02:	115e      	asrs	r6, r3, #5
 800ae04:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ae08:	f013 031f 	ands.w	r3, r3, #31
 800ae0c:	b087      	sub	sp, #28
 800ae0e:	bf18      	it	ne
 800ae10:	3604      	addne	r6, #4
 800ae12:	2500      	movs	r5, #0
 800ae14:	1f37      	subs	r7, r6, #4
 800ae16:	4690      	mov	r8, r2
 800ae18:	6802      	ldr	r2, [r0, #0]
 800ae1a:	9301      	str	r3, [sp, #4]
 800ae1c:	4682      	mov	sl, r0
 800ae1e:	f846 5c04 	str.w	r5, [r6, #-4]
 800ae22:	46b9      	mov	r9, r7
 800ae24:	463c      	mov	r4, r7
 800ae26:	9502      	str	r5, [sp, #8]
 800ae28:	46ab      	mov	fp, r5
 800ae2a:	7851      	ldrb	r1, [r2, #1]
 800ae2c:	1c53      	adds	r3, r2, #1
 800ae2e:	9303      	str	r3, [sp, #12]
 800ae30:	b341      	cbz	r1, 800ae84 <__hexnan+0x88>
 800ae32:	4608      	mov	r0, r1
 800ae34:	9205      	str	r2, [sp, #20]
 800ae36:	9104      	str	r1, [sp, #16]
 800ae38:	f7ff fd5e 	bl	800a8f8 <__hexdig_fun>
 800ae3c:	2800      	cmp	r0, #0
 800ae3e:	d14f      	bne.n	800aee0 <__hexnan+0xe4>
 800ae40:	9904      	ldr	r1, [sp, #16]
 800ae42:	9a05      	ldr	r2, [sp, #20]
 800ae44:	2920      	cmp	r1, #32
 800ae46:	d818      	bhi.n	800ae7a <__hexnan+0x7e>
 800ae48:	9b02      	ldr	r3, [sp, #8]
 800ae4a:	459b      	cmp	fp, r3
 800ae4c:	dd13      	ble.n	800ae76 <__hexnan+0x7a>
 800ae4e:	454c      	cmp	r4, r9
 800ae50:	d206      	bcs.n	800ae60 <__hexnan+0x64>
 800ae52:	2d07      	cmp	r5, #7
 800ae54:	dc04      	bgt.n	800ae60 <__hexnan+0x64>
 800ae56:	462a      	mov	r2, r5
 800ae58:	4649      	mov	r1, r9
 800ae5a:	4620      	mov	r0, r4
 800ae5c:	f7ff ffa8 	bl	800adb0 <L_shift>
 800ae60:	4544      	cmp	r4, r8
 800ae62:	d950      	bls.n	800af06 <__hexnan+0x10a>
 800ae64:	2300      	movs	r3, #0
 800ae66:	f1a4 0904 	sub.w	r9, r4, #4
 800ae6a:	f844 3c04 	str.w	r3, [r4, #-4]
 800ae6e:	f8cd b008 	str.w	fp, [sp, #8]
 800ae72:	464c      	mov	r4, r9
 800ae74:	461d      	mov	r5, r3
 800ae76:	9a03      	ldr	r2, [sp, #12]
 800ae78:	e7d7      	b.n	800ae2a <__hexnan+0x2e>
 800ae7a:	2929      	cmp	r1, #41	; 0x29
 800ae7c:	d156      	bne.n	800af2c <__hexnan+0x130>
 800ae7e:	3202      	adds	r2, #2
 800ae80:	f8ca 2000 	str.w	r2, [sl]
 800ae84:	f1bb 0f00 	cmp.w	fp, #0
 800ae88:	d050      	beq.n	800af2c <__hexnan+0x130>
 800ae8a:	454c      	cmp	r4, r9
 800ae8c:	d206      	bcs.n	800ae9c <__hexnan+0xa0>
 800ae8e:	2d07      	cmp	r5, #7
 800ae90:	dc04      	bgt.n	800ae9c <__hexnan+0xa0>
 800ae92:	462a      	mov	r2, r5
 800ae94:	4649      	mov	r1, r9
 800ae96:	4620      	mov	r0, r4
 800ae98:	f7ff ff8a 	bl	800adb0 <L_shift>
 800ae9c:	4544      	cmp	r4, r8
 800ae9e:	d934      	bls.n	800af0a <__hexnan+0x10e>
 800aea0:	f1a8 0204 	sub.w	r2, r8, #4
 800aea4:	4623      	mov	r3, r4
 800aea6:	f853 1b04 	ldr.w	r1, [r3], #4
 800aeaa:	f842 1f04 	str.w	r1, [r2, #4]!
 800aeae:	429f      	cmp	r7, r3
 800aeb0:	d2f9      	bcs.n	800aea6 <__hexnan+0xaa>
 800aeb2:	1b3b      	subs	r3, r7, r4
 800aeb4:	f023 0303 	bic.w	r3, r3, #3
 800aeb8:	3304      	adds	r3, #4
 800aeba:	3401      	adds	r4, #1
 800aebc:	3e03      	subs	r6, #3
 800aebe:	42b4      	cmp	r4, r6
 800aec0:	bf88      	it	hi
 800aec2:	2304      	movhi	r3, #4
 800aec4:	4443      	add	r3, r8
 800aec6:	2200      	movs	r2, #0
 800aec8:	f843 2b04 	str.w	r2, [r3], #4
 800aecc:	429f      	cmp	r7, r3
 800aece:	d2fb      	bcs.n	800aec8 <__hexnan+0xcc>
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	b91b      	cbnz	r3, 800aedc <__hexnan+0xe0>
 800aed4:	4547      	cmp	r7, r8
 800aed6:	d127      	bne.n	800af28 <__hexnan+0x12c>
 800aed8:	2301      	movs	r3, #1
 800aeda:	603b      	str	r3, [r7, #0]
 800aedc:	2005      	movs	r0, #5
 800aede:	e026      	b.n	800af2e <__hexnan+0x132>
 800aee0:	3501      	adds	r5, #1
 800aee2:	2d08      	cmp	r5, #8
 800aee4:	f10b 0b01 	add.w	fp, fp, #1
 800aee8:	dd06      	ble.n	800aef8 <__hexnan+0xfc>
 800aeea:	4544      	cmp	r4, r8
 800aeec:	d9c3      	bls.n	800ae76 <__hexnan+0x7a>
 800aeee:	2300      	movs	r3, #0
 800aef0:	f844 3c04 	str.w	r3, [r4, #-4]
 800aef4:	2501      	movs	r5, #1
 800aef6:	3c04      	subs	r4, #4
 800aef8:	6822      	ldr	r2, [r4, #0]
 800aefa:	f000 000f 	and.w	r0, r0, #15
 800aefe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800af02:	6022      	str	r2, [r4, #0]
 800af04:	e7b7      	b.n	800ae76 <__hexnan+0x7a>
 800af06:	2508      	movs	r5, #8
 800af08:	e7b5      	b.n	800ae76 <__hexnan+0x7a>
 800af0a:	9b01      	ldr	r3, [sp, #4]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d0df      	beq.n	800aed0 <__hexnan+0xd4>
 800af10:	f04f 32ff 	mov.w	r2, #4294967295
 800af14:	f1c3 0320 	rsb	r3, r3, #32
 800af18:	fa22 f303 	lsr.w	r3, r2, r3
 800af1c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800af20:	401a      	ands	r2, r3
 800af22:	f846 2c04 	str.w	r2, [r6, #-4]
 800af26:	e7d3      	b.n	800aed0 <__hexnan+0xd4>
 800af28:	3f04      	subs	r7, #4
 800af2a:	e7d1      	b.n	800aed0 <__hexnan+0xd4>
 800af2c:	2004      	movs	r0, #4
 800af2e:	b007      	add	sp, #28
 800af30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800af34 <_localeconv_r>:
 800af34:	4800      	ldr	r0, [pc, #0]	; (800af38 <_localeconv_r+0x4>)
 800af36:	4770      	bx	lr
 800af38:	20000170 	.word	0x20000170

0800af3c <malloc>:
 800af3c:	4b02      	ldr	r3, [pc, #8]	; (800af48 <malloc+0xc>)
 800af3e:	4601      	mov	r1, r0
 800af40:	6818      	ldr	r0, [r3, #0]
 800af42:	f000 bd67 	b.w	800ba14 <_malloc_r>
 800af46:	bf00      	nop
 800af48:	20000018 	.word	0x20000018

0800af4c <__ascii_mbtowc>:
 800af4c:	b082      	sub	sp, #8
 800af4e:	b901      	cbnz	r1, 800af52 <__ascii_mbtowc+0x6>
 800af50:	a901      	add	r1, sp, #4
 800af52:	b142      	cbz	r2, 800af66 <__ascii_mbtowc+0x1a>
 800af54:	b14b      	cbz	r3, 800af6a <__ascii_mbtowc+0x1e>
 800af56:	7813      	ldrb	r3, [r2, #0]
 800af58:	600b      	str	r3, [r1, #0]
 800af5a:	7812      	ldrb	r2, [r2, #0]
 800af5c:	1e10      	subs	r0, r2, #0
 800af5e:	bf18      	it	ne
 800af60:	2001      	movne	r0, #1
 800af62:	b002      	add	sp, #8
 800af64:	4770      	bx	lr
 800af66:	4610      	mov	r0, r2
 800af68:	e7fb      	b.n	800af62 <__ascii_mbtowc+0x16>
 800af6a:	f06f 0001 	mvn.w	r0, #1
 800af6e:	e7f8      	b.n	800af62 <__ascii_mbtowc+0x16>

0800af70 <memcpy>:
 800af70:	440a      	add	r2, r1
 800af72:	4291      	cmp	r1, r2
 800af74:	f100 33ff 	add.w	r3, r0, #4294967295
 800af78:	d100      	bne.n	800af7c <memcpy+0xc>
 800af7a:	4770      	bx	lr
 800af7c:	b510      	push	{r4, lr}
 800af7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af82:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af86:	4291      	cmp	r1, r2
 800af88:	d1f9      	bne.n	800af7e <memcpy+0xe>
 800af8a:	bd10      	pop	{r4, pc}

0800af8c <_Balloc>:
 800af8c:	b570      	push	{r4, r5, r6, lr}
 800af8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af90:	4604      	mov	r4, r0
 800af92:	460d      	mov	r5, r1
 800af94:	b976      	cbnz	r6, 800afb4 <_Balloc+0x28>
 800af96:	2010      	movs	r0, #16
 800af98:	f7ff ffd0 	bl	800af3c <malloc>
 800af9c:	4602      	mov	r2, r0
 800af9e:	6260      	str	r0, [r4, #36]	; 0x24
 800afa0:	b920      	cbnz	r0, 800afac <_Balloc+0x20>
 800afa2:	4b18      	ldr	r3, [pc, #96]	; (800b004 <_Balloc+0x78>)
 800afa4:	4818      	ldr	r0, [pc, #96]	; (800b008 <_Balloc+0x7c>)
 800afa6:	2166      	movs	r1, #102	; 0x66
 800afa8:	f000 ff40 	bl	800be2c <__assert_func>
 800afac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800afb0:	6006      	str	r6, [r0, #0]
 800afb2:	60c6      	str	r6, [r0, #12]
 800afb4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800afb6:	68f3      	ldr	r3, [r6, #12]
 800afb8:	b183      	cbz	r3, 800afdc <_Balloc+0x50>
 800afba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afbc:	68db      	ldr	r3, [r3, #12]
 800afbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800afc2:	b9b8      	cbnz	r0, 800aff4 <_Balloc+0x68>
 800afc4:	2101      	movs	r1, #1
 800afc6:	fa01 f605 	lsl.w	r6, r1, r5
 800afca:	1d72      	adds	r2, r6, #5
 800afcc:	0092      	lsls	r2, r2, #2
 800afce:	4620      	mov	r0, r4
 800afd0:	f000 fc9d 	bl	800b90e <_calloc_r>
 800afd4:	b160      	cbz	r0, 800aff0 <_Balloc+0x64>
 800afd6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800afda:	e00e      	b.n	800affa <_Balloc+0x6e>
 800afdc:	2221      	movs	r2, #33	; 0x21
 800afde:	2104      	movs	r1, #4
 800afe0:	4620      	mov	r0, r4
 800afe2:	f000 fc94 	bl	800b90e <_calloc_r>
 800afe6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afe8:	60f0      	str	r0, [r6, #12]
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d1e4      	bne.n	800afba <_Balloc+0x2e>
 800aff0:	2000      	movs	r0, #0
 800aff2:	bd70      	pop	{r4, r5, r6, pc}
 800aff4:	6802      	ldr	r2, [r0, #0]
 800aff6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800affa:	2300      	movs	r3, #0
 800affc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b000:	e7f7      	b.n	800aff2 <_Balloc+0x66>
 800b002:	bf00      	nop
 800b004:	0800cf96 	.word	0x0800cf96
 800b008:	0800d094 	.word	0x0800d094

0800b00c <_Bfree>:
 800b00c:	b570      	push	{r4, r5, r6, lr}
 800b00e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b010:	4605      	mov	r5, r0
 800b012:	460c      	mov	r4, r1
 800b014:	b976      	cbnz	r6, 800b034 <_Bfree+0x28>
 800b016:	2010      	movs	r0, #16
 800b018:	f7ff ff90 	bl	800af3c <malloc>
 800b01c:	4602      	mov	r2, r0
 800b01e:	6268      	str	r0, [r5, #36]	; 0x24
 800b020:	b920      	cbnz	r0, 800b02c <_Bfree+0x20>
 800b022:	4b09      	ldr	r3, [pc, #36]	; (800b048 <_Bfree+0x3c>)
 800b024:	4809      	ldr	r0, [pc, #36]	; (800b04c <_Bfree+0x40>)
 800b026:	218a      	movs	r1, #138	; 0x8a
 800b028:	f000 ff00 	bl	800be2c <__assert_func>
 800b02c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b030:	6006      	str	r6, [r0, #0]
 800b032:	60c6      	str	r6, [r0, #12]
 800b034:	b13c      	cbz	r4, 800b046 <_Bfree+0x3a>
 800b036:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b038:	6862      	ldr	r2, [r4, #4]
 800b03a:	68db      	ldr	r3, [r3, #12]
 800b03c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b040:	6021      	str	r1, [r4, #0]
 800b042:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b046:	bd70      	pop	{r4, r5, r6, pc}
 800b048:	0800cf96 	.word	0x0800cf96
 800b04c:	0800d094 	.word	0x0800d094

0800b050 <__multadd>:
 800b050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b054:	690d      	ldr	r5, [r1, #16]
 800b056:	4607      	mov	r7, r0
 800b058:	460c      	mov	r4, r1
 800b05a:	461e      	mov	r6, r3
 800b05c:	f101 0c14 	add.w	ip, r1, #20
 800b060:	2000      	movs	r0, #0
 800b062:	f8dc 3000 	ldr.w	r3, [ip]
 800b066:	b299      	uxth	r1, r3
 800b068:	fb02 6101 	mla	r1, r2, r1, r6
 800b06c:	0c1e      	lsrs	r6, r3, #16
 800b06e:	0c0b      	lsrs	r3, r1, #16
 800b070:	fb02 3306 	mla	r3, r2, r6, r3
 800b074:	b289      	uxth	r1, r1
 800b076:	3001      	adds	r0, #1
 800b078:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b07c:	4285      	cmp	r5, r0
 800b07e:	f84c 1b04 	str.w	r1, [ip], #4
 800b082:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b086:	dcec      	bgt.n	800b062 <__multadd+0x12>
 800b088:	b30e      	cbz	r6, 800b0ce <__multadd+0x7e>
 800b08a:	68a3      	ldr	r3, [r4, #8]
 800b08c:	42ab      	cmp	r3, r5
 800b08e:	dc19      	bgt.n	800b0c4 <__multadd+0x74>
 800b090:	6861      	ldr	r1, [r4, #4]
 800b092:	4638      	mov	r0, r7
 800b094:	3101      	adds	r1, #1
 800b096:	f7ff ff79 	bl	800af8c <_Balloc>
 800b09a:	4680      	mov	r8, r0
 800b09c:	b928      	cbnz	r0, 800b0aa <__multadd+0x5a>
 800b09e:	4602      	mov	r2, r0
 800b0a0:	4b0c      	ldr	r3, [pc, #48]	; (800b0d4 <__multadd+0x84>)
 800b0a2:	480d      	ldr	r0, [pc, #52]	; (800b0d8 <__multadd+0x88>)
 800b0a4:	21b5      	movs	r1, #181	; 0xb5
 800b0a6:	f000 fec1 	bl	800be2c <__assert_func>
 800b0aa:	6922      	ldr	r2, [r4, #16]
 800b0ac:	3202      	adds	r2, #2
 800b0ae:	f104 010c 	add.w	r1, r4, #12
 800b0b2:	0092      	lsls	r2, r2, #2
 800b0b4:	300c      	adds	r0, #12
 800b0b6:	f7ff ff5b 	bl	800af70 <memcpy>
 800b0ba:	4621      	mov	r1, r4
 800b0bc:	4638      	mov	r0, r7
 800b0be:	f7ff ffa5 	bl	800b00c <_Bfree>
 800b0c2:	4644      	mov	r4, r8
 800b0c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b0c8:	3501      	adds	r5, #1
 800b0ca:	615e      	str	r6, [r3, #20]
 800b0cc:	6125      	str	r5, [r4, #16]
 800b0ce:	4620      	mov	r0, r4
 800b0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0d4:	0800d008 	.word	0x0800d008
 800b0d8:	0800d094 	.word	0x0800d094

0800b0dc <__s2b>:
 800b0dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0e0:	460c      	mov	r4, r1
 800b0e2:	4615      	mov	r5, r2
 800b0e4:	461f      	mov	r7, r3
 800b0e6:	2209      	movs	r2, #9
 800b0e8:	3308      	adds	r3, #8
 800b0ea:	4606      	mov	r6, r0
 800b0ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0f0:	2100      	movs	r1, #0
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	db09      	blt.n	800b10c <__s2b+0x30>
 800b0f8:	4630      	mov	r0, r6
 800b0fa:	f7ff ff47 	bl	800af8c <_Balloc>
 800b0fe:	b940      	cbnz	r0, 800b112 <__s2b+0x36>
 800b100:	4602      	mov	r2, r0
 800b102:	4b19      	ldr	r3, [pc, #100]	; (800b168 <__s2b+0x8c>)
 800b104:	4819      	ldr	r0, [pc, #100]	; (800b16c <__s2b+0x90>)
 800b106:	21ce      	movs	r1, #206	; 0xce
 800b108:	f000 fe90 	bl	800be2c <__assert_func>
 800b10c:	0052      	lsls	r2, r2, #1
 800b10e:	3101      	adds	r1, #1
 800b110:	e7f0      	b.n	800b0f4 <__s2b+0x18>
 800b112:	9b08      	ldr	r3, [sp, #32]
 800b114:	6143      	str	r3, [r0, #20]
 800b116:	2d09      	cmp	r5, #9
 800b118:	f04f 0301 	mov.w	r3, #1
 800b11c:	6103      	str	r3, [r0, #16]
 800b11e:	dd16      	ble.n	800b14e <__s2b+0x72>
 800b120:	f104 0909 	add.w	r9, r4, #9
 800b124:	46c8      	mov	r8, r9
 800b126:	442c      	add	r4, r5
 800b128:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b12c:	4601      	mov	r1, r0
 800b12e:	3b30      	subs	r3, #48	; 0x30
 800b130:	220a      	movs	r2, #10
 800b132:	4630      	mov	r0, r6
 800b134:	f7ff ff8c 	bl	800b050 <__multadd>
 800b138:	45a0      	cmp	r8, r4
 800b13a:	d1f5      	bne.n	800b128 <__s2b+0x4c>
 800b13c:	f1a5 0408 	sub.w	r4, r5, #8
 800b140:	444c      	add	r4, r9
 800b142:	1b2d      	subs	r5, r5, r4
 800b144:	1963      	adds	r3, r4, r5
 800b146:	42bb      	cmp	r3, r7
 800b148:	db04      	blt.n	800b154 <__s2b+0x78>
 800b14a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b14e:	340a      	adds	r4, #10
 800b150:	2509      	movs	r5, #9
 800b152:	e7f6      	b.n	800b142 <__s2b+0x66>
 800b154:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b158:	4601      	mov	r1, r0
 800b15a:	3b30      	subs	r3, #48	; 0x30
 800b15c:	220a      	movs	r2, #10
 800b15e:	4630      	mov	r0, r6
 800b160:	f7ff ff76 	bl	800b050 <__multadd>
 800b164:	e7ee      	b.n	800b144 <__s2b+0x68>
 800b166:	bf00      	nop
 800b168:	0800d008 	.word	0x0800d008
 800b16c:	0800d094 	.word	0x0800d094

0800b170 <__hi0bits>:
 800b170:	0c03      	lsrs	r3, r0, #16
 800b172:	041b      	lsls	r3, r3, #16
 800b174:	b9d3      	cbnz	r3, 800b1ac <__hi0bits+0x3c>
 800b176:	0400      	lsls	r0, r0, #16
 800b178:	2310      	movs	r3, #16
 800b17a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b17e:	bf04      	itt	eq
 800b180:	0200      	lsleq	r0, r0, #8
 800b182:	3308      	addeq	r3, #8
 800b184:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b188:	bf04      	itt	eq
 800b18a:	0100      	lsleq	r0, r0, #4
 800b18c:	3304      	addeq	r3, #4
 800b18e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b192:	bf04      	itt	eq
 800b194:	0080      	lsleq	r0, r0, #2
 800b196:	3302      	addeq	r3, #2
 800b198:	2800      	cmp	r0, #0
 800b19a:	db05      	blt.n	800b1a8 <__hi0bits+0x38>
 800b19c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b1a0:	f103 0301 	add.w	r3, r3, #1
 800b1a4:	bf08      	it	eq
 800b1a6:	2320      	moveq	r3, #32
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	4770      	bx	lr
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	e7e4      	b.n	800b17a <__hi0bits+0xa>

0800b1b0 <__lo0bits>:
 800b1b0:	6803      	ldr	r3, [r0, #0]
 800b1b2:	f013 0207 	ands.w	r2, r3, #7
 800b1b6:	4601      	mov	r1, r0
 800b1b8:	d00b      	beq.n	800b1d2 <__lo0bits+0x22>
 800b1ba:	07da      	lsls	r2, r3, #31
 800b1bc:	d423      	bmi.n	800b206 <__lo0bits+0x56>
 800b1be:	0798      	lsls	r0, r3, #30
 800b1c0:	bf49      	itett	mi
 800b1c2:	085b      	lsrmi	r3, r3, #1
 800b1c4:	089b      	lsrpl	r3, r3, #2
 800b1c6:	2001      	movmi	r0, #1
 800b1c8:	600b      	strmi	r3, [r1, #0]
 800b1ca:	bf5c      	itt	pl
 800b1cc:	600b      	strpl	r3, [r1, #0]
 800b1ce:	2002      	movpl	r0, #2
 800b1d0:	4770      	bx	lr
 800b1d2:	b298      	uxth	r0, r3
 800b1d4:	b9a8      	cbnz	r0, 800b202 <__lo0bits+0x52>
 800b1d6:	0c1b      	lsrs	r3, r3, #16
 800b1d8:	2010      	movs	r0, #16
 800b1da:	b2da      	uxtb	r2, r3
 800b1dc:	b90a      	cbnz	r2, 800b1e2 <__lo0bits+0x32>
 800b1de:	3008      	adds	r0, #8
 800b1e0:	0a1b      	lsrs	r3, r3, #8
 800b1e2:	071a      	lsls	r2, r3, #28
 800b1e4:	bf04      	itt	eq
 800b1e6:	091b      	lsreq	r3, r3, #4
 800b1e8:	3004      	addeq	r0, #4
 800b1ea:	079a      	lsls	r2, r3, #30
 800b1ec:	bf04      	itt	eq
 800b1ee:	089b      	lsreq	r3, r3, #2
 800b1f0:	3002      	addeq	r0, #2
 800b1f2:	07da      	lsls	r2, r3, #31
 800b1f4:	d403      	bmi.n	800b1fe <__lo0bits+0x4e>
 800b1f6:	085b      	lsrs	r3, r3, #1
 800b1f8:	f100 0001 	add.w	r0, r0, #1
 800b1fc:	d005      	beq.n	800b20a <__lo0bits+0x5a>
 800b1fe:	600b      	str	r3, [r1, #0]
 800b200:	4770      	bx	lr
 800b202:	4610      	mov	r0, r2
 800b204:	e7e9      	b.n	800b1da <__lo0bits+0x2a>
 800b206:	2000      	movs	r0, #0
 800b208:	4770      	bx	lr
 800b20a:	2020      	movs	r0, #32
 800b20c:	4770      	bx	lr
	...

0800b210 <__i2b>:
 800b210:	b510      	push	{r4, lr}
 800b212:	460c      	mov	r4, r1
 800b214:	2101      	movs	r1, #1
 800b216:	f7ff feb9 	bl	800af8c <_Balloc>
 800b21a:	4602      	mov	r2, r0
 800b21c:	b928      	cbnz	r0, 800b22a <__i2b+0x1a>
 800b21e:	4b05      	ldr	r3, [pc, #20]	; (800b234 <__i2b+0x24>)
 800b220:	4805      	ldr	r0, [pc, #20]	; (800b238 <__i2b+0x28>)
 800b222:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b226:	f000 fe01 	bl	800be2c <__assert_func>
 800b22a:	2301      	movs	r3, #1
 800b22c:	6144      	str	r4, [r0, #20]
 800b22e:	6103      	str	r3, [r0, #16]
 800b230:	bd10      	pop	{r4, pc}
 800b232:	bf00      	nop
 800b234:	0800d008 	.word	0x0800d008
 800b238:	0800d094 	.word	0x0800d094

0800b23c <__multiply>:
 800b23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b240:	4691      	mov	r9, r2
 800b242:	690a      	ldr	r2, [r1, #16]
 800b244:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b248:	429a      	cmp	r2, r3
 800b24a:	bfb8      	it	lt
 800b24c:	460b      	movlt	r3, r1
 800b24e:	460c      	mov	r4, r1
 800b250:	bfbc      	itt	lt
 800b252:	464c      	movlt	r4, r9
 800b254:	4699      	movlt	r9, r3
 800b256:	6927      	ldr	r7, [r4, #16]
 800b258:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b25c:	68a3      	ldr	r3, [r4, #8]
 800b25e:	6861      	ldr	r1, [r4, #4]
 800b260:	eb07 060a 	add.w	r6, r7, sl
 800b264:	42b3      	cmp	r3, r6
 800b266:	b085      	sub	sp, #20
 800b268:	bfb8      	it	lt
 800b26a:	3101      	addlt	r1, #1
 800b26c:	f7ff fe8e 	bl	800af8c <_Balloc>
 800b270:	b930      	cbnz	r0, 800b280 <__multiply+0x44>
 800b272:	4602      	mov	r2, r0
 800b274:	4b44      	ldr	r3, [pc, #272]	; (800b388 <__multiply+0x14c>)
 800b276:	4845      	ldr	r0, [pc, #276]	; (800b38c <__multiply+0x150>)
 800b278:	f240 115d 	movw	r1, #349	; 0x15d
 800b27c:	f000 fdd6 	bl	800be2c <__assert_func>
 800b280:	f100 0514 	add.w	r5, r0, #20
 800b284:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b288:	462b      	mov	r3, r5
 800b28a:	2200      	movs	r2, #0
 800b28c:	4543      	cmp	r3, r8
 800b28e:	d321      	bcc.n	800b2d4 <__multiply+0x98>
 800b290:	f104 0314 	add.w	r3, r4, #20
 800b294:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b298:	f109 0314 	add.w	r3, r9, #20
 800b29c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b2a0:	9202      	str	r2, [sp, #8]
 800b2a2:	1b3a      	subs	r2, r7, r4
 800b2a4:	3a15      	subs	r2, #21
 800b2a6:	f022 0203 	bic.w	r2, r2, #3
 800b2aa:	3204      	adds	r2, #4
 800b2ac:	f104 0115 	add.w	r1, r4, #21
 800b2b0:	428f      	cmp	r7, r1
 800b2b2:	bf38      	it	cc
 800b2b4:	2204      	movcc	r2, #4
 800b2b6:	9201      	str	r2, [sp, #4]
 800b2b8:	9a02      	ldr	r2, [sp, #8]
 800b2ba:	9303      	str	r3, [sp, #12]
 800b2bc:	429a      	cmp	r2, r3
 800b2be:	d80c      	bhi.n	800b2da <__multiply+0x9e>
 800b2c0:	2e00      	cmp	r6, #0
 800b2c2:	dd03      	ble.n	800b2cc <__multiply+0x90>
 800b2c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d05a      	beq.n	800b382 <__multiply+0x146>
 800b2cc:	6106      	str	r6, [r0, #16]
 800b2ce:	b005      	add	sp, #20
 800b2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2d4:	f843 2b04 	str.w	r2, [r3], #4
 800b2d8:	e7d8      	b.n	800b28c <__multiply+0x50>
 800b2da:	f8b3 a000 	ldrh.w	sl, [r3]
 800b2de:	f1ba 0f00 	cmp.w	sl, #0
 800b2e2:	d024      	beq.n	800b32e <__multiply+0xf2>
 800b2e4:	f104 0e14 	add.w	lr, r4, #20
 800b2e8:	46a9      	mov	r9, r5
 800b2ea:	f04f 0c00 	mov.w	ip, #0
 800b2ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b2f2:	f8d9 1000 	ldr.w	r1, [r9]
 800b2f6:	fa1f fb82 	uxth.w	fp, r2
 800b2fa:	b289      	uxth	r1, r1
 800b2fc:	fb0a 110b 	mla	r1, sl, fp, r1
 800b300:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b304:	f8d9 2000 	ldr.w	r2, [r9]
 800b308:	4461      	add	r1, ip
 800b30a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b30e:	fb0a c20b 	mla	r2, sl, fp, ip
 800b312:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b316:	b289      	uxth	r1, r1
 800b318:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b31c:	4577      	cmp	r7, lr
 800b31e:	f849 1b04 	str.w	r1, [r9], #4
 800b322:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b326:	d8e2      	bhi.n	800b2ee <__multiply+0xb2>
 800b328:	9a01      	ldr	r2, [sp, #4]
 800b32a:	f845 c002 	str.w	ip, [r5, r2]
 800b32e:	9a03      	ldr	r2, [sp, #12]
 800b330:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b334:	3304      	adds	r3, #4
 800b336:	f1b9 0f00 	cmp.w	r9, #0
 800b33a:	d020      	beq.n	800b37e <__multiply+0x142>
 800b33c:	6829      	ldr	r1, [r5, #0]
 800b33e:	f104 0c14 	add.w	ip, r4, #20
 800b342:	46ae      	mov	lr, r5
 800b344:	f04f 0a00 	mov.w	sl, #0
 800b348:	f8bc b000 	ldrh.w	fp, [ip]
 800b34c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b350:	fb09 220b 	mla	r2, r9, fp, r2
 800b354:	4492      	add	sl, r2
 800b356:	b289      	uxth	r1, r1
 800b358:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b35c:	f84e 1b04 	str.w	r1, [lr], #4
 800b360:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b364:	f8be 1000 	ldrh.w	r1, [lr]
 800b368:	0c12      	lsrs	r2, r2, #16
 800b36a:	fb09 1102 	mla	r1, r9, r2, r1
 800b36e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b372:	4567      	cmp	r7, ip
 800b374:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b378:	d8e6      	bhi.n	800b348 <__multiply+0x10c>
 800b37a:	9a01      	ldr	r2, [sp, #4]
 800b37c:	50a9      	str	r1, [r5, r2]
 800b37e:	3504      	adds	r5, #4
 800b380:	e79a      	b.n	800b2b8 <__multiply+0x7c>
 800b382:	3e01      	subs	r6, #1
 800b384:	e79c      	b.n	800b2c0 <__multiply+0x84>
 800b386:	bf00      	nop
 800b388:	0800d008 	.word	0x0800d008
 800b38c:	0800d094 	.word	0x0800d094

0800b390 <__pow5mult>:
 800b390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b394:	4615      	mov	r5, r2
 800b396:	f012 0203 	ands.w	r2, r2, #3
 800b39a:	4606      	mov	r6, r0
 800b39c:	460f      	mov	r7, r1
 800b39e:	d007      	beq.n	800b3b0 <__pow5mult+0x20>
 800b3a0:	4c25      	ldr	r4, [pc, #148]	; (800b438 <__pow5mult+0xa8>)
 800b3a2:	3a01      	subs	r2, #1
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b3aa:	f7ff fe51 	bl	800b050 <__multadd>
 800b3ae:	4607      	mov	r7, r0
 800b3b0:	10ad      	asrs	r5, r5, #2
 800b3b2:	d03d      	beq.n	800b430 <__pow5mult+0xa0>
 800b3b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b3b6:	b97c      	cbnz	r4, 800b3d8 <__pow5mult+0x48>
 800b3b8:	2010      	movs	r0, #16
 800b3ba:	f7ff fdbf 	bl	800af3c <malloc>
 800b3be:	4602      	mov	r2, r0
 800b3c0:	6270      	str	r0, [r6, #36]	; 0x24
 800b3c2:	b928      	cbnz	r0, 800b3d0 <__pow5mult+0x40>
 800b3c4:	4b1d      	ldr	r3, [pc, #116]	; (800b43c <__pow5mult+0xac>)
 800b3c6:	481e      	ldr	r0, [pc, #120]	; (800b440 <__pow5mult+0xb0>)
 800b3c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b3cc:	f000 fd2e 	bl	800be2c <__assert_func>
 800b3d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b3d4:	6004      	str	r4, [r0, #0]
 800b3d6:	60c4      	str	r4, [r0, #12]
 800b3d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b3dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b3e0:	b94c      	cbnz	r4, 800b3f6 <__pow5mult+0x66>
 800b3e2:	f240 2171 	movw	r1, #625	; 0x271
 800b3e6:	4630      	mov	r0, r6
 800b3e8:	f7ff ff12 	bl	800b210 <__i2b>
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800b3f2:	4604      	mov	r4, r0
 800b3f4:	6003      	str	r3, [r0, #0]
 800b3f6:	f04f 0900 	mov.w	r9, #0
 800b3fa:	07eb      	lsls	r3, r5, #31
 800b3fc:	d50a      	bpl.n	800b414 <__pow5mult+0x84>
 800b3fe:	4639      	mov	r1, r7
 800b400:	4622      	mov	r2, r4
 800b402:	4630      	mov	r0, r6
 800b404:	f7ff ff1a 	bl	800b23c <__multiply>
 800b408:	4639      	mov	r1, r7
 800b40a:	4680      	mov	r8, r0
 800b40c:	4630      	mov	r0, r6
 800b40e:	f7ff fdfd 	bl	800b00c <_Bfree>
 800b412:	4647      	mov	r7, r8
 800b414:	106d      	asrs	r5, r5, #1
 800b416:	d00b      	beq.n	800b430 <__pow5mult+0xa0>
 800b418:	6820      	ldr	r0, [r4, #0]
 800b41a:	b938      	cbnz	r0, 800b42c <__pow5mult+0x9c>
 800b41c:	4622      	mov	r2, r4
 800b41e:	4621      	mov	r1, r4
 800b420:	4630      	mov	r0, r6
 800b422:	f7ff ff0b 	bl	800b23c <__multiply>
 800b426:	6020      	str	r0, [r4, #0]
 800b428:	f8c0 9000 	str.w	r9, [r0]
 800b42c:	4604      	mov	r4, r0
 800b42e:	e7e4      	b.n	800b3fa <__pow5mult+0x6a>
 800b430:	4638      	mov	r0, r7
 800b432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b436:	bf00      	nop
 800b438:	0800d1e0 	.word	0x0800d1e0
 800b43c:	0800cf96 	.word	0x0800cf96
 800b440:	0800d094 	.word	0x0800d094

0800b444 <__lshift>:
 800b444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b448:	460c      	mov	r4, r1
 800b44a:	6849      	ldr	r1, [r1, #4]
 800b44c:	6923      	ldr	r3, [r4, #16]
 800b44e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b452:	68a3      	ldr	r3, [r4, #8]
 800b454:	4607      	mov	r7, r0
 800b456:	4691      	mov	r9, r2
 800b458:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b45c:	f108 0601 	add.w	r6, r8, #1
 800b460:	42b3      	cmp	r3, r6
 800b462:	db0b      	blt.n	800b47c <__lshift+0x38>
 800b464:	4638      	mov	r0, r7
 800b466:	f7ff fd91 	bl	800af8c <_Balloc>
 800b46a:	4605      	mov	r5, r0
 800b46c:	b948      	cbnz	r0, 800b482 <__lshift+0x3e>
 800b46e:	4602      	mov	r2, r0
 800b470:	4b2a      	ldr	r3, [pc, #168]	; (800b51c <__lshift+0xd8>)
 800b472:	482b      	ldr	r0, [pc, #172]	; (800b520 <__lshift+0xdc>)
 800b474:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b478:	f000 fcd8 	bl	800be2c <__assert_func>
 800b47c:	3101      	adds	r1, #1
 800b47e:	005b      	lsls	r3, r3, #1
 800b480:	e7ee      	b.n	800b460 <__lshift+0x1c>
 800b482:	2300      	movs	r3, #0
 800b484:	f100 0114 	add.w	r1, r0, #20
 800b488:	f100 0210 	add.w	r2, r0, #16
 800b48c:	4618      	mov	r0, r3
 800b48e:	4553      	cmp	r3, sl
 800b490:	db37      	blt.n	800b502 <__lshift+0xbe>
 800b492:	6920      	ldr	r0, [r4, #16]
 800b494:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b498:	f104 0314 	add.w	r3, r4, #20
 800b49c:	f019 091f 	ands.w	r9, r9, #31
 800b4a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b4a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b4a8:	d02f      	beq.n	800b50a <__lshift+0xc6>
 800b4aa:	f1c9 0e20 	rsb	lr, r9, #32
 800b4ae:	468a      	mov	sl, r1
 800b4b0:	f04f 0c00 	mov.w	ip, #0
 800b4b4:	681a      	ldr	r2, [r3, #0]
 800b4b6:	fa02 f209 	lsl.w	r2, r2, r9
 800b4ba:	ea42 020c 	orr.w	r2, r2, ip
 800b4be:	f84a 2b04 	str.w	r2, [sl], #4
 800b4c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4c6:	4298      	cmp	r0, r3
 800b4c8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b4cc:	d8f2      	bhi.n	800b4b4 <__lshift+0x70>
 800b4ce:	1b03      	subs	r3, r0, r4
 800b4d0:	3b15      	subs	r3, #21
 800b4d2:	f023 0303 	bic.w	r3, r3, #3
 800b4d6:	3304      	adds	r3, #4
 800b4d8:	f104 0215 	add.w	r2, r4, #21
 800b4dc:	4290      	cmp	r0, r2
 800b4de:	bf38      	it	cc
 800b4e0:	2304      	movcc	r3, #4
 800b4e2:	f841 c003 	str.w	ip, [r1, r3]
 800b4e6:	f1bc 0f00 	cmp.w	ip, #0
 800b4ea:	d001      	beq.n	800b4f0 <__lshift+0xac>
 800b4ec:	f108 0602 	add.w	r6, r8, #2
 800b4f0:	3e01      	subs	r6, #1
 800b4f2:	4638      	mov	r0, r7
 800b4f4:	612e      	str	r6, [r5, #16]
 800b4f6:	4621      	mov	r1, r4
 800b4f8:	f7ff fd88 	bl	800b00c <_Bfree>
 800b4fc:	4628      	mov	r0, r5
 800b4fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b502:	f842 0f04 	str.w	r0, [r2, #4]!
 800b506:	3301      	adds	r3, #1
 800b508:	e7c1      	b.n	800b48e <__lshift+0x4a>
 800b50a:	3904      	subs	r1, #4
 800b50c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b510:	f841 2f04 	str.w	r2, [r1, #4]!
 800b514:	4298      	cmp	r0, r3
 800b516:	d8f9      	bhi.n	800b50c <__lshift+0xc8>
 800b518:	e7ea      	b.n	800b4f0 <__lshift+0xac>
 800b51a:	bf00      	nop
 800b51c:	0800d008 	.word	0x0800d008
 800b520:	0800d094 	.word	0x0800d094

0800b524 <__mcmp>:
 800b524:	b530      	push	{r4, r5, lr}
 800b526:	6902      	ldr	r2, [r0, #16]
 800b528:	690c      	ldr	r4, [r1, #16]
 800b52a:	1b12      	subs	r2, r2, r4
 800b52c:	d10e      	bne.n	800b54c <__mcmp+0x28>
 800b52e:	f100 0314 	add.w	r3, r0, #20
 800b532:	3114      	adds	r1, #20
 800b534:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b538:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b53c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b540:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b544:	42a5      	cmp	r5, r4
 800b546:	d003      	beq.n	800b550 <__mcmp+0x2c>
 800b548:	d305      	bcc.n	800b556 <__mcmp+0x32>
 800b54a:	2201      	movs	r2, #1
 800b54c:	4610      	mov	r0, r2
 800b54e:	bd30      	pop	{r4, r5, pc}
 800b550:	4283      	cmp	r3, r0
 800b552:	d3f3      	bcc.n	800b53c <__mcmp+0x18>
 800b554:	e7fa      	b.n	800b54c <__mcmp+0x28>
 800b556:	f04f 32ff 	mov.w	r2, #4294967295
 800b55a:	e7f7      	b.n	800b54c <__mcmp+0x28>

0800b55c <__mdiff>:
 800b55c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b560:	460c      	mov	r4, r1
 800b562:	4606      	mov	r6, r0
 800b564:	4611      	mov	r1, r2
 800b566:	4620      	mov	r0, r4
 800b568:	4690      	mov	r8, r2
 800b56a:	f7ff ffdb 	bl	800b524 <__mcmp>
 800b56e:	1e05      	subs	r5, r0, #0
 800b570:	d110      	bne.n	800b594 <__mdiff+0x38>
 800b572:	4629      	mov	r1, r5
 800b574:	4630      	mov	r0, r6
 800b576:	f7ff fd09 	bl	800af8c <_Balloc>
 800b57a:	b930      	cbnz	r0, 800b58a <__mdiff+0x2e>
 800b57c:	4b3a      	ldr	r3, [pc, #232]	; (800b668 <__mdiff+0x10c>)
 800b57e:	4602      	mov	r2, r0
 800b580:	f240 2132 	movw	r1, #562	; 0x232
 800b584:	4839      	ldr	r0, [pc, #228]	; (800b66c <__mdiff+0x110>)
 800b586:	f000 fc51 	bl	800be2c <__assert_func>
 800b58a:	2301      	movs	r3, #1
 800b58c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b590:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b594:	bfa4      	itt	ge
 800b596:	4643      	movge	r3, r8
 800b598:	46a0      	movge	r8, r4
 800b59a:	4630      	mov	r0, r6
 800b59c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b5a0:	bfa6      	itte	ge
 800b5a2:	461c      	movge	r4, r3
 800b5a4:	2500      	movge	r5, #0
 800b5a6:	2501      	movlt	r5, #1
 800b5a8:	f7ff fcf0 	bl	800af8c <_Balloc>
 800b5ac:	b920      	cbnz	r0, 800b5b8 <__mdiff+0x5c>
 800b5ae:	4b2e      	ldr	r3, [pc, #184]	; (800b668 <__mdiff+0x10c>)
 800b5b0:	4602      	mov	r2, r0
 800b5b2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b5b6:	e7e5      	b.n	800b584 <__mdiff+0x28>
 800b5b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b5bc:	6926      	ldr	r6, [r4, #16]
 800b5be:	60c5      	str	r5, [r0, #12]
 800b5c0:	f104 0914 	add.w	r9, r4, #20
 800b5c4:	f108 0514 	add.w	r5, r8, #20
 800b5c8:	f100 0e14 	add.w	lr, r0, #20
 800b5cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b5d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b5d4:	f108 0210 	add.w	r2, r8, #16
 800b5d8:	46f2      	mov	sl, lr
 800b5da:	2100      	movs	r1, #0
 800b5dc:	f859 3b04 	ldr.w	r3, [r9], #4
 800b5e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b5e4:	fa1f f883 	uxth.w	r8, r3
 800b5e8:	fa11 f18b 	uxtah	r1, r1, fp
 800b5ec:	0c1b      	lsrs	r3, r3, #16
 800b5ee:	eba1 0808 	sub.w	r8, r1, r8
 800b5f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b5f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b5fa:	fa1f f888 	uxth.w	r8, r8
 800b5fe:	1419      	asrs	r1, r3, #16
 800b600:	454e      	cmp	r6, r9
 800b602:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b606:	f84a 3b04 	str.w	r3, [sl], #4
 800b60a:	d8e7      	bhi.n	800b5dc <__mdiff+0x80>
 800b60c:	1b33      	subs	r3, r6, r4
 800b60e:	3b15      	subs	r3, #21
 800b610:	f023 0303 	bic.w	r3, r3, #3
 800b614:	3304      	adds	r3, #4
 800b616:	3415      	adds	r4, #21
 800b618:	42a6      	cmp	r6, r4
 800b61a:	bf38      	it	cc
 800b61c:	2304      	movcc	r3, #4
 800b61e:	441d      	add	r5, r3
 800b620:	4473      	add	r3, lr
 800b622:	469e      	mov	lr, r3
 800b624:	462e      	mov	r6, r5
 800b626:	4566      	cmp	r6, ip
 800b628:	d30e      	bcc.n	800b648 <__mdiff+0xec>
 800b62a:	f10c 0203 	add.w	r2, ip, #3
 800b62e:	1b52      	subs	r2, r2, r5
 800b630:	f022 0203 	bic.w	r2, r2, #3
 800b634:	3d03      	subs	r5, #3
 800b636:	45ac      	cmp	ip, r5
 800b638:	bf38      	it	cc
 800b63a:	2200      	movcc	r2, #0
 800b63c:	441a      	add	r2, r3
 800b63e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b642:	b17b      	cbz	r3, 800b664 <__mdiff+0x108>
 800b644:	6107      	str	r7, [r0, #16]
 800b646:	e7a3      	b.n	800b590 <__mdiff+0x34>
 800b648:	f856 8b04 	ldr.w	r8, [r6], #4
 800b64c:	fa11 f288 	uxtah	r2, r1, r8
 800b650:	1414      	asrs	r4, r2, #16
 800b652:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b656:	b292      	uxth	r2, r2
 800b658:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b65c:	f84e 2b04 	str.w	r2, [lr], #4
 800b660:	1421      	asrs	r1, r4, #16
 800b662:	e7e0      	b.n	800b626 <__mdiff+0xca>
 800b664:	3f01      	subs	r7, #1
 800b666:	e7ea      	b.n	800b63e <__mdiff+0xe2>
 800b668:	0800d008 	.word	0x0800d008
 800b66c:	0800d094 	.word	0x0800d094

0800b670 <__ulp>:
 800b670:	b082      	sub	sp, #8
 800b672:	ed8d 0b00 	vstr	d0, [sp]
 800b676:	9b01      	ldr	r3, [sp, #4]
 800b678:	4912      	ldr	r1, [pc, #72]	; (800b6c4 <__ulp+0x54>)
 800b67a:	4019      	ands	r1, r3
 800b67c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b680:	2900      	cmp	r1, #0
 800b682:	dd05      	ble.n	800b690 <__ulp+0x20>
 800b684:	2200      	movs	r2, #0
 800b686:	460b      	mov	r3, r1
 800b688:	ec43 2b10 	vmov	d0, r2, r3
 800b68c:	b002      	add	sp, #8
 800b68e:	4770      	bx	lr
 800b690:	4249      	negs	r1, r1
 800b692:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b696:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b69a:	f04f 0200 	mov.w	r2, #0
 800b69e:	f04f 0300 	mov.w	r3, #0
 800b6a2:	da04      	bge.n	800b6ae <__ulp+0x3e>
 800b6a4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b6a8:	fa41 f300 	asr.w	r3, r1, r0
 800b6ac:	e7ec      	b.n	800b688 <__ulp+0x18>
 800b6ae:	f1a0 0114 	sub.w	r1, r0, #20
 800b6b2:	291e      	cmp	r1, #30
 800b6b4:	bfda      	itte	le
 800b6b6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b6ba:	fa20 f101 	lsrle.w	r1, r0, r1
 800b6be:	2101      	movgt	r1, #1
 800b6c0:	460a      	mov	r2, r1
 800b6c2:	e7e1      	b.n	800b688 <__ulp+0x18>
 800b6c4:	7ff00000 	.word	0x7ff00000

0800b6c8 <__b2d>:
 800b6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ca:	6905      	ldr	r5, [r0, #16]
 800b6cc:	f100 0714 	add.w	r7, r0, #20
 800b6d0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b6d4:	1f2e      	subs	r6, r5, #4
 800b6d6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b6da:	4620      	mov	r0, r4
 800b6dc:	f7ff fd48 	bl	800b170 <__hi0bits>
 800b6e0:	f1c0 0320 	rsb	r3, r0, #32
 800b6e4:	280a      	cmp	r0, #10
 800b6e6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b764 <__b2d+0x9c>
 800b6ea:	600b      	str	r3, [r1, #0]
 800b6ec:	dc14      	bgt.n	800b718 <__b2d+0x50>
 800b6ee:	f1c0 0e0b 	rsb	lr, r0, #11
 800b6f2:	fa24 f10e 	lsr.w	r1, r4, lr
 800b6f6:	42b7      	cmp	r7, r6
 800b6f8:	ea41 030c 	orr.w	r3, r1, ip
 800b6fc:	bf34      	ite	cc
 800b6fe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b702:	2100      	movcs	r1, #0
 800b704:	3015      	adds	r0, #21
 800b706:	fa04 f000 	lsl.w	r0, r4, r0
 800b70a:	fa21 f10e 	lsr.w	r1, r1, lr
 800b70e:	ea40 0201 	orr.w	r2, r0, r1
 800b712:	ec43 2b10 	vmov	d0, r2, r3
 800b716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b718:	42b7      	cmp	r7, r6
 800b71a:	bf3a      	itte	cc
 800b71c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b720:	f1a5 0608 	subcc.w	r6, r5, #8
 800b724:	2100      	movcs	r1, #0
 800b726:	380b      	subs	r0, #11
 800b728:	d017      	beq.n	800b75a <__b2d+0x92>
 800b72a:	f1c0 0c20 	rsb	ip, r0, #32
 800b72e:	fa04 f500 	lsl.w	r5, r4, r0
 800b732:	42be      	cmp	r6, r7
 800b734:	fa21 f40c 	lsr.w	r4, r1, ip
 800b738:	ea45 0504 	orr.w	r5, r5, r4
 800b73c:	bf8c      	ite	hi
 800b73e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b742:	2400      	movls	r4, #0
 800b744:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b748:	fa01 f000 	lsl.w	r0, r1, r0
 800b74c:	fa24 f40c 	lsr.w	r4, r4, ip
 800b750:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b754:	ea40 0204 	orr.w	r2, r0, r4
 800b758:	e7db      	b.n	800b712 <__b2d+0x4a>
 800b75a:	ea44 030c 	orr.w	r3, r4, ip
 800b75e:	460a      	mov	r2, r1
 800b760:	e7d7      	b.n	800b712 <__b2d+0x4a>
 800b762:	bf00      	nop
 800b764:	3ff00000 	.word	0x3ff00000

0800b768 <__d2b>:
 800b768:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b76c:	4689      	mov	r9, r1
 800b76e:	2101      	movs	r1, #1
 800b770:	ec57 6b10 	vmov	r6, r7, d0
 800b774:	4690      	mov	r8, r2
 800b776:	f7ff fc09 	bl	800af8c <_Balloc>
 800b77a:	4604      	mov	r4, r0
 800b77c:	b930      	cbnz	r0, 800b78c <__d2b+0x24>
 800b77e:	4602      	mov	r2, r0
 800b780:	4b25      	ldr	r3, [pc, #148]	; (800b818 <__d2b+0xb0>)
 800b782:	4826      	ldr	r0, [pc, #152]	; (800b81c <__d2b+0xb4>)
 800b784:	f240 310a 	movw	r1, #778	; 0x30a
 800b788:	f000 fb50 	bl	800be2c <__assert_func>
 800b78c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b790:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b794:	bb35      	cbnz	r5, 800b7e4 <__d2b+0x7c>
 800b796:	2e00      	cmp	r6, #0
 800b798:	9301      	str	r3, [sp, #4]
 800b79a:	d028      	beq.n	800b7ee <__d2b+0x86>
 800b79c:	4668      	mov	r0, sp
 800b79e:	9600      	str	r6, [sp, #0]
 800b7a0:	f7ff fd06 	bl	800b1b0 <__lo0bits>
 800b7a4:	9900      	ldr	r1, [sp, #0]
 800b7a6:	b300      	cbz	r0, 800b7ea <__d2b+0x82>
 800b7a8:	9a01      	ldr	r2, [sp, #4]
 800b7aa:	f1c0 0320 	rsb	r3, r0, #32
 800b7ae:	fa02 f303 	lsl.w	r3, r2, r3
 800b7b2:	430b      	orrs	r3, r1
 800b7b4:	40c2      	lsrs	r2, r0
 800b7b6:	6163      	str	r3, [r4, #20]
 800b7b8:	9201      	str	r2, [sp, #4]
 800b7ba:	9b01      	ldr	r3, [sp, #4]
 800b7bc:	61a3      	str	r3, [r4, #24]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	bf14      	ite	ne
 800b7c2:	2202      	movne	r2, #2
 800b7c4:	2201      	moveq	r2, #1
 800b7c6:	6122      	str	r2, [r4, #16]
 800b7c8:	b1d5      	cbz	r5, 800b800 <__d2b+0x98>
 800b7ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b7ce:	4405      	add	r5, r0
 800b7d0:	f8c9 5000 	str.w	r5, [r9]
 800b7d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b7d8:	f8c8 0000 	str.w	r0, [r8]
 800b7dc:	4620      	mov	r0, r4
 800b7de:	b003      	add	sp, #12
 800b7e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b7e8:	e7d5      	b.n	800b796 <__d2b+0x2e>
 800b7ea:	6161      	str	r1, [r4, #20]
 800b7ec:	e7e5      	b.n	800b7ba <__d2b+0x52>
 800b7ee:	a801      	add	r0, sp, #4
 800b7f0:	f7ff fcde 	bl	800b1b0 <__lo0bits>
 800b7f4:	9b01      	ldr	r3, [sp, #4]
 800b7f6:	6163      	str	r3, [r4, #20]
 800b7f8:	2201      	movs	r2, #1
 800b7fa:	6122      	str	r2, [r4, #16]
 800b7fc:	3020      	adds	r0, #32
 800b7fe:	e7e3      	b.n	800b7c8 <__d2b+0x60>
 800b800:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b804:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b808:	f8c9 0000 	str.w	r0, [r9]
 800b80c:	6918      	ldr	r0, [r3, #16]
 800b80e:	f7ff fcaf 	bl	800b170 <__hi0bits>
 800b812:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b816:	e7df      	b.n	800b7d8 <__d2b+0x70>
 800b818:	0800d008 	.word	0x0800d008
 800b81c:	0800d094 	.word	0x0800d094

0800b820 <__ratio>:
 800b820:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b824:	4688      	mov	r8, r1
 800b826:	4669      	mov	r1, sp
 800b828:	4681      	mov	r9, r0
 800b82a:	f7ff ff4d 	bl	800b6c8 <__b2d>
 800b82e:	a901      	add	r1, sp, #4
 800b830:	4640      	mov	r0, r8
 800b832:	ec55 4b10 	vmov	r4, r5, d0
 800b836:	f7ff ff47 	bl	800b6c8 <__b2d>
 800b83a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b83e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b842:	eba3 0c02 	sub.w	ip, r3, r2
 800b846:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b84a:	1a9b      	subs	r3, r3, r2
 800b84c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b850:	ec51 0b10 	vmov	r0, r1, d0
 800b854:	2b00      	cmp	r3, #0
 800b856:	bfd6      	itet	le
 800b858:	460a      	movle	r2, r1
 800b85a:	462a      	movgt	r2, r5
 800b85c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b860:	468b      	mov	fp, r1
 800b862:	462f      	mov	r7, r5
 800b864:	bfd4      	ite	le
 800b866:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b86a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b86e:	4620      	mov	r0, r4
 800b870:	ee10 2a10 	vmov	r2, s0
 800b874:	465b      	mov	r3, fp
 800b876:	4639      	mov	r1, r7
 800b878:	f7f4 ffe8 	bl	800084c <__aeabi_ddiv>
 800b87c:	ec41 0b10 	vmov	d0, r0, r1
 800b880:	b003      	add	sp, #12
 800b882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b886 <__copybits>:
 800b886:	3901      	subs	r1, #1
 800b888:	b570      	push	{r4, r5, r6, lr}
 800b88a:	1149      	asrs	r1, r1, #5
 800b88c:	6914      	ldr	r4, [r2, #16]
 800b88e:	3101      	adds	r1, #1
 800b890:	f102 0314 	add.w	r3, r2, #20
 800b894:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b898:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b89c:	1f05      	subs	r5, r0, #4
 800b89e:	42a3      	cmp	r3, r4
 800b8a0:	d30c      	bcc.n	800b8bc <__copybits+0x36>
 800b8a2:	1aa3      	subs	r3, r4, r2
 800b8a4:	3b11      	subs	r3, #17
 800b8a6:	f023 0303 	bic.w	r3, r3, #3
 800b8aa:	3211      	adds	r2, #17
 800b8ac:	42a2      	cmp	r2, r4
 800b8ae:	bf88      	it	hi
 800b8b0:	2300      	movhi	r3, #0
 800b8b2:	4418      	add	r0, r3
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	4288      	cmp	r0, r1
 800b8b8:	d305      	bcc.n	800b8c6 <__copybits+0x40>
 800b8ba:	bd70      	pop	{r4, r5, r6, pc}
 800b8bc:	f853 6b04 	ldr.w	r6, [r3], #4
 800b8c0:	f845 6f04 	str.w	r6, [r5, #4]!
 800b8c4:	e7eb      	b.n	800b89e <__copybits+0x18>
 800b8c6:	f840 3b04 	str.w	r3, [r0], #4
 800b8ca:	e7f4      	b.n	800b8b6 <__copybits+0x30>

0800b8cc <__any_on>:
 800b8cc:	f100 0214 	add.w	r2, r0, #20
 800b8d0:	6900      	ldr	r0, [r0, #16]
 800b8d2:	114b      	asrs	r3, r1, #5
 800b8d4:	4298      	cmp	r0, r3
 800b8d6:	b510      	push	{r4, lr}
 800b8d8:	db11      	blt.n	800b8fe <__any_on+0x32>
 800b8da:	dd0a      	ble.n	800b8f2 <__any_on+0x26>
 800b8dc:	f011 011f 	ands.w	r1, r1, #31
 800b8e0:	d007      	beq.n	800b8f2 <__any_on+0x26>
 800b8e2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b8e6:	fa24 f001 	lsr.w	r0, r4, r1
 800b8ea:	fa00 f101 	lsl.w	r1, r0, r1
 800b8ee:	428c      	cmp	r4, r1
 800b8f0:	d10b      	bne.n	800b90a <__any_on+0x3e>
 800b8f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b8f6:	4293      	cmp	r3, r2
 800b8f8:	d803      	bhi.n	800b902 <__any_on+0x36>
 800b8fa:	2000      	movs	r0, #0
 800b8fc:	bd10      	pop	{r4, pc}
 800b8fe:	4603      	mov	r3, r0
 800b900:	e7f7      	b.n	800b8f2 <__any_on+0x26>
 800b902:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b906:	2900      	cmp	r1, #0
 800b908:	d0f5      	beq.n	800b8f6 <__any_on+0x2a>
 800b90a:	2001      	movs	r0, #1
 800b90c:	e7f6      	b.n	800b8fc <__any_on+0x30>

0800b90e <_calloc_r>:
 800b90e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b910:	fba1 2402 	umull	r2, r4, r1, r2
 800b914:	b94c      	cbnz	r4, 800b92a <_calloc_r+0x1c>
 800b916:	4611      	mov	r1, r2
 800b918:	9201      	str	r2, [sp, #4]
 800b91a:	f000 f87b 	bl	800ba14 <_malloc_r>
 800b91e:	9a01      	ldr	r2, [sp, #4]
 800b920:	4605      	mov	r5, r0
 800b922:	b930      	cbnz	r0, 800b932 <_calloc_r+0x24>
 800b924:	4628      	mov	r0, r5
 800b926:	b003      	add	sp, #12
 800b928:	bd30      	pop	{r4, r5, pc}
 800b92a:	220c      	movs	r2, #12
 800b92c:	6002      	str	r2, [r0, #0]
 800b92e:	2500      	movs	r5, #0
 800b930:	e7f8      	b.n	800b924 <_calloc_r+0x16>
 800b932:	4621      	mov	r1, r4
 800b934:	f7fc fbbe 	bl	80080b4 <memset>
 800b938:	e7f4      	b.n	800b924 <_calloc_r+0x16>
	...

0800b93c <_free_r>:
 800b93c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b93e:	2900      	cmp	r1, #0
 800b940:	d044      	beq.n	800b9cc <_free_r+0x90>
 800b942:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b946:	9001      	str	r0, [sp, #4]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	f1a1 0404 	sub.w	r4, r1, #4
 800b94e:	bfb8      	it	lt
 800b950:	18e4      	addlt	r4, r4, r3
 800b952:	f000 fab5 	bl	800bec0 <__malloc_lock>
 800b956:	4a1e      	ldr	r2, [pc, #120]	; (800b9d0 <_free_r+0x94>)
 800b958:	9801      	ldr	r0, [sp, #4]
 800b95a:	6813      	ldr	r3, [r2, #0]
 800b95c:	b933      	cbnz	r3, 800b96c <_free_r+0x30>
 800b95e:	6063      	str	r3, [r4, #4]
 800b960:	6014      	str	r4, [r2, #0]
 800b962:	b003      	add	sp, #12
 800b964:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b968:	f000 bab0 	b.w	800becc <__malloc_unlock>
 800b96c:	42a3      	cmp	r3, r4
 800b96e:	d908      	bls.n	800b982 <_free_r+0x46>
 800b970:	6825      	ldr	r5, [r4, #0]
 800b972:	1961      	adds	r1, r4, r5
 800b974:	428b      	cmp	r3, r1
 800b976:	bf01      	itttt	eq
 800b978:	6819      	ldreq	r1, [r3, #0]
 800b97a:	685b      	ldreq	r3, [r3, #4]
 800b97c:	1949      	addeq	r1, r1, r5
 800b97e:	6021      	streq	r1, [r4, #0]
 800b980:	e7ed      	b.n	800b95e <_free_r+0x22>
 800b982:	461a      	mov	r2, r3
 800b984:	685b      	ldr	r3, [r3, #4]
 800b986:	b10b      	cbz	r3, 800b98c <_free_r+0x50>
 800b988:	42a3      	cmp	r3, r4
 800b98a:	d9fa      	bls.n	800b982 <_free_r+0x46>
 800b98c:	6811      	ldr	r1, [r2, #0]
 800b98e:	1855      	adds	r5, r2, r1
 800b990:	42a5      	cmp	r5, r4
 800b992:	d10b      	bne.n	800b9ac <_free_r+0x70>
 800b994:	6824      	ldr	r4, [r4, #0]
 800b996:	4421      	add	r1, r4
 800b998:	1854      	adds	r4, r2, r1
 800b99a:	42a3      	cmp	r3, r4
 800b99c:	6011      	str	r1, [r2, #0]
 800b99e:	d1e0      	bne.n	800b962 <_free_r+0x26>
 800b9a0:	681c      	ldr	r4, [r3, #0]
 800b9a2:	685b      	ldr	r3, [r3, #4]
 800b9a4:	6053      	str	r3, [r2, #4]
 800b9a6:	4421      	add	r1, r4
 800b9a8:	6011      	str	r1, [r2, #0]
 800b9aa:	e7da      	b.n	800b962 <_free_r+0x26>
 800b9ac:	d902      	bls.n	800b9b4 <_free_r+0x78>
 800b9ae:	230c      	movs	r3, #12
 800b9b0:	6003      	str	r3, [r0, #0]
 800b9b2:	e7d6      	b.n	800b962 <_free_r+0x26>
 800b9b4:	6825      	ldr	r5, [r4, #0]
 800b9b6:	1961      	adds	r1, r4, r5
 800b9b8:	428b      	cmp	r3, r1
 800b9ba:	bf04      	itt	eq
 800b9bc:	6819      	ldreq	r1, [r3, #0]
 800b9be:	685b      	ldreq	r3, [r3, #4]
 800b9c0:	6063      	str	r3, [r4, #4]
 800b9c2:	bf04      	itt	eq
 800b9c4:	1949      	addeq	r1, r1, r5
 800b9c6:	6021      	streq	r1, [r4, #0]
 800b9c8:	6054      	str	r4, [r2, #4]
 800b9ca:	e7ca      	b.n	800b962 <_free_r+0x26>
 800b9cc:	b003      	add	sp, #12
 800b9ce:	bd30      	pop	{r4, r5, pc}
 800b9d0:	20000440 	.word	0x20000440

0800b9d4 <sbrk_aligned>:
 800b9d4:	b570      	push	{r4, r5, r6, lr}
 800b9d6:	4e0e      	ldr	r6, [pc, #56]	; (800ba10 <sbrk_aligned+0x3c>)
 800b9d8:	460c      	mov	r4, r1
 800b9da:	6831      	ldr	r1, [r6, #0]
 800b9dc:	4605      	mov	r5, r0
 800b9de:	b911      	cbnz	r1, 800b9e6 <sbrk_aligned+0x12>
 800b9e0:	f000 f9f2 	bl	800bdc8 <_sbrk_r>
 800b9e4:	6030      	str	r0, [r6, #0]
 800b9e6:	4621      	mov	r1, r4
 800b9e8:	4628      	mov	r0, r5
 800b9ea:	f000 f9ed 	bl	800bdc8 <_sbrk_r>
 800b9ee:	1c43      	adds	r3, r0, #1
 800b9f0:	d00a      	beq.n	800ba08 <sbrk_aligned+0x34>
 800b9f2:	1cc4      	adds	r4, r0, #3
 800b9f4:	f024 0403 	bic.w	r4, r4, #3
 800b9f8:	42a0      	cmp	r0, r4
 800b9fa:	d007      	beq.n	800ba0c <sbrk_aligned+0x38>
 800b9fc:	1a21      	subs	r1, r4, r0
 800b9fe:	4628      	mov	r0, r5
 800ba00:	f000 f9e2 	bl	800bdc8 <_sbrk_r>
 800ba04:	3001      	adds	r0, #1
 800ba06:	d101      	bne.n	800ba0c <sbrk_aligned+0x38>
 800ba08:	f04f 34ff 	mov.w	r4, #4294967295
 800ba0c:	4620      	mov	r0, r4
 800ba0e:	bd70      	pop	{r4, r5, r6, pc}
 800ba10:	20000444 	.word	0x20000444

0800ba14 <_malloc_r>:
 800ba14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba18:	1ccd      	adds	r5, r1, #3
 800ba1a:	f025 0503 	bic.w	r5, r5, #3
 800ba1e:	3508      	adds	r5, #8
 800ba20:	2d0c      	cmp	r5, #12
 800ba22:	bf38      	it	cc
 800ba24:	250c      	movcc	r5, #12
 800ba26:	2d00      	cmp	r5, #0
 800ba28:	4607      	mov	r7, r0
 800ba2a:	db01      	blt.n	800ba30 <_malloc_r+0x1c>
 800ba2c:	42a9      	cmp	r1, r5
 800ba2e:	d905      	bls.n	800ba3c <_malloc_r+0x28>
 800ba30:	230c      	movs	r3, #12
 800ba32:	603b      	str	r3, [r7, #0]
 800ba34:	2600      	movs	r6, #0
 800ba36:	4630      	mov	r0, r6
 800ba38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba3c:	4e2e      	ldr	r6, [pc, #184]	; (800baf8 <_malloc_r+0xe4>)
 800ba3e:	f000 fa3f 	bl	800bec0 <__malloc_lock>
 800ba42:	6833      	ldr	r3, [r6, #0]
 800ba44:	461c      	mov	r4, r3
 800ba46:	bb34      	cbnz	r4, 800ba96 <_malloc_r+0x82>
 800ba48:	4629      	mov	r1, r5
 800ba4a:	4638      	mov	r0, r7
 800ba4c:	f7ff ffc2 	bl	800b9d4 <sbrk_aligned>
 800ba50:	1c43      	adds	r3, r0, #1
 800ba52:	4604      	mov	r4, r0
 800ba54:	d14d      	bne.n	800baf2 <_malloc_r+0xde>
 800ba56:	6834      	ldr	r4, [r6, #0]
 800ba58:	4626      	mov	r6, r4
 800ba5a:	2e00      	cmp	r6, #0
 800ba5c:	d140      	bne.n	800bae0 <_malloc_r+0xcc>
 800ba5e:	6823      	ldr	r3, [r4, #0]
 800ba60:	4631      	mov	r1, r6
 800ba62:	4638      	mov	r0, r7
 800ba64:	eb04 0803 	add.w	r8, r4, r3
 800ba68:	f000 f9ae 	bl	800bdc8 <_sbrk_r>
 800ba6c:	4580      	cmp	r8, r0
 800ba6e:	d13a      	bne.n	800bae6 <_malloc_r+0xd2>
 800ba70:	6821      	ldr	r1, [r4, #0]
 800ba72:	3503      	adds	r5, #3
 800ba74:	1a6d      	subs	r5, r5, r1
 800ba76:	f025 0503 	bic.w	r5, r5, #3
 800ba7a:	3508      	adds	r5, #8
 800ba7c:	2d0c      	cmp	r5, #12
 800ba7e:	bf38      	it	cc
 800ba80:	250c      	movcc	r5, #12
 800ba82:	4629      	mov	r1, r5
 800ba84:	4638      	mov	r0, r7
 800ba86:	f7ff ffa5 	bl	800b9d4 <sbrk_aligned>
 800ba8a:	3001      	adds	r0, #1
 800ba8c:	d02b      	beq.n	800bae6 <_malloc_r+0xd2>
 800ba8e:	6823      	ldr	r3, [r4, #0]
 800ba90:	442b      	add	r3, r5
 800ba92:	6023      	str	r3, [r4, #0]
 800ba94:	e00e      	b.n	800bab4 <_malloc_r+0xa0>
 800ba96:	6822      	ldr	r2, [r4, #0]
 800ba98:	1b52      	subs	r2, r2, r5
 800ba9a:	d41e      	bmi.n	800bada <_malloc_r+0xc6>
 800ba9c:	2a0b      	cmp	r2, #11
 800ba9e:	d916      	bls.n	800bace <_malloc_r+0xba>
 800baa0:	1961      	adds	r1, r4, r5
 800baa2:	42a3      	cmp	r3, r4
 800baa4:	6025      	str	r5, [r4, #0]
 800baa6:	bf18      	it	ne
 800baa8:	6059      	strne	r1, [r3, #4]
 800baaa:	6863      	ldr	r3, [r4, #4]
 800baac:	bf08      	it	eq
 800baae:	6031      	streq	r1, [r6, #0]
 800bab0:	5162      	str	r2, [r4, r5]
 800bab2:	604b      	str	r3, [r1, #4]
 800bab4:	4638      	mov	r0, r7
 800bab6:	f104 060b 	add.w	r6, r4, #11
 800baba:	f000 fa07 	bl	800becc <__malloc_unlock>
 800babe:	f026 0607 	bic.w	r6, r6, #7
 800bac2:	1d23      	adds	r3, r4, #4
 800bac4:	1af2      	subs	r2, r6, r3
 800bac6:	d0b6      	beq.n	800ba36 <_malloc_r+0x22>
 800bac8:	1b9b      	subs	r3, r3, r6
 800baca:	50a3      	str	r3, [r4, r2]
 800bacc:	e7b3      	b.n	800ba36 <_malloc_r+0x22>
 800bace:	6862      	ldr	r2, [r4, #4]
 800bad0:	42a3      	cmp	r3, r4
 800bad2:	bf0c      	ite	eq
 800bad4:	6032      	streq	r2, [r6, #0]
 800bad6:	605a      	strne	r2, [r3, #4]
 800bad8:	e7ec      	b.n	800bab4 <_malloc_r+0xa0>
 800bada:	4623      	mov	r3, r4
 800badc:	6864      	ldr	r4, [r4, #4]
 800bade:	e7b2      	b.n	800ba46 <_malloc_r+0x32>
 800bae0:	4634      	mov	r4, r6
 800bae2:	6876      	ldr	r6, [r6, #4]
 800bae4:	e7b9      	b.n	800ba5a <_malloc_r+0x46>
 800bae6:	230c      	movs	r3, #12
 800bae8:	603b      	str	r3, [r7, #0]
 800baea:	4638      	mov	r0, r7
 800baec:	f000 f9ee 	bl	800becc <__malloc_unlock>
 800baf0:	e7a1      	b.n	800ba36 <_malloc_r+0x22>
 800baf2:	6025      	str	r5, [r4, #0]
 800baf4:	e7de      	b.n	800bab4 <_malloc_r+0xa0>
 800baf6:	bf00      	nop
 800baf8:	20000440 	.word	0x20000440

0800bafc <__ssputs_r>:
 800bafc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb00:	688e      	ldr	r6, [r1, #8]
 800bb02:	429e      	cmp	r6, r3
 800bb04:	4682      	mov	sl, r0
 800bb06:	460c      	mov	r4, r1
 800bb08:	4690      	mov	r8, r2
 800bb0a:	461f      	mov	r7, r3
 800bb0c:	d838      	bhi.n	800bb80 <__ssputs_r+0x84>
 800bb0e:	898a      	ldrh	r2, [r1, #12]
 800bb10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bb14:	d032      	beq.n	800bb7c <__ssputs_r+0x80>
 800bb16:	6825      	ldr	r5, [r4, #0]
 800bb18:	6909      	ldr	r1, [r1, #16]
 800bb1a:	eba5 0901 	sub.w	r9, r5, r1
 800bb1e:	6965      	ldr	r5, [r4, #20]
 800bb20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb28:	3301      	adds	r3, #1
 800bb2a:	444b      	add	r3, r9
 800bb2c:	106d      	asrs	r5, r5, #1
 800bb2e:	429d      	cmp	r5, r3
 800bb30:	bf38      	it	cc
 800bb32:	461d      	movcc	r5, r3
 800bb34:	0553      	lsls	r3, r2, #21
 800bb36:	d531      	bpl.n	800bb9c <__ssputs_r+0xa0>
 800bb38:	4629      	mov	r1, r5
 800bb3a:	f7ff ff6b 	bl	800ba14 <_malloc_r>
 800bb3e:	4606      	mov	r6, r0
 800bb40:	b950      	cbnz	r0, 800bb58 <__ssputs_r+0x5c>
 800bb42:	230c      	movs	r3, #12
 800bb44:	f8ca 3000 	str.w	r3, [sl]
 800bb48:	89a3      	ldrh	r3, [r4, #12]
 800bb4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb4e:	81a3      	strh	r3, [r4, #12]
 800bb50:	f04f 30ff 	mov.w	r0, #4294967295
 800bb54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb58:	6921      	ldr	r1, [r4, #16]
 800bb5a:	464a      	mov	r2, r9
 800bb5c:	f7ff fa08 	bl	800af70 <memcpy>
 800bb60:	89a3      	ldrh	r3, [r4, #12]
 800bb62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bb66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb6a:	81a3      	strh	r3, [r4, #12]
 800bb6c:	6126      	str	r6, [r4, #16]
 800bb6e:	6165      	str	r5, [r4, #20]
 800bb70:	444e      	add	r6, r9
 800bb72:	eba5 0509 	sub.w	r5, r5, r9
 800bb76:	6026      	str	r6, [r4, #0]
 800bb78:	60a5      	str	r5, [r4, #8]
 800bb7a:	463e      	mov	r6, r7
 800bb7c:	42be      	cmp	r6, r7
 800bb7e:	d900      	bls.n	800bb82 <__ssputs_r+0x86>
 800bb80:	463e      	mov	r6, r7
 800bb82:	6820      	ldr	r0, [r4, #0]
 800bb84:	4632      	mov	r2, r6
 800bb86:	4641      	mov	r1, r8
 800bb88:	f000 f980 	bl	800be8c <memmove>
 800bb8c:	68a3      	ldr	r3, [r4, #8]
 800bb8e:	1b9b      	subs	r3, r3, r6
 800bb90:	60a3      	str	r3, [r4, #8]
 800bb92:	6823      	ldr	r3, [r4, #0]
 800bb94:	4433      	add	r3, r6
 800bb96:	6023      	str	r3, [r4, #0]
 800bb98:	2000      	movs	r0, #0
 800bb9a:	e7db      	b.n	800bb54 <__ssputs_r+0x58>
 800bb9c:	462a      	mov	r2, r5
 800bb9e:	f000 f99b 	bl	800bed8 <_realloc_r>
 800bba2:	4606      	mov	r6, r0
 800bba4:	2800      	cmp	r0, #0
 800bba6:	d1e1      	bne.n	800bb6c <__ssputs_r+0x70>
 800bba8:	6921      	ldr	r1, [r4, #16]
 800bbaa:	4650      	mov	r0, sl
 800bbac:	f7ff fec6 	bl	800b93c <_free_r>
 800bbb0:	e7c7      	b.n	800bb42 <__ssputs_r+0x46>
	...

0800bbb4 <_svfiprintf_r>:
 800bbb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbb8:	4698      	mov	r8, r3
 800bbba:	898b      	ldrh	r3, [r1, #12]
 800bbbc:	061b      	lsls	r3, r3, #24
 800bbbe:	b09d      	sub	sp, #116	; 0x74
 800bbc0:	4607      	mov	r7, r0
 800bbc2:	460d      	mov	r5, r1
 800bbc4:	4614      	mov	r4, r2
 800bbc6:	d50e      	bpl.n	800bbe6 <_svfiprintf_r+0x32>
 800bbc8:	690b      	ldr	r3, [r1, #16]
 800bbca:	b963      	cbnz	r3, 800bbe6 <_svfiprintf_r+0x32>
 800bbcc:	2140      	movs	r1, #64	; 0x40
 800bbce:	f7ff ff21 	bl	800ba14 <_malloc_r>
 800bbd2:	6028      	str	r0, [r5, #0]
 800bbd4:	6128      	str	r0, [r5, #16]
 800bbd6:	b920      	cbnz	r0, 800bbe2 <_svfiprintf_r+0x2e>
 800bbd8:	230c      	movs	r3, #12
 800bbda:	603b      	str	r3, [r7, #0]
 800bbdc:	f04f 30ff 	mov.w	r0, #4294967295
 800bbe0:	e0d1      	b.n	800bd86 <_svfiprintf_r+0x1d2>
 800bbe2:	2340      	movs	r3, #64	; 0x40
 800bbe4:	616b      	str	r3, [r5, #20]
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	9309      	str	r3, [sp, #36]	; 0x24
 800bbea:	2320      	movs	r3, #32
 800bbec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bbf0:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbf4:	2330      	movs	r3, #48	; 0x30
 800bbf6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bda0 <_svfiprintf_r+0x1ec>
 800bbfa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bbfe:	f04f 0901 	mov.w	r9, #1
 800bc02:	4623      	mov	r3, r4
 800bc04:	469a      	mov	sl, r3
 800bc06:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc0a:	b10a      	cbz	r2, 800bc10 <_svfiprintf_r+0x5c>
 800bc0c:	2a25      	cmp	r2, #37	; 0x25
 800bc0e:	d1f9      	bne.n	800bc04 <_svfiprintf_r+0x50>
 800bc10:	ebba 0b04 	subs.w	fp, sl, r4
 800bc14:	d00b      	beq.n	800bc2e <_svfiprintf_r+0x7a>
 800bc16:	465b      	mov	r3, fp
 800bc18:	4622      	mov	r2, r4
 800bc1a:	4629      	mov	r1, r5
 800bc1c:	4638      	mov	r0, r7
 800bc1e:	f7ff ff6d 	bl	800bafc <__ssputs_r>
 800bc22:	3001      	adds	r0, #1
 800bc24:	f000 80aa 	beq.w	800bd7c <_svfiprintf_r+0x1c8>
 800bc28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc2a:	445a      	add	r2, fp
 800bc2c:	9209      	str	r2, [sp, #36]	; 0x24
 800bc2e:	f89a 3000 	ldrb.w	r3, [sl]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	f000 80a2 	beq.w	800bd7c <_svfiprintf_r+0x1c8>
 800bc38:	2300      	movs	r3, #0
 800bc3a:	f04f 32ff 	mov.w	r2, #4294967295
 800bc3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc42:	f10a 0a01 	add.w	sl, sl, #1
 800bc46:	9304      	str	r3, [sp, #16]
 800bc48:	9307      	str	r3, [sp, #28]
 800bc4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc4e:	931a      	str	r3, [sp, #104]	; 0x68
 800bc50:	4654      	mov	r4, sl
 800bc52:	2205      	movs	r2, #5
 800bc54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc58:	4851      	ldr	r0, [pc, #324]	; (800bda0 <_svfiprintf_r+0x1ec>)
 800bc5a:	f7f4 fac1 	bl	80001e0 <memchr>
 800bc5e:	9a04      	ldr	r2, [sp, #16]
 800bc60:	b9d8      	cbnz	r0, 800bc9a <_svfiprintf_r+0xe6>
 800bc62:	06d0      	lsls	r0, r2, #27
 800bc64:	bf44      	itt	mi
 800bc66:	2320      	movmi	r3, #32
 800bc68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc6c:	0711      	lsls	r1, r2, #28
 800bc6e:	bf44      	itt	mi
 800bc70:	232b      	movmi	r3, #43	; 0x2b
 800bc72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc76:	f89a 3000 	ldrb.w	r3, [sl]
 800bc7a:	2b2a      	cmp	r3, #42	; 0x2a
 800bc7c:	d015      	beq.n	800bcaa <_svfiprintf_r+0xf6>
 800bc7e:	9a07      	ldr	r2, [sp, #28]
 800bc80:	4654      	mov	r4, sl
 800bc82:	2000      	movs	r0, #0
 800bc84:	f04f 0c0a 	mov.w	ip, #10
 800bc88:	4621      	mov	r1, r4
 800bc8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc8e:	3b30      	subs	r3, #48	; 0x30
 800bc90:	2b09      	cmp	r3, #9
 800bc92:	d94e      	bls.n	800bd32 <_svfiprintf_r+0x17e>
 800bc94:	b1b0      	cbz	r0, 800bcc4 <_svfiprintf_r+0x110>
 800bc96:	9207      	str	r2, [sp, #28]
 800bc98:	e014      	b.n	800bcc4 <_svfiprintf_r+0x110>
 800bc9a:	eba0 0308 	sub.w	r3, r0, r8
 800bc9e:	fa09 f303 	lsl.w	r3, r9, r3
 800bca2:	4313      	orrs	r3, r2
 800bca4:	9304      	str	r3, [sp, #16]
 800bca6:	46a2      	mov	sl, r4
 800bca8:	e7d2      	b.n	800bc50 <_svfiprintf_r+0x9c>
 800bcaa:	9b03      	ldr	r3, [sp, #12]
 800bcac:	1d19      	adds	r1, r3, #4
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	9103      	str	r1, [sp, #12]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	bfbb      	ittet	lt
 800bcb6:	425b      	neglt	r3, r3
 800bcb8:	f042 0202 	orrlt.w	r2, r2, #2
 800bcbc:	9307      	strge	r3, [sp, #28]
 800bcbe:	9307      	strlt	r3, [sp, #28]
 800bcc0:	bfb8      	it	lt
 800bcc2:	9204      	strlt	r2, [sp, #16]
 800bcc4:	7823      	ldrb	r3, [r4, #0]
 800bcc6:	2b2e      	cmp	r3, #46	; 0x2e
 800bcc8:	d10c      	bne.n	800bce4 <_svfiprintf_r+0x130>
 800bcca:	7863      	ldrb	r3, [r4, #1]
 800bccc:	2b2a      	cmp	r3, #42	; 0x2a
 800bcce:	d135      	bne.n	800bd3c <_svfiprintf_r+0x188>
 800bcd0:	9b03      	ldr	r3, [sp, #12]
 800bcd2:	1d1a      	adds	r2, r3, #4
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	9203      	str	r2, [sp, #12]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	bfb8      	it	lt
 800bcdc:	f04f 33ff 	movlt.w	r3, #4294967295
 800bce0:	3402      	adds	r4, #2
 800bce2:	9305      	str	r3, [sp, #20]
 800bce4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bdb0 <_svfiprintf_r+0x1fc>
 800bce8:	7821      	ldrb	r1, [r4, #0]
 800bcea:	2203      	movs	r2, #3
 800bcec:	4650      	mov	r0, sl
 800bcee:	f7f4 fa77 	bl	80001e0 <memchr>
 800bcf2:	b140      	cbz	r0, 800bd06 <_svfiprintf_r+0x152>
 800bcf4:	2340      	movs	r3, #64	; 0x40
 800bcf6:	eba0 000a 	sub.w	r0, r0, sl
 800bcfa:	fa03 f000 	lsl.w	r0, r3, r0
 800bcfe:	9b04      	ldr	r3, [sp, #16]
 800bd00:	4303      	orrs	r3, r0
 800bd02:	3401      	adds	r4, #1
 800bd04:	9304      	str	r3, [sp, #16]
 800bd06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd0a:	4826      	ldr	r0, [pc, #152]	; (800bda4 <_svfiprintf_r+0x1f0>)
 800bd0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd10:	2206      	movs	r2, #6
 800bd12:	f7f4 fa65 	bl	80001e0 <memchr>
 800bd16:	2800      	cmp	r0, #0
 800bd18:	d038      	beq.n	800bd8c <_svfiprintf_r+0x1d8>
 800bd1a:	4b23      	ldr	r3, [pc, #140]	; (800bda8 <_svfiprintf_r+0x1f4>)
 800bd1c:	bb1b      	cbnz	r3, 800bd66 <_svfiprintf_r+0x1b2>
 800bd1e:	9b03      	ldr	r3, [sp, #12]
 800bd20:	3307      	adds	r3, #7
 800bd22:	f023 0307 	bic.w	r3, r3, #7
 800bd26:	3308      	adds	r3, #8
 800bd28:	9303      	str	r3, [sp, #12]
 800bd2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd2c:	4433      	add	r3, r6
 800bd2e:	9309      	str	r3, [sp, #36]	; 0x24
 800bd30:	e767      	b.n	800bc02 <_svfiprintf_r+0x4e>
 800bd32:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd36:	460c      	mov	r4, r1
 800bd38:	2001      	movs	r0, #1
 800bd3a:	e7a5      	b.n	800bc88 <_svfiprintf_r+0xd4>
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	3401      	adds	r4, #1
 800bd40:	9305      	str	r3, [sp, #20]
 800bd42:	4619      	mov	r1, r3
 800bd44:	f04f 0c0a 	mov.w	ip, #10
 800bd48:	4620      	mov	r0, r4
 800bd4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd4e:	3a30      	subs	r2, #48	; 0x30
 800bd50:	2a09      	cmp	r2, #9
 800bd52:	d903      	bls.n	800bd5c <_svfiprintf_r+0x1a8>
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d0c5      	beq.n	800bce4 <_svfiprintf_r+0x130>
 800bd58:	9105      	str	r1, [sp, #20]
 800bd5a:	e7c3      	b.n	800bce4 <_svfiprintf_r+0x130>
 800bd5c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd60:	4604      	mov	r4, r0
 800bd62:	2301      	movs	r3, #1
 800bd64:	e7f0      	b.n	800bd48 <_svfiprintf_r+0x194>
 800bd66:	ab03      	add	r3, sp, #12
 800bd68:	9300      	str	r3, [sp, #0]
 800bd6a:	462a      	mov	r2, r5
 800bd6c:	4b0f      	ldr	r3, [pc, #60]	; (800bdac <_svfiprintf_r+0x1f8>)
 800bd6e:	a904      	add	r1, sp, #16
 800bd70:	4638      	mov	r0, r7
 800bd72:	f7fc fa47 	bl	8008204 <_printf_float>
 800bd76:	1c42      	adds	r2, r0, #1
 800bd78:	4606      	mov	r6, r0
 800bd7a:	d1d6      	bne.n	800bd2a <_svfiprintf_r+0x176>
 800bd7c:	89ab      	ldrh	r3, [r5, #12]
 800bd7e:	065b      	lsls	r3, r3, #25
 800bd80:	f53f af2c 	bmi.w	800bbdc <_svfiprintf_r+0x28>
 800bd84:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd86:	b01d      	add	sp, #116	; 0x74
 800bd88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd8c:	ab03      	add	r3, sp, #12
 800bd8e:	9300      	str	r3, [sp, #0]
 800bd90:	462a      	mov	r2, r5
 800bd92:	4b06      	ldr	r3, [pc, #24]	; (800bdac <_svfiprintf_r+0x1f8>)
 800bd94:	a904      	add	r1, sp, #16
 800bd96:	4638      	mov	r0, r7
 800bd98:	f7fc fcd8 	bl	800874c <_printf_i>
 800bd9c:	e7eb      	b.n	800bd76 <_svfiprintf_r+0x1c2>
 800bd9e:	bf00      	nop
 800bda0:	0800d1ec 	.word	0x0800d1ec
 800bda4:	0800d1f6 	.word	0x0800d1f6
 800bda8:	08008205 	.word	0x08008205
 800bdac:	0800bafd 	.word	0x0800bafd
 800bdb0:	0800d1f2 	.word	0x0800d1f2
 800bdb4:	00000000 	.word	0x00000000

0800bdb8 <nan>:
 800bdb8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bdc0 <nan+0x8>
 800bdbc:	4770      	bx	lr
 800bdbe:	bf00      	nop
 800bdc0:	00000000 	.word	0x00000000
 800bdc4:	7ff80000 	.word	0x7ff80000

0800bdc8 <_sbrk_r>:
 800bdc8:	b538      	push	{r3, r4, r5, lr}
 800bdca:	4d06      	ldr	r5, [pc, #24]	; (800bde4 <_sbrk_r+0x1c>)
 800bdcc:	2300      	movs	r3, #0
 800bdce:	4604      	mov	r4, r0
 800bdd0:	4608      	mov	r0, r1
 800bdd2:	602b      	str	r3, [r5, #0]
 800bdd4:	f7f7 f85c 	bl	8002e90 <_sbrk>
 800bdd8:	1c43      	adds	r3, r0, #1
 800bdda:	d102      	bne.n	800bde2 <_sbrk_r+0x1a>
 800bddc:	682b      	ldr	r3, [r5, #0]
 800bdde:	b103      	cbz	r3, 800bde2 <_sbrk_r+0x1a>
 800bde0:	6023      	str	r3, [r4, #0]
 800bde2:	bd38      	pop	{r3, r4, r5, pc}
 800bde4:	20000448 	.word	0x20000448

0800bde8 <strncmp>:
 800bde8:	b510      	push	{r4, lr}
 800bdea:	b17a      	cbz	r2, 800be0c <strncmp+0x24>
 800bdec:	4603      	mov	r3, r0
 800bdee:	3901      	subs	r1, #1
 800bdf0:	1884      	adds	r4, r0, r2
 800bdf2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bdf6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bdfa:	4290      	cmp	r0, r2
 800bdfc:	d101      	bne.n	800be02 <strncmp+0x1a>
 800bdfe:	42a3      	cmp	r3, r4
 800be00:	d101      	bne.n	800be06 <strncmp+0x1e>
 800be02:	1a80      	subs	r0, r0, r2
 800be04:	bd10      	pop	{r4, pc}
 800be06:	2800      	cmp	r0, #0
 800be08:	d1f3      	bne.n	800bdf2 <strncmp+0xa>
 800be0a:	e7fa      	b.n	800be02 <strncmp+0x1a>
 800be0c:	4610      	mov	r0, r2
 800be0e:	e7f9      	b.n	800be04 <strncmp+0x1c>

0800be10 <__ascii_wctomb>:
 800be10:	b149      	cbz	r1, 800be26 <__ascii_wctomb+0x16>
 800be12:	2aff      	cmp	r2, #255	; 0xff
 800be14:	bf85      	ittet	hi
 800be16:	238a      	movhi	r3, #138	; 0x8a
 800be18:	6003      	strhi	r3, [r0, #0]
 800be1a:	700a      	strbls	r2, [r1, #0]
 800be1c:	f04f 30ff 	movhi.w	r0, #4294967295
 800be20:	bf98      	it	ls
 800be22:	2001      	movls	r0, #1
 800be24:	4770      	bx	lr
 800be26:	4608      	mov	r0, r1
 800be28:	4770      	bx	lr
	...

0800be2c <__assert_func>:
 800be2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be2e:	4614      	mov	r4, r2
 800be30:	461a      	mov	r2, r3
 800be32:	4b09      	ldr	r3, [pc, #36]	; (800be58 <__assert_func+0x2c>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	4605      	mov	r5, r0
 800be38:	68d8      	ldr	r0, [r3, #12]
 800be3a:	b14c      	cbz	r4, 800be50 <__assert_func+0x24>
 800be3c:	4b07      	ldr	r3, [pc, #28]	; (800be5c <__assert_func+0x30>)
 800be3e:	9100      	str	r1, [sp, #0]
 800be40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800be44:	4906      	ldr	r1, [pc, #24]	; (800be60 <__assert_func+0x34>)
 800be46:	462b      	mov	r3, r5
 800be48:	f000 f80e 	bl	800be68 <fiprintf>
 800be4c:	f000 fa8c 	bl	800c368 <abort>
 800be50:	4b04      	ldr	r3, [pc, #16]	; (800be64 <__assert_func+0x38>)
 800be52:	461c      	mov	r4, r3
 800be54:	e7f3      	b.n	800be3e <__assert_func+0x12>
 800be56:	bf00      	nop
 800be58:	20000018 	.word	0x20000018
 800be5c:	0800d1fd 	.word	0x0800d1fd
 800be60:	0800d20a 	.word	0x0800d20a
 800be64:	0800d238 	.word	0x0800d238

0800be68 <fiprintf>:
 800be68:	b40e      	push	{r1, r2, r3}
 800be6a:	b503      	push	{r0, r1, lr}
 800be6c:	4601      	mov	r1, r0
 800be6e:	ab03      	add	r3, sp, #12
 800be70:	4805      	ldr	r0, [pc, #20]	; (800be88 <fiprintf+0x20>)
 800be72:	f853 2b04 	ldr.w	r2, [r3], #4
 800be76:	6800      	ldr	r0, [r0, #0]
 800be78:	9301      	str	r3, [sp, #4]
 800be7a:	f000 f885 	bl	800bf88 <_vfiprintf_r>
 800be7e:	b002      	add	sp, #8
 800be80:	f85d eb04 	ldr.w	lr, [sp], #4
 800be84:	b003      	add	sp, #12
 800be86:	4770      	bx	lr
 800be88:	20000018 	.word	0x20000018

0800be8c <memmove>:
 800be8c:	4288      	cmp	r0, r1
 800be8e:	b510      	push	{r4, lr}
 800be90:	eb01 0402 	add.w	r4, r1, r2
 800be94:	d902      	bls.n	800be9c <memmove+0x10>
 800be96:	4284      	cmp	r4, r0
 800be98:	4623      	mov	r3, r4
 800be9a:	d807      	bhi.n	800beac <memmove+0x20>
 800be9c:	1e43      	subs	r3, r0, #1
 800be9e:	42a1      	cmp	r1, r4
 800bea0:	d008      	beq.n	800beb4 <memmove+0x28>
 800bea2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bea6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800beaa:	e7f8      	b.n	800be9e <memmove+0x12>
 800beac:	4402      	add	r2, r0
 800beae:	4601      	mov	r1, r0
 800beb0:	428a      	cmp	r2, r1
 800beb2:	d100      	bne.n	800beb6 <memmove+0x2a>
 800beb4:	bd10      	pop	{r4, pc}
 800beb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800beba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bebe:	e7f7      	b.n	800beb0 <memmove+0x24>

0800bec0 <__malloc_lock>:
 800bec0:	4801      	ldr	r0, [pc, #4]	; (800bec8 <__malloc_lock+0x8>)
 800bec2:	f000 bc11 	b.w	800c6e8 <__retarget_lock_acquire_recursive>
 800bec6:	bf00      	nop
 800bec8:	2000044c 	.word	0x2000044c

0800becc <__malloc_unlock>:
 800becc:	4801      	ldr	r0, [pc, #4]	; (800bed4 <__malloc_unlock+0x8>)
 800bece:	f000 bc0c 	b.w	800c6ea <__retarget_lock_release_recursive>
 800bed2:	bf00      	nop
 800bed4:	2000044c 	.word	0x2000044c

0800bed8 <_realloc_r>:
 800bed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bedc:	4680      	mov	r8, r0
 800bede:	4614      	mov	r4, r2
 800bee0:	460e      	mov	r6, r1
 800bee2:	b921      	cbnz	r1, 800beee <_realloc_r+0x16>
 800bee4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bee8:	4611      	mov	r1, r2
 800beea:	f7ff bd93 	b.w	800ba14 <_malloc_r>
 800beee:	b92a      	cbnz	r2, 800befc <_realloc_r+0x24>
 800bef0:	f7ff fd24 	bl	800b93c <_free_r>
 800bef4:	4625      	mov	r5, r4
 800bef6:	4628      	mov	r0, r5
 800bef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800befc:	f000 fc5c 	bl	800c7b8 <_malloc_usable_size_r>
 800bf00:	4284      	cmp	r4, r0
 800bf02:	4607      	mov	r7, r0
 800bf04:	d802      	bhi.n	800bf0c <_realloc_r+0x34>
 800bf06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bf0a:	d812      	bhi.n	800bf32 <_realloc_r+0x5a>
 800bf0c:	4621      	mov	r1, r4
 800bf0e:	4640      	mov	r0, r8
 800bf10:	f7ff fd80 	bl	800ba14 <_malloc_r>
 800bf14:	4605      	mov	r5, r0
 800bf16:	2800      	cmp	r0, #0
 800bf18:	d0ed      	beq.n	800bef6 <_realloc_r+0x1e>
 800bf1a:	42bc      	cmp	r4, r7
 800bf1c:	4622      	mov	r2, r4
 800bf1e:	4631      	mov	r1, r6
 800bf20:	bf28      	it	cs
 800bf22:	463a      	movcs	r2, r7
 800bf24:	f7ff f824 	bl	800af70 <memcpy>
 800bf28:	4631      	mov	r1, r6
 800bf2a:	4640      	mov	r0, r8
 800bf2c:	f7ff fd06 	bl	800b93c <_free_r>
 800bf30:	e7e1      	b.n	800bef6 <_realloc_r+0x1e>
 800bf32:	4635      	mov	r5, r6
 800bf34:	e7df      	b.n	800bef6 <_realloc_r+0x1e>

0800bf36 <__sfputc_r>:
 800bf36:	6893      	ldr	r3, [r2, #8]
 800bf38:	3b01      	subs	r3, #1
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	b410      	push	{r4}
 800bf3e:	6093      	str	r3, [r2, #8]
 800bf40:	da08      	bge.n	800bf54 <__sfputc_r+0x1e>
 800bf42:	6994      	ldr	r4, [r2, #24]
 800bf44:	42a3      	cmp	r3, r4
 800bf46:	db01      	blt.n	800bf4c <__sfputc_r+0x16>
 800bf48:	290a      	cmp	r1, #10
 800bf4a:	d103      	bne.n	800bf54 <__sfputc_r+0x1e>
 800bf4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf50:	f000 b94a 	b.w	800c1e8 <__swbuf_r>
 800bf54:	6813      	ldr	r3, [r2, #0]
 800bf56:	1c58      	adds	r0, r3, #1
 800bf58:	6010      	str	r0, [r2, #0]
 800bf5a:	7019      	strb	r1, [r3, #0]
 800bf5c:	4608      	mov	r0, r1
 800bf5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf62:	4770      	bx	lr

0800bf64 <__sfputs_r>:
 800bf64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf66:	4606      	mov	r6, r0
 800bf68:	460f      	mov	r7, r1
 800bf6a:	4614      	mov	r4, r2
 800bf6c:	18d5      	adds	r5, r2, r3
 800bf6e:	42ac      	cmp	r4, r5
 800bf70:	d101      	bne.n	800bf76 <__sfputs_r+0x12>
 800bf72:	2000      	movs	r0, #0
 800bf74:	e007      	b.n	800bf86 <__sfputs_r+0x22>
 800bf76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf7a:	463a      	mov	r2, r7
 800bf7c:	4630      	mov	r0, r6
 800bf7e:	f7ff ffda 	bl	800bf36 <__sfputc_r>
 800bf82:	1c43      	adds	r3, r0, #1
 800bf84:	d1f3      	bne.n	800bf6e <__sfputs_r+0xa>
 800bf86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bf88 <_vfiprintf_r>:
 800bf88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf8c:	460d      	mov	r5, r1
 800bf8e:	b09d      	sub	sp, #116	; 0x74
 800bf90:	4614      	mov	r4, r2
 800bf92:	4698      	mov	r8, r3
 800bf94:	4606      	mov	r6, r0
 800bf96:	b118      	cbz	r0, 800bfa0 <_vfiprintf_r+0x18>
 800bf98:	6983      	ldr	r3, [r0, #24]
 800bf9a:	b90b      	cbnz	r3, 800bfa0 <_vfiprintf_r+0x18>
 800bf9c:	f000 fb06 	bl	800c5ac <__sinit>
 800bfa0:	4b89      	ldr	r3, [pc, #548]	; (800c1c8 <_vfiprintf_r+0x240>)
 800bfa2:	429d      	cmp	r5, r3
 800bfa4:	d11b      	bne.n	800bfde <_vfiprintf_r+0x56>
 800bfa6:	6875      	ldr	r5, [r6, #4]
 800bfa8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bfaa:	07d9      	lsls	r1, r3, #31
 800bfac:	d405      	bmi.n	800bfba <_vfiprintf_r+0x32>
 800bfae:	89ab      	ldrh	r3, [r5, #12]
 800bfb0:	059a      	lsls	r2, r3, #22
 800bfb2:	d402      	bmi.n	800bfba <_vfiprintf_r+0x32>
 800bfb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bfb6:	f000 fb97 	bl	800c6e8 <__retarget_lock_acquire_recursive>
 800bfba:	89ab      	ldrh	r3, [r5, #12]
 800bfbc:	071b      	lsls	r3, r3, #28
 800bfbe:	d501      	bpl.n	800bfc4 <_vfiprintf_r+0x3c>
 800bfc0:	692b      	ldr	r3, [r5, #16]
 800bfc2:	b9eb      	cbnz	r3, 800c000 <_vfiprintf_r+0x78>
 800bfc4:	4629      	mov	r1, r5
 800bfc6:	4630      	mov	r0, r6
 800bfc8:	f000 f960 	bl	800c28c <__swsetup_r>
 800bfcc:	b1c0      	cbz	r0, 800c000 <_vfiprintf_r+0x78>
 800bfce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bfd0:	07dc      	lsls	r4, r3, #31
 800bfd2:	d50e      	bpl.n	800bff2 <_vfiprintf_r+0x6a>
 800bfd4:	f04f 30ff 	mov.w	r0, #4294967295
 800bfd8:	b01d      	add	sp, #116	; 0x74
 800bfda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfde:	4b7b      	ldr	r3, [pc, #492]	; (800c1cc <_vfiprintf_r+0x244>)
 800bfe0:	429d      	cmp	r5, r3
 800bfe2:	d101      	bne.n	800bfe8 <_vfiprintf_r+0x60>
 800bfe4:	68b5      	ldr	r5, [r6, #8]
 800bfe6:	e7df      	b.n	800bfa8 <_vfiprintf_r+0x20>
 800bfe8:	4b79      	ldr	r3, [pc, #484]	; (800c1d0 <_vfiprintf_r+0x248>)
 800bfea:	429d      	cmp	r5, r3
 800bfec:	bf08      	it	eq
 800bfee:	68f5      	ldreq	r5, [r6, #12]
 800bff0:	e7da      	b.n	800bfa8 <_vfiprintf_r+0x20>
 800bff2:	89ab      	ldrh	r3, [r5, #12]
 800bff4:	0598      	lsls	r0, r3, #22
 800bff6:	d4ed      	bmi.n	800bfd4 <_vfiprintf_r+0x4c>
 800bff8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bffa:	f000 fb76 	bl	800c6ea <__retarget_lock_release_recursive>
 800bffe:	e7e9      	b.n	800bfd4 <_vfiprintf_r+0x4c>
 800c000:	2300      	movs	r3, #0
 800c002:	9309      	str	r3, [sp, #36]	; 0x24
 800c004:	2320      	movs	r3, #32
 800c006:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c00a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c00e:	2330      	movs	r3, #48	; 0x30
 800c010:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c1d4 <_vfiprintf_r+0x24c>
 800c014:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c018:	f04f 0901 	mov.w	r9, #1
 800c01c:	4623      	mov	r3, r4
 800c01e:	469a      	mov	sl, r3
 800c020:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c024:	b10a      	cbz	r2, 800c02a <_vfiprintf_r+0xa2>
 800c026:	2a25      	cmp	r2, #37	; 0x25
 800c028:	d1f9      	bne.n	800c01e <_vfiprintf_r+0x96>
 800c02a:	ebba 0b04 	subs.w	fp, sl, r4
 800c02e:	d00b      	beq.n	800c048 <_vfiprintf_r+0xc0>
 800c030:	465b      	mov	r3, fp
 800c032:	4622      	mov	r2, r4
 800c034:	4629      	mov	r1, r5
 800c036:	4630      	mov	r0, r6
 800c038:	f7ff ff94 	bl	800bf64 <__sfputs_r>
 800c03c:	3001      	adds	r0, #1
 800c03e:	f000 80aa 	beq.w	800c196 <_vfiprintf_r+0x20e>
 800c042:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c044:	445a      	add	r2, fp
 800c046:	9209      	str	r2, [sp, #36]	; 0x24
 800c048:	f89a 3000 	ldrb.w	r3, [sl]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	f000 80a2 	beq.w	800c196 <_vfiprintf_r+0x20e>
 800c052:	2300      	movs	r3, #0
 800c054:	f04f 32ff 	mov.w	r2, #4294967295
 800c058:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c05c:	f10a 0a01 	add.w	sl, sl, #1
 800c060:	9304      	str	r3, [sp, #16]
 800c062:	9307      	str	r3, [sp, #28]
 800c064:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c068:	931a      	str	r3, [sp, #104]	; 0x68
 800c06a:	4654      	mov	r4, sl
 800c06c:	2205      	movs	r2, #5
 800c06e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c072:	4858      	ldr	r0, [pc, #352]	; (800c1d4 <_vfiprintf_r+0x24c>)
 800c074:	f7f4 f8b4 	bl	80001e0 <memchr>
 800c078:	9a04      	ldr	r2, [sp, #16]
 800c07a:	b9d8      	cbnz	r0, 800c0b4 <_vfiprintf_r+0x12c>
 800c07c:	06d1      	lsls	r1, r2, #27
 800c07e:	bf44      	itt	mi
 800c080:	2320      	movmi	r3, #32
 800c082:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c086:	0713      	lsls	r3, r2, #28
 800c088:	bf44      	itt	mi
 800c08a:	232b      	movmi	r3, #43	; 0x2b
 800c08c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c090:	f89a 3000 	ldrb.w	r3, [sl]
 800c094:	2b2a      	cmp	r3, #42	; 0x2a
 800c096:	d015      	beq.n	800c0c4 <_vfiprintf_r+0x13c>
 800c098:	9a07      	ldr	r2, [sp, #28]
 800c09a:	4654      	mov	r4, sl
 800c09c:	2000      	movs	r0, #0
 800c09e:	f04f 0c0a 	mov.w	ip, #10
 800c0a2:	4621      	mov	r1, r4
 800c0a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c0a8:	3b30      	subs	r3, #48	; 0x30
 800c0aa:	2b09      	cmp	r3, #9
 800c0ac:	d94e      	bls.n	800c14c <_vfiprintf_r+0x1c4>
 800c0ae:	b1b0      	cbz	r0, 800c0de <_vfiprintf_r+0x156>
 800c0b0:	9207      	str	r2, [sp, #28]
 800c0b2:	e014      	b.n	800c0de <_vfiprintf_r+0x156>
 800c0b4:	eba0 0308 	sub.w	r3, r0, r8
 800c0b8:	fa09 f303 	lsl.w	r3, r9, r3
 800c0bc:	4313      	orrs	r3, r2
 800c0be:	9304      	str	r3, [sp, #16]
 800c0c0:	46a2      	mov	sl, r4
 800c0c2:	e7d2      	b.n	800c06a <_vfiprintf_r+0xe2>
 800c0c4:	9b03      	ldr	r3, [sp, #12]
 800c0c6:	1d19      	adds	r1, r3, #4
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	9103      	str	r1, [sp, #12]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	bfbb      	ittet	lt
 800c0d0:	425b      	neglt	r3, r3
 800c0d2:	f042 0202 	orrlt.w	r2, r2, #2
 800c0d6:	9307      	strge	r3, [sp, #28]
 800c0d8:	9307      	strlt	r3, [sp, #28]
 800c0da:	bfb8      	it	lt
 800c0dc:	9204      	strlt	r2, [sp, #16]
 800c0de:	7823      	ldrb	r3, [r4, #0]
 800c0e0:	2b2e      	cmp	r3, #46	; 0x2e
 800c0e2:	d10c      	bne.n	800c0fe <_vfiprintf_r+0x176>
 800c0e4:	7863      	ldrb	r3, [r4, #1]
 800c0e6:	2b2a      	cmp	r3, #42	; 0x2a
 800c0e8:	d135      	bne.n	800c156 <_vfiprintf_r+0x1ce>
 800c0ea:	9b03      	ldr	r3, [sp, #12]
 800c0ec:	1d1a      	adds	r2, r3, #4
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	9203      	str	r2, [sp, #12]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	bfb8      	it	lt
 800c0f6:	f04f 33ff 	movlt.w	r3, #4294967295
 800c0fa:	3402      	adds	r4, #2
 800c0fc:	9305      	str	r3, [sp, #20]
 800c0fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c1e4 <_vfiprintf_r+0x25c>
 800c102:	7821      	ldrb	r1, [r4, #0]
 800c104:	2203      	movs	r2, #3
 800c106:	4650      	mov	r0, sl
 800c108:	f7f4 f86a 	bl	80001e0 <memchr>
 800c10c:	b140      	cbz	r0, 800c120 <_vfiprintf_r+0x198>
 800c10e:	2340      	movs	r3, #64	; 0x40
 800c110:	eba0 000a 	sub.w	r0, r0, sl
 800c114:	fa03 f000 	lsl.w	r0, r3, r0
 800c118:	9b04      	ldr	r3, [sp, #16]
 800c11a:	4303      	orrs	r3, r0
 800c11c:	3401      	adds	r4, #1
 800c11e:	9304      	str	r3, [sp, #16]
 800c120:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c124:	482c      	ldr	r0, [pc, #176]	; (800c1d8 <_vfiprintf_r+0x250>)
 800c126:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c12a:	2206      	movs	r2, #6
 800c12c:	f7f4 f858 	bl	80001e0 <memchr>
 800c130:	2800      	cmp	r0, #0
 800c132:	d03f      	beq.n	800c1b4 <_vfiprintf_r+0x22c>
 800c134:	4b29      	ldr	r3, [pc, #164]	; (800c1dc <_vfiprintf_r+0x254>)
 800c136:	bb1b      	cbnz	r3, 800c180 <_vfiprintf_r+0x1f8>
 800c138:	9b03      	ldr	r3, [sp, #12]
 800c13a:	3307      	adds	r3, #7
 800c13c:	f023 0307 	bic.w	r3, r3, #7
 800c140:	3308      	adds	r3, #8
 800c142:	9303      	str	r3, [sp, #12]
 800c144:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c146:	443b      	add	r3, r7
 800c148:	9309      	str	r3, [sp, #36]	; 0x24
 800c14a:	e767      	b.n	800c01c <_vfiprintf_r+0x94>
 800c14c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c150:	460c      	mov	r4, r1
 800c152:	2001      	movs	r0, #1
 800c154:	e7a5      	b.n	800c0a2 <_vfiprintf_r+0x11a>
 800c156:	2300      	movs	r3, #0
 800c158:	3401      	adds	r4, #1
 800c15a:	9305      	str	r3, [sp, #20]
 800c15c:	4619      	mov	r1, r3
 800c15e:	f04f 0c0a 	mov.w	ip, #10
 800c162:	4620      	mov	r0, r4
 800c164:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c168:	3a30      	subs	r2, #48	; 0x30
 800c16a:	2a09      	cmp	r2, #9
 800c16c:	d903      	bls.n	800c176 <_vfiprintf_r+0x1ee>
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d0c5      	beq.n	800c0fe <_vfiprintf_r+0x176>
 800c172:	9105      	str	r1, [sp, #20]
 800c174:	e7c3      	b.n	800c0fe <_vfiprintf_r+0x176>
 800c176:	fb0c 2101 	mla	r1, ip, r1, r2
 800c17a:	4604      	mov	r4, r0
 800c17c:	2301      	movs	r3, #1
 800c17e:	e7f0      	b.n	800c162 <_vfiprintf_r+0x1da>
 800c180:	ab03      	add	r3, sp, #12
 800c182:	9300      	str	r3, [sp, #0]
 800c184:	462a      	mov	r2, r5
 800c186:	4b16      	ldr	r3, [pc, #88]	; (800c1e0 <_vfiprintf_r+0x258>)
 800c188:	a904      	add	r1, sp, #16
 800c18a:	4630      	mov	r0, r6
 800c18c:	f7fc f83a 	bl	8008204 <_printf_float>
 800c190:	4607      	mov	r7, r0
 800c192:	1c78      	adds	r0, r7, #1
 800c194:	d1d6      	bne.n	800c144 <_vfiprintf_r+0x1bc>
 800c196:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c198:	07d9      	lsls	r1, r3, #31
 800c19a:	d405      	bmi.n	800c1a8 <_vfiprintf_r+0x220>
 800c19c:	89ab      	ldrh	r3, [r5, #12]
 800c19e:	059a      	lsls	r2, r3, #22
 800c1a0:	d402      	bmi.n	800c1a8 <_vfiprintf_r+0x220>
 800c1a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c1a4:	f000 faa1 	bl	800c6ea <__retarget_lock_release_recursive>
 800c1a8:	89ab      	ldrh	r3, [r5, #12]
 800c1aa:	065b      	lsls	r3, r3, #25
 800c1ac:	f53f af12 	bmi.w	800bfd4 <_vfiprintf_r+0x4c>
 800c1b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c1b2:	e711      	b.n	800bfd8 <_vfiprintf_r+0x50>
 800c1b4:	ab03      	add	r3, sp, #12
 800c1b6:	9300      	str	r3, [sp, #0]
 800c1b8:	462a      	mov	r2, r5
 800c1ba:	4b09      	ldr	r3, [pc, #36]	; (800c1e0 <_vfiprintf_r+0x258>)
 800c1bc:	a904      	add	r1, sp, #16
 800c1be:	4630      	mov	r0, r6
 800c1c0:	f7fc fac4 	bl	800874c <_printf_i>
 800c1c4:	e7e4      	b.n	800c190 <_vfiprintf_r+0x208>
 800c1c6:	bf00      	nop
 800c1c8:	0800d25c 	.word	0x0800d25c
 800c1cc:	0800d27c 	.word	0x0800d27c
 800c1d0:	0800d23c 	.word	0x0800d23c
 800c1d4:	0800d1ec 	.word	0x0800d1ec
 800c1d8:	0800d1f6 	.word	0x0800d1f6
 800c1dc:	08008205 	.word	0x08008205
 800c1e0:	0800bf65 	.word	0x0800bf65
 800c1e4:	0800d1f2 	.word	0x0800d1f2

0800c1e8 <__swbuf_r>:
 800c1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ea:	460e      	mov	r6, r1
 800c1ec:	4614      	mov	r4, r2
 800c1ee:	4605      	mov	r5, r0
 800c1f0:	b118      	cbz	r0, 800c1fa <__swbuf_r+0x12>
 800c1f2:	6983      	ldr	r3, [r0, #24]
 800c1f4:	b90b      	cbnz	r3, 800c1fa <__swbuf_r+0x12>
 800c1f6:	f000 f9d9 	bl	800c5ac <__sinit>
 800c1fa:	4b21      	ldr	r3, [pc, #132]	; (800c280 <__swbuf_r+0x98>)
 800c1fc:	429c      	cmp	r4, r3
 800c1fe:	d12b      	bne.n	800c258 <__swbuf_r+0x70>
 800c200:	686c      	ldr	r4, [r5, #4]
 800c202:	69a3      	ldr	r3, [r4, #24]
 800c204:	60a3      	str	r3, [r4, #8]
 800c206:	89a3      	ldrh	r3, [r4, #12]
 800c208:	071a      	lsls	r2, r3, #28
 800c20a:	d52f      	bpl.n	800c26c <__swbuf_r+0x84>
 800c20c:	6923      	ldr	r3, [r4, #16]
 800c20e:	b36b      	cbz	r3, 800c26c <__swbuf_r+0x84>
 800c210:	6923      	ldr	r3, [r4, #16]
 800c212:	6820      	ldr	r0, [r4, #0]
 800c214:	1ac0      	subs	r0, r0, r3
 800c216:	6963      	ldr	r3, [r4, #20]
 800c218:	b2f6      	uxtb	r6, r6
 800c21a:	4283      	cmp	r3, r0
 800c21c:	4637      	mov	r7, r6
 800c21e:	dc04      	bgt.n	800c22a <__swbuf_r+0x42>
 800c220:	4621      	mov	r1, r4
 800c222:	4628      	mov	r0, r5
 800c224:	f000 f92e 	bl	800c484 <_fflush_r>
 800c228:	bb30      	cbnz	r0, 800c278 <__swbuf_r+0x90>
 800c22a:	68a3      	ldr	r3, [r4, #8]
 800c22c:	3b01      	subs	r3, #1
 800c22e:	60a3      	str	r3, [r4, #8]
 800c230:	6823      	ldr	r3, [r4, #0]
 800c232:	1c5a      	adds	r2, r3, #1
 800c234:	6022      	str	r2, [r4, #0]
 800c236:	701e      	strb	r6, [r3, #0]
 800c238:	6963      	ldr	r3, [r4, #20]
 800c23a:	3001      	adds	r0, #1
 800c23c:	4283      	cmp	r3, r0
 800c23e:	d004      	beq.n	800c24a <__swbuf_r+0x62>
 800c240:	89a3      	ldrh	r3, [r4, #12]
 800c242:	07db      	lsls	r3, r3, #31
 800c244:	d506      	bpl.n	800c254 <__swbuf_r+0x6c>
 800c246:	2e0a      	cmp	r6, #10
 800c248:	d104      	bne.n	800c254 <__swbuf_r+0x6c>
 800c24a:	4621      	mov	r1, r4
 800c24c:	4628      	mov	r0, r5
 800c24e:	f000 f919 	bl	800c484 <_fflush_r>
 800c252:	b988      	cbnz	r0, 800c278 <__swbuf_r+0x90>
 800c254:	4638      	mov	r0, r7
 800c256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c258:	4b0a      	ldr	r3, [pc, #40]	; (800c284 <__swbuf_r+0x9c>)
 800c25a:	429c      	cmp	r4, r3
 800c25c:	d101      	bne.n	800c262 <__swbuf_r+0x7a>
 800c25e:	68ac      	ldr	r4, [r5, #8]
 800c260:	e7cf      	b.n	800c202 <__swbuf_r+0x1a>
 800c262:	4b09      	ldr	r3, [pc, #36]	; (800c288 <__swbuf_r+0xa0>)
 800c264:	429c      	cmp	r4, r3
 800c266:	bf08      	it	eq
 800c268:	68ec      	ldreq	r4, [r5, #12]
 800c26a:	e7ca      	b.n	800c202 <__swbuf_r+0x1a>
 800c26c:	4621      	mov	r1, r4
 800c26e:	4628      	mov	r0, r5
 800c270:	f000 f80c 	bl	800c28c <__swsetup_r>
 800c274:	2800      	cmp	r0, #0
 800c276:	d0cb      	beq.n	800c210 <__swbuf_r+0x28>
 800c278:	f04f 37ff 	mov.w	r7, #4294967295
 800c27c:	e7ea      	b.n	800c254 <__swbuf_r+0x6c>
 800c27e:	bf00      	nop
 800c280:	0800d25c 	.word	0x0800d25c
 800c284:	0800d27c 	.word	0x0800d27c
 800c288:	0800d23c 	.word	0x0800d23c

0800c28c <__swsetup_r>:
 800c28c:	4b32      	ldr	r3, [pc, #200]	; (800c358 <__swsetup_r+0xcc>)
 800c28e:	b570      	push	{r4, r5, r6, lr}
 800c290:	681d      	ldr	r5, [r3, #0]
 800c292:	4606      	mov	r6, r0
 800c294:	460c      	mov	r4, r1
 800c296:	b125      	cbz	r5, 800c2a2 <__swsetup_r+0x16>
 800c298:	69ab      	ldr	r3, [r5, #24]
 800c29a:	b913      	cbnz	r3, 800c2a2 <__swsetup_r+0x16>
 800c29c:	4628      	mov	r0, r5
 800c29e:	f000 f985 	bl	800c5ac <__sinit>
 800c2a2:	4b2e      	ldr	r3, [pc, #184]	; (800c35c <__swsetup_r+0xd0>)
 800c2a4:	429c      	cmp	r4, r3
 800c2a6:	d10f      	bne.n	800c2c8 <__swsetup_r+0x3c>
 800c2a8:	686c      	ldr	r4, [r5, #4]
 800c2aa:	89a3      	ldrh	r3, [r4, #12]
 800c2ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c2b0:	0719      	lsls	r1, r3, #28
 800c2b2:	d42c      	bmi.n	800c30e <__swsetup_r+0x82>
 800c2b4:	06dd      	lsls	r5, r3, #27
 800c2b6:	d411      	bmi.n	800c2dc <__swsetup_r+0x50>
 800c2b8:	2309      	movs	r3, #9
 800c2ba:	6033      	str	r3, [r6, #0]
 800c2bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c2c0:	81a3      	strh	r3, [r4, #12]
 800c2c2:	f04f 30ff 	mov.w	r0, #4294967295
 800c2c6:	e03e      	b.n	800c346 <__swsetup_r+0xba>
 800c2c8:	4b25      	ldr	r3, [pc, #148]	; (800c360 <__swsetup_r+0xd4>)
 800c2ca:	429c      	cmp	r4, r3
 800c2cc:	d101      	bne.n	800c2d2 <__swsetup_r+0x46>
 800c2ce:	68ac      	ldr	r4, [r5, #8]
 800c2d0:	e7eb      	b.n	800c2aa <__swsetup_r+0x1e>
 800c2d2:	4b24      	ldr	r3, [pc, #144]	; (800c364 <__swsetup_r+0xd8>)
 800c2d4:	429c      	cmp	r4, r3
 800c2d6:	bf08      	it	eq
 800c2d8:	68ec      	ldreq	r4, [r5, #12]
 800c2da:	e7e6      	b.n	800c2aa <__swsetup_r+0x1e>
 800c2dc:	0758      	lsls	r0, r3, #29
 800c2de:	d512      	bpl.n	800c306 <__swsetup_r+0x7a>
 800c2e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2e2:	b141      	cbz	r1, 800c2f6 <__swsetup_r+0x6a>
 800c2e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2e8:	4299      	cmp	r1, r3
 800c2ea:	d002      	beq.n	800c2f2 <__swsetup_r+0x66>
 800c2ec:	4630      	mov	r0, r6
 800c2ee:	f7ff fb25 	bl	800b93c <_free_r>
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	6363      	str	r3, [r4, #52]	; 0x34
 800c2f6:	89a3      	ldrh	r3, [r4, #12]
 800c2f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c2fc:	81a3      	strh	r3, [r4, #12]
 800c2fe:	2300      	movs	r3, #0
 800c300:	6063      	str	r3, [r4, #4]
 800c302:	6923      	ldr	r3, [r4, #16]
 800c304:	6023      	str	r3, [r4, #0]
 800c306:	89a3      	ldrh	r3, [r4, #12]
 800c308:	f043 0308 	orr.w	r3, r3, #8
 800c30c:	81a3      	strh	r3, [r4, #12]
 800c30e:	6923      	ldr	r3, [r4, #16]
 800c310:	b94b      	cbnz	r3, 800c326 <__swsetup_r+0x9a>
 800c312:	89a3      	ldrh	r3, [r4, #12]
 800c314:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c31c:	d003      	beq.n	800c326 <__swsetup_r+0x9a>
 800c31e:	4621      	mov	r1, r4
 800c320:	4630      	mov	r0, r6
 800c322:	f000 fa09 	bl	800c738 <__smakebuf_r>
 800c326:	89a0      	ldrh	r0, [r4, #12]
 800c328:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c32c:	f010 0301 	ands.w	r3, r0, #1
 800c330:	d00a      	beq.n	800c348 <__swsetup_r+0xbc>
 800c332:	2300      	movs	r3, #0
 800c334:	60a3      	str	r3, [r4, #8]
 800c336:	6963      	ldr	r3, [r4, #20]
 800c338:	425b      	negs	r3, r3
 800c33a:	61a3      	str	r3, [r4, #24]
 800c33c:	6923      	ldr	r3, [r4, #16]
 800c33e:	b943      	cbnz	r3, 800c352 <__swsetup_r+0xc6>
 800c340:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c344:	d1ba      	bne.n	800c2bc <__swsetup_r+0x30>
 800c346:	bd70      	pop	{r4, r5, r6, pc}
 800c348:	0781      	lsls	r1, r0, #30
 800c34a:	bf58      	it	pl
 800c34c:	6963      	ldrpl	r3, [r4, #20]
 800c34e:	60a3      	str	r3, [r4, #8]
 800c350:	e7f4      	b.n	800c33c <__swsetup_r+0xb0>
 800c352:	2000      	movs	r0, #0
 800c354:	e7f7      	b.n	800c346 <__swsetup_r+0xba>
 800c356:	bf00      	nop
 800c358:	20000018 	.word	0x20000018
 800c35c:	0800d25c 	.word	0x0800d25c
 800c360:	0800d27c 	.word	0x0800d27c
 800c364:	0800d23c 	.word	0x0800d23c

0800c368 <abort>:
 800c368:	b508      	push	{r3, lr}
 800c36a:	2006      	movs	r0, #6
 800c36c:	f000 fa54 	bl	800c818 <raise>
 800c370:	2001      	movs	r0, #1
 800c372:	f7f6 fd15 	bl	8002da0 <_exit>
	...

0800c378 <__sflush_r>:
 800c378:	898a      	ldrh	r2, [r1, #12]
 800c37a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c37e:	4605      	mov	r5, r0
 800c380:	0710      	lsls	r0, r2, #28
 800c382:	460c      	mov	r4, r1
 800c384:	d458      	bmi.n	800c438 <__sflush_r+0xc0>
 800c386:	684b      	ldr	r3, [r1, #4]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	dc05      	bgt.n	800c398 <__sflush_r+0x20>
 800c38c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c38e:	2b00      	cmp	r3, #0
 800c390:	dc02      	bgt.n	800c398 <__sflush_r+0x20>
 800c392:	2000      	movs	r0, #0
 800c394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c398:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c39a:	2e00      	cmp	r6, #0
 800c39c:	d0f9      	beq.n	800c392 <__sflush_r+0x1a>
 800c39e:	2300      	movs	r3, #0
 800c3a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c3a4:	682f      	ldr	r7, [r5, #0]
 800c3a6:	602b      	str	r3, [r5, #0]
 800c3a8:	d032      	beq.n	800c410 <__sflush_r+0x98>
 800c3aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c3ac:	89a3      	ldrh	r3, [r4, #12]
 800c3ae:	075a      	lsls	r2, r3, #29
 800c3b0:	d505      	bpl.n	800c3be <__sflush_r+0x46>
 800c3b2:	6863      	ldr	r3, [r4, #4]
 800c3b4:	1ac0      	subs	r0, r0, r3
 800c3b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c3b8:	b10b      	cbz	r3, 800c3be <__sflush_r+0x46>
 800c3ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c3bc:	1ac0      	subs	r0, r0, r3
 800c3be:	2300      	movs	r3, #0
 800c3c0:	4602      	mov	r2, r0
 800c3c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c3c4:	6a21      	ldr	r1, [r4, #32]
 800c3c6:	4628      	mov	r0, r5
 800c3c8:	47b0      	blx	r6
 800c3ca:	1c43      	adds	r3, r0, #1
 800c3cc:	89a3      	ldrh	r3, [r4, #12]
 800c3ce:	d106      	bne.n	800c3de <__sflush_r+0x66>
 800c3d0:	6829      	ldr	r1, [r5, #0]
 800c3d2:	291d      	cmp	r1, #29
 800c3d4:	d82c      	bhi.n	800c430 <__sflush_r+0xb8>
 800c3d6:	4a2a      	ldr	r2, [pc, #168]	; (800c480 <__sflush_r+0x108>)
 800c3d8:	40ca      	lsrs	r2, r1
 800c3da:	07d6      	lsls	r6, r2, #31
 800c3dc:	d528      	bpl.n	800c430 <__sflush_r+0xb8>
 800c3de:	2200      	movs	r2, #0
 800c3e0:	6062      	str	r2, [r4, #4]
 800c3e2:	04d9      	lsls	r1, r3, #19
 800c3e4:	6922      	ldr	r2, [r4, #16]
 800c3e6:	6022      	str	r2, [r4, #0]
 800c3e8:	d504      	bpl.n	800c3f4 <__sflush_r+0x7c>
 800c3ea:	1c42      	adds	r2, r0, #1
 800c3ec:	d101      	bne.n	800c3f2 <__sflush_r+0x7a>
 800c3ee:	682b      	ldr	r3, [r5, #0]
 800c3f0:	b903      	cbnz	r3, 800c3f4 <__sflush_r+0x7c>
 800c3f2:	6560      	str	r0, [r4, #84]	; 0x54
 800c3f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3f6:	602f      	str	r7, [r5, #0]
 800c3f8:	2900      	cmp	r1, #0
 800c3fa:	d0ca      	beq.n	800c392 <__sflush_r+0x1a>
 800c3fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c400:	4299      	cmp	r1, r3
 800c402:	d002      	beq.n	800c40a <__sflush_r+0x92>
 800c404:	4628      	mov	r0, r5
 800c406:	f7ff fa99 	bl	800b93c <_free_r>
 800c40a:	2000      	movs	r0, #0
 800c40c:	6360      	str	r0, [r4, #52]	; 0x34
 800c40e:	e7c1      	b.n	800c394 <__sflush_r+0x1c>
 800c410:	6a21      	ldr	r1, [r4, #32]
 800c412:	2301      	movs	r3, #1
 800c414:	4628      	mov	r0, r5
 800c416:	47b0      	blx	r6
 800c418:	1c41      	adds	r1, r0, #1
 800c41a:	d1c7      	bne.n	800c3ac <__sflush_r+0x34>
 800c41c:	682b      	ldr	r3, [r5, #0]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d0c4      	beq.n	800c3ac <__sflush_r+0x34>
 800c422:	2b1d      	cmp	r3, #29
 800c424:	d001      	beq.n	800c42a <__sflush_r+0xb2>
 800c426:	2b16      	cmp	r3, #22
 800c428:	d101      	bne.n	800c42e <__sflush_r+0xb6>
 800c42a:	602f      	str	r7, [r5, #0]
 800c42c:	e7b1      	b.n	800c392 <__sflush_r+0x1a>
 800c42e:	89a3      	ldrh	r3, [r4, #12]
 800c430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c434:	81a3      	strh	r3, [r4, #12]
 800c436:	e7ad      	b.n	800c394 <__sflush_r+0x1c>
 800c438:	690f      	ldr	r7, [r1, #16]
 800c43a:	2f00      	cmp	r7, #0
 800c43c:	d0a9      	beq.n	800c392 <__sflush_r+0x1a>
 800c43e:	0793      	lsls	r3, r2, #30
 800c440:	680e      	ldr	r6, [r1, #0]
 800c442:	bf08      	it	eq
 800c444:	694b      	ldreq	r3, [r1, #20]
 800c446:	600f      	str	r7, [r1, #0]
 800c448:	bf18      	it	ne
 800c44a:	2300      	movne	r3, #0
 800c44c:	eba6 0807 	sub.w	r8, r6, r7
 800c450:	608b      	str	r3, [r1, #8]
 800c452:	f1b8 0f00 	cmp.w	r8, #0
 800c456:	dd9c      	ble.n	800c392 <__sflush_r+0x1a>
 800c458:	6a21      	ldr	r1, [r4, #32]
 800c45a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c45c:	4643      	mov	r3, r8
 800c45e:	463a      	mov	r2, r7
 800c460:	4628      	mov	r0, r5
 800c462:	47b0      	blx	r6
 800c464:	2800      	cmp	r0, #0
 800c466:	dc06      	bgt.n	800c476 <__sflush_r+0xfe>
 800c468:	89a3      	ldrh	r3, [r4, #12]
 800c46a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c46e:	81a3      	strh	r3, [r4, #12]
 800c470:	f04f 30ff 	mov.w	r0, #4294967295
 800c474:	e78e      	b.n	800c394 <__sflush_r+0x1c>
 800c476:	4407      	add	r7, r0
 800c478:	eba8 0800 	sub.w	r8, r8, r0
 800c47c:	e7e9      	b.n	800c452 <__sflush_r+0xda>
 800c47e:	bf00      	nop
 800c480:	20400001 	.word	0x20400001

0800c484 <_fflush_r>:
 800c484:	b538      	push	{r3, r4, r5, lr}
 800c486:	690b      	ldr	r3, [r1, #16]
 800c488:	4605      	mov	r5, r0
 800c48a:	460c      	mov	r4, r1
 800c48c:	b913      	cbnz	r3, 800c494 <_fflush_r+0x10>
 800c48e:	2500      	movs	r5, #0
 800c490:	4628      	mov	r0, r5
 800c492:	bd38      	pop	{r3, r4, r5, pc}
 800c494:	b118      	cbz	r0, 800c49e <_fflush_r+0x1a>
 800c496:	6983      	ldr	r3, [r0, #24]
 800c498:	b90b      	cbnz	r3, 800c49e <_fflush_r+0x1a>
 800c49a:	f000 f887 	bl	800c5ac <__sinit>
 800c49e:	4b14      	ldr	r3, [pc, #80]	; (800c4f0 <_fflush_r+0x6c>)
 800c4a0:	429c      	cmp	r4, r3
 800c4a2:	d11b      	bne.n	800c4dc <_fflush_r+0x58>
 800c4a4:	686c      	ldr	r4, [r5, #4]
 800c4a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d0ef      	beq.n	800c48e <_fflush_r+0xa>
 800c4ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c4b0:	07d0      	lsls	r0, r2, #31
 800c4b2:	d404      	bmi.n	800c4be <_fflush_r+0x3a>
 800c4b4:	0599      	lsls	r1, r3, #22
 800c4b6:	d402      	bmi.n	800c4be <_fflush_r+0x3a>
 800c4b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4ba:	f000 f915 	bl	800c6e8 <__retarget_lock_acquire_recursive>
 800c4be:	4628      	mov	r0, r5
 800c4c0:	4621      	mov	r1, r4
 800c4c2:	f7ff ff59 	bl	800c378 <__sflush_r>
 800c4c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c4c8:	07da      	lsls	r2, r3, #31
 800c4ca:	4605      	mov	r5, r0
 800c4cc:	d4e0      	bmi.n	800c490 <_fflush_r+0xc>
 800c4ce:	89a3      	ldrh	r3, [r4, #12]
 800c4d0:	059b      	lsls	r3, r3, #22
 800c4d2:	d4dd      	bmi.n	800c490 <_fflush_r+0xc>
 800c4d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4d6:	f000 f908 	bl	800c6ea <__retarget_lock_release_recursive>
 800c4da:	e7d9      	b.n	800c490 <_fflush_r+0xc>
 800c4dc:	4b05      	ldr	r3, [pc, #20]	; (800c4f4 <_fflush_r+0x70>)
 800c4de:	429c      	cmp	r4, r3
 800c4e0:	d101      	bne.n	800c4e6 <_fflush_r+0x62>
 800c4e2:	68ac      	ldr	r4, [r5, #8]
 800c4e4:	e7df      	b.n	800c4a6 <_fflush_r+0x22>
 800c4e6:	4b04      	ldr	r3, [pc, #16]	; (800c4f8 <_fflush_r+0x74>)
 800c4e8:	429c      	cmp	r4, r3
 800c4ea:	bf08      	it	eq
 800c4ec:	68ec      	ldreq	r4, [r5, #12]
 800c4ee:	e7da      	b.n	800c4a6 <_fflush_r+0x22>
 800c4f0:	0800d25c 	.word	0x0800d25c
 800c4f4:	0800d27c 	.word	0x0800d27c
 800c4f8:	0800d23c 	.word	0x0800d23c

0800c4fc <std>:
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	b510      	push	{r4, lr}
 800c500:	4604      	mov	r4, r0
 800c502:	e9c0 3300 	strd	r3, r3, [r0]
 800c506:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c50a:	6083      	str	r3, [r0, #8]
 800c50c:	8181      	strh	r1, [r0, #12]
 800c50e:	6643      	str	r3, [r0, #100]	; 0x64
 800c510:	81c2      	strh	r2, [r0, #14]
 800c512:	6183      	str	r3, [r0, #24]
 800c514:	4619      	mov	r1, r3
 800c516:	2208      	movs	r2, #8
 800c518:	305c      	adds	r0, #92	; 0x5c
 800c51a:	f7fb fdcb 	bl	80080b4 <memset>
 800c51e:	4b05      	ldr	r3, [pc, #20]	; (800c534 <std+0x38>)
 800c520:	6263      	str	r3, [r4, #36]	; 0x24
 800c522:	4b05      	ldr	r3, [pc, #20]	; (800c538 <std+0x3c>)
 800c524:	62a3      	str	r3, [r4, #40]	; 0x28
 800c526:	4b05      	ldr	r3, [pc, #20]	; (800c53c <std+0x40>)
 800c528:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c52a:	4b05      	ldr	r3, [pc, #20]	; (800c540 <std+0x44>)
 800c52c:	6224      	str	r4, [r4, #32]
 800c52e:	6323      	str	r3, [r4, #48]	; 0x30
 800c530:	bd10      	pop	{r4, pc}
 800c532:	bf00      	nop
 800c534:	0800c851 	.word	0x0800c851
 800c538:	0800c873 	.word	0x0800c873
 800c53c:	0800c8ab 	.word	0x0800c8ab
 800c540:	0800c8cf 	.word	0x0800c8cf

0800c544 <_cleanup_r>:
 800c544:	4901      	ldr	r1, [pc, #4]	; (800c54c <_cleanup_r+0x8>)
 800c546:	f000 b8af 	b.w	800c6a8 <_fwalk_reent>
 800c54a:	bf00      	nop
 800c54c:	0800c485 	.word	0x0800c485

0800c550 <__sfmoreglue>:
 800c550:	b570      	push	{r4, r5, r6, lr}
 800c552:	2268      	movs	r2, #104	; 0x68
 800c554:	1e4d      	subs	r5, r1, #1
 800c556:	4355      	muls	r5, r2
 800c558:	460e      	mov	r6, r1
 800c55a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c55e:	f7ff fa59 	bl	800ba14 <_malloc_r>
 800c562:	4604      	mov	r4, r0
 800c564:	b140      	cbz	r0, 800c578 <__sfmoreglue+0x28>
 800c566:	2100      	movs	r1, #0
 800c568:	e9c0 1600 	strd	r1, r6, [r0]
 800c56c:	300c      	adds	r0, #12
 800c56e:	60a0      	str	r0, [r4, #8]
 800c570:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c574:	f7fb fd9e 	bl	80080b4 <memset>
 800c578:	4620      	mov	r0, r4
 800c57a:	bd70      	pop	{r4, r5, r6, pc}

0800c57c <__sfp_lock_acquire>:
 800c57c:	4801      	ldr	r0, [pc, #4]	; (800c584 <__sfp_lock_acquire+0x8>)
 800c57e:	f000 b8b3 	b.w	800c6e8 <__retarget_lock_acquire_recursive>
 800c582:	bf00      	nop
 800c584:	2000044d 	.word	0x2000044d

0800c588 <__sfp_lock_release>:
 800c588:	4801      	ldr	r0, [pc, #4]	; (800c590 <__sfp_lock_release+0x8>)
 800c58a:	f000 b8ae 	b.w	800c6ea <__retarget_lock_release_recursive>
 800c58e:	bf00      	nop
 800c590:	2000044d 	.word	0x2000044d

0800c594 <__sinit_lock_acquire>:
 800c594:	4801      	ldr	r0, [pc, #4]	; (800c59c <__sinit_lock_acquire+0x8>)
 800c596:	f000 b8a7 	b.w	800c6e8 <__retarget_lock_acquire_recursive>
 800c59a:	bf00      	nop
 800c59c:	2000044e 	.word	0x2000044e

0800c5a0 <__sinit_lock_release>:
 800c5a0:	4801      	ldr	r0, [pc, #4]	; (800c5a8 <__sinit_lock_release+0x8>)
 800c5a2:	f000 b8a2 	b.w	800c6ea <__retarget_lock_release_recursive>
 800c5a6:	bf00      	nop
 800c5a8:	2000044e 	.word	0x2000044e

0800c5ac <__sinit>:
 800c5ac:	b510      	push	{r4, lr}
 800c5ae:	4604      	mov	r4, r0
 800c5b0:	f7ff fff0 	bl	800c594 <__sinit_lock_acquire>
 800c5b4:	69a3      	ldr	r3, [r4, #24]
 800c5b6:	b11b      	cbz	r3, 800c5c0 <__sinit+0x14>
 800c5b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5bc:	f7ff bff0 	b.w	800c5a0 <__sinit_lock_release>
 800c5c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c5c4:	6523      	str	r3, [r4, #80]	; 0x50
 800c5c6:	4b13      	ldr	r3, [pc, #76]	; (800c614 <__sinit+0x68>)
 800c5c8:	4a13      	ldr	r2, [pc, #76]	; (800c618 <__sinit+0x6c>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	62a2      	str	r2, [r4, #40]	; 0x28
 800c5ce:	42a3      	cmp	r3, r4
 800c5d0:	bf04      	itt	eq
 800c5d2:	2301      	moveq	r3, #1
 800c5d4:	61a3      	streq	r3, [r4, #24]
 800c5d6:	4620      	mov	r0, r4
 800c5d8:	f000 f820 	bl	800c61c <__sfp>
 800c5dc:	6060      	str	r0, [r4, #4]
 800c5de:	4620      	mov	r0, r4
 800c5e0:	f000 f81c 	bl	800c61c <__sfp>
 800c5e4:	60a0      	str	r0, [r4, #8]
 800c5e6:	4620      	mov	r0, r4
 800c5e8:	f000 f818 	bl	800c61c <__sfp>
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	60e0      	str	r0, [r4, #12]
 800c5f0:	2104      	movs	r1, #4
 800c5f2:	6860      	ldr	r0, [r4, #4]
 800c5f4:	f7ff ff82 	bl	800c4fc <std>
 800c5f8:	68a0      	ldr	r0, [r4, #8]
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	2109      	movs	r1, #9
 800c5fe:	f7ff ff7d 	bl	800c4fc <std>
 800c602:	68e0      	ldr	r0, [r4, #12]
 800c604:	2202      	movs	r2, #2
 800c606:	2112      	movs	r1, #18
 800c608:	f7ff ff78 	bl	800c4fc <std>
 800c60c:	2301      	movs	r3, #1
 800c60e:	61a3      	str	r3, [r4, #24]
 800c610:	e7d2      	b.n	800c5b8 <__sinit+0xc>
 800c612:	bf00      	nop
 800c614:	0800cdf8 	.word	0x0800cdf8
 800c618:	0800c545 	.word	0x0800c545

0800c61c <__sfp>:
 800c61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c61e:	4607      	mov	r7, r0
 800c620:	f7ff ffac 	bl	800c57c <__sfp_lock_acquire>
 800c624:	4b1e      	ldr	r3, [pc, #120]	; (800c6a0 <__sfp+0x84>)
 800c626:	681e      	ldr	r6, [r3, #0]
 800c628:	69b3      	ldr	r3, [r6, #24]
 800c62a:	b913      	cbnz	r3, 800c632 <__sfp+0x16>
 800c62c:	4630      	mov	r0, r6
 800c62e:	f7ff ffbd 	bl	800c5ac <__sinit>
 800c632:	3648      	adds	r6, #72	; 0x48
 800c634:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c638:	3b01      	subs	r3, #1
 800c63a:	d503      	bpl.n	800c644 <__sfp+0x28>
 800c63c:	6833      	ldr	r3, [r6, #0]
 800c63e:	b30b      	cbz	r3, 800c684 <__sfp+0x68>
 800c640:	6836      	ldr	r6, [r6, #0]
 800c642:	e7f7      	b.n	800c634 <__sfp+0x18>
 800c644:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c648:	b9d5      	cbnz	r5, 800c680 <__sfp+0x64>
 800c64a:	4b16      	ldr	r3, [pc, #88]	; (800c6a4 <__sfp+0x88>)
 800c64c:	60e3      	str	r3, [r4, #12]
 800c64e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c652:	6665      	str	r5, [r4, #100]	; 0x64
 800c654:	f000 f847 	bl	800c6e6 <__retarget_lock_init_recursive>
 800c658:	f7ff ff96 	bl	800c588 <__sfp_lock_release>
 800c65c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c660:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c664:	6025      	str	r5, [r4, #0]
 800c666:	61a5      	str	r5, [r4, #24]
 800c668:	2208      	movs	r2, #8
 800c66a:	4629      	mov	r1, r5
 800c66c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c670:	f7fb fd20 	bl	80080b4 <memset>
 800c674:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c678:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c67c:	4620      	mov	r0, r4
 800c67e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c680:	3468      	adds	r4, #104	; 0x68
 800c682:	e7d9      	b.n	800c638 <__sfp+0x1c>
 800c684:	2104      	movs	r1, #4
 800c686:	4638      	mov	r0, r7
 800c688:	f7ff ff62 	bl	800c550 <__sfmoreglue>
 800c68c:	4604      	mov	r4, r0
 800c68e:	6030      	str	r0, [r6, #0]
 800c690:	2800      	cmp	r0, #0
 800c692:	d1d5      	bne.n	800c640 <__sfp+0x24>
 800c694:	f7ff ff78 	bl	800c588 <__sfp_lock_release>
 800c698:	230c      	movs	r3, #12
 800c69a:	603b      	str	r3, [r7, #0]
 800c69c:	e7ee      	b.n	800c67c <__sfp+0x60>
 800c69e:	bf00      	nop
 800c6a0:	0800cdf8 	.word	0x0800cdf8
 800c6a4:	ffff0001 	.word	0xffff0001

0800c6a8 <_fwalk_reent>:
 800c6a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6ac:	4606      	mov	r6, r0
 800c6ae:	4688      	mov	r8, r1
 800c6b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c6b4:	2700      	movs	r7, #0
 800c6b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c6ba:	f1b9 0901 	subs.w	r9, r9, #1
 800c6be:	d505      	bpl.n	800c6cc <_fwalk_reent+0x24>
 800c6c0:	6824      	ldr	r4, [r4, #0]
 800c6c2:	2c00      	cmp	r4, #0
 800c6c4:	d1f7      	bne.n	800c6b6 <_fwalk_reent+0xe>
 800c6c6:	4638      	mov	r0, r7
 800c6c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6cc:	89ab      	ldrh	r3, [r5, #12]
 800c6ce:	2b01      	cmp	r3, #1
 800c6d0:	d907      	bls.n	800c6e2 <_fwalk_reent+0x3a>
 800c6d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c6d6:	3301      	adds	r3, #1
 800c6d8:	d003      	beq.n	800c6e2 <_fwalk_reent+0x3a>
 800c6da:	4629      	mov	r1, r5
 800c6dc:	4630      	mov	r0, r6
 800c6de:	47c0      	blx	r8
 800c6e0:	4307      	orrs	r7, r0
 800c6e2:	3568      	adds	r5, #104	; 0x68
 800c6e4:	e7e9      	b.n	800c6ba <_fwalk_reent+0x12>

0800c6e6 <__retarget_lock_init_recursive>:
 800c6e6:	4770      	bx	lr

0800c6e8 <__retarget_lock_acquire_recursive>:
 800c6e8:	4770      	bx	lr

0800c6ea <__retarget_lock_release_recursive>:
 800c6ea:	4770      	bx	lr

0800c6ec <__swhatbuf_r>:
 800c6ec:	b570      	push	{r4, r5, r6, lr}
 800c6ee:	460e      	mov	r6, r1
 800c6f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6f4:	2900      	cmp	r1, #0
 800c6f6:	b096      	sub	sp, #88	; 0x58
 800c6f8:	4614      	mov	r4, r2
 800c6fa:	461d      	mov	r5, r3
 800c6fc:	da08      	bge.n	800c710 <__swhatbuf_r+0x24>
 800c6fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c702:	2200      	movs	r2, #0
 800c704:	602a      	str	r2, [r5, #0]
 800c706:	061a      	lsls	r2, r3, #24
 800c708:	d410      	bmi.n	800c72c <__swhatbuf_r+0x40>
 800c70a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c70e:	e00e      	b.n	800c72e <__swhatbuf_r+0x42>
 800c710:	466a      	mov	r2, sp
 800c712:	f000 f903 	bl	800c91c <_fstat_r>
 800c716:	2800      	cmp	r0, #0
 800c718:	dbf1      	blt.n	800c6fe <__swhatbuf_r+0x12>
 800c71a:	9a01      	ldr	r2, [sp, #4]
 800c71c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c720:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c724:	425a      	negs	r2, r3
 800c726:	415a      	adcs	r2, r3
 800c728:	602a      	str	r2, [r5, #0]
 800c72a:	e7ee      	b.n	800c70a <__swhatbuf_r+0x1e>
 800c72c:	2340      	movs	r3, #64	; 0x40
 800c72e:	2000      	movs	r0, #0
 800c730:	6023      	str	r3, [r4, #0]
 800c732:	b016      	add	sp, #88	; 0x58
 800c734:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c738 <__smakebuf_r>:
 800c738:	898b      	ldrh	r3, [r1, #12]
 800c73a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c73c:	079d      	lsls	r5, r3, #30
 800c73e:	4606      	mov	r6, r0
 800c740:	460c      	mov	r4, r1
 800c742:	d507      	bpl.n	800c754 <__smakebuf_r+0x1c>
 800c744:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c748:	6023      	str	r3, [r4, #0]
 800c74a:	6123      	str	r3, [r4, #16]
 800c74c:	2301      	movs	r3, #1
 800c74e:	6163      	str	r3, [r4, #20]
 800c750:	b002      	add	sp, #8
 800c752:	bd70      	pop	{r4, r5, r6, pc}
 800c754:	ab01      	add	r3, sp, #4
 800c756:	466a      	mov	r2, sp
 800c758:	f7ff ffc8 	bl	800c6ec <__swhatbuf_r>
 800c75c:	9900      	ldr	r1, [sp, #0]
 800c75e:	4605      	mov	r5, r0
 800c760:	4630      	mov	r0, r6
 800c762:	f7ff f957 	bl	800ba14 <_malloc_r>
 800c766:	b948      	cbnz	r0, 800c77c <__smakebuf_r+0x44>
 800c768:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c76c:	059a      	lsls	r2, r3, #22
 800c76e:	d4ef      	bmi.n	800c750 <__smakebuf_r+0x18>
 800c770:	f023 0303 	bic.w	r3, r3, #3
 800c774:	f043 0302 	orr.w	r3, r3, #2
 800c778:	81a3      	strh	r3, [r4, #12]
 800c77a:	e7e3      	b.n	800c744 <__smakebuf_r+0xc>
 800c77c:	4b0d      	ldr	r3, [pc, #52]	; (800c7b4 <__smakebuf_r+0x7c>)
 800c77e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c780:	89a3      	ldrh	r3, [r4, #12]
 800c782:	6020      	str	r0, [r4, #0]
 800c784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c788:	81a3      	strh	r3, [r4, #12]
 800c78a:	9b00      	ldr	r3, [sp, #0]
 800c78c:	6163      	str	r3, [r4, #20]
 800c78e:	9b01      	ldr	r3, [sp, #4]
 800c790:	6120      	str	r0, [r4, #16]
 800c792:	b15b      	cbz	r3, 800c7ac <__smakebuf_r+0x74>
 800c794:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c798:	4630      	mov	r0, r6
 800c79a:	f000 f8d1 	bl	800c940 <_isatty_r>
 800c79e:	b128      	cbz	r0, 800c7ac <__smakebuf_r+0x74>
 800c7a0:	89a3      	ldrh	r3, [r4, #12]
 800c7a2:	f023 0303 	bic.w	r3, r3, #3
 800c7a6:	f043 0301 	orr.w	r3, r3, #1
 800c7aa:	81a3      	strh	r3, [r4, #12]
 800c7ac:	89a0      	ldrh	r0, [r4, #12]
 800c7ae:	4305      	orrs	r5, r0
 800c7b0:	81a5      	strh	r5, [r4, #12]
 800c7b2:	e7cd      	b.n	800c750 <__smakebuf_r+0x18>
 800c7b4:	0800c545 	.word	0x0800c545

0800c7b8 <_malloc_usable_size_r>:
 800c7b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7bc:	1f18      	subs	r0, r3, #4
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	bfbc      	itt	lt
 800c7c2:	580b      	ldrlt	r3, [r1, r0]
 800c7c4:	18c0      	addlt	r0, r0, r3
 800c7c6:	4770      	bx	lr

0800c7c8 <_raise_r>:
 800c7c8:	291f      	cmp	r1, #31
 800c7ca:	b538      	push	{r3, r4, r5, lr}
 800c7cc:	4604      	mov	r4, r0
 800c7ce:	460d      	mov	r5, r1
 800c7d0:	d904      	bls.n	800c7dc <_raise_r+0x14>
 800c7d2:	2316      	movs	r3, #22
 800c7d4:	6003      	str	r3, [r0, #0]
 800c7d6:	f04f 30ff 	mov.w	r0, #4294967295
 800c7da:	bd38      	pop	{r3, r4, r5, pc}
 800c7dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c7de:	b112      	cbz	r2, 800c7e6 <_raise_r+0x1e>
 800c7e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c7e4:	b94b      	cbnz	r3, 800c7fa <_raise_r+0x32>
 800c7e6:	4620      	mov	r0, r4
 800c7e8:	f000 f830 	bl	800c84c <_getpid_r>
 800c7ec:	462a      	mov	r2, r5
 800c7ee:	4601      	mov	r1, r0
 800c7f0:	4620      	mov	r0, r4
 800c7f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7f6:	f000 b817 	b.w	800c828 <_kill_r>
 800c7fa:	2b01      	cmp	r3, #1
 800c7fc:	d00a      	beq.n	800c814 <_raise_r+0x4c>
 800c7fe:	1c59      	adds	r1, r3, #1
 800c800:	d103      	bne.n	800c80a <_raise_r+0x42>
 800c802:	2316      	movs	r3, #22
 800c804:	6003      	str	r3, [r0, #0]
 800c806:	2001      	movs	r0, #1
 800c808:	e7e7      	b.n	800c7da <_raise_r+0x12>
 800c80a:	2400      	movs	r4, #0
 800c80c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c810:	4628      	mov	r0, r5
 800c812:	4798      	blx	r3
 800c814:	2000      	movs	r0, #0
 800c816:	e7e0      	b.n	800c7da <_raise_r+0x12>

0800c818 <raise>:
 800c818:	4b02      	ldr	r3, [pc, #8]	; (800c824 <raise+0xc>)
 800c81a:	4601      	mov	r1, r0
 800c81c:	6818      	ldr	r0, [r3, #0]
 800c81e:	f7ff bfd3 	b.w	800c7c8 <_raise_r>
 800c822:	bf00      	nop
 800c824:	20000018 	.word	0x20000018

0800c828 <_kill_r>:
 800c828:	b538      	push	{r3, r4, r5, lr}
 800c82a:	4d07      	ldr	r5, [pc, #28]	; (800c848 <_kill_r+0x20>)
 800c82c:	2300      	movs	r3, #0
 800c82e:	4604      	mov	r4, r0
 800c830:	4608      	mov	r0, r1
 800c832:	4611      	mov	r1, r2
 800c834:	602b      	str	r3, [r5, #0]
 800c836:	f7f6 faa3 	bl	8002d80 <_kill>
 800c83a:	1c43      	adds	r3, r0, #1
 800c83c:	d102      	bne.n	800c844 <_kill_r+0x1c>
 800c83e:	682b      	ldr	r3, [r5, #0]
 800c840:	b103      	cbz	r3, 800c844 <_kill_r+0x1c>
 800c842:	6023      	str	r3, [r4, #0]
 800c844:	bd38      	pop	{r3, r4, r5, pc}
 800c846:	bf00      	nop
 800c848:	20000448 	.word	0x20000448

0800c84c <_getpid_r>:
 800c84c:	f7f6 ba90 	b.w	8002d70 <_getpid>

0800c850 <__sread>:
 800c850:	b510      	push	{r4, lr}
 800c852:	460c      	mov	r4, r1
 800c854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c858:	f000 f894 	bl	800c984 <_read_r>
 800c85c:	2800      	cmp	r0, #0
 800c85e:	bfab      	itete	ge
 800c860:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c862:	89a3      	ldrhlt	r3, [r4, #12]
 800c864:	181b      	addge	r3, r3, r0
 800c866:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c86a:	bfac      	ite	ge
 800c86c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c86e:	81a3      	strhlt	r3, [r4, #12]
 800c870:	bd10      	pop	{r4, pc}

0800c872 <__swrite>:
 800c872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c876:	461f      	mov	r7, r3
 800c878:	898b      	ldrh	r3, [r1, #12]
 800c87a:	05db      	lsls	r3, r3, #23
 800c87c:	4605      	mov	r5, r0
 800c87e:	460c      	mov	r4, r1
 800c880:	4616      	mov	r6, r2
 800c882:	d505      	bpl.n	800c890 <__swrite+0x1e>
 800c884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c888:	2302      	movs	r3, #2
 800c88a:	2200      	movs	r2, #0
 800c88c:	f000 f868 	bl	800c960 <_lseek_r>
 800c890:	89a3      	ldrh	r3, [r4, #12]
 800c892:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c896:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c89a:	81a3      	strh	r3, [r4, #12]
 800c89c:	4632      	mov	r2, r6
 800c89e:	463b      	mov	r3, r7
 800c8a0:	4628      	mov	r0, r5
 800c8a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8a6:	f000 b817 	b.w	800c8d8 <_write_r>

0800c8aa <__sseek>:
 800c8aa:	b510      	push	{r4, lr}
 800c8ac:	460c      	mov	r4, r1
 800c8ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8b2:	f000 f855 	bl	800c960 <_lseek_r>
 800c8b6:	1c43      	adds	r3, r0, #1
 800c8b8:	89a3      	ldrh	r3, [r4, #12]
 800c8ba:	bf15      	itete	ne
 800c8bc:	6560      	strne	r0, [r4, #84]	; 0x54
 800c8be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c8c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c8c6:	81a3      	strheq	r3, [r4, #12]
 800c8c8:	bf18      	it	ne
 800c8ca:	81a3      	strhne	r3, [r4, #12]
 800c8cc:	bd10      	pop	{r4, pc}

0800c8ce <__sclose>:
 800c8ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8d2:	f000 b813 	b.w	800c8fc <_close_r>
	...

0800c8d8 <_write_r>:
 800c8d8:	b538      	push	{r3, r4, r5, lr}
 800c8da:	4d07      	ldr	r5, [pc, #28]	; (800c8f8 <_write_r+0x20>)
 800c8dc:	4604      	mov	r4, r0
 800c8de:	4608      	mov	r0, r1
 800c8e0:	4611      	mov	r1, r2
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	602a      	str	r2, [r5, #0]
 800c8e6:	461a      	mov	r2, r3
 800c8e8:	f7f6 fa81 	bl	8002dee <_write>
 800c8ec:	1c43      	adds	r3, r0, #1
 800c8ee:	d102      	bne.n	800c8f6 <_write_r+0x1e>
 800c8f0:	682b      	ldr	r3, [r5, #0]
 800c8f2:	b103      	cbz	r3, 800c8f6 <_write_r+0x1e>
 800c8f4:	6023      	str	r3, [r4, #0]
 800c8f6:	bd38      	pop	{r3, r4, r5, pc}
 800c8f8:	20000448 	.word	0x20000448

0800c8fc <_close_r>:
 800c8fc:	b538      	push	{r3, r4, r5, lr}
 800c8fe:	4d06      	ldr	r5, [pc, #24]	; (800c918 <_close_r+0x1c>)
 800c900:	2300      	movs	r3, #0
 800c902:	4604      	mov	r4, r0
 800c904:	4608      	mov	r0, r1
 800c906:	602b      	str	r3, [r5, #0]
 800c908:	f7f6 fa8d 	bl	8002e26 <_close>
 800c90c:	1c43      	adds	r3, r0, #1
 800c90e:	d102      	bne.n	800c916 <_close_r+0x1a>
 800c910:	682b      	ldr	r3, [r5, #0]
 800c912:	b103      	cbz	r3, 800c916 <_close_r+0x1a>
 800c914:	6023      	str	r3, [r4, #0]
 800c916:	bd38      	pop	{r3, r4, r5, pc}
 800c918:	20000448 	.word	0x20000448

0800c91c <_fstat_r>:
 800c91c:	b538      	push	{r3, r4, r5, lr}
 800c91e:	4d07      	ldr	r5, [pc, #28]	; (800c93c <_fstat_r+0x20>)
 800c920:	2300      	movs	r3, #0
 800c922:	4604      	mov	r4, r0
 800c924:	4608      	mov	r0, r1
 800c926:	4611      	mov	r1, r2
 800c928:	602b      	str	r3, [r5, #0]
 800c92a:	f7f6 fa88 	bl	8002e3e <_fstat>
 800c92e:	1c43      	adds	r3, r0, #1
 800c930:	d102      	bne.n	800c938 <_fstat_r+0x1c>
 800c932:	682b      	ldr	r3, [r5, #0]
 800c934:	b103      	cbz	r3, 800c938 <_fstat_r+0x1c>
 800c936:	6023      	str	r3, [r4, #0]
 800c938:	bd38      	pop	{r3, r4, r5, pc}
 800c93a:	bf00      	nop
 800c93c:	20000448 	.word	0x20000448

0800c940 <_isatty_r>:
 800c940:	b538      	push	{r3, r4, r5, lr}
 800c942:	4d06      	ldr	r5, [pc, #24]	; (800c95c <_isatty_r+0x1c>)
 800c944:	2300      	movs	r3, #0
 800c946:	4604      	mov	r4, r0
 800c948:	4608      	mov	r0, r1
 800c94a:	602b      	str	r3, [r5, #0]
 800c94c:	f7f6 fa87 	bl	8002e5e <_isatty>
 800c950:	1c43      	adds	r3, r0, #1
 800c952:	d102      	bne.n	800c95a <_isatty_r+0x1a>
 800c954:	682b      	ldr	r3, [r5, #0]
 800c956:	b103      	cbz	r3, 800c95a <_isatty_r+0x1a>
 800c958:	6023      	str	r3, [r4, #0]
 800c95a:	bd38      	pop	{r3, r4, r5, pc}
 800c95c:	20000448 	.word	0x20000448

0800c960 <_lseek_r>:
 800c960:	b538      	push	{r3, r4, r5, lr}
 800c962:	4d07      	ldr	r5, [pc, #28]	; (800c980 <_lseek_r+0x20>)
 800c964:	4604      	mov	r4, r0
 800c966:	4608      	mov	r0, r1
 800c968:	4611      	mov	r1, r2
 800c96a:	2200      	movs	r2, #0
 800c96c:	602a      	str	r2, [r5, #0]
 800c96e:	461a      	mov	r2, r3
 800c970:	f7f6 fa80 	bl	8002e74 <_lseek>
 800c974:	1c43      	adds	r3, r0, #1
 800c976:	d102      	bne.n	800c97e <_lseek_r+0x1e>
 800c978:	682b      	ldr	r3, [r5, #0]
 800c97a:	b103      	cbz	r3, 800c97e <_lseek_r+0x1e>
 800c97c:	6023      	str	r3, [r4, #0]
 800c97e:	bd38      	pop	{r3, r4, r5, pc}
 800c980:	20000448 	.word	0x20000448

0800c984 <_read_r>:
 800c984:	b538      	push	{r3, r4, r5, lr}
 800c986:	4d07      	ldr	r5, [pc, #28]	; (800c9a4 <_read_r+0x20>)
 800c988:	4604      	mov	r4, r0
 800c98a:	4608      	mov	r0, r1
 800c98c:	4611      	mov	r1, r2
 800c98e:	2200      	movs	r2, #0
 800c990:	602a      	str	r2, [r5, #0]
 800c992:	461a      	mov	r2, r3
 800c994:	f7f6 fa0e 	bl	8002db4 <_read>
 800c998:	1c43      	adds	r3, r0, #1
 800c99a:	d102      	bne.n	800c9a2 <_read_r+0x1e>
 800c99c:	682b      	ldr	r3, [r5, #0]
 800c99e:	b103      	cbz	r3, 800c9a2 <_read_r+0x1e>
 800c9a0:	6023      	str	r3, [r4, #0]
 800c9a2:	bd38      	pop	{r3, r4, r5, pc}
 800c9a4:	20000448 	.word	0x20000448

0800c9a8 <log>:
 800c9a8:	b538      	push	{r3, r4, r5, lr}
 800c9aa:	ed2d 8b02 	vpush	{d8}
 800c9ae:	ec55 4b10 	vmov	r4, r5, d0
 800c9b2:	f000 f839 	bl	800ca28 <__ieee754_log>
 800c9b6:	4622      	mov	r2, r4
 800c9b8:	462b      	mov	r3, r5
 800c9ba:	4620      	mov	r0, r4
 800c9bc:	4629      	mov	r1, r5
 800c9be:	eeb0 8a40 	vmov.f32	s16, s0
 800c9c2:	eef0 8a60 	vmov.f32	s17, s1
 800c9c6:	f7f4 f8b1 	bl	8000b2c <__aeabi_dcmpun>
 800c9ca:	b998      	cbnz	r0, 800c9f4 <log+0x4c>
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	4620      	mov	r0, r4
 800c9d2:	4629      	mov	r1, r5
 800c9d4:	f7f4 f8a0 	bl	8000b18 <__aeabi_dcmpgt>
 800c9d8:	b960      	cbnz	r0, 800c9f4 <log+0x4c>
 800c9da:	2200      	movs	r2, #0
 800c9dc:	2300      	movs	r3, #0
 800c9de:	4620      	mov	r0, r4
 800c9e0:	4629      	mov	r1, r5
 800c9e2:	f7f4 f871 	bl	8000ac8 <__aeabi_dcmpeq>
 800c9e6:	b160      	cbz	r0, 800ca02 <log+0x5a>
 800c9e8:	f7fb fb3a 	bl	8008060 <__errno>
 800c9ec:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800ca18 <log+0x70>
 800c9f0:	2322      	movs	r3, #34	; 0x22
 800c9f2:	6003      	str	r3, [r0, #0]
 800c9f4:	eeb0 0a48 	vmov.f32	s0, s16
 800c9f8:	eef0 0a68 	vmov.f32	s1, s17
 800c9fc:	ecbd 8b02 	vpop	{d8}
 800ca00:	bd38      	pop	{r3, r4, r5, pc}
 800ca02:	f7fb fb2d 	bl	8008060 <__errno>
 800ca06:	ecbd 8b02 	vpop	{d8}
 800ca0a:	2321      	movs	r3, #33	; 0x21
 800ca0c:	6003      	str	r3, [r0, #0]
 800ca0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca12:	4803      	ldr	r0, [pc, #12]	; (800ca20 <log+0x78>)
 800ca14:	f7ff b9d0 	b.w	800bdb8 <nan>
 800ca18:	00000000 	.word	0x00000000
 800ca1c:	fff00000 	.word	0xfff00000
 800ca20:	0800d238 	.word	0x0800d238
 800ca24:	00000000 	.word	0x00000000

0800ca28 <__ieee754_log>:
 800ca28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca2c:	ec51 0b10 	vmov	r0, r1, d0
 800ca30:	ed2d 8b04 	vpush	{d8-d9}
 800ca34:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800ca38:	b083      	sub	sp, #12
 800ca3a:	460d      	mov	r5, r1
 800ca3c:	da29      	bge.n	800ca92 <__ieee754_log+0x6a>
 800ca3e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ca42:	4303      	orrs	r3, r0
 800ca44:	ee10 2a10 	vmov	r2, s0
 800ca48:	d10c      	bne.n	800ca64 <__ieee754_log+0x3c>
 800ca4a:	49cf      	ldr	r1, [pc, #828]	; (800cd88 <__ieee754_log+0x360>)
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	2300      	movs	r3, #0
 800ca50:	2000      	movs	r0, #0
 800ca52:	f7f3 fefb 	bl	800084c <__aeabi_ddiv>
 800ca56:	ec41 0b10 	vmov	d0, r0, r1
 800ca5a:	b003      	add	sp, #12
 800ca5c:	ecbd 8b04 	vpop	{d8-d9}
 800ca60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca64:	2900      	cmp	r1, #0
 800ca66:	da05      	bge.n	800ca74 <__ieee754_log+0x4c>
 800ca68:	460b      	mov	r3, r1
 800ca6a:	f7f3 fc0d 	bl	8000288 <__aeabi_dsub>
 800ca6e:	2200      	movs	r2, #0
 800ca70:	2300      	movs	r3, #0
 800ca72:	e7ee      	b.n	800ca52 <__ieee754_log+0x2a>
 800ca74:	4bc5      	ldr	r3, [pc, #788]	; (800cd8c <__ieee754_log+0x364>)
 800ca76:	2200      	movs	r2, #0
 800ca78:	f7f3 fdbe 	bl	80005f8 <__aeabi_dmul>
 800ca7c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800ca80:	460d      	mov	r5, r1
 800ca82:	4ac3      	ldr	r2, [pc, #780]	; (800cd90 <__ieee754_log+0x368>)
 800ca84:	4295      	cmp	r5, r2
 800ca86:	dd06      	ble.n	800ca96 <__ieee754_log+0x6e>
 800ca88:	4602      	mov	r2, r0
 800ca8a:	460b      	mov	r3, r1
 800ca8c:	f7f3 fbfe 	bl	800028c <__adddf3>
 800ca90:	e7e1      	b.n	800ca56 <__ieee754_log+0x2e>
 800ca92:	2300      	movs	r3, #0
 800ca94:	e7f5      	b.n	800ca82 <__ieee754_log+0x5a>
 800ca96:	152c      	asrs	r4, r5, #20
 800ca98:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ca9c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800caa0:	441c      	add	r4, r3
 800caa2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800caa6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800caaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800caae:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800cab2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800cab6:	ea42 0105 	orr.w	r1, r2, r5
 800caba:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800cabe:	2200      	movs	r2, #0
 800cac0:	4bb4      	ldr	r3, [pc, #720]	; (800cd94 <__ieee754_log+0x36c>)
 800cac2:	f7f3 fbe1 	bl	8000288 <__aeabi_dsub>
 800cac6:	1cab      	adds	r3, r5, #2
 800cac8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cacc:	2b02      	cmp	r3, #2
 800cace:	4682      	mov	sl, r0
 800cad0:	468b      	mov	fp, r1
 800cad2:	f04f 0200 	mov.w	r2, #0
 800cad6:	dc53      	bgt.n	800cb80 <__ieee754_log+0x158>
 800cad8:	2300      	movs	r3, #0
 800cada:	f7f3 fff5 	bl	8000ac8 <__aeabi_dcmpeq>
 800cade:	b1d0      	cbz	r0, 800cb16 <__ieee754_log+0xee>
 800cae0:	2c00      	cmp	r4, #0
 800cae2:	f000 8122 	beq.w	800cd2a <__ieee754_log+0x302>
 800cae6:	4620      	mov	r0, r4
 800cae8:	f7f3 fd1c 	bl	8000524 <__aeabi_i2d>
 800caec:	a390      	add	r3, pc, #576	; (adr r3, 800cd30 <__ieee754_log+0x308>)
 800caee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf2:	4606      	mov	r6, r0
 800caf4:	460f      	mov	r7, r1
 800caf6:	f7f3 fd7f 	bl	80005f8 <__aeabi_dmul>
 800cafa:	a38f      	add	r3, pc, #572	; (adr r3, 800cd38 <__ieee754_log+0x310>)
 800cafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb00:	4604      	mov	r4, r0
 800cb02:	460d      	mov	r5, r1
 800cb04:	4630      	mov	r0, r6
 800cb06:	4639      	mov	r1, r7
 800cb08:	f7f3 fd76 	bl	80005f8 <__aeabi_dmul>
 800cb0c:	4602      	mov	r2, r0
 800cb0e:	460b      	mov	r3, r1
 800cb10:	4620      	mov	r0, r4
 800cb12:	4629      	mov	r1, r5
 800cb14:	e7ba      	b.n	800ca8c <__ieee754_log+0x64>
 800cb16:	a38a      	add	r3, pc, #552	; (adr r3, 800cd40 <__ieee754_log+0x318>)
 800cb18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb1c:	4650      	mov	r0, sl
 800cb1e:	4659      	mov	r1, fp
 800cb20:	f7f3 fd6a 	bl	80005f8 <__aeabi_dmul>
 800cb24:	4602      	mov	r2, r0
 800cb26:	460b      	mov	r3, r1
 800cb28:	2000      	movs	r0, #0
 800cb2a:	499b      	ldr	r1, [pc, #620]	; (800cd98 <__ieee754_log+0x370>)
 800cb2c:	f7f3 fbac 	bl	8000288 <__aeabi_dsub>
 800cb30:	4652      	mov	r2, sl
 800cb32:	4606      	mov	r6, r0
 800cb34:	460f      	mov	r7, r1
 800cb36:	465b      	mov	r3, fp
 800cb38:	4650      	mov	r0, sl
 800cb3a:	4659      	mov	r1, fp
 800cb3c:	f7f3 fd5c 	bl	80005f8 <__aeabi_dmul>
 800cb40:	4602      	mov	r2, r0
 800cb42:	460b      	mov	r3, r1
 800cb44:	4630      	mov	r0, r6
 800cb46:	4639      	mov	r1, r7
 800cb48:	f7f3 fd56 	bl	80005f8 <__aeabi_dmul>
 800cb4c:	4606      	mov	r6, r0
 800cb4e:	460f      	mov	r7, r1
 800cb50:	b914      	cbnz	r4, 800cb58 <__ieee754_log+0x130>
 800cb52:	4632      	mov	r2, r6
 800cb54:	463b      	mov	r3, r7
 800cb56:	e0a2      	b.n	800cc9e <__ieee754_log+0x276>
 800cb58:	4620      	mov	r0, r4
 800cb5a:	f7f3 fce3 	bl	8000524 <__aeabi_i2d>
 800cb5e:	a374      	add	r3, pc, #464	; (adr r3, 800cd30 <__ieee754_log+0x308>)
 800cb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb64:	4680      	mov	r8, r0
 800cb66:	4689      	mov	r9, r1
 800cb68:	f7f3 fd46 	bl	80005f8 <__aeabi_dmul>
 800cb6c:	a372      	add	r3, pc, #456	; (adr r3, 800cd38 <__ieee754_log+0x310>)
 800cb6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb72:	4604      	mov	r4, r0
 800cb74:	460d      	mov	r5, r1
 800cb76:	4640      	mov	r0, r8
 800cb78:	4649      	mov	r1, r9
 800cb7a:	f7f3 fd3d 	bl	80005f8 <__aeabi_dmul>
 800cb7e:	e0a7      	b.n	800ccd0 <__ieee754_log+0x2a8>
 800cb80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cb84:	f7f3 fb82 	bl	800028c <__adddf3>
 800cb88:	4602      	mov	r2, r0
 800cb8a:	460b      	mov	r3, r1
 800cb8c:	4650      	mov	r0, sl
 800cb8e:	4659      	mov	r1, fp
 800cb90:	f7f3 fe5c 	bl	800084c <__aeabi_ddiv>
 800cb94:	ec41 0b18 	vmov	d8, r0, r1
 800cb98:	4620      	mov	r0, r4
 800cb9a:	f7f3 fcc3 	bl	8000524 <__aeabi_i2d>
 800cb9e:	ec53 2b18 	vmov	r2, r3, d8
 800cba2:	ec41 0b19 	vmov	d9, r0, r1
 800cba6:	ec51 0b18 	vmov	r0, r1, d8
 800cbaa:	f7f3 fd25 	bl	80005f8 <__aeabi_dmul>
 800cbae:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800cbb2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800cbb6:	9301      	str	r3, [sp, #4]
 800cbb8:	4602      	mov	r2, r0
 800cbba:	460b      	mov	r3, r1
 800cbbc:	4680      	mov	r8, r0
 800cbbe:	4689      	mov	r9, r1
 800cbc0:	f7f3 fd1a 	bl	80005f8 <__aeabi_dmul>
 800cbc4:	a360      	add	r3, pc, #384	; (adr r3, 800cd48 <__ieee754_log+0x320>)
 800cbc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbca:	4606      	mov	r6, r0
 800cbcc:	460f      	mov	r7, r1
 800cbce:	f7f3 fd13 	bl	80005f8 <__aeabi_dmul>
 800cbd2:	a35f      	add	r3, pc, #380	; (adr r3, 800cd50 <__ieee754_log+0x328>)
 800cbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd8:	f7f3 fb58 	bl	800028c <__adddf3>
 800cbdc:	4632      	mov	r2, r6
 800cbde:	463b      	mov	r3, r7
 800cbe0:	f7f3 fd0a 	bl	80005f8 <__aeabi_dmul>
 800cbe4:	a35c      	add	r3, pc, #368	; (adr r3, 800cd58 <__ieee754_log+0x330>)
 800cbe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbea:	f7f3 fb4f 	bl	800028c <__adddf3>
 800cbee:	4632      	mov	r2, r6
 800cbf0:	463b      	mov	r3, r7
 800cbf2:	f7f3 fd01 	bl	80005f8 <__aeabi_dmul>
 800cbf6:	a35a      	add	r3, pc, #360	; (adr r3, 800cd60 <__ieee754_log+0x338>)
 800cbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbfc:	f7f3 fb46 	bl	800028c <__adddf3>
 800cc00:	4642      	mov	r2, r8
 800cc02:	464b      	mov	r3, r9
 800cc04:	f7f3 fcf8 	bl	80005f8 <__aeabi_dmul>
 800cc08:	a357      	add	r3, pc, #348	; (adr r3, 800cd68 <__ieee754_log+0x340>)
 800cc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc0e:	4680      	mov	r8, r0
 800cc10:	4689      	mov	r9, r1
 800cc12:	4630      	mov	r0, r6
 800cc14:	4639      	mov	r1, r7
 800cc16:	f7f3 fcef 	bl	80005f8 <__aeabi_dmul>
 800cc1a:	a355      	add	r3, pc, #340	; (adr r3, 800cd70 <__ieee754_log+0x348>)
 800cc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc20:	f7f3 fb34 	bl	800028c <__adddf3>
 800cc24:	4632      	mov	r2, r6
 800cc26:	463b      	mov	r3, r7
 800cc28:	f7f3 fce6 	bl	80005f8 <__aeabi_dmul>
 800cc2c:	a352      	add	r3, pc, #328	; (adr r3, 800cd78 <__ieee754_log+0x350>)
 800cc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc32:	f7f3 fb2b 	bl	800028c <__adddf3>
 800cc36:	4632      	mov	r2, r6
 800cc38:	463b      	mov	r3, r7
 800cc3a:	f7f3 fcdd 	bl	80005f8 <__aeabi_dmul>
 800cc3e:	460b      	mov	r3, r1
 800cc40:	4602      	mov	r2, r0
 800cc42:	4649      	mov	r1, r9
 800cc44:	4640      	mov	r0, r8
 800cc46:	f7f3 fb21 	bl	800028c <__adddf3>
 800cc4a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800cc4e:	9b01      	ldr	r3, [sp, #4]
 800cc50:	3551      	adds	r5, #81	; 0x51
 800cc52:	431d      	orrs	r5, r3
 800cc54:	2d00      	cmp	r5, #0
 800cc56:	4680      	mov	r8, r0
 800cc58:	4689      	mov	r9, r1
 800cc5a:	dd48      	ble.n	800ccee <__ieee754_log+0x2c6>
 800cc5c:	4b4e      	ldr	r3, [pc, #312]	; (800cd98 <__ieee754_log+0x370>)
 800cc5e:	2200      	movs	r2, #0
 800cc60:	4650      	mov	r0, sl
 800cc62:	4659      	mov	r1, fp
 800cc64:	f7f3 fcc8 	bl	80005f8 <__aeabi_dmul>
 800cc68:	4652      	mov	r2, sl
 800cc6a:	465b      	mov	r3, fp
 800cc6c:	f7f3 fcc4 	bl	80005f8 <__aeabi_dmul>
 800cc70:	4602      	mov	r2, r0
 800cc72:	460b      	mov	r3, r1
 800cc74:	4606      	mov	r6, r0
 800cc76:	460f      	mov	r7, r1
 800cc78:	4640      	mov	r0, r8
 800cc7a:	4649      	mov	r1, r9
 800cc7c:	f7f3 fb06 	bl	800028c <__adddf3>
 800cc80:	ec53 2b18 	vmov	r2, r3, d8
 800cc84:	f7f3 fcb8 	bl	80005f8 <__aeabi_dmul>
 800cc88:	4680      	mov	r8, r0
 800cc8a:	4689      	mov	r9, r1
 800cc8c:	b964      	cbnz	r4, 800cca8 <__ieee754_log+0x280>
 800cc8e:	4602      	mov	r2, r0
 800cc90:	460b      	mov	r3, r1
 800cc92:	4630      	mov	r0, r6
 800cc94:	4639      	mov	r1, r7
 800cc96:	f7f3 faf7 	bl	8000288 <__aeabi_dsub>
 800cc9a:	4602      	mov	r2, r0
 800cc9c:	460b      	mov	r3, r1
 800cc9e:	4650      	mov	r0, sl
 800cca0:	4659      	mov	r1, fp
 800cca2:	f7f3 faf1 	bl	8000288 <__aeabi_dsub>
 800cca6:	e6d6      	b.n	800ca56 <__ieee754_log+0x2e>
 800cca8:	a321      	add	r3, pc, #132	; (adr r3, 800cd30 <__ieee754_log+0x308>)
 800ccaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccae:	ec51 0b19 	vmov	r0, r1, d9
 800ccb2:	f7f3 fca1 	bl	80005f8 <__aeabi_dmul>
 800ccb6:	a320      	add	r3, pc, #128	; (adr r3, 800cd38 <__ieee754_log+0x310>)
 800ccb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccbc:	4604      	mov	r4, r0
 800ccbe:	460d      	mov	r5, r1
 800ccc0:	ec51 0b19 	vmov	r0, r1, d9
 800ccc4:	f7f3 fc98 	bl	80005f8 <__aeabi_dmul>
 800ccc8:	4642      	mov	r2, r8
 800ccca:	464b      	mov	r3, r9
 800cccc:	f7f3 fade 	bl	800028c <__adddf3>
 800ccd0:	4602      	mov	r2, r0
 800ccd2:	460b      	mov	r3, r1
 800ccd4:	4630      	mov	r0, r6
 800ccd6:	4639      	mov	r1, r7
 800ccd8:	f7f3 fad6 	bl	8000288 <__aeabi_dsub>
 800ccdc:	4652      	mov	r2, sl
 800ccde:	465b      	mov	r3, fp
 800cce0:	f7f3 fad2 	bl	8000288 <__aeabi_dsub>
 800cce4:	4602      	mov	r2, r0
 800cce6:	460b      	mov	r3, r1
 800cce8:	4620      	mov	r0, r4
 800ccea:	4629      	mov	r1, r5
 800ccec:	e7d9      	b.n	800cca2 <__ieee754_log+0x27a>
 800ccee:	4602      	mov	r2, r0
 800ccf0:	460b      	mov	r3, r1
 800ccf2:	4650      	mov	r0, sl
 800ccf4:	4659      	mov	r1, fp
 800ccf6:	f7f3 fac7 	bl	8000288 <__aeabi_dsub>
 800ccfa:	ec53 2b18 	vmov	r2, r3, d8
 800ccfe:	f7f3 fc7b 	bl	80005f8 <__aeabi_dmul>
 800cd02:	4606      	mov	r6, r0
 800cd04:	460f      	mov	r7, r1
 800cd06:	2c00      	cmp	r4, #0
 800cd08:	f43f af23 	beq.w	800cb52 <__ieee754_log+0x12a>
 800cd0c:	a308      	add	r3, pc, #32	; (adr r3, 800cd30 <__ieee754_log+0x308>)
 800cd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd12:	ec51 0b19 	vmov	r0, r1, d9
 800cd16:	f7f3 fc6f 	bl	80005f8 <__aeabi_dmul>
 800cd1a:	a307      	add	r3, pc, #28	; (adr r3, 800cd38 <__ieee754_log+0x310>)
 800cd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd20:	4604      	mov	r4, r0
 800cd22:	460d      	mov	r5, r1
 800cd24:	ec51 0b19 	vmov	r0, r1, d9
 800cd28:	e727      	b.n	800cb7a <__ieee754_log+0x152>
 800cd2a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800cd80 <__ieee754_log+0x358>
 800cd2e:	e694      	b.n	800ca5a <__ieee754_log+0x32>
 800cd30:	fee00000 	.word	0xfee00000
 800cd34:	3fe62e42 	.word	0x3fe62e42
 800cd38:	35793c76 	.word	0x35793c76
 800cd3c:	3dea39ef 	.word	0x3dea39ef
 800cd40:	55555555 	.word	0x55555555
 800cd44:	3fd55555 	.word	0x3fd55555
 800cd48:	df3e5244 	.word	0xdf3e5244
 800cd4c:	3fc2f112 	.word	0x3fc2f112
 800cd50:	96cb03de 	.word	0x96cb03de
 800cd54:	3fc74664 	.word	0x3fc74664
 800cd58:	94229359 	.word	0x94229359
 800cd5c:	3fd24924 	.word	0x3fd24924
 800cd60:	55555593 	.word	0x55555593
 800cd64:	3fe55555 	.word	0x3fe55555
 800cd68:	d078c69f 	.word	0xd078c69f
 800cd6c:	3fc39a09 	.word	0x3fc39a09
 800cd70:	1d8e78af 	.word	0x1d8e78af
 800cd74:	3fcc71c5 	.word	0x3fcc71c5
 800cd78:	9997fa04 	.word	0x9997fa04
 800cd7c:	3fd99999 	.word	0x3fd99999
	...
 800cd88:	c3500000 	.word	0xc3500000
 800cd8c:	43500000 	.word	0x43500000
 800cd90:	7fefffff 	.word	0x7fefffff
 800cd94:	3ff00000 	.word	0x3ff00000
 800cd98:	3fe00000 	.word	0x3fe00000

0800cd9c <_init>:
 800cd9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd9e:	bf00      	nop
 800cda0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cda2:	bc08      	pop	{r3}
 800cda4:	469e      	mov	lr, r3
 800cda6:	4770      	bx	lr

0800cda8 <_fini>:
 800cda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdaa:	bf00      	nop
 800cdac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdae:	bc08      	pop	{r3}
 800cdb0:	469e      	mov	lr, r3
 800cdb2:	4770      	bx	lr
